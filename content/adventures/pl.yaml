adventures:
    story:
        name: Historyjka
        default_save_name: Historyjka
        description: Stwórz krótką historyjkę
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć opowieść z różnymi postaciami które stworzysz samodzielnie.

                    W pierwszej linii użyj polecenia `{ask}` i zapytaj kto będzie głównym bohaterem twojej opowieści.

                    Kolejne linie zacznij od polecenia `{print}` jeżeli chcesz wyświetlić tekst.
                    Użyj polecenia `{echo}` jeżeli chcesz aby imię twojego bohatera znalazło się na końcu wypowiedzi.
                example_code: |
                    ```
                    {ask} Głównym bohaterem historii jest
                    {print} Główny bohater idzie przez las
                    {echo} Jest troszkę przestraszony,
                    {print} Wszędzie słyszy jakieś dziwnie odgłosy
                    {print} Obawia się że to jest nawiedzony las
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną historię z co najmniej sześciu (6) linii kodu.
                    Twoja historia nie może być taka sama jak przykładowy kod.
                    Użyj co najmniej jednego polecenia `{ask}` i jednego `{echo}`.
                    Możesz zrobić to na dowolny temat.
                    Jeśli nie możesz wymyślić tematu, skorzystaj z jednej z naszych opcji: wyjście do kina, mecz sportowy lub dzień w zoo.
                start_code: '{print} Historyjka zaczyna się tutaj'
            2:
                story_text: |
                    Na poziomie 2 twoja opowieść może być znacznie zabawniejsza. Imię głównego bohatera może pojawić się w dowolnym miejscu w zdaniu.

                    Trzeba będzie napisać nieco więcej kodu. Musisz zapytać o imię głównego bohatera, zanim będziesz mógł wykorzystać je w zdaniu.

                    Potem będziesz mógł użyć imienia w dowolnym miejscu w zdaniu.
                example_code: |-
                    ```
                    imię {is} {ask} Jak nazywa się główny bohater?
                    {print} imię biega teraz po lesie
                    {print} imię trochę się boi
                    {print} Nagle imię usłyszał dziwny dźwięk...
                    {sleep}
                    {print} imię obawia się, że las może być nawiedzony
                    ```
                story_text_2: "### Ćwiczenie\nTeraz nadszedł czas, aby dodać zmienne do opowieści, którą stworzyłeś na poprzednim poziomie. \nPrzejdź do „Moje programy”, poszukaj przygody fabularnej poziomu 1 i skopiuj kod. Wklej kod na ekranie wprowadzania na tym poziomie. \n\nTen kod nie zadziała na\
                    \ tym poziomie, ponieważ nie używałeś jeszcze zmiennych. \nZmień polecenia `{ask}` i `{echo}` w swoim kodzie na poprawną formę, której nauczyłeś się na tym poziomie. \n\n**Dodatkowo** Dodaj polecenie uśpienia do swojego kodu, aby zbudować napięcie w swojej historii.\n"
                start_code: '{print} Twoja historyjka'
            3:
                story_text: |
                    Na poziomie 3. Twoja historyjka może być jeszcze zabawniejsza. Możesz wybrać losowo potwora, zwierzę oraz inne utrudnienia, tak jak w przykładzie:
                example_code: |
                    ```
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} Teraz słyszy odgłos zwierzęta {at} {random}
                    ```
                story_text_2: |
                    Komenda `{add}` może się przydać w historyjce.
                example_code_2: |
                    ```
                    {print} On słyszy odgłos
                    zwierzęta {is} 🐿, 🦔, 🦇, 🦉
                    zwierzę {is} {ask} Co to było?
                    {add} zwierzę {to_list} zwierzęta
                    {print} To był odgłos zwierzęta {at} {random}
                    ```
                story_text_3: |
                    To jest przykład polecenia `{remove}` w twojej opowieści.

                    ### Ćwiczenie
                    Skopiuj swoją opowieść z poprzednich poziomów na ten poziom.
                    Na tym poziomie nauczyłeś się 3 nowych komend `{at} {random}`, `{add} {to}` i `{remove} {from}`.
                    Dodaj nowe wiersze kodu do swojej historii, aby wszystkie nowe polecenia znalazły się w niej przynajmniej raz.
                example_code_3: |
                    ```
                    {print} Jego stał się zbyt ciężki.
                    {print} W środku była butelka wody, latarka i cegła.
                    plecak {is} woda, latarka, cegła
                    wyrzuc {is} {ask} Który przedmiot powinien wyrzucić?
                    {remove} wyrzuc {from} plecak
                    ```
                start_code: '{print} Twoja histora'
            4:
                story_text: |
                    Mogłeś zauważyć, że w poprzednich poziomach ciągle jest pewnie problem. Czy próbowałeś napisać zdanie które zawierało słowo “imię”? Na przykład: `{print}` moje imię to imię.
                    W tym poziomie możesz rozwiązać ten problem. Wystarczy, że użyjesz cudzysłowia dookoła tekstu, który chciałbyś wyświetlić.

                    ### Ćwiczenie
                    Skopiuj przykładowy kod i popraw go dodając cudzysłowy do linii.

                    ### Ćwiczenie 2
                    Wróć do poprzedniego poziomu i skopiuj kod z opowieści. Spraw by kod działał w tym poziomie dodając cudzysłowy w odpowiednie miejsca.
                    Zwróć uwagę, że zmienne w twojej opowieści powinny być poza cudzysłowami. Podobnie jak w drugiej linii kodu przykładowego. W tej linii nazwa zmiennej wstawiona poza cudzysłowami.
                example_code: |
                    ```
                    imię {is} {ask}_ Jakie jest twoje imię? _
                    {print}  _ Głównym bohaterem jest _ imię
                    {print} imię _ idzie na spacer do lasu _
                    {print} imię _ nieco się boi _
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Słyszy dźwięk _ zwierzęta {at} {random}
                    {print} name _ obawia się, że jest w nawiedzonym lesie _
                    ```
                start_code: '{print} ''Twoja opowieść będzie tutaj napisana!'''
            5:
                story_text: |
                    W tym poziomie możesz zaprogramować różne zakończenia, które sprawią, że Twoja opowieść będzie jeszcze ciekawsza.
                    W przykładowym kodzie możesz zobaczyć 2 różne zakończenia.

                    ### Ćwiczenie 1
                    Napisz nową, krótką opowieść składającą się z 6 linii kodu na wybrany przez Ciebie temat.
                    Brak Ci pomysłów? Wybierz jeden z tych: superbohater, nudny dzień w szkole, opuszczeni na bezludnej wyspie.

                    Teraz daj graczowi wybór pomiędzy dobrym i złym zakończeniem, tak jak w kodzie przykładowym.
                    Zaprogramuj oba zakończenia.

                    ### Ćwiczenie 2
                    Skopiuj swoją opowieść przygodową z poprzednich poziomów.
                    Znajdź sposób by dodać przynajmniej 2 polecenia `{if}` oraz `{else}` do Twojej historii.
                    Mogą to być dobre lub złe zakończenia lub wymyślić inny sposób na użycie tych poleceń.
                example_code: |
                    ```
                    imię {is} {ask} 'Kto idzie przez las?'
                    {print} imię ' idzie przez las'
                    {print} imię ' spotyka potwora'
                    zakończenie {is} {ask} 'Czy chciałbyś dobre czy złe zakończenie?'
                    {if} zakończenie {is} dobre {print} imię ' wyciąga miecz i potwór ucieka'
                    {else} {print} 'Potwór zjada ' imię
                    ```
                start_code: '{print} ''Tutaj jest początek Twojej opowieści!'''
            7:
                story_text: "W niektórych opowieściach, bohaterowie czasem powtarzają wybrany zwrot kilka razy. Przykładem tego jest bohater wołający o pomoc lub też śpiewający piosenkę.\nMożesz stworzyć takie powtórzenia w swojej opowieści przy użyciu polecenia `{repeat}`.\n\nDodaj powtórzenia do Twojej\
                    \ opowieści. Wróć do swoich zapisanych programów i wybierz Twój program z opowieścią z poziomu 6 i \nznajdź linię zawierającą polecenie `{print}` i powtórz ją!\n"
                example_code: |
                    ```
                    {print} 'Książę wciąż wołał o pomoc'
                    {repeat} 5 {times} {print} 'Pomocy!'
                    {print} 'Dlaczego nikt mi nie pomaga?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Pomocy!'''
            8:
                story_text: |
                    W tym poziomie masz możliwość napisania wielu linii kodu wewnątrz polecenia `{if}`. Dzięki temu możesz urozmaicić szczęśliwe i tragiczne zakończenia Twojej opowieści.

                    Przykładowy kod pokazuje dwa różne zakończenia; jedno, w którym bohaterowie skaczą w czasie przy użyciu maszyny czasu, a drugie, w którym tego nie robią.
                    Uzupełnij puste miejsca co najmniej jednym zdaniem na każde zakończenie.
                    **(Dodatkowo)** Utwórz dłuższą opowieść. Co się w niej dzieje? Możesz także dodać drugie polecenie `{ask}` z innymi opcjami.

                    Wróć do swoich zapisanych programów, wybierz program z opowieścią z poziomu 5. Napisz w nich dobre oraz złe zakończenia, każde z co najmniej trzema liniami kodu!
                example_code: |
                    ```
                    {print} 'O, nie! Tyranozaur Rex zbliża się!'
                    zakończenie = {ask} 'Czy chcesz zakończenie szczęśliwe czy smutne?'
                    {if} zakończenie {is} szczęśliwe
                        {print} 'W ostatnim momencie Richard wraca do maszyny czasu!'
                        {print} _
                    {else}
                        {print} 'O, nie! Richard jest zbyt wolny...'
                        {print} _
                    ```
                start_code: '# tutaj umieść swój kod'
            9:
                story_text: |
                    W tym poziomie możesz użyć poleceń `{if}` and `{repeat}` wewnątrz innych poleceń `{if}` oraz `{repeat}`.
                    Dzięki temu możesz jeszcze bardziej urozmaicić swoją opowieść.

                    ### Cwiczenie 1
                    Uzupełnij kod tak, aby polecenie `{if}` działało poprawnie.

                    ### Cwiczenie 2
                    Dodaj polecenie `{if}` oraz `{else}` do części opowiadania, gdzie Robin wraca do domu.

                    ### Cwiczenie 3
                    Wróć do swojej opowiadania z poziomu 8 i użyj co najmniej dwóch poleceń `{if}` wewnątrz innego polecenia `{if}`.
                example_code: |
                    ```
                    {print} 'Robin idzie wzdłuż ulicy'
                    lokalizacja = {ask} 'Czy Robin idzie do sklepu, czy wraca do domu?'
                    {if} lokalizacja {is} sklep
                        {print} 'Wchodzi do sklepu.'
                        {print} 'Robin widzi ciekawą książkę'
                        książka = {ask} 'Czy Robin kupuje książkę?'
                        {if} książka {is} tak
                        _ {print} 'Robin kupuje książkę i wraca do domu'
                        _ {else}
                        _ {print} 'Robin opuszcza sklep i wraca do domu'
                    {else}
                        {print} 'Robin wraca do domu'
                    ```
                start_code: '# tutaj umieść swój kod'
            10:
                story_text: |
                    W tym poziomie możesz użyć polecenia {for} w swojej opowieści. Dzięki tej komendzie możesz bardzo prosto zaprogramować część wierszyka "Sroczka kaszkę warzyła".

                    ### Ćwiczenie

                    Spójrz na <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> opowiadanie</a> jeśli go nie znasz i upewnij się, że jest wydrukowane tak jak w książce.
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n {print} 'What do you see?'\n```\n"
                start_code: '# tutaj umieść swój kod'
            12:
                story_text: |-
                    W tym poziomie cudzysłowy będą potrzebne, żeby przypisac wiele słów do jednej zmiennej.

                    ### Ćwiczenie

                    Weź opowieść z poprzedniego poziomu, dowolny poziom jest ok. Teraz upewnij się, że cudzysłowy są powstawiane w odpowiednich miejscach.
                example_code: |
                    ```
                    imię = 'Królowa Anglii'
                    {print} imię ' jadła kawałek ciasta, gdy nagle...'
                    ```
                start_code: '# tutaj umieść swój kod'
            13:
                story_text: |
                    Używając poleceń `{and}` oraz `{or}` możesz uczynić swoje opowieści bardziej wszechstronnymi. Możesz zadać dwa pytania i odpowiedzieć na kombinację odpowiedzi.

                    ### Ćwiczenie 1
                    Popatrz na przykładowy kod i dokończ go. Następnie dodaj co najmniej 2 polecenia `{if}` z poleceniami `{and}` lub `{or}`.

                    ### Ćwiczenie 2
                    Odnajdź opowieść z poprzedniego poziomu i dodaj jedno polecenie `{and}` lub `{or}`.
                example_code: "```\n{print} 'Nasz bohater idzie przez las'\n{print} 'Ścieżka rozdziela się'\nścieżka = {ask} 'Którą ścieżkę powinna wybrać?'\nbroń ={ask} 'Jaką broń wyciąga?'\n{if} ścieżka {is} 'lewo' {and} broń {is} 'miecz'\n\t_\n```\n"
                start_code: '# tutaj umieść swój kod'
            15:
                story_text: |
                    Przy użyciu pętli `{while}` możesz stworzyć jeszcze bardziej wciągające opowieści. Na przykład, możesz użyć `{while} gra {is} 'działa'` żeby kontynuować grę aż się zakończy.
                    Alternatywnie możesz napisać `{while} miecz {is} 'zagubiony'` żeby nie pozwolić graczowi kontynuować zanim znajdą miecz.
                example_code: "```\nklucze = 'zgubione'\n{print} 'Stoisz w ogrodzie i zgubiłeś swoje klucze.' \n{print} 'Gdzie chcesz ich poszukać?'\n{print} 'Możesz wybrać: drzewo, doniczka, kamień, skrzynka na listy'\n{while} klucze == 'zgubione'\n    miejsce = {ask} 'Gdzie chcesz popatrzeć?'\n    {if}\
                    \ miejsce == 'doniczka'\n        {print} 'Tutaj są!'\n        klucze = 'znalezione'\n    {else}\n        {print} 'Nie, nie ma ich w ' miejsce\n{print} 'Teraz możesz wejść do domu!'\n```\n"
                start_code: '# tutaj umieść swój kod'
            18:
                story_text: |
                    Napiszemy kolejną opowieść, ale teraz musimy użyć nawiasów z `{print}`.


                    ### Ćwiczenie 1
                    Stwórz opowieść składającą się z co najmniej 5 zdań. Nie musisz użyć 'imię' jeszcze.
                example_code: |
                    ```
                    {print}('Witamy w tej opowieści!')
                    ```
                story_text_2: |
                    ### Ćwiczenie 2
                    Przygotowaliśmy już dla ciebie polecenie `{input}`. Najpierw użyj zmiennej `imię` w twojej opowieści.
                    Następnie dodaj drugie polecenie `{ask}` i użyj również tej zmiennej.
                    Wskazówka: Pamiętaj o przecinkach w poleceniu `{print}` pomiędzy tekstem a zmiennymi!
                example_code_2: |
                    ```
                    imię = {input}("Jak się nazywasz?")
                    {print}('Witamy w tej opowieści!')
                    ```
                start_code: '# tutaj napisz swój kod'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Spróbuj zdobyć jak największą ilość punktów ale mniejszą lub równą 21
        levels:
            17:
                story_text: |
                    Blackjack to prosta gra karciana, w której musisz zdobyć jak najwięcej 21 punktów. Dostajesz dwie karty. Każda karta ma swoją wartość liczbową, a figury (walet, królowa i król) są warte 10 punktów.
                    As jest wart 1 lub 11 punktów (do wyboru). Rozdający, twój przeciwnik, również otrzymuje dwie karty.
                    Jeśli chcesz, możesz zdobyć kolejną kartę, a jej punkty zostaną dodane do Twojej sumy. Rozdający może również wybrać inną kartę.
                    Uważaj, aby nie zdobyć więcej niż 21 punktów, ponieważ jeśli to zrobisz, przegrywasz!
                    Gracz, który zbliży się do liczby 21, nie przekraczając jej, wygrywa!

                    Baw się dobrze!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    karty = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Walet', 'Królowa','Król', 'As']
                    punkty = 0
                    punkty_krupiera = 0
                    karta_1 = karty[{random}]
                    karta_2 = karty[{random}]
                    karta_3 = karty [{random}]
                    karta_krupiera_1 = karty[{random}]
                    karta_krupiera_2 = karty[{random}]
                    karta_krupiera_3 = karty[{random}]
                    # Punkty za kartę 1
                    {if} karta_1 == 'Walet' {or} karta_1 == 'Królowa' {or} karta_1 == 'Król':
                        punkty = punkty + 10
                    {elif} karta_1 == 'As':
                        punkty = punkty + 11
                    {else}:
                        punkty = punkty + karta_1
                    # Punkty za kartę 2
                    {if} karta_2 == 'Walet' {or} karta_2 == 'Królowa' {or} karta_2 == 'Król':
                        punkty = punkty + 10
                    {elif} karta_2 == 'As':
                        punkty = punkty + 11
                    {else}:
                        punkty = punkty + karta_2
                    # Punkty za kartę krupiera 1
                    {if} karta_krupiera_1 == 'Walet' {or} karta_krupiera_1 == 'Królowa' {or} karta_krupiera_1 == 'Król':
                        punkty_krupiera = punkty_krupiera + 10
                    {elif} karta_krupiera_1 == 'As':
                        punkty_krupiera = punkty_krupiera + 11
                    {else}:
                        punkty_krupiera = punkty_krupiera + karta_krupiera_1
                    # Punkty za kartę krupiera 2
                    {if} karta_krupiera_2 == 'Walet' {or} karta_krupiera_2 == 'Królowa' {or} karta_krupiera_2 == 'Król':
                        punkty_krupiera = punkty_krupiera + 10
                    {elif} karta_krupiera_2 == 'As':
                        punkty_krupiera = punkty_krupiera + 11
                    {else}:
                        punkty_krupiera = punkty_krupiera + karta_krupiera_2
                    # Dwa Asy
                    {if} karta_1 == 'As' {and} karta_2 == 'As':
                        punkty = 12
                    {if} karta_krupiera_1 == 'As' {and} karta_krupiera_2 == 'As':
                        punkty_krupiera = 12
                    # Tablica wyników
                    {print} 'Trzymasz karty ' karta_1 ' i ' karta_2 ' (' punkty ' punktów)'
                    {print} 'Krupier trzyma ' karta_krupiera_1 ' i ' karta_krupiera_2 ' (' punkty_krupiera ' punktów)'
                    # Dodatkowa karta dla gracza
                    hit = {ask} 'Czy chcesz dobrać kartę?'
                    {if} hit == 'tak':
                        {if} karta_3 == 'Walet' {or} karta_3 == 'Królowa' {or} karta_3 == 'Król':
                            punkty = punkty + 10
                        {elif} karta_3 == 'As':
                            {if} punkty > 11:
                                punkty = punkty + 11
                            {else}:
                                punkty = punkty + 1
                        {else}:
                            punkty = punkty + karta_3
                        {print} 'Dostajesz dodatkowo ' karta_3 ' (' punkty ' punktów)'
                    {else}:
                        {print} 'Bez dodatkowych kart'
                    # Zwycięzca
                    {if} punkty > 21 {or} punkty_krupiera > punkty {or} punkty_krupiera == 21:
                        {print} 'Przegrywasz'
                    {elif} punkty_krupiera < 17:
                        {print} 'Krupier dobiera dodatkową kartę. Jest to... ' karta_krupiera_3
                        {if} karta_krupiera_3 == 'Walet' {or} karta_krupiera_3 == 'Królowa' {or} karta_krupiera_3 == 'Król':
                            punkty_krupiera = punkty_krupiera + 10
                        {elif} karta_krupiera_3 == 'As':
                            {if} punkty_krupiera < 11:
                                punkty_krupiera = punkty_krupiera + 11
                            {else}:
                                punkty_krupiera = punkty_krupiera + 1
                        {else}:
                            punkty_krupiera = punkty_krupiera + karta_krupiera_3
                        {print} 'Krupier ma ' punkty_krupiera ' punktów teraz'
                        {if} punkty_krupiera < 21 {and} punkty_krupiera > punkty:
                            {print} 'Przegrywasz'
                        {else}:
                            {print} 'Wygrywasz'
                    {elif} punkty > punkty_krupiera {and} punkty < 21:
                        {print} 'Wygrywasz!'
                    ```
                start_code: '# umieść tutaj swój kod'
    calculator:
        name: Kalkulator
        default_save_name: Kalkulator
        description: Stwórz kalkulator
        levels:
            6:
                story_text: |
                    Teraz gdy umiesz już matematykę, możesz sam zrobić kalkulator!
                example_code: "```\nliczba_1 {is} {ask} 'Wpisz pierwszą liczbę:'\nliczba_2 {is} {ask} 'Wpisz drugą liczbę:'\npoprawna_odpowiedź = liczba_1 * liczba_2 \n{print} liczba_1 ' razy ' liczba_2 ' to ' poprawna_odpowiedź \n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Powyższy kalkulator obliczy odpowiedź za Ciebie, ale możesz również stworzyć program, aby sprawdzić swoje umiejętności matematyczne, jak ten:
                    Wypełnij puste miejsca, aby go dokończyć!
                example_code_2: |
                    ```
                    poprawna_odpowiedź = 11 * 27
                    odpowiedź = {ask} 'Ile to jest 11 razy 27?'
                    {if} odpowiedź {is} _ {print} 'good job!'
                    {else} {print} 'Źle! To było ' _.
                    ```
                story_text_3: |
                    Możesz też pozwolić komputerowi na samodzielne wykonywanie losowych sum za pomocą {random}.
                    W ten sposób wybierasz pewną liczbę tabel do ćwiczenia i z tego zawsze otrzymujesz inną sumę:
                start_code: '{print} ''Witamy w tym kalkulatorze!'''
            9:
                story_text: |
                    W poziomie 6 stworzyłeś kalkulator, w tym poziomie możesz rozbudować ten kod tak, aby zadawał wiele pytań.

                    ### Ćwiczenie 1
                    Czy potrafisz dokończyć linię 10, aby program działał?

                    ### Ćwiczenie 2
                    Daj graczom informację zwrotną, gdy wprowadzą dobrą lub złą odpowiedź. Aby to osiągnąć, rozszerz swój program o `{else}`.
                example_code: "```\nwynik = 0\n{repeat} 10 {times}\n    liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    liczba1= liczby {at} {random}\n    liczba2 = liczby {at} {random}\n    poprawna_odpowiedź = liczba1* liczba2 \n    {print} 'Ile jest ' liczba1 ' razy ' liczba2 '?'\n    odpowiedź = {ask}\
                    \ 'Wpisz tutaj swoją odpowiedź...'\n    {print} 'Twoja odpowiedź to'  odpowiedź\n    {if} _ {is} _\n        wynik = wynik + 1\n{print} 'Świetna robota! Twój wynik to... ' wynik ' na 10!\n```\n"
                start_code: '{print} ''Witamy w tym kalkulatorze!'''
            10:
                story_text: |
                    Ta gra w kalkulator pomoże Ci przećwiczyć tabliczkę mnożenia!
                    ### Ćwiczenie
                    Czy możesz dodać więcej liczb do listy, aby ćwiczyć tabliczkę mnożenia do 10?
                example_code: "```\nliczby = 1, 2, 3\n{for} liczba1 {in} liczby\n    {for} liczba2 {in} liczby\n        odpowiedź = {ask} 'Ile wynosi ' liczba2 ' razy ' liczba1 '?'\n        poprawna_odpowiedź = liczba1 * liczba2\n        {if} odpowiedź {is} poprawna_odpowiedź\n            {print} 'Świetna\
                    \ robota!'\n        {else}\n            {print} 'To nieprawidłowa odpowiedź. Prawidłowa odpowiedź to ' poprawna_odpowiedź  \n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: |
                    Dzięki `{for}` można uprościć program ćwiczeniowy tabliczki mnożenia.

                    ### Ćwiczenie 1
                    Popraw przykładowy kod tak, aby drukował ładną tabliczkę mnożenia: <br> "1 razy 10 to 10", "2 razy 10 to 20" itd.

                    ### Ćwiczenie 2
                    Wróć do swojego kodu mnożenia na poziomie 10 i zmodyfikuj go tak, aby używał `{for}` i `{range}`.
                example_code: |
                    ```
                    liczba = 10
                    {for} i {in} {range} 1 do 10
                        {print} i * liczba
                    ```
                start_code: '# umieść tutaj swój kod'
            12:
                story_text: |
                    Teraz możesz zrobić kalkulator, który działa dla liczb dziesiętnych. Wypełnij puste miejsca, aby działał poprawnie!
                example_code: |
                    ```
                    liczba1 = {ask} 'Jaka jest pierwsza liczba?'
                    liczba2 = {ask} 'Jaka jest druga liczba?'
                    odpowiedź = _
                    {print} liczba1 ' plus ' liczba2 ' to ' odpowiedź
                    ```
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    W tym poziomie możesz zaprogramować grę „Zgadnij, która liczba”.
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: '# umieść tutaj swój kod'
            15:
                story_text: |
                    Możesz dodać pętlę `{while}` do gry w kalkulator, którą nauczyłeś się robić na poprzednim poziomie.
                    Dzięki temu gracz nie będzie mógł przejść do następnego pytania {if} udzielił błędnej odpowiedzi.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# umieść tutaj swój kod'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Pierwsze kroki
        default_save_name: wstęp
        description: Wyjaśnienie poziomu
        levels:
            1:
                story_text: |
                    Witaj w Hedy! Na Poziomie 1 nauczysz się pisać historię.
                    Wypróbuj kod, naciskając zielony przycisk pod polem programowania.
                    Gotowe? Świetnie, możesz udać się do następnej zakładki i nauczyć pierwszej komendy!
                start_code: '{print} witaj świecie!'
            2:
                story_text: |
                    Gratulację! Witamy na poziomie 2. Już stworzyliśmy trochę kodu za ciebie ;).

                    W pierwszym poziomie mogłeś zauważyć, że komenda `{echo}` potrafi zapisywać tylko 1 bit informacji na raz.

                    Na przykład, w przygodzie "restauracja", możesz użyć echo, kiedy klient chce coś pić, lub zjeść, ale nie dwie rzeczy równocześnie.
                example_code: |
                    ```
                    {print} Witamy w Hedy's
                    {ask} Co chciałbyś/chciałabyś zjeść?
                    {echo} Czyli chcesz
                    {ask} Czego chciałbyś/chciałabyś się napić?
                    {echo} Czyli chcesz
                    ```
                story_text_2: |
                    `{print}` wciąż działa tak samo, ale komenda `{ask}` zmieniła się. Musisz użyć zmiennej również w komendzie `{ask}`. Wygląda to tak:
                start_code: '{print} witaj świecie!'
            3:
                story_text: |
                    W poziomie 3 możesz stworzyć listę. Możesz pozwolić komputerowi wybrać coś losowo z tej listy. Możesz to zrobić za pomocą `{at} {random}`.
                start_code: '{print} witaj świecie!'
            4:
                story_text: |
                    W poziomie 4 `{ask}` i `{print}` zmieniły się.
                    Musisz umieścić w cudzysłowach tekst, który chcesz wyświetlić.
                    Jest to przydatne, ponieważ teraz możesz wyświetlić na ekranie wszystkie słowa, które chcesz. Również słowa, których użyłeś, aby przechować coś za pomocą `{is}`.
                    Większość języków programowania również używa cudzysłowów podczas wyświetlania tekstu, a więc jesteśmy o jeden krok bliżej prawdziwego programowania!
                example_code: |
                    ```
                    {print} 'Od teraz musisz używać cudzysłowów!'
                    odpowiedź {is} {ask} 'Czego od teraz musimy używać?'
                    {print} 'Musimy używać ' odpowiedź
                    ```
                start_code: '{print} ''Witaj świecie'''
            5:
                story_text: |
                    W poziomie 5 pojawia się coś nowego `{if}`! Za pomocą `{if}` możesz wybrać pomiędzy dwoma opcjami.
                    Ten kod wyświetla „to miło”, jeśli wprowadzisz imię Hedy, w przeciwnym wypadku wyświetli „bu!”.
                    `{ask}` i `{print}` działają w dalszym ciągu tak jak w poziomie 4.
                example_code: |
                    ```
                    imię {is} {ask} 'jak masz na imię?'
                    {if} imię {is} Hedy {print} 'to miło' {else} {print} 'bu!'
                    ```
                start_code: |-
                    imię {is} {ask} 'Jak masz na imię?'
                    {if} imię {is} Hedy {print} 'super!' {else} {print} 'eh'
            6:
                story_text: " W tym poziomie nauczysz się czegoś nowego: od teraz możesz również liczyć.\n \n Dodawanie jest proste, możesz je zapisać tak jak w matematyce: na przykład `5 + 5`. Odejmowanie też jest proste, to po prostu `5 - 5`.\n \n Mnożenie jest trochę inne, ponieważ nie ma znaku mnożenia\
                    \ na twojej klawiaturze. Poszukaj, naprawdę go nie ma!\n Z tego powodu mnożymy za pomocą gwiazdki nad 8: `5 * 5`. Czytaj to jako „5 razy 5”, tak lepiej zapamiętasz.\n"
                example_code: |
                    ```
                    {print} '5 plus 5 to ' 5 + 5
                    {print} '5 minus 5 to ' 5 - 5
                    {print} '5 razy 5 to ' 5 * 5
                    ```
                start_code: '{print} ''5 razy 5 to'' 5 * 5'
            7:
                story_text: |
                    Poziom 7 dodaje komendę `{repeat}`. `{repeat}` może być użyte po to, aby tę samą linie kodu wykonać wiele razy.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy to zabawa!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy to zabawa!'''
            8:
                story_text: |
                    `{ask}` i `{print}` wciąż działają tak jak je poznałeś do tej pory. Ale `{if}`, `{else}` i `{repeat}` zmieniły się!
                    Od teraz możesz zgrupować kilka linii kodu, ale musisz wtedy *wciąć* ten kod.
                    To znaczy dodać cztery spacje na początku linii. Będziesz musiał również wciąć kod, kiedy będziesz chciał utworzyć blok złożony z tylko 1 linii.
                example_code: |
                    Zobacz jak działa polecenie `{repeat}`:
                    ```
                    {repeat} 5 {times}
                        {print} 'Cześć wszystkim'
                        {print} 'Całość powtórzona 5 razy'
                    ```
                    Zobacz jak działa polecenie `{if}` oraz `{else}`:

                    ```
                    imie {is} {ask} 'Jak masz na imię?'
                    {if} imie {is} Karol
                        {print} 'Cześć Karol'
                        {print} 'Możesz pograć na swoim komputerze!'
                    {else}
                        {print} 'INTRUZ!'
                        {print} 'Nie możesz używać tego komputera!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Siema ludziska'
                        {print} 'To zostanie wypisane 5 razy'
            9:
                story_text: |
                    Na tym poziomie możesz używać nie tylko wielu linii z poleceniem `{if}` oraz `{repeat}`, ale możesz używać ich łącznie!
                    W tym przykładzie możesz zobaczyć polecenie `{if}` wewnątrz pętli/polecenia `{repeat}`. Można też odwrotnie. Dodatkowo polecenie `{if}` jest dozwolone w innym poleceniu `{if}`. Możesz też wykorzystać pętle/polecenie `{repeat}` w innej pętli/poleceniu `{repeat}`.
                    Spróbuj samemu!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        jedzenie= {ask} 'Co byś zjadła?'
                        {if} jedzenie {is} pizza
                            {print} 'super!'
                        {else}
                            {print} 'pizza jest lepsza'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        jedzenie = {ask} 'Co byś zjadł?'
                        {if} jedzenie {is} pizza
                            {print} 'super!'
                        {else}
                            {print} 'pizza jest lepsza'
            10:
                story_text: "W tym poziomie nauczysz się nowego polecenia/pętli `{for}`. Z poleceniem/pętlą `{for}`możesz tworzyć listy i możesz używać wszystkich elementów listy. \n`{for}` tworzy blok kodu, jak `{repeat}` i `{if}`  więc wszystkie linie w bloku muszą być wcięte, a więc zaczynać się spacjami."
                example_code: |
                    ```
                    zwierzęta {is} pies, kot, blobfish
                    {for} zwierzę {in} zwierzęta
                      {print} 'Moim ulubionym zwierzakiem jest ' zwierzę
                    ```
                start_code: |-
                    zwierzęta {is} pies, kot, blobfish
                    {for} zwierzę {in} zwierzęta
                        {print} 'Moim ulubionym zwierzakiem jest ' zwierzę
            11:
                story_text: |-
                    Na tym poziomie dodajemy nową formę `{for}`. Na wcześniejszych poziomach używaliśmy `{for}` z listą, ale możemy też używać `{for}` z liczbami.
                    Robimy to, dodając nazwę zmiennej, następnie `{in}` `{range}`. Następnie wpisujemy liczbę, od której rozpoczniemy, `{to}` i liczbę, na której zakończymy.

                    Wypróbuj przykład, aby zobaczyć, co się stanie! Pamiętaj, na tym poziomie będziesz musiał użyć wcięć w wierszach poniżej instrukcji `{for}`.
                start_code: |-
                    {for} licznik {in} {range} 1 {to} 5
                        {print} licznik
            12:
                story_text: |-
                    **Ułamki dziesiętne**
                    Do tej pory Hedy nie pozwalał na zapisywanie ułamków dziesiętnych np. 1.5, ale od tej pory możesz już wykorzystać ułamki dziesiętne w swoich kodach. Pamiętaj że w komputerze wykorzystujemy  `.` do oddzielenia części ułamkowej od całkowitej.
                example_code: |
                    ```
                    {print} 'Dwa i pół plus dwa i pół to...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'Teraz zapisując ułamki dziesiętne musisz wykorzystać kropkę do oddzielenia części ułamkowej od części całkowitych'
                    {print} 2.5 + 2.5
            13:
                story_text: |-
                    Nauczysz się teraz o `{and}` i `{or}`! Jeśli chcesz sprawdzić dwa wyrażenia, nie musisz używać dwóch poleceń `{if}`, w zamian możesz użyć `{and}` i `{or}`.

                    Jeśli użyjesz `{and}`, oba wyrażenia, przed i po `{and}`, muszą być prawdziwie. Można też użyć `{or}`. W takim przypadku wystarczy że jedno z wyrażeń będzie prawdziwe.
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    wiek = {ask} 'Ile masz lat?'
                    {if} imię {is} 'Hedy' {and} wiek {is} 2
                        {print} 'Naprawdę jesteś Hedy!'
                    ```
                start_code: |-
                    imię = {ask} 'Jak masz na imię?'
                    wiek = {ask} 'Ile masz lat?'
                    {if} imię {is} 'Hedy' {and} wiek {is} 2
                        {print} 'Naprawdę jesteś Hedy!'
            14:
                story_text: |
                    W tej lekcji nauczymy się zastosowania nowych operatorów logicznych, które możesz pamiętać z lekcji matematyki: operatory `<` i `>`.
                    Operator `<` sprawdza czy pierwsza liczba jest mniejsza od drugiej liczby, na przykład wiek `<` 12 sprawdza czy wiek jest mniejszy niż 12.
                    Jeżeli chcesz sprawdzić czy pierwsza liczba jest mniejsza lub równa drugiej liczbie możesz użyć operator `<=`, na przykład wiek `<=` 11, który sprawdza czy wiek jest mniejszy lub równy 11.
                    Operator `>` sprawdza czy pierwsza liczba jest większa od drugiej liczby, na przykład punkty `>` 10 sprawdza czy punkty są większe od 10.
                    Jeżeli chcesz sprawdzić, czy pierwsza liczba jest większa lub równa drugiej liczbie możesz użyć `>=`, na przykład punkty `>=` 11, który sprawdza czy punkty są większe lub równe 11.
                    Możesz użyć tych operatorów logicznych w `{if}`, na przykład:
                example_code: |
                    ```
                    wiek = {ask} 'Ile masz lat?'
                    {if} wiek > 12
                        {print} 'Masz więcej lat niż ja!'
                    ```
                start_code: |-
                    wiek = {ask} 'Ile masz lat?'
                    {if} wiek < 13
                        {print} 'Jesteś młodszy niż ja!'
                    {else}
                        {print} 'Jesteś starszy niż ja!'
            15:
                story_text: "Tym razem nauczymy się nowego typu pętli - pętla `{while}`! Ta pętla będzie działać tak długo, jak warunek w pętli jest prawdziwy, \nwięc nie zapomnij zmienić wartości warunku w pętli.\n\nPętla kodzie przykładowym będzie działać aż poprawna odpowiedź zostanie podana.\nPętla\
                    \ nigdy się nie skończy, gdy poprawna odpowiedź nie zostanie podana!"
                example_code: |
                    ```
                    odpowiedź = 0
                    {while} odpowiedź != 25
                        odpowiedź = {ask} 'Ile jest 5 razy 5?'
                    {print} 'Dobra odpowiedź'
                    ```
                start_code: |-
                    odpowiedź = 0
                    {while} odpowiedź != 25
                        odpowiedź = {ask} 'Ile jest 5 razy 5?'
                    {print} 'Dobra odpowiedź'
            16:
                story_text: |-
                    Tym razem stworzymy listy w sposób podobny do Pythona. Te listy mają kwadratowe nawiasy dookoła listy! Dodatkowo, zostawimy też cudzysłowie dookoła każdego elementu listy tak jak się nauczyliśmy w poprzednich poziomach.
                    Nawiasów kwadratowych używamy również do wybrania konkretnego elementu z listy. Polecenie `{at}` nie może już być używane.
                example_code: |
                    ```
                    przyjaciele = ['Ahmed', 'Bogdan', 'Cayden']
                    szczęśliwe_liczby = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'szczęśliwa liczba ' przyjaciele[i]
                        {print} 'to ' szczęśliwe_liczby[i]
                    ```
                start_code: |-
                    owoce = ['jabłko', 'banan', 'czereśnia']
                    {print} owoce
            17:
                story_text: |-
                    Teraz zmienimy nieco wcięcia. Za każdym razem, gdy potrzebujemy wciąć kod, potrzebujemy `:` w linii przed wcięciem.

                    Na tym poziomie możesz też użyć nowej komendy: `{elif}`. `{elif}` to połączenie `{else}` i `{if}` i potrzebujesz go, gdy chcesz zrobić 3 (lub więcej!) opcji.
                    Sprawdź to!
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Szukam!'
            18:
                story_text: |-
                    Dotarliśmy do prawdziwego kodu Pythona! Oznacza to, że od teraz musimy używać nawiasów z `{print}` i `{range}`.
                    Oznacza to również, że jeśli używasz angielskich wersji poleceń możesz używać kodu Hedy z tego poziomu w dowolnym środowisku Pythona. Jeśli jeszcze tego nie zrobiłeś, możesz przełączyć język w menu poleceń, aby to zrobić.
                start_code: |-
                    imię = 'Hedy'
                    {print}('Mam na imię ', imię)
    dice:
        name: Kostka do gry
        default_save_name: Kostka do gry
        description: Stwórz własną kostkę do gry
        levels:
            3:
                story_text: |
                    Na tym poziomie posiadamy możliwość wyboru z listy. Dzięki temu możemy pozwolić komputerowi wybrać jedną ze stron kostki.
                    Zerknij na gry, które masz w swojej szafie w domu.
                    Czy są tam gry z (specjalną) kostką? Możesz ją również skopiować przy pomocy tego kodu.
                    Na przykład kostka do gry Gąsienice z liczbami od 1 do 5 i wężem na niej.

                    ![Kostka do gry Gąsienice z liczbami od 1 do 5 i gąsienicą na niej](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    {print} Wyrzucono _ {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Kości w przykładzie powyżej są kośćmi do specjalnej gry. Czy możesz zrobić normalną kość do gry?
                    Lub inne specjalne kości z innej gry?
                example_code_2: |
                    ```
                    wybór {is} _
                    ```
                start_code: '{print} Jaka wartość wypadnie na kostce tym razem?'
            4:
                story_text: |
                    W tym poziomie możesz stworzyć kostki do gry. Ale tym razem spróbuj zrobić to samodzielnie, bez przykładowego kodu!

                    ### Ćwiczenie
                    Stwórz własne kostki do gry.
                    Wskazówka: Jeśli nie masz pojęcia jak stworzyć kostki do gry, spójrz na te z poprzedniego poziomu, ale nie zapomnij dodać cudzysłowów.
                start_code: '{print} ''Jaka wartość tym razem wypadnie na kostce?'''
            5:
                story_text: |
                    Teraz dodamy polecenia `{if}` oraz `{else}` do naszych kości!

                    ### Ćwiczenie
                    Uzupełnij kod przykładowy tak, aby kod napisał „Możesz przestać rzucać” gdy wyrzucona zostanie gąsienica. W przypadku gdy zostanie wyrzucone coś innego powinien napisać „Musisz rzucić ponownie”.
                    **Dodatkowo** Może chcesz stworzyć kostkę do gry z całkowicie innej gry? To też jest w porządku! W takim razie wymyśl swoją własną reakcję. Na przykład „tak” dla 6 i „szkoda” dla czegoś innego.
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    rzut {is} wybory {at} {random}
                    {print} 'wyrzucono ' rzut
                    _ rzut {is} dżdżownica {print} 'Możesz przestać rzucać.'
                    _ {print} 'Musisz rzucić jeszcze raz!'
                    ```
                start_code: '{print} ''Jaka wartość tym razem wypadnie na kostce?'''
            6:
                story_text: |
                    Na tym poziomie możesz zrobić kostkę do gry z Gąsienicą i nawet policzyć ile punktów wyrzuciłaś w sumie.
                    Wiedząc, że Gąsienica jest warta 5 punktów możesz teraz policzyć ile punktów wyrzuciłaś w sumie.
                    Ten kod policzy ilość punktów jednek kostki:

                    ### Ćwiczenie
                    Czy potrafisz napisać kod, który policzy sumę punkt na 8 kostkach? Aby to zrobić musisz skopiować kilka linijek kodu.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, gąsienica
                    punkty = 0
                    rzut = wybory {at} {random}
                    {print} 'wyrzuciłeś' rzut
                    {if} rzut {is} gąsienica punkty = punkty + 5 {else} punkty = punkty + rzut
                    {print} 'suma punktów to ' punkty
                    ```
                example_code_2: |
                    Czy udało ci się policzyć wynik dla 8 kostek? Wymagało to sporo kopiowania i wklejania, prawda? W poziomie 7 ułatwimy to!
                start_code: '{print} ''Jaka wartość tym razem wypadnie na kostce?'''
            7:
                story_text: |
                    Na poziomie 5 już mogłeś zrobić kostkę do gry. Przy pomocy polecenia `{repeat}` możesz łatwo rzucić ręką pełną kostek.

                    ### Ćwiczenie
                    Spróbuj ukończyć przykładowy kod! **Dodatkowo** Zastanów się nad grą, którą znasz, i która wymaga kostki i zaprogramuj ją przy pomocy polecenia `{repeat}`.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''Jaka wartość tym razem wypadnie na kostce?'''
            10:
                story_text: |
                    Czy wszyscy zbyt długo rzucają kostką? Na tym poziomie możesz pozwolić Hedy rzucić wszystkimi kośćmi naraz!

                    ### Ćwiczenie
                    Zmień imiona na imiona swoich przyjaciół lub rodziny i dokończ kod, aby każdy z nich rzucił.
                example_code: |
                    ```
                    gracze = Ania, Jasiek, Kasia
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} gracz ' wyrzucił ' wybory {at} {random}
                        {sleep}
                    ```
                start_code: '# umieść tutaj swój kod'
            15:
                story_text: |
                    W tej grze musisz wyrzucić 6 w jak najmniejszej liczbie prób.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# umieść swój kod tutaj'
    dishes:
        name: Zmywanie?
        default_save_name: Zmywanie
        description: Użyj komputera, aby sprawdzić, kto zmywa naczynia
        levels:
            3:
                story_text: |
                    Czy często w domu kłócisz się o to, kto powinien dziś umyć naczynia lub wyczyścić kuwetę?
                    Możesz pozwolić komputerowi dokonać bardzo sprawiedliwego wyboru. Możesz to zaprogramować na tym poziomie!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sofia
                    {print} ludzie {at} {random} muszą zmywać naczynia
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Stwórz własną wersję programu zmywarki. Najpierw sporządź listę członków swojej rodziny.
                    Następnie pomyśl o zadaniu do wykonania i pozwól komputerowi zdecydować, kto ma wykonać zadanie za pomocą polecenia `{at} {random}`.

                    **Dodatkowo** Nie masz ochoty samodzielnie zmywać naczyń? Zhakuj program, usuwając swoją nazwę z listy za pomocą polecenia `{remove}` `{from}`.
                start_code: '{print} Kto dziś zmywa naczynia?'
            4:
                story_text: |
                    Korzystając z cudzysłowów możesz sprawić, że twój program o zmywaniu naczyń będzie jeszcze lepszy.

                    Najpierw uzupełnij puste miejsca symbolami lub poleceniami, tak by przykładowy program zaczął działać.
                    Udało Ci się? Super! Teraz skopiuj swój własny kod z poprzedniego poziomu i spraw by zaczął działać w tym poziomie dodając cudzysłowy w odpowiednich miejscach.
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sophie
                    {print} _ naczynia są myte przez _
                    {sleep}
                    {print} ludzie {at} _
                    ```
                start_code: '{print} ''Kto zmywa naczynia?'''
            5:
                story_text: |
                    Dzięki poleceniu `{if}` możesz mieć teraz trochę więcej zabawy z wyborami w twoich programach. Możesz teraz sprawić, by twój program reagował na wybory podjęte przez komputer.
                    ### Ćwiczenie
                    Czy potrafisz dokończyć program, tak by wyświetlał "o, nie..." gdy jest Twoja kolej, a w przeciwnym przypadku wyświetlał „tak!”?
                    Nie zapomnij cudzysłowów!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Agnieszka, Zosia
                    zmywarka {is} ludzie {at} {random}
                    _ kto_zmywa {is} Zosia {print} _ o, nie... Moja kolej zmywania naczyń _
                    _ {print} 'całe szczęście ' _ ' myje naczynia'
                    ````
                start_code: '{print} ''Kto zmywa naczynia?'''
            6:
                story_text: |
                    Jak często wszyscy będą zmywać naczynia? Czy to jest sprawiedliwe? Możesz to policzyć na tym poziomie.
                example_code: |
                    ```
                    ludzie = mama, tata, Emma, Sophie
                    emma_myła = 0
                    zmywa = ludzie {at} {random}
                    {print} 'Teraz zmywa ' zmywa
                    {if} zmywa {is} Emma emma_myła = emma_myła + 1
                    {print} 'Emma będzie zmywać naczynia w tym tygodniu ' emma_myła ' razy'
                    ```

                    Teraz możesz skopiować linie od 3 do 5 kilka razy (np. 7 razy dla całego tygodnia), aby ponownie obliczyć dla całego tygodnia.
                    Czy robisz kod dla całego tygodnia?
                story_text_2: |
                    W poprzednim programie jakbyś był bardzo pechowy to program mógłby Cię wybrać do mycia naczyń przez cały tydzien, a to nie jest sprawiedliwe!
                    Żeby stworzyć bardziej sprawiedliwy system możesz użyc polecenia `{remove}` żeby usunąć osobę z listy zaraz po wybraniu jej do mycia naczyń. Ty sposobem ta osoba już nie zostanie wybrana do mycia naczyń zanim wszyscy nie mieli okazji umyć naczyń.

                    Poniedziałek i wtorek zostały przygotowane dla Ciebie. Czy potrafisz dodać resztę tygodnia?
                    Czy potrafisz również wymyślić co zrobić gdy lista jest pusta?
                example_code_2: |
                    ```
                    ludzie = mama, tata, Agnieszka, ty
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia w poniedziałek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia we wtorek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    kto_zmywa = ludzie {at} {random}
                    ```
                start_code: '{print} ''Kto zmywa naczynia?'''
            7:
                story_text: |
                    Przy użyciu komendy `{repeat}` możesz powtórzyć fragmenty kodu. Możesz to wykorzystać do ustalenia kto będzie zmywał naczynia przez kilka dni!
                    ### Ćwiczenie
                    Użyj komendy `{repeat}` aby wylosować kto będzie mył naczynia przez cały tydzień. Każde puste miejsce musi być wypełnione jedną komendą lub liczbą!
                    **(dodatkowe ćwiczenie)** Czy możesz wymyślić inne prace domowe? Przygotuj kod, który wylosuje trzy prace domowe. Nie zapomnij napisać, o co chodzi!
                example_code: |
                    ```
                    ludzie = mamy, taty, Emmy, Sophie
                    {repeat} _ _ {print} 'Zmywanie naczyń jest zadaniem ' _ _ _
                    ```
                start_code: '{print} ''Kto myje naczynia?'''
            10:
                story_text: |
                    Na tym poziomie w prosty sposób ułożysz plan na cały tydzień!

                    ### Ćwiczenie
                    Dodaj drugie zadanie, takie jak odkurzanie lub sprzątanie, i upewnij się, że jest ono również podzielone na cały tydzień.
                    <br> **Dodatkowo** Program nie jest sprawiedliwy, można mieć pecha i zmywać cały tydzień. Jak uczynić program bardziej sprawiedliwym?
                example_code: |
                    ```
                    dni = Poniedziałek, Wtorek, Środa, Czwartek, Piątek, Sobota, Niedziela
                    imiona = mama, tata, Agnieszka, Zosia
                    {for} dzień {in} dni
                        {print} imiona {at} {random} ' myje naczynia w ' dzień
                    ```
                start_code: '# umieść tutaj swój kod'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Wróżka
        default_save_name: Wróżka
        description: Niech Hedy przewidzi przyszłość
        levels:
            1:
                story_text: |
                    Czy byłeś kiedyś w wesołym miasteczku i wróżka przepowiedziała Ci przyszłość? Albo czy kiedykolwiek grałeś magiczną ósemką?
                    Wtedy prawdopodobnie wiesz, że tak naprawdę nie mogą one przewidzieć twojej przyszłości, ale nadal jest to zabawne!

                    W najbliższych poziomach możesz nauczyć się jak stworzyć własną maszynę do wróżenia!
                    W poziomie 1 możesz zacząć łatwo, pozwalając Hedy przedstawić się jako wróżka i pozwolić jej odpowiedzieć {echo} odpowiedziami graczy.
                    Na przykład tak:
                example_code: |
                    ```
                    _ Witam, jestem Hedy, wróżka!
                    _ Kim jesteś?
                    _ Pozwól mi spojrzeć w moją kryształową kulę
                    _ Widzę... Widzę...
                    _ Twoje imię to
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania i wypełnij puste pola, aby kod działał.
                    **Dodatkowo** Zmień kod i pozwól wróżbitce nie tylko przewidzieć Twoje imię, ale także wiek, ulubioną drużynę sportową lub coś innego o sobie.
                start_code: '# umieść swój kod tu'
            3:
                story_text: |
                    Na poprzednich poziomach stworzyłeś swoją pierwszą maszynę do wróżenia, ale Hedy nie mogła niczego przewidzieć, tylko wykonać {echo}.
                    Na tym poziomie możesz użyć zmiennej i polecenia `{at} {random}`, aby Hedy naprawdę wybrała odpowiedź. Zobacz ten kod dla przykładu:
                example_code: "\nW tym przykładzie gracz może {ask} Hedy pytanie typu \"tak-nie\", a Hedy wybierze losowo odpowiedź za ciebie.\n```\n{print} Jestem wróżka Hedy!\npytanie {is} {ask} Co chcesz wiedzieć?\n{print} A więc chcesz wiedzieć czy: pytanie \nodpowiedzi {is} tak, nie, może\n{print}\
                    \ Moja szklana kula mówi że...\n{sleep} 2\n{print} odpowiedzi  {at} {random}\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Teraz Hedy może odpowiedzieć tylko tak, nie lub może. Czy możesz dać Hedy więcej opcji odpowiedzi, np. 'zdecydowanie' lub 'zapytaj ponownie'.
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: |
                    Ten poziom nie ma żadnych nowych funkcji, ale pozwala poćwiczyć używanie cudzysłowów.
                    Możesz przerobić swój kod poziomu 3 i pamiętaj o dodaniu cudzysłowów we właściwych miejscach!

                    Pamiętaj, że na poziomie 3 nie mogliśmy użyć słowa „pytanie” zarówno jako nazwy zmiennej, jak i zwykłego słowa, które można wydrukować.
                    Umożliwiają to cudzysłowy na poziomie 3!

                    Ważny! Pamiętaj, że teraz, gdy używamy cudzysłowów, Hedy będzie zdezorientowana, gdy użyjesz apostrofu do skrótów typu I'm lub What's.
                    Pamiętaj, aby usunąć te apostrofy i zmienić pisownię na Im lub Whats.

                    ### Ćwiczenie
                    Usunęliśmy wszystkie cudzysłowy z tego przykładowego kodu, czy możesz dodać je we wszystkich właściwych miejscach?
                example_code: |
                    ```
                    _ Dodaj cudzysłów do tego kodu _
                    {print} Jestem Hedy - wróżka!
                    pytanie {is} {ask} Co chcesz wiedzieć?
                    {print} To jest twoje pytanie: pytanie
                    odpowiedzi {is} tak, nie, może
                    {print} Moja kryształowa kula mówi...
                    {sleep} 2
                    {print} odpowiedzi {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Jestem wróżka Hedy'
                    {print} 'Mogę przewidzie czy jutro wygrasz loterię!'
                    osoba {is} {ask} 'Kim jesteś?'
                    {if} osoba {is} Hedy {print} 'Zdecydowanie wygrasz!🤩' {else} {print} 'Złe wieści! Ktoś inny wygra!😭'
                    ```
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: |
                    Na tym poziomie możesz używać matematyki w swoich przewidywaniach jako wróżbita. Pozwala to na tworzenie (zwariowanych) formuł do obliczania przyszłości.
                    Na przykład możesz obliczyć, w jaki sposób zdobędziesz bogactwo lub ile będziesz mieć dzieci, gdy dorośniesz.



                    ### Ćwiczenie
                    Czy możesz wymyślić własną (zwariowaną) maszynę do wróżenia?
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Mogę przewidzieć, ile dzieci będziesz miał, gdy dorośniesz!'\nwiek = {ask} 'Ile masz lat?'\nrodzeństwo = {ask} 'Ile masz rodzeństwa?'\nwzrost = {ask} 'Ile masz wzrostu w centymetrach?'\nliczba_dzieci = wzrost / wiek\nliczba_dzieci\
                    \ = liczba_dzieci - rodzeństwo\n{print} 'Będziesz miał...'\n{sleep}\n{print} liczba_dzieci ' dzieci!'\n```\n\nJeśli poprzedni przykład nie był dla Ciebie wystarczająco zwariowany, spójrz na ten!\n```\n{print} 'Jestem Hedy - zwariowany wróżbita!'\n{print} 'Przewiduję, jak mądry jesteś!'\n\
                    nożna = {ask} 'W skali 1-10 jak bardzo kochasz piłkę nożną?'\nbanany = {ask} 'Ile bananów zjadłeś w tym tygodniu?'\nhigiena = {ask} 'Ile razy dzisiaj umyłaś ręce?'\nwynik = banany + higiena\nwynik = wynik * nożna \n{print} 'Jesteś ' nożna ' procentowo inteligentny.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: |
                    Na tym poziomie możesz użyć komendy `{repeat}`, aby twoja maszyna przepowiedziała kilka losów jednocześnie.
                example_code: |
                    ```
                    {print} 'Jestem Hedy - wróżka!'
                    {print} 'Możesz zadać 3 pytania!'
                    {repeat} 3 {times} pytanie = {ask} 'Co chcesz wiedzieć?'
                    odpowiedź = tak, nie, może
                    {repeat} 3 {times} {print} 'Moja kryształowa kula mówi...' odpowiedź {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
            8:
                story_text: |
                    Na poprzednich poziomach nauczyłeś się, jak użyć `{repeat}`, aby wróżka odpowiedziała na 3 pytania z rzędu, ale mieliśmy problem z wydrukowaniem pytań.
                    Teraz ten problem został rozwiązany dzięki nowemu sposobowi używania polecenia `{repeat}`.
                    W następnym przykładzie możesz poprosić wróżkę, aby zadała 3 pytania, a także je wydrukowała!

                    ### Ćwiczenie
                    Czy potrafisz wpisać odpowiednie polecenie w puste miejsca?
                example_code: |
                    ```
                    {print} 'Jestem Hedy - wróżka!'
                    {print} 'Możesz zadać mi 3 pytania'
                    odpowiedzi = tak, nie, może
                    _ _ _
                       pytanie = {ask} 'Co chcesz wiedzieć?'
                       {print} pytanie
                       {sleep}
                       {print} 'Moja kryształowa kula mówi...' odpowiedzi {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: |
                    Na tym poziomie nauczysz się programować grę MASH (dwór, mieszkanie, chałupa, dom). W tej grze możesz przewidzieć  jak będzie wyglądać przyszłość dla wszystkich graczy jednocześnie.

                    ### Ćwiczenie 1
                    Dodaj dwie nazwy do listy i zobacz, jak zmienia się wynik działania programu po jego uruchomieniu.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# umieść tutaj swój kod'
            12:
                story_text: |
                    Na tym poziomie możesz tworzyć los wieloma słowami. Czy możesz dodać więcej różnych fortun do listy?
                example_code: |
                    ```
                    losy = 'poślizgniesz się na skórce od banana', _
                    {print} 'Zajrzę do mojej kryształowej kuli w poszukiwaniu twojej przyszłości.'
                    {print} 'Widzę... Widzę...'
                    {sleep}
                    {print} losy {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Nawiedzony dom
        default_save_name: Nawiedzony dom
        description: Ucieknij z nawiedzonego domu
        levels:
            1:
                story_text: |
                    W tej przygodzie pracujesz nad stworzeniem gry, w której musisz uciec z nawiedzonego domu wybierając właściwe drzwi.
                    Jeśli wybierzesz właściwe drzwi, przeżyjesz, ale jeśli nie, straszny potwór może...

                    W poziomie 1 zaczynamy naszą grę w nawiedzony dom przez wymyślenie strasznej historii i zapytania gracza jakiego potwora zobaczą w nawiedzonym domu.
                example_code: |
                    ```
                    {print} Jak się tu dostałem?
                    {print} Pamiętam, jak przyjaciel powiedział mi, że mam wejść do starej rezydencji...
                    {print} i nagle wszystko stało się czarne.
                    {print}  Ale jak wylądowałem na podłodze...?
                    {print} Strasznie boli mnie głowa, jakby ktoś walnął mnie kijem!
                    {print} Co to za dźwięk?
                    {print} O nie! Chyba nie jestem sam w tym domu!
                    {print} Muszę się stąd wydostać!
                    {print} Przede mną są 3 drzwi...
                    {ask} Które drzwi powinienem wybrać?
                    {echo} Wybieram drzwi
                    {print} ...?
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Teraz zakończ historię, dodając co najmniej 5 linii kodu.
                    Pamiętaj, aby każdą linię kodów rozpocząć od komendy `{print}`.
                start_code: '{print} Jak się tu znalazłem?'
            2:
                story_text: |
                    W tym nawiedzonym domu możesz wybierać swoje potwory za pomocą emotikonów. Oczywiście możesz też użyć słów.
                example_code: |
                    ```
                    potwór_1 {is} 👻
                    potwór_2 {is} 🤡
                    potwór_3 {is} 👶
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W powyższym przykładzie potwory są z góry określone. Więc za każdym razem, gdy uruchamiasz swój kod, dane wyjściowe są takie same.
                    Czy możesz dodać polecenia `{ask}`, aby uczynić nawiedzony dom interaktywnym i sprawić, by gracze wybierali napotkane potwory?
                example_code_2: |
                    ```
                    potwór_1 {is} _
                    potwór_2 {is} _
                    potwór_3 {is} _
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
                start_code: potwór1 {is} _
            3:
                story_text: |
                    Na poprzednich poziomach zrobiłeś wprowadzenie do gry w nawiedzony dom, ale jak mogłeś zauważyć, historia zawsze miała straszny koniec.
                    Na tym poziomie możesz uczynić swoją historię bardziej interaktywną, zmieniając wynik gry; czasami zostaniesz zjedzony, czasami uciekniesz!
                    Niech Hedy decyduje losowo!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: |
                    Na tym poziomie nauczysz się używać cudzysłowów w swoich grach.
                    Czy potrafisz zmienić swój Nawiedzony Dom, aby był zgodny z poziomem 4?
                example_code: |
                    ```
                    {print} _ Uciekaj z nawiedzonego domu! _
                    {print} _ Przed tobą znajduje się 3 drzwi... _
                    wybór {is} {ask} _ Które drzwi wybierzesz? _
                    {print} Wybrałeś drzwi ... _ wybór
                    potwory {is} zombie, wampir, UCIEKŁEŚ
                    {print} Widzisz... _
                    {sleep}
                    {print} potwory {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: |
                    Aż do tego poziomu gra w nawiedzonym domu zawsze prosiła gracza o wybranie drzwi, ale jak zapewne zauważyłeś, tak naprawdę nie musieli odpowiadać poprawnie.
                    Jeśli gracz podał całkowicie losową odpowiedź, gra nadal działała, a gracz mógł nawet wygrać (mimo że nie wybrał drzwi).
                    Na tym poziomie możesz wygrać grę tylko wybierając te same drzwi, które losowo wybrała Hedy.

                    ### Ćwiczenie
                    Czy potrafisz znaleźć 4 brakujące słowa, aby uzupełnić kod?
                example_code: "```\n{print} 'Uciekaj z nawiedzonego domu!'\n{print} 'Przed tobą znajdują się 3 drzwi...'\ndrzwi {is} 1, 2, 3\npotwory {is} wilkołak, mumia, wampir, zombie\nwybrane_drzwi {is} {ask} 'Które drzwi wybierasz?'\n {print} 'Wybrałeś drzwi...' wybrane_drzwi \n{sleep}\npoprawne_drzwi\
                    \ {is} drzwi {at} {random}\n_ _ _ {print} 'Fantastycznie! Uciekłeś!'\n{else} {print} 'O nie! Zostałeś zjedzony przez...' potwory. {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            9:
                story_text: |
                    Na tym poziomie możesz skorzystać ze wcięć, dzięki czemu nawiedzony dom stanie się jeszcze bardziej interaktywny!

                    ### Ćwiczenie
                    Teraz bardzo trudno jest wygrać tę grę, czy możesz ułatwić wygraną?
                    Zmień kod tak, aby zawierał tylko jedne błędne drzwi i dwoje prawidłowych drzwi zamiast jednych prawidłowych drzwi i dwóch niewłaściwych?
                    Wskazówka: oznacza to zmianę zmiennej poprawne_drzwi na niepoprawne_drzwi i zamianę kodu `{if}` i `{else}`.
                    I oczywiście możesz także zmienić historię i uczynić ją własną. Zmień potwory lub spraw, by był to wesoły teleturniej, w którym otrzymasz prezent!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Ucieknij z nawiedzonego domu!'''
            11:
                story_text: |
                    Na tym poziomie zmieniliśmy polecenie `{for}`, abyśmy mogli powiedzieć graczowi, gdzie się znajduje.

                    ### Ćwiczenie 1
                    Zakończ program, aby gracz wiedział, w którym pokoju się znajduje.

                    ### Ćwiczenie 2
                    Zmień program w przygodę, wykonując następujące kroki:

                    1. Zrób listę wyborów (takich jak: walcz lub uciekaj)
                    2. Upewnij się, że gracz może wybrać opcję za pomocą `{ask}`
                    3. Czy odpowiedź jest poprawna? Następnie mogą przejść do następnego potwora. Czy dali złą odpowiedź? Poinformuj gracza za pomocą `{print}`.

                    **Dodatkowo** Jeśli dokonasz złego wyboru, potwór nadal będzie widoczny! Jak mógłbyś to zmienić?
                example_code: |
                    ```
                    {print} 'Ucieknij z nawiedzonego domu!'
                    potwory = zombie, wampir, gigantyczny pająk
                    _
                        {print} 'Pokój ' i
                        potwór = potwory {at} {random}
                    ```
                start_code: '{print} ''Ucieknij z nawiedzonego domu!'''
            14:
                story_text: |
                    Na tym poziomie możesz użyć symboli `<` i `>`, aby wprowadzić życie do swojej gry.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# umieść tutaj swój kod'
            16:
                story_text: |
                    Ta gra w nawiedzonym domu wykorzystuje połączenie między listami, których możesz użyć na tym poziomie.
                    Na przykład: wszystkie właściwości należące do zombie są na pierwszym miejscu na wszystkich listach, na drugim miejscu jest czarownica, a na trzecim wampir.
                    Zobacz kod!
                example_code: |
                    ```
                    liczby = [1, 2, 3]
                    i = liczby [random]
                    podpowiedz = ['growling', 'a cackling laugh', 'trzepotanie skrzydeł']
                    monsters = ['zombie', 'wiedźma', 'wampir']
                    bad_fate = ['Twój mózg został zjedzony', 'Zostałeś przeklęty', 'Zostałeś ugryziony']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'Słyszysz ' podpowiedz [i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'KONIEC GRY'
                    ```
                start_code: '# umieść tutaj swój kod'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Język
        default_save_name: language
        description: Ćwicz słowa w języku obcym
        levels:
            5:
                story_text: |
                    Stwórz własny program do ćwiczenia słownictwa w nowym języku.

                    ### Ćwiczenie
                    Czy możesz zrobić ten program dla innego języka? A może możesz dodać więcej słów do francuskiego?
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# umieść tutaj swój kod'
            16:
                story_text: |
                    Stwórz własny program do ćwiczenia słownictwa w nowym języku.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# umieść tutaj swój kod'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Papuga
        default_save_name: Papuga
        description: Stwórz swoja własną cyfrową papugę która powtórzy wszystko co powiesz!
        levels:
            1:
                story_text: |
                    Stwórz swoją własną cyfrową papugę która powtórzy wszystko co powiesz!
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} Jak masz na imię?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Spraw, aby papuga zadała inne pytanie. Uzupełnij puste miejsca w przykładzie!
                    **Dodatkowo** Możesz także pozwolić papudze zadawać wiele pytań. Wpisz więcej wierszy kodu pod własnym kodem.
                example_code_2: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Jestem papuga Hedy
                    {ask} Jak masz na imię?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Stwórz swoją własną cyfrową papugę, która będzie po tobie powtarzać cokolwiek powiesz!
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    imię {is} {ask} jak masz na imię?
                    {print} imię
                    {sleep}
                    {print} ara
                    {sleep}
                    {print} imię
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Możesz użyć zmiennych, aby papuga powiedziała więcej niż tylko twoje imię. Czy możesz uzupełnić kod?
                start_code: '{print} Jestem papuga Hedy!'
            3:
                story_text: |
                    Naucz swoją papugę nowego słowa z poleceniem `{add}`.
                    ### Ćwiczenie
                    Czy potrafisz sprawić, żeby papuga powiedziała kilka słów?
                example_code: |
                    ```
                    słowa {is} ara, Hedy
                    {print} Naucz twoją papugę!
                    nowe_słowo {is} {ask} Jakiego słowa chcesz ja nauczyć?
                    {add} nowe_słowo {to_list} słowa
                    {print} 🧒 Powiedz nowe_słowo , Hedy!
                    {print} 🦜 słowa {at} {random}
                    ```
                start_code: '# tutaj umieść swój kod'
            4:
                story_text: |
                    W tym poziomie musimy użyć cudzysłowy z poleceniami `{ask}` and `{print}`.
                    ### Ćwiczenie
                    Dokończ kod poprzez dodanie cudzysłowów w pustych miejscach.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} _ Wytresuj swoją papugę! _
                    nowe_słowo {is} {ask} _ Jakie słowo chciałbyś ją nauczyć? _
                    {add} nowe_słowo {to_list} słowa
                    {print} _ 🧒 Powiedz _ nowe_słowo _, Hedy!_
                    {print} _ 🦜 _ słowa {at} {random}
                    ```
                start_code: '# tutaj umieść swój kod'
            5:
                story_text: |
                    Daj swojej papudze nagrodę jeżeli powie poprawne słowo.

                    ### Ćwiczenie
                    Dokończ kod uzupełniając 4 brakujące polecenia.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} 'Wytresuj swoją papugę!'
                    nowe_słowo {is} {ask} 'Jakie słowo chciałbyś ją nauczyć?'
                    {add} nowe_słowo {to_list} słowa
                    powiedziane_słowo {is} słowa {at} {random}
                    {print} '🧒 Powiedz ' nowe_słowo ', Hedy!'
                    {print} '🦜 ' powiedziane_słowo
                    _ powiedziane_słowo {is} nowe_słowo _ '🧒 Świetnie, Hedy! 🍪'
                    _ _ '🧒 Nie, Hedy! Powiedz ' nowe_słowo
                    ```
                start_code: '# tutaj umieść swój kod'
    piggybank:
        name: Skarbonka
        default_save_name: Skarbonka
        description: Policz swoje kieszonkowe!
        levels:
            12:
                story_text: |
                    W tej przygodzie nauczysz się, jak zrobić cyfrową skarbonkę.
                    Dokończ kod, aby obliczyć, ile masz pieniędzy i jak długo musisz oszczędzać, aby kupić to, co chcesz!
                example_code: "```\n{print} 'Cyfrowa skarbonka'\nżyczenie = {ask} 'Co chciałbyś kupić?'\ncena = {ask} 'Ile to kosztuje?'\nzaoszczędzone = {ask} 'Ile pieniędzy już zaoszczędziłeś?'\nkieszonkowe = {ask} 'Ile kieszonkowego dostajesz na tydzień?'\ndo_zaoszczędzenia = cena - zaoszczędzone\n\
                    tygodnie = do_zaoszczędzenia / kieszonkowe \n{print} 'Możesz kupić ' _ ' za ' _ ' tygodni.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            14:
                story_text: |
                    Na tym poziomie możesz pozwolić Hedy powiedzieć ci, czy zaoszczędziłeś wystarczająco dużo pieniędzy!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# umieść tutaj swój kod'
    pressit:
        name: Naciśnięcia klawiszy
        default_save_name: Naciśnięty
        description: Spróbuj przypisać przycisk klawiatury do polecenia!
        levels:
            5:
                story_text: |
                    W tym poziomie pojawia się kolejne nowe polecenie: `{pressed}`!
                    Dzięki poleceniu `{pressed}` możesz użyć przycisków na swojej klawiaturze by kontrolować które linie zostaną użyte.

                    ### Ćwiczenie
                    Spójrz na przykładowy kod i dodaj jedną więcej linię która reaguje na naciśnięcie przycisku.
                example_code: |
                    ```
                    {print} 'Wolisz dobre (d) czy złe (z) zakończenie?'
                    {if} d {is} {pressed} {print} 'I żyli długo i szczęśliwie ❤'
                    {else} {print} 'Książę został zjedzony przez hipopotama 😭'
                    ```
                story_text_2: |
                    Możesz również przypisać polecenia żółwia do klawiszy.

                    ### Ćwiczenie
                    Skopiuj linie kilka razy by móc stworzyć większy rysunek.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# tutaj wpisz swój kod'
            7:
                story_text: |
                    Skoro już nauczyłeś się polecenia `{repeat}` możesz naciskać klawisze wiele razy! Dzięki temu możesz sprawić, że żółw będzie chodził do przodu i obracał się.

                    ### Ćwiczenie
                    Przykładowy kod sprawdza tylko raz, czy klawisz jest naciśnięty. Zmień kod tak, aby można było naciskać klawisze wiele razy i użyj kodu, aby narysować coś ładnego.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# umieść tutaj swój kod'
            9:
                story_text: |-
                    Teraz gdy wiesz, jak łączyć instrukcje, możesz utworzyć narzędzie pisania bezwzrokowego za pomocą `{pressed}`.

                    ### Ćwiczenie
                    Dokończ kod. Za każdym razem program ma wybrać losową literę, którą należy nacisnąć. Otrzymujesz punkt za prawidłowy klawisz i odjęcie dwóch punktów za niewłaściwy klawisz.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: "```\npunkty = 1\nlitery = a, b, c, d, e\n{repeat} 10 {times}\n    litera = _ _ _\n    {print} 'Naciśnij literę ' litera \n    {if} litera {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# umieść tutaj swój kod'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## Komenda print
                    Możesz wypisać tekst na ekran używając komendy `{print}`.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Mistrz Quizu
        default_save_name: Mistrz Quizu
        description: Stwórz własny quiz!
        levels:
            14:
                story_text: |
                    W tej przygodzie możesz stworzyć własny quiz! Wypełnij puste pola, dodaj więcej pytań i ciesz się własnym quizem!
                    Możesz zrobić quiz o wszystkim, co lubisz: swoim hobby, ulubionym zwierzęciu, ulubionej książce lub w ogóle o czymkolwiek!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# umieść tutaj swój kod'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restauracja
        default_save_name: Restauracja
        description: Stwórz swoją własną wirtualną restaurację
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć swoją własną wirtualną restaurację i przyjmować zamówienia gości.
                example_code: "``` \n{print} Witaj w restauracji Hedy \U0001F35F\n_ Co chcesz zamówić?\n {echo} A więc chcesz zamówić\n{print} Dziękuje za zamówienie!\n{print} Zaraz podamy!\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wejściowy, klikając żółty przycisk.
                    Najpierw wpisz w puste miejsca właściwe polecenia, aby kod działał poprawnie.
                    Następnie dodaj co najmniej 4 kolejne linie kodu do programu restauracji.
                    Zapytaj klienta, co chciałby wypić i czy chce zapłacić gotówką, czy kartą.
                    Na koniec wymyśl jakiś miły sposób pożegnania się z klientem.
                start_code: '# umieść swój kod tutaj'
            2:
                story_text: |
                    Na poziomie 2 możesz rozbudować swoją restaurację za pomocą zmiennych. Na poziomie 1 Hedy mogła wyświetlić {echo} zamówienie tylko raz i pamiętała tylko ostatnią zamówioną rzecz.
                    Teraz możesz używać zmiennych, a Hedy może zapamiętać zarówno co zamówiłeś do jedzenie, jak i do picia!
                example_code: |
                    ```
                    {print} Witamy w restauracji Hedy!
                    {print} Dziś serwujemy pizzę lub lasagne.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    dodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?
                    {print} Juz przygotowuje jedzenie z dodatki!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj swój własny kod restauracji z poprzedniego poziomu do ekranu wejściowego poniżej.
                    Popraw kod zastępując komendy `{ask}` i `{echo}` i używając zmiennych, tak jak nauczyłeś się w tym poziomie.

                    Teraz gdy Twój kod znów działa, czas dodać coś jeszcze.
                    Spójrz na ostatnią linię przykładowego kodu: `{print} jedzenie z polewa jest w drodze!`.
                    W tej jednej linii zostały użyte 2 zmienne do stworzenia podsumowania zamówienia.
                    Teraz dodaj własne podsumowanie zamówionego przez klienta jedzenia i napojów.

                    **Dodatkowo** Teraz gdy nauczyłeś się używać zmiennych, możesz użyć tylu zmiennych w jednej linii, ile tylko zechcesz. Czy możesz dodać więcej zmiennych do swojego kodu, jak np. zjeść w lokalu lub na wynos, gotówką lub kartą, ze słomką lub bez itp?
                start_code: '# umieść swój tutaj'
            3:
                story_text: |
                    Masz problem z podjęciem decyzji, co chcesz zjeść na obiad? Możesz pozwolić Hedy wybrać za Ciebie!
                    Po prostu dodaj listę swoich ulubionych (lub najmniej ulubionych) potraw, a Hedy może losowo wybrać Twój obiad.
                    Możesz się też trochę zabawić, pozwalając Hedy wybrać także cenę za Twój obiad! Co dostaniesz?
                example_code: |
                    ```
                    dania {is} spaghetti, brukselka, hamburgery
                    {print} Dziś wieczorem będziesz miał dania {at} {random}!
                    ceny {is} 1 złoty, 10 złotych, 100 złotych
                    {print} To będzie ceny {at} {random} proszę.
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną wersję losowej restauracji.
                    Zrób sam listę przystawek, dań głównych, deserów, napojów i cen.
                    Następnie użyj komend `{print}` i `{at} {random}`, aby powiedzieć klientowi, co będzie w jego menu dziś wieczorem.
                example_code_2: |
                    ```
                    {print} Witaj w swojej własnej, losowej restauracji!
                    przystawki {is} _
                    dania główne {is} _
                    desery {is} _
                    napoje {is} _
                    ceny {is} _
                    _
                    ```
                start_code: '# umieść swój kod tutaj'
            4:
                story_text: |
                    W tym poziomie musisz używać cudzysłowu, gdy używasz polecenia `{print}` lub `{ask}`.

                    ### Ćwiczenie
                    Dodaj cudzysłów do tego kodu, aby działał! Uważaj: zmienne nie powinny być wewnątrz cudzysłowu.
                example_code: |
                    ```
                    _ Dodaj cudzysłów do tego kodu _
                    {print} Witamy w restauracji Chez Hedy!
                    {print} Dzisiaj serwujemy pizzę lub lasagnę.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    polewa {is} {ask} Czy chciałbyś na tym mięso lub warzywa?
                    {print} jedzenie z polewa jest w drodze!
                    napoje {is} {ask} Co chciałbyś do tego wypić?
                    {print} Dziękujemy za zamówienie.
                    {print} Twoje jedzenie i napoje będą na miejscu!
                    ```
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: |
                    Na tym poziomie polecenie `{if}` pozwala Ci na `{ask}` (zapytanie) klientów i udzielanie różnych odpowiedzi.
                    W poniższym przykładzie widać, że można `{ask}` klienta `{if}` chce usłyszeć specjały, a Hedy może odpowiednio odpowiedzieć.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy!'
                    specjał {is} {ask} 'Czy chciałbyś usłyszeć nasze dzisiejsze specjały?'
                    {if} specjał {is} tak {print} 'Dzisiaj specjalnością jest kurczak piri piri i ryż.' {else} {print} 'Nie ma problemu.'
                    jedzenie {is} {ask} 'Co chciałbyś zjeść?'
                    {print} 'Jedno ' jedzenie ', zaraz się pojawi!'
                    napój {is} {ask} 'Co chciałbyś do tego pić?'
                    {if} napój {is} cola {print} 'Przepraszam, skończyła nam się cola!' {else} {print} 'Świetny wybór!'
                    cokolwiek {is} {ask} 'Czy chciałbyś coś jeszcze?'
                    {print} 'Pozwól, że powtórzę twoje zamówienie…'
                    {print} 'Jedno ' jedzenie
                    {if} napój {is} cola {print} 'i…' {else} {print} 'jeden ' napój
                    {if} cokolwiek {is} nie {print} 'To wszystko!' {else} {print} 'jeden ' cokolwiek
                    {print} 'Dziękujemy za zamówienie i smacznego!'
                    ```
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki do obliczenia całkowitej ceny zamówienia klienta, co może sprawić, że Twoja wirtualna restauracja będzie bardziej realistyczna.
                example_code: |
                    Możesz utworzyć prosty kod restauracji, taki jak ten:
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    {print} 'Oto nasze menu:'
                    {print} 'Nasze dania główne to pizza, lasagne lub spaghetti'
                    główne = {ask} 'Które danie główne chcesz?'
                    cena = 0
                    {if} główne {is} pizza cena = 10
                    {if} główne {is} lasagne cena = 12
                    {if} główne {is} spaghetti cena = 8
                    {print} 'Zamówiłeś ' główne
                    {print} 'To będzie ' cena ' złotych.'
                    {print} 'Dziękuję, smacznego!'
                    ```
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: |
                    Na tym poziomie nauczyłeś się używać polecenia `{repeat}` do powtórzenia linii kodu określoną ilość razy.
                    Możesz użyć tego w swojej restauracji do `{ask}` wielu osób, co chcą zjeść.

                    ### Ćwiczenie
                    Czy możesz uzupełnić kod? Hedy musi powtarzać to pytanie tyle razy, ilu jest ludzi. Więc jeśli jest 5 osób, pytanie należy zadać 5 razy.
                    **Dodatkowo** Rozszerz swój kod o więcej pytań, na przykład o napoje lub sos.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołącza?'
                    ```
                start_code: '# umieść tutaj swój kod'
            8:
                story_text: |
                    Na tym poziomie możesz rozbudować swoją wirtualną restaurację, powtarzając wiele linii kodu. W ten sposób:
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Chez Hedy!'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołączy?'
                    {print} 'Świetnie!'
                    {repeat} osoby {times}
                        jedzenie = {ask} 'Co chcieliby Państwo zamówić?'
                        {print} jedzenie
                    {print} 'Dziękuję za zamówienie!'
                    {print} 'Smacznego!'
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Ten kod można rozszerzyć o więcej pozycji w menu, na przykład oferując napoje i/lub wiele dań, lub deserów. Dodaj jeszcze co najmniej jeden element.
                    **Dodatkowo** Dodaj jeszcze więcej elementów, tyle opcji, ile chcesz!
                start_code: '# umieść tutaj swój kod'
            9:
                story_text: "Na tym poziomie możesz użyć wcięć, aby Twoja restauracja była bardziej realistyczna i zabawniejsza!\n\n### Ćwiczenie\nWcięcie zostało usunięte z przykładowego kodu.\nCzy potrafisz określić, ile wcięć potrzebuje każda linia, aby kod działał poprawnie?\nJeśli klient zamawia\
                    \ pizzę, Hedy nie powinna pytać, jakiego sosu chce klient.\n\n**Dodatkowo** Restauracja nie posiada wszystkich sosów. Sporządź listę dostępnych sosów i przy każdym zamówieniu napisz, czy je sprzedajesz. <br>\n**Dodatkowo** Pizze mają dodatki. Zapytaj klientów, czego chcą.<br>\n**Dodatkowo**\
                    \ Czy klienci chcą drinka? Zapytaj ich też! <br>                    \n"
                example_code: "```\n{print} 'Witamy w Restauracji Chez Hedy!'\nosoby = {ask} 'Ile osób dzisiaj do nas dołączy?'\n{print} 'Świetnie!'\ncena = 0\n{repeat} osoby {times}\n_ jedzenie = {ask} 'Co chciałbyś zamówić?'\n_ {print} jedzenie \n_ {if} jedzenie {is} frytki\n_ cena = cena + 3\n_ sos\
                    \ = {ask} 'Jaki sos chciałbyś mieć do swoich frytek?'\n_ {if} sos {is} nie\n_ {print} 'bez sosu'\n _ {else}\n_ cena = cena + 1\n_ {print} 'z ' sos\n_ {if} jedzenie {is} pizza\n _ cena = cena + 4\n{print} 'To będzie ' cena ' złotych.'\n{print} 'Smacznego!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: |
                    Na tym poziomie nauczysz się, jak łatwo pytać o zamówienia na różne dania.

                    ### Ćwiczenie 1
                    Zakończ kod za pomocą `{ask}` w pustych miejscach, tak aby klient był pytany, co chce zjeść w ramach każdego dania.
                example_code: "```\ndania = przystawka, danie główne, deser\n{for} danie {in} dania \n    {print} 'Jakie jest Państwa zamówienie na ' danie '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Oczywiście można też zamówić dla wielu osób!
                    Czy możesz dodać odpowiednią ilość wcięć przed każdą linią, aby kod działał poprawnie?
                    Wskazówka: niektóre wiersze w ogóle nie wymagają wcięcia.
                example_code_2: "```\n_ dania = przystawka, danie główne, deser\n_ imiona = Szymon, Anna\n_ {for} imię {in} imiona \n_ {for} danie {in} dania \n_ jedzenie = {ask} imię ', co chcesz zjeść jako swoje ' danie '?'\n_ {print} imię ' zamawia ' jedzenie ' jako ich ' danie\n```\n"
                start_code: dania = przystawka, danie główne, deser
            11:
                story_text: |
                    Możemy użyć `{for}` z `{range}` do wypisania zamówień od wielu klientów w uporządkowany sposób.

                    ### Ćwiczenie
                    Dokończ kod restauracji, aby móc poprosić o zamówienie wielu osób. Za każdym razem drukuj numer zamówienia: 'Zamówienie 1', 'Zamówienie 2' itd.
                    Nie jesteś pewien, jak się do tego zabrać? Zerknij na swój kod poziomu 8.

                    **Dodatkowo** Na poziomie 9 restauracja stosowała również ceny. Tutaj też możesz to dodać!
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Hedy!'
                    osoby = {ask} 'Dla ilu osób chciałbyś zamówić?'
                    {print} 'Więc chcesz zamówić dla ' osoby ' osób.'
                    {print} 'Chodźmy!'
                    ```
                start_code: '# umieść tutaj swój kod'
            12:
                story_text: |
                    Od tego poziomu możesz używać liczb dziesiętnych, aby menu było bardziej realistyczne.

                    ### Ćwiczenie
                    Czy możesz wymyślić kod, aby dać znajomym i rodzinie 15% zniżki?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: |
                    Na tym poziomie możemy wykorzystać nowe komendy do ulepszenia naszej restauracji.
                    Używamy `{and}`, aby zobaczyć {if} dwie rzeczy są w obu przypadkach.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: '# umieść tutaj swój kod'
            15:
                story_text: |
                    Dzięki `{while}` możesz mieć pewność, że Twoi klienci będą mogli dodawać zamówienia, dopóki ich nie skończą.
                example_code: "```\n{print} 'Witamy w McHedy'\nwięcej = 'tak'\n{while} więcej == 'tak'\n    zamówienie = {ask} 'Co chcesz zamówić?'\n    {print} zamówienie \n    więcej = {ask} 'Czy chciałby Pan/Pani zamówić coś jeszcze?'\n{print} 'Dziękuję!'\n```\n"
                start_code: '# umieść tutaj swój kod'
    rock:
        name: Papier, kamień, nożyce
        default_save_name: Kamień
        description: Zrób własną grę w papier, kamień, nożyce
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz zacząć tworzyć grę papier, kamień, nożyce.

                    Za pomocą  `{ask}` możesz zapytać a za pomocą `{echo}` możesz powtórzyć co zostało wybrane.
                example_code: |
                    ```
                    {print} Co wybierasz?
                    {ask} wybierz: papier, kamień lub nożyce
                    {echo} a więc wybrałeś:
                    ```
                story_text_2: |
                    ### Wyzwanie
                    Zamiast używać słów, możesz również użyć emotikonów: ✊✋✌
                    Czy możesz poprawić kod, aby używać emotikonów?
                example_code_2: |
                    ```
                    {print} co wybierasz?
                    {ask} wybierz z _
                    {echo} a więć wybrałeś:
                    ```
                start_code: |
                    {print} Witaj w swoim własnym programie kamień, papier, nożyce!
                    {ask} Co wybierzesz?
            2:
                story_text: |
                    Na tym poziomie możesz poćwiczyć używanie zmiennych, dzięki będziesz mógł stworzyć grę w papier, kamień, nożyce w następnym poziomie!
                example_code: |
                    ```
                    _ {is} {ask} papier, kamień czy nożyce?
                    {print} Ja wybrałam _
                    ```
                start_code: '# umieść swój kod tutaj'
            3:
                story_text: |
                    Na tym poziomie możemy wprowadzać listy i wybierać z nich rzeczy.
                    Najpierw tworzysz listę za pomocą `{is}`. Następnie możesz pozwolić komputerowi wybrać coś z listy za pomocą `{at} {random}`.
                    Na przykład, możesz pozwolić komputerowi wybrać z listy papier, kamień lub nożyce.
                example_code: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} możliwości  {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod i wypełnij puste pola, aby dodać dodatkowego gracza do tej gry.

                    **Dodatkowo** Teraz gracze nazywają się po prostu gracz 1 i gracz 2. Czy możesz dodać polecenia pytania (oczywiście ze zmiennymi), aby zapytać graczy o imiona?
                    W ten sposób możesz stworzyć taki wynik, na przykład: Jacek wybiera... papier
                example_code_2: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} gracz 1 wybiera... możliwości  {at} {random}
                    {print} gracz 2 _
                    ```
                start_code: '{print} Witamy, w twojej własnej grze w papier, kamień, nożyce!'
            4:
                story_text: |
                    Na tym poziomie możemy dodatkowo zaprogramować kamień, papier, nożyce. Jeśli chcesz dodać tekst, tutaj również musisz użyć cudzysłowów.
                    Czy uzupełnisz kod, wprowadzając poprawne polecenia lub znaki w podkreśleniach?
                start_code: '{print} ''Witamy w twoim własnym programie kamień, papier, nożyce!'''
            5:
                story_text: |
                    Na tym poziomie możemy ustalić, kto wygrał.
                    Do tego potrzebny jest nowy kod `{if}`.

                    Zapisz swój wybór pod wybraną nazwą i wybór komputera jako wybór komputera.
                    Następnie możesz użyć `{if}`, aby sprawdzić, czy są takie same, czy różne.
                    Dokończysz kod?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
                start_code: '{print} ''Witamy w twoim własnym programie kamień, papier, nożyce!'''
            9:
                story_text: "W tym poziomie można zaprogramować całą grę kamień, papier, nożyce poprzez zagnieżdżanie poleceń `{if}`. \n\n### Ćwiczenie\nCzy potrafisz dokończyć kod? Program musi powiedzieć, kto wygrał dla każdej kombinacji.\n\n**Dodatkowo** Chcesz zagrać w więcej niż jedną grę? Rozwiń\
                    \ kod tak, aby można było rozegrać wiele rund. Możesz nawet użyć `{ask}`, aby zapytać użytkownika, ile rund chce zagrać.\n"
                example_code: "```\nopcje {is} papier, kamień, nożyce\ntwój_wybór {is} {ask} 'Co wybierasz?'\n{print} 'Wybrałeś ' twój_wybór \nwybór_komputera {is} opcje {at} {random}\n{print} 'Komputer wybrał ' wybór_komputera \n{if} wybór_komputera {is} twój_wybór \n    {print} 'remis'\n{if} wybór_komputera\
                    \ {is} kamień\n    {if} twój_wybór  {is} papier\n        {print} 'Wygrałeś!'\n    {if} twój_wybór  {is} nożyce\n        {print} 'Przegrałeś!'\n#dokończ program\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: |
                    Czujesz się zbyt leniwy, by samemu zagrać w grę? Pozwól Hedy zagrać w nią za Ciebie!
                    Wystarczy, że wypełnisz imiona graczy, a oni dostaną losowy wybór.

                    ### Ćwiczenie 1
                    Zakończ program, wypełniając listę nazwisk.

                    ### Ćwiczenie 2
                    Dodaj gracza komputerowego, który wybiera z każdym graczem.

                    **Dodatkowo** Wróć do swojego kodu i zdecyduj, kto wygrywa w każdej rundzie: komputer czy wymieniona osoba.
                example_code: |
                    ```
                    wybory = kamień, papier, nożyce
                    gracze = _
                    {for} gracz {in} gracze
                         {print} gracz ' wybiera ' wybory {at} {random}
                    ```
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: |
                    Dzięki poleceniu `{and}` możesz skrócić swój kod kamień, papier, nożyce! Sprawdź poniższy przykładowy kod i spróbuj go dokończyć.
                example_code: |
                    ```
                    opcje = 'kamień', 'papier', 'nożyczki'
                    twój_wybór = {ask} 'Co wybierasz?'
                    wybór_komputera = opcje {at} {random}
                    {print} 'Ty wybrałeś ' twój_wybór
                    {print} 'Komputer wybrał ' wybór_komputera
                    {if} wybór_komputera {is} twój_wybór
                        {print} 'Remis'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'papier'
                        {print} 'Ty wygrałeś!'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'nożyczki'
                        {print} 'Komputer wygrał!'
                    _
                    ```
                start_code: '# umieść tutaj swój kod'
            15:
                story_text: |
                    Graj, aż pokonasz komputer! Najpierw dokończ przykładowy kod...
                example_code: "```\nwygrana = 'nie'\nwybory = 'kamień', 'papier', 'nożyce'\n {while} wygrana == 'nie'\n    twój_wybór = {ask} 'Co wybierasz?'\n    wybór_komputera = wybory {at} {random}\n    {print} 'Ty wybrałeś' twój_wybór \n    {print} 'komputer wybrał ' wybór_komputera\n    {if}  wybór_komputera\
                    \ == twój_wybór\n        {print} 'Remis!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'nożyce'\n        {print} 'Przegrywasz!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'papier'\n        {print} 'Wygrywasz!'\n        wygrana = 'tak'\n_\n```\n"
                start_code: '# umieść tutaj swój kod'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: Super Szpieg
        default_save_name: language
        description: Stwórz swój kod szpiegowski
        levels:
            12:
                story_text: |
                    W tej przygodzie możesz stworzyć swój własny kod superszpiegowski. Zaszyfruj wiadomość, którą może rozszyfrować tylko właściwy agent.
                    Jeśli wróg spróbuje złamać kod, otrzyma fałszywe informacje, aby zmarnować swój czas.

                    ### Ćwiczenie
                    Utwórz własny tajny kod dla swojego superszpiega. Czy możesz sprawić, by składał się z jeszcze większej liczby zmiennych?
                example_code: |
                    ```
                    imię {is} {ask} 'Jak masz na imię?'
                    if imię {is} 'Agent007'
                        a {is} 'Jedź na lotnisko '
                    {else}
                        a {is} 'Idź na dworzec kolejowy'
                    hasło {is} {ask} 'Jakie jest hasło?'
                    {if} hasło {is} 'TOPSECRET'
                        b {is} 'jutro o 02.00'
                    {else}
                        b {is} 'dziś o 10.00'
                    {print} a + b
                    ```
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: |
                    Czy potrafisz wpisać właściwe polecenie w pustym miejscu? Mózg: Superszpieg musi poprawnie odpowiedzieć na OBA pytania, zanim zdobędzie poufne informacje!
                example_code: |
                    ```
                    imię {is} {ask} 'Jak masz na imię?'
                    hasło {is} {ask} 'Jakie jest twoje hasło?'
                    {if} imię {is} 'Agent007' _ hasło {is} 'TOPSECRET'
                        {print} 'Jedź na lotnisko o 02.00'
                    {else}
                        {print} 'Idź na dworzec o 10.00'
                    ```
                start_code: '# umieść tutaj swój kod'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Zaśpiewaj piosenkę!
        default_save_name: Piosenka
        description: Wyświetl piosenkę
        levels:
            6:
                story_text: "Piosenki często zawierają dużo powtórzeń. Czasami te powtórzenia opierają się na liczeniu. \nPrzykładem jest dobrze znana angielska piosenka \"Butelki Piwa\" (ang. bottles of beer). Możesz zaprogramować tą piosenkę z odrobiną matematyki.\n\nWskazówka: Użyj funkcji \"czytaj\
                    \ na głos\" żeby Hedy zaśpiewał tą piosenkę!\n\n### Ćwiczenie\nMożesz teraz powtórzyć linie od 2 do 7 ile razy chcesz poprzez skopiowanie tych linii.\n"
                example_code: |
                    ```
                    wers = 99
                    {print} wers ' butelek piwa na ścianie'
                    {print} wers ' butelek piwa'
                    {print} 'Weź jedną i przekaż ją dalej'
                    wers = wers - 1
                    {print} wers ' butelek piwa na ścianie'
                    {sleep}
                    ```
                story_text_2: |
                    Ta piosenka dla dzieci odlicza od 5 małych małpek do 1 małpki.
                    Możesz zaśpiewać całą piosenkę jeżeli skopiujesz linie od 2 do 7 i wkleisz je poniżej kodu.
                example_code_2: |
                    ```
                    numer = 6
                    numer = numer - 1
                    {print} 'Skakało na łóżku małych małpek ' numer
                    {print} 'Nagle jedna spadła i potłukła się'
                    {print} 'Mama do doktora dzwoni i słyszy, że'
                    {print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'
                    {sleep}
                    ```
                start_code: '{print} ''Zacznijmy śpiewać!'''
            7:
                story_text: |
                    Piosenki często zawierają dużo powtórzeń, na przykład: Dziecko Rekin (ang. Baby Shark)! Jeżeli ją zaśpiewasz to będziesz śpiewać ten w kółko ten sam tekst:

                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark

                    ### Ćwiczenie
                    Możesz napisać piosenkę Dziecko Rekin przy użyciu polecenia `{repeat}`. Dokończ kod uzupełniając puste miejsca.
                    **Dodatkowe ćwiczenie** Po napisaniu piosenki Dziecko rekin możesz zaprogramować inne piosenki. Jest dużo piosenek z powtarzającym się tekstem.
                    Czy pamiętasz przynajmniej o jednej takiej piosence, i czy potrafisz ją zaprogramować?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Dziecko Rekin tututudutudu'
                    {print} 'Dziecko Rekin'
                    ```
                start_code: '{print} ''Dziecko Rekin'''
            8:
                story_text: |
                    W poprzednich poziomach programowałeś piosenkę "Butelki Piwa" (ang. Bottles of Beer). Bez użycia polecenia `{repeat}` musiałeś wiele razy skopiować wersy piosenki.
                    Na tym poziomie możesz powtórzyć ten wers 99 razy poprzez dodanie jednej prostej linii kodu.

                    ### Ćwiczenie
                    Dodaj odpowiednie polecenia w puste miejsca i upewnij się, że kod ma poprawne wcięcia.
                example_code: |
                    ```
                    wers = 99
                    _ 99 {times}
                        {print} wers ' butelek piwa na ścianie'
                        {print} wers ' butelek piwa'
                        {print} 'Weź jedną i przekaż ją dalej'
                        wers = wers - 1
                        {print} wers ' butelek piwa na ścianie'
                    ```
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: |
                    Dzięki `{for}` możesz wydrukować całą piosenkę „Baby Shark” (w tym wszystkie inne rekiny w rodzinie) w zaledwie 6 liniach!

                    ### Ćwiczenie 1
                    Czy możesz jeszcze bardziej skrócić kod „Baby Shark” za pomocą polecenia `{for}`? Dokończ przykładowy kod.
                example_code: "```\nrodzina = dziecko, mamusia, tatuś, babcia, dziadek\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ćwiczenie 2
                    Wypisz piosenkę „Pięć Małych Małpek skaczących po łóżku”. Wyszukaj tekst, jeśli go nie pamiętasz.

                    **Dodatkowo** Wydrukuj piosenkę „Stary MacDonald farmę miał” i upewnij się, że wszystkie zwierzęta wydają inny dźwięk, używając `{if}`.
                example_code_2: |
                    ```
                    małpki = 5, 4, 3, 2, 1
                    ```
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: |
                    Na tym poziomie możesz użyć `{for}` z `{range}`, aby tworzyć piosenki, które wykorzystują liczenie, takie jak 5 małych małpek.

                    ### Ćwiczenie 1
                    Wypełnij puste pola i spraw, aby kod działał! Jeśli nie pamiętasz tekstu piosenki, poszukaj go sam.

                    ### Ćwiczenie 2
                    Ostatnia linijka piosenki różni się od pozostałych. Wydrukuj ten wiersz wewnątrz `{for}` i użyj `{if}`, aby działał poprawnie.
                example_code: |
                    ```
                    _ małpki _ _ 5 _ 1
                        {print} małpki 'małe małpki skaczące po łóżku'
                        _
                    ```
                start_code: '# umieść swój kod tutaj'
            12:
                story_text: |
                    W tej piosence jeszcze prościej zaprogramujemy 'jeśli jesteś dziś szczęśliwy w dłonie klaszcz'. To wszystko dzięki temu, że wszystkie akcje możemy przypisać do zmiennej. Zobacz jak:

                    ### Ćwiczenie
                    Czy potrafisz dodać odpowiednią długość wcięcia do każdej linii kodu żeby ta piosenka była zaśpiewana poprawnie?
                    Wskazówka: Nie wszystkie linie kodu wymagają wcięcia.
                example_code: |
                    ```
                    akcje = 'w dłonie klaszcz', 'tupnij tak', 'klepnij się'
                    {for} akcja {in} akcje
                        {for} i {in} {range} 1 {to} 2
                            {print} 'jeśli jesteś dziś szczęśliwy'
                            {print} akcja
                        {print} 'jeśli jesteś dziś szczęśliwy, w sercu pokój masz prawdziwy'
                        {print} 'jeśli jesteś dziś szczęśliwy'
                        {print} akcja
                    ```
                start_code: '# umieść tutaj swój kod'
            16:
                story_text: |
                    Na tym poziomie możesz jeszcze szybciej zaprogramować utwór taki jak „Dziadek Fajną Farmę Miał”. Możesz połączyć odpowiednie zwierzę z odpowiednim dźwiękiem, po prostu umieszczając je w tym samym miejscu na liście.
                    „Morskie Opowieści” (ang.: Drunken Sailor) jest również szybko tworzony na tym poziomie. Potrzebujesz tylko 8 linii do całej piosenki, sprawdź to!
                example_code: |
                    ```
                    zwierzęta = ['Kurki', 'Krówki', 'Świnkę']
                    dźwięki = ['ko', 'muu', 'chrum']
                    {for} i {in} {range} 1 {to} 3
                        zwierzę = zwierzęta[i]
                        dźwięk = dźwięki[i]
                        {print} 'Dziadek fajną farmę miał'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' na niej hodował'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' ' dźwięk dźwięk ' tu'
                        {print} 'i ' dźwięk dźwięk ' tam'
                        {print} dźwięk 'tu,'
                        {print} dźwięk ' tam,'
                        {print} 'ciągle tylko ' dźwięk dźwięk
                    ```

                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy
                        {for} i {in} {range} 1 {to} 3
                            {print} wers
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
                start_code: '# umieść tutaj swój kod'
            18:
                story_text: |
                    W poziomie 16 stworzyliśmy piosenki przy użyciu list. Te programy nie będą już działały poprawnie w tym poziomie. Dwukropki z poziomu 17 i nawiasy kwadratowe z poziomu 18 muszą zostać dodane.

                    ### Ćwiczenie 1
                    Piosenka o pijanym marynarzu ma przykładowy kod, ale jeszcze nie działa.
                    Czy możesz się upewnić, że wszystko znów zacznie działać? By Ci pomóc powstawialiśmy _ w _niektórych_ miejscach z błędami.

                    ### Ćwiczenie 2
                    Teraz znajdź swoją piosenkę o dziadku z farmą z poziomu 16 i popraw ją.
                example_code: |
                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ wers _
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
                start_code: '# Tutaj wpisz swój kod'
    tic:
        name: Kółko i Krzyżyk
        default_save_name: Tic
        description: Zagrajmy w kółko i krzyżyk!
        levels:
            13:
                story_text: |
                    W tej przygodzie możesz zaprogramować grę w kółko i krzyżyk. Możesz grać w dwie osoby. Na zmianę wybierasz numer miejsca (1 - 9), na którym chcesz umieścić swój znak (x lub o).
                    Pierwszy gracz, który ułoży 3 w rzędzie (poziomo, pionowo lub ukośnie) wygrywa!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# umieść tutaj swój kod'
            14:
                story_text: |
                    Na poprzednich poziomach stworzyłeś grę w kółko i krzyżyk. Teraz nauczyłeś się używać znaku =, znaku == i znaku !=.
                    Możesz wykorzystać tę wiedzę w swojej nowej grze w kółko i krzyżyk, na przykład:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# umieść tutaj swój kod'
            15:
                story_text: |
                    Na tym poziomie możesz poprawić swoją grę w kółko i krzyżyk za pomocą pętli {while}. Za pomocą tej pętli możesz połączyć `{if} game != 'over'` i `{for} i {in} {range} 1 {to} 9` w jedną prostą linię.
                    Zobacz:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# umieść tutaj swój kod'
            17:
                story_text: |
                    Na poprzednich poziomach gra w kółko i krzyżyk miała irytującą cechę. Po każdym ruchu musiałeś się wpisać, czy wygrałeś, czy nie.
                    To sprawiło, że gra była grywalna, ale także dość powolna. Na tym poziomie poznaliśmy komendę `{elif}`, która może rozwiązać ten problem.
                    Używanie {elif}, aby Hedy mogła sprawdzić, czy gracz wygrał, czy nie, jest zabawne, ale wymaga również sporej liczby dodatkowych linii.

                    W przykładowym kodzie widać, że dodaliśmy wymagania do wygranej (3 miejsca w rzędzie poziomo, pionowo lub po przekątnej).
                    Możesz je znaleźć w liniach od 46 do 69. Możesz zobaczyć, że za każdym razem, gdy warunek jest spełniony (a więc jeśli gracz wygrał), zmienna gra jest ustawiona na „ponad”.
                    Oznacza to, że pętla {while} zostanie zatrzymana i gra się zakończy.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# umieść tutaj swój kod'
    turtle:
        name: Żółw
        default_save_name: Żółw
        description: Stwórz swoje własne obrazki
        levels:
            1:
                story_text: |
                    Możesz wykorzystać Hedy także do rysowania.  Rysując linie i obracając żółwia, możesz narysować kwadrat lub gwiazdę!

                    Pisząć `{forward}` możesz narysować linie. Liczba zaraz po komendzie mówi o tym ile ma przejść żółw rysując linie..`{turn} {right}` obraca żółwia o ćwierć obrotu w prawo (zgodnie z ruchem wskazówek zegara), `{turn} {left}` obraca w lewo (przeciwnie do ruchu wskazówek zegara).

                    Jeśli chcesz przesunąć żółwia do tył, możesz wykorzystać komendę `{forward}` ale z ujemną liczba. Na przykład `{forward} -100`

                    ### Ćwiczenie
                    To jest początek schodków. Możesz sprawić aby miały 5 stopni?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    Na tym poziomie możesz używać zmiennych aby uczynić żółwia interaktywnym. Na przykład możesz zapytać użytkownika ile kroków ma zrobić twój żółw.
                example_code: |
                    ```
                    kroki {is} {ask} Ile kroków ma wykonać żółw?
                    {forward} kroki
                    ```
                story_text_2: |
                    Również na poziomie 1 żółw mógł skręcać tylko w lewo lub w prawo. To trochę nudne!
                    Na poziomie 2 może obracać się we wszystkich kierunkach.

                    Użyj liczby 90, aby obrócić o żółwia o ćwierć obrotu. Wielkość obrotu liczby w stopniach. Pełny obrót to 360 stopni.

                    ### Ćwiczenie
                    Czy możesz zrobić figurę za pomocą tego kodu? Może trójkąt lub okrąg?
                example_code_2: |
                    ```
                    {print} Rysowanie kształtu
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                start_code: |-
                    {print} Wyścig żółwi!
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
            3:
                story_text: |
                    Na tym poziomie możesz użyć `{at} {random}` podczas rysowania żółwiem. Losowy wybór sprawia, że żółw za każdym razem idzie inną ścieżką.
                    Użyj `{at} {random}`, aby wybrać wartość z listy.
                    ### Ćwiczenie
                    Czy możesz skopiować i wkleić linie 2 i 3, żeby stwożyć dłuższą losową ścieżkę?
                example_code: |
                    ```
                    kąty {is} 10, 50, 90, 150, 250
                    {turn} kąty {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    kąty {is} 10, 50, 90, 150, 250
                    {turn} kąty {at} {random}
                    {forward} 25
            4:
                story_text: |
                    Na poziomie 4 musisz użyć cudzysłowów z poleceniami `{print}` oraz `{ask}`. To samo się dotyczy rysowania!
                example_code: |
                    ```
                    {print} _ Rysujemy figury _
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    Możesz również zmienić kolor rysowanych linii przy użyciu polecenia `{color}`. Sprawdź przykładowy program.
                    Możesz również użyc polecenia `{color} {white}` żeby zrobić "niewidoczne" linie. Możesz użyć tych "niewidocznych" linii, żeby przesunąć żółwia w inne miejsce na ekranie zanim zaczniesz rysować.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Rysujemy figury'
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
            5:
                story_text: |
                    Na poziomie 5 możesz dokonywać wyboru przy użyciu polecenia `{if}`. Przykładem takiego wyboru byłby wybór pomiędzy różnymi typami figur do narysowania.
                example_code: |
                    ```
                    {print} 'Rysowanie Figur'
                    figura {is} {ask} 'Chcesz kwadrat czy trójkąt?'
                    {if} figura {is} trójkąt kąt {is} 120
                    {else} kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Wpisz poprawne liczby w tym kodzie tak by zaczął działać.
                    Gdy to już zrobisz, możesz spróbować dodać możliwość cofania się.

                    **Dodatkowo** Zamiast używać „prawo” i „lewo” zmień program by używał „Północ”, „Wschód”, „Południe” i „Zachód”.
                    W ten sposób możesz dodać nawet więcej kierunków, jak na przykład, „Północny wschód” czy „Południowy zachód”.
                example_code_2: |
                    ```
                    kierunek {is} {ask} 'Chcesz iść w „prawo”, w „lewo” czy „naprzód”?'
                    {if} kierunek {is} lewo {turn} _
                    {if} kierunek {is} prawo {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} 'Rysujemy figury'
                    figura {is} {ask} 'Czy chciałbyś narysować kwadrat czy też trójkąt?'
                    {if} figura {is} trójkąt kąt {is} 120 {else} kąt {is} 90
                    {turn} kąt
                    {forward} 25
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki żeby narysować różne figury.
                    Być może pamiętasz ze szkoły, że obrócenie się dookoła jest tym samym co obrócenie się o 360 stopni. Jeżeli tego nie wiedziałeś to teraz już wiesz!
                    Z tego też powodu już wiesz dlaczego gdy rysujemy kwadrat to obracamy się o 90 stopni. Jako, że kwadrat ma cztery boki pod kątem prostym to znaczy że kąt pomiędzy nimi to 90 stopni - 360 stopni podzielone przez 4 (boki) to 90 stopni.
                    Dzięki temu, że w Hedy możesz przeprowadzać obliczenia matematyczne, możesz tez rysować wszystkie figury jakie tylko chcesz!
                example_code: "```\nkątów = {ask} 'Ile chcesz kątów?'\nkąt = 360 / kątów\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50 \n{turn} kąt\n```\n"
                start_code: '{print} ''Rysujemy figury'''
            8:
                story_text: |
                    Dzięki naszej nowo nabytej umiejętności powtarzania wielu linii kodu możemy rysować figury w jeszcze prostszy sposób.
                    Wystarczy, że ustawimy kąt tylko raz i potem użyjemy go jako zmienną wewnątrz polecenia `{repeat}`.

                    ### Ćwiczenie 1
                    Przykładowy kod tworzy kwadrat. Zmień kod tak, aby tworzył inną figurę, np. trójkąt lub sześciokąt.
                    Wymaga to zmiany w dwóch liniach kodu.
                    Podpowiedź: Całe koło to 360 stopni.

                    ### Ćwiczenie 2
                    Teraz stwórz rysunek składający się z co najmniej dwóch wielokątów.
                example_code: |
                    ```
                    kąt = 90
                    {repeat} 4 {times}
                        {turn} kąt
                        {forward} 50
                    ```
                story_text_2: |
                    **(dodatkowe zadanie)** Możemy teraz ulepszyć program, który rysuje różne figury. Donończ kod i możesz narysować dowolny wielokąt, który chcesz!
                example_code_2: |
                    ```
                    figura = {ask} 'Ile kątów mam narysować?'
                    kąt = 360 / figura
                    {repeat} figura {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: figura = {ask} 'Ile kątów mam narysować?'
            9:
                story_text: |
                    Skoro potrafimy używać `{repeat}` wewnątrz `{repeat}`, możemy tworzyć bardziej złożone figury.

                    ### Ćwiczenie 1
                    Ten kod tworzy trzy czarne trójkąty, zmień to na pięć różowych kwadratów.

                    **(dodatkowe zadanie)** Stwórz własną figurę składającą się z co najmniej dwóch różnych kształtów.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: Nowy Rok
        default_save_name: Odliczanie do Nowego Roku
        description: Odliczanie do Nowego Roku!
        levels:
            11:
                story_text: |
                    Na tym poziomie możesz użyć komendy `{for}` liczba `{in}` `{range}`, aby odliczać czas do Nowego Roku.

                    ### Ćwiczenie
                    Wypełnij puste pola i spraw, aby kod działał!
                example_code: |
                    ```
                    {for} liczba {in} {range} _ {to} _
                        {print} liczba
                    {print} 'Szczęśliwego Nowego Roku!'
                    ```
                start_code: '# tutaj umieść swój kod'
