adventures:
    story:
        name: –Ü—Å—Ç–æ—Ä—ñ—è
        default_save_name: –Ü—Å—Ç–æ—Ä—ñ—è
        description: –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É —ñ—Å—Ç–æ—Ä—ñ—é
        levels:
            1:
                story_text: |
                    –ù–∞ –ø–µ—Ä—à–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑ —ñ–Ω—à–∏–º –≥–æ–ª–æ–≤–Ω–∏–º –≥–µ—Ä–æ—î–º, —è–∫–æ–≥–æ –≤–∏ –≤–≤–æ–¥–∏—Ç–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ.

                    –£ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `{ask}` —ñ –∑–∞–ø–∏—Ç–∞–π—Ç–µ, —Ö—Ç–æ –±—É–¥–µ –≥–æ–ª–æ–≤–Ω–∏–º –≥–µ—Ä–æ—î–º —ñ—Å—Ç–æ—Ä—ñ—ó.

                    –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ –ø–æ—á–Ω—ñ—Ç—å –∑ `{print}`, —è–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–≤–µ—Å—Ç–∏ –Ω–∞ –µ–∫—Ä–∞–Ω.
                    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `{echo}`, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ, —â–æ–± –≤–∞—à –≥–æ–ª–æ–≤–Ω–∏–π –≥–µ—Ä–æ–π –∑–Ω–∞—Ö–æ–¥–∏–≤—Å—è –≤ –∫—ñ–Ω—Ü—ñ —Ä–µ—á–µ–Ω–Ω—è.
                example_code: |
                    ```
                    {ask} –ì–æ–ª–æ–≤–Ω–∏–º –≥–µ—Ä–æ—î–º —Ü—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó —î
                    {print} –ì–æ–ª–æ–≤–Ω–∏–π –≥–µ—Ä–æ–π —Ç–µ–ø–µ—Ä –∑–±–∏—Ä–∞—î—Ç—å—Å—è –ø—Ä–æ–≥—É–ª—è—Ç–∏—Å—è –ª—ñ—Å–æ–º
                    {echo} –í—ñ–Ω —Ç—Ä–æ—Ö–∏ –Ω–∞–ª—è–∫–∞–Ω–∏–π,
                    {print} –í—ñ–Ω —á—É—î –±–æ–∂–µ–≤—ñ–ª—å–Ω—ñ –∑–≤—É–∫–∏ –∑–≤—ñ–¥—É—Å—ñ–ª—å
                    {print} –í—ñ–Ω –±–æ—ó—Ç—å—Å—è, —â–æ —Ü–µ –ª—ñ—Å –∑ –ø—Ä–∏–≤–∏–¥–∞–º–∏
                    ```
                story_text_2: |
                    ### –í–ø—Ä–∞–≤–∞
                    –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –∑ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É.
                    –¶—è —ñ—Å—Ç–æ—Ä—ñ—è –Ω–µ –º–æ–∂–µ –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –∫–æ–¥—É.
                    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É `{ask}` —ñ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É `{echo}`.
                    –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ –±—É–¥—å-—è–∫—É —Ç–µ–º—É, —è–∫–∞ –≤–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è.
                    –Ø–∫—â–æ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç–∏ —Ç–µ–º—É, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –æ–¥–Ω–∏–º –∑ –Ω–∞—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: –ø–æ—Ö—ñ–¥ —É –∫—ñ–Ω–æ, —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –º–∞—Ç—á –∞–±–æ –¥–µ–Ω—å —É –∑–æ–æ–ø–∞—Ä–∫—É.
                start_code: '{print} –¢–≤–æ—è —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç'
            2:
                story_text: |
                    –£ 2 —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—é —â–µ –≤–µ—Å–µ–ª—ñ—à–æ—é. –Ü–º'—è –≤–∞—à–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è —Ç–µ–ø–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ –≤ –±—É–¥—å-—è–∫–æ–º—É –º—ñ—Å—Ü—ñ —Ä–µ—á–µ–Ω–Ω—è.

                    –î–ª—è —Ü—å–æ–≥–æ –≤–∞–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –∑–∞–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ. –¢–µ–ø–µ—Ä –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–∑–≤–∞—Ç–∏ —Å–≤–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è.

                    –ü–æ—Ç—ñ–º –≤–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ü–µ —ñ–º'—è –≤ –±—É–¥—å-—è–∫–µ –º—ñ—Å—Ü–µ –≤ —Ä–µ—á–µ–Ω–Ω—ñ.
                example_code: |-
                    ```
                    —ñ–º—è {is} {ask} –Ø–∫ –∑–≤–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è?
                    {print} —ñ–º—è –∑–∞—Ä–∞–∑ –ø–æ–±—ñ–∂–∏—Ç—å –ª—ñ—Å–æ–º
                    {print} i–º—è —Ç—Ä–æ—Ö–∏ –±–æ—ó—Ç—å—Å—è.
                    {print} –†–∞–ø—Ç–æ–º –≤—ñ–Ω —á—É—î –±–æ–∂–µ–≤—ñ–ª—å–Ω–∏–π —à—É–º...
                    {sleep}
                    {print} i–º—è –±–æ—ó—Ç—å—Å—è, —â–æ —Ü–µ –ª—ñ—Å –∑ –ø—Ä–∏–≤–∏–¥–∞–º–∏.
                    ```
                story_text_2: |
                    ### –í–ø—Ä–∞–≤–∞
                    –¢–µ–ø–µ—Ä –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–æ–¥–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –¥–æ –≤–∞—à–æ—ó –≤–ª–∞—Å–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó, —è–∫—É –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ.
                    –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ "–ú–æ—ó—Ö –ø—Ä–æ–≥—Ä–∞–º", –∑–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—é –ø—Ä–∏–≥–æ–¥—É –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥. –í—Å—Ç–∞–≤—Ç–µ –∫–æ–¥ —É –≤—ñ–∫–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ.

                    –¶–µ–π –∫–æ–¥ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ —É —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏ —â–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –∑–º—ñ–Ω–Ω—ñ.
                    –ó–º—ñ–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥–∏ `{ask}` —Ç–∞ `{echo}` —É –≤–∞—à–æ–º—É –∫–æ–¥—ñ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É, —è–∫—É –≤–∏ –≤–∏–≤—á–∏–ª–∏ —É —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ.

                    **–î–æ–¥–∞—Ç–∫–æ–≤–æ** –î–æ–¥–∞–π—Ç–µ –¥–æ –∫–æ–¥—É –∫–æ–º–∞–Ω–¥—É sleep, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–ø—Ä—É–≥—É —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó.
                start_code: '{print} –¢–≤–æ—è —ñ—Å—Ç–æ—Ä—ñ—è'
            3:
                story_text: |
                    –ù–∞ —Ç—Ä–µ—Ç—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—é –≤–µ—Å–µ–ª—ñ—à–æ—é. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞, —Ç–≤–∞—Ä–∏–Ω–∏ –∞–±–æ —ñ–Ω—à–æ—ó –ø–µ—Ä–µ—à–∫–æ–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–∞–∫:
                example_code: |
                    ```
                    —Ç–≤–∞—Ä–∏–Ω–∏ {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} –¢–µ–ø–µ—Ä –≤—ñ–Ω —á—É—î –∑–≤—É–∫–∏ —Ç–≤–∞—Ä–∏–Ω–∏ {at} {random}
                    ```
                story_text_2: |
                    –ö–æ–º–∞–Ω–¥–∞ `{add}` —Ç–∞–∫–æ–∂ –º–æ–∂–µ —Å—Ç–∞—Ç–∏ –≤ –Ω–∞–≥–æ–¥—ñ —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó.
                example_code_2: |
                    ```
                    {print} –í—ñ–Ω —á—É—î –∑–≤—É–∫
                    —Ç–≤–∞—Ä–∏–Ω–∏ {is} üêø, ü¶î, ü¶á, ü¶â
                    —Ç–≤–∞—Ä–∏–Ω–∞ {is} {ask} –Ø–∫ —Ç–∏ –¥—É–º–∞—î—à, —è–∫–∞ —Ü–µ —ñ—Å—Ç–æ—Ç–∞?
                    {add} —Ç–≤–∞—Ä–∏–Ω–∞ {to_list} —Ç–≤–∞—Ä–∏–Ω–∏
                    {print} —Ü–µ –±—É–ª–∞ —Ç–≤–∞—Ä–∏–Ω–∏ {at} {random}
                    ```
                story_text_3: |
                    –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∏ `{remove}` —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó

                    –°–∫–æ–ø—ñ—é–π—Ç–µ —Å–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ —É —Ü–µ–π —Ä—ñ–≤–µ–Ω—å.
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –≤–∏–≤—á–∏–ª–∏ 3 –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ `{at} {random}`, `{add} {to}` —Ç–∞ `{remove} {from}` .
                    –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –∫–æ–¥—É –¥–æ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó, —â–æ–± —É—Å—ñ –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑'—è–≤–∏–ª–∏—Å—è —É –Ω—ñ–π —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–∞–∑.
                example_code_3: |
                    ```
                    {print} –ô–æ–≥–æ —Å—Ç–∞–≤ –∑–∞–Ω–∞–¥—Ç–æ –≤–∞–∂–∫–∏–º.
                    {print} –£—Å–µ—Ä–µ–¥–∏–Ω—ñ –±—É–ª–∏ –ø–ª—è—à–∫–∞ –≤–æ–¥–∏, –ª—ñ—Ö—Ç–∞—Ä–∏–∫ —ñ —Ü–µ–≥–ª–∞.
                    —Ä—é–∫–∑–∞–∫ {is} –≤–æ–¥–∞, –ª—ñ—Ö—Ç–∞—Ä–∏–∫, —Ü–µ–≥–ª–∞
                    –≤–∏–∫–∏–Ω—É—Ç–∏ {is} {ask} –Ø–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–∏–Ω—É—Ç–∏?
                    {remove} –≤–∏–∫–∏–Ω—É—Ç–∏ {from} —Ä—é–∫–∑–∞–∫
                    ```
                start_code: '{print} –¢–≤–æ—è —ñ—Å—Ç–æ—Ä—ñ—è'
            4:
                story_text: |
                    –í–∏ –º–æ–≥–ª–∏ –ø–æ–º—ñ—Ç–∏—Ç–∏, —â–æ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä—ñ–≤–Ω—è—Ö –∑–∞–ª–∏—à–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞. –í–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—å –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ —Ä–µ—á–µ–Ω–Ω—è, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ name, —Ç–æ–±—Ç–æ `{print}` –º–æ—î —ñ–º'—è - name.
                    –í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–≤'—è–∑—É–≤–∞—Ç–∏ —Ü—é –ø—Ä–æ–±–ª–µ–º—É —É —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ. –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∞–ø–∫–∏ –¥–ª—è –≤—Å—å–æ–≥–æ, —â–æ –∑–±–∏—Ä–∞—î—Ç–µ—Å—å –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏.

                    ##–í–ø—Ä–∞–≤–∞
                    –°–∫–æ–ø—ñ—é–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É —ñ –∑–º—É—Å—å—Ç–µ –π–æ–≥–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –¥–æ–¥–∞–≤—à–∏ –ª–∞–ø–∫–∏ –≤ —Ä—è–¥–∫–∞—Ö.

                    ##–í–ø—Ä–∞–≤–∞2
                    –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó. –ó—Ä–æ–±—ñ—Ç—å —Ç–∞–∫, —â–æ–± –∫–æ–¥ –ø—Ä–∞—Ü—é–≤–∞–≤ –Ω–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ, –¥–æ–¥–∞–≤—à–∏ –ª–∞–ø–∫–∏ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö.
                    –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –ó–º—ñ–Ω–Ω—ñ —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–æ–∑–∞ –ª–∞–ø–∫–∞–º–∏. –¢–∞–∫ —Å–∞–º–æ, —è–∫ —É –¥—Ä—É–≥–æ–º—É —Ä—è–¥–∫—É –ø—Ä–∏–∫–ª–∞–¥—É –∫–æ–¥—É. –£ —Ü—å–æ–º—É —Ä—è–¥–∫—É —ñ–º'—è –∑–º—ñ–Ω–Ω–æ—ó –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–∑–∞ –ª–∞–ø–∫–∞–º–∏.
                example_code: |
                    ```
                    name {is} {ask} _ –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? _
                    {print}   _ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∑–≤—É—Ç—å _ name
                    {print} name   _ —Ç–µ–ø–µ—Ä –±—É–¥–µ –≥—É–ª—è—Ç–∏ –≤ –ª—ñ—Å—ñ _
                    {print} name _ —Ç—Ä–æ—Ö–∏ –Ω–∞–ª—è–∫–∞–Ω. _
                    animals {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ –í—ñ–Ω —á—É—î –∑–≤—É–∫ _ animals {at} {random}
                    {print} name _ –±–æ—ó—Ç—å—Å—è, —â–æ —Ü–µ –ª—ñ—Å –∑ –ø—Ä–∏–≤–∏–¥–∞–º–∏ _
                    ```
                start_code: '{print} ''–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –±—É–¥–µ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–∞ —Ç—É—Ç!'''
            5:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫—ñ–Ω—Ü—ñ–≤–∫–∏, —è–∫—ñ –∑—Ä–æ–±–ª—è—Ç—å –≤–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é —â–µ –≤–µ—Å–µ–ª—ñ—à–æ—é.
                    –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ–¥—É –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏, —è–∫ –∑—Ä–æ–±–∏—Ç–∏ 2 —Ä—ñ–∑–Ω—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.

                    ### –í–ø—Ä–∞–≤–∞ 1
                    –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–µ –æ–ø–æ–≤—ñ–¥–∞–Ω–Ω—è –æ–±—Å—è–≥–æ–º –Ω–µ –º–µ–Ω—à–µ 6 —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É –Ω–∞ –æ–±—Ä–∞–Ω—É –≤–∞–º–∏ —Ç–µ–º—É.
                    –ù–µ–º–∞—î –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è? –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ —Ü–∏—Ö —Ç–µ–º: —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π, –Ω—É–¥–Ω–∏–π —à–∫—ñ–ª—å–Ω–∏–π –¥–µ–Ω—å, –∑–∞—Å—Ç—Ä—è–≥–ª—ñ –Ω–∞ –±–µ–∑–ª—é–¥–Ω–æ–º—É –æ—Å—Ç—Ä–æ–≤—ñ.

                    –¢–µ–ø–µ—Ä –¥–∞–π—Ç–µ –≥—Ä–∞–≤—Ü–µ–≤—ñ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—Ä–∞—Ç–∏ —â–∞—Å–ª–∏–≤–∏–π –∞–±–æ –ø–æ–≥–∞–Ω–∏–π –∫—ñ–Ω–µ—Ü—å, —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ–¥—É.
                    –ó–∞–ø—Ä–æ–≥—Ä–∞–º—É–π—Ç–µ –æ–±–∏–¥–≤—ñ –∫—ñ–Ω—Ü—ñ–≤–∫–∏.

                    ###–í–ø—Ä–∞–≤–∞ 2
                    –°–∫–æ–ø—ñ—é–π—Ç–µ —ñ—Å—Ç–æ—Ä—ñ—é, —è–∫—É –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —É –≤–ª–∞—Å–Ω—ñ–π —Å—é–∂–µ—Ç–Ω—ñ–π –ø—Ä–∏–≥–æ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä—ñ–≤–Ω—è—Ö.
                    –ó–Ω–∞–π–¥—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –∫–æ–º–∞–Ω–¥–∏ `{if}` —Ç–∞ `{else}` –¥–æ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó.
                    –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —â–∞—Å–ª–∏–≤–∏–π –∞–±–æ –ø–æ–≥–∞–Ω–∏–π –∫—ñ–Ω–µ—Ü—å, –∞–ª–µ –≤–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—à—ñ —Å–ø–æ—Å–æ–±–∏ –≤–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥.
                example_code: |
                    ```
                    –º–µ–Ω–Ω—è {is} {ask} '–•—Ç–æ –π–¥–µ –ª—ñ—Å–æ–º?'
                    {print} –º–µ–Ω–Ω—è '–≥—É–ª—è—î –ª—ñ—Å–æ–º'
                    {print}  '–∑—É—Å—Ç—Ä—ñ—á–∞—î –º–æ–Ω—Å—Ç—Ä–∞'
                    –∫—ñ–Ω–µ—Ü—å {is} {ask} '–í–∏ —Ö–æ—á–µ—Ç–µ –≥–∞—Ä–Ω–∏–π —á–∏ –ø–æ–≥–∞–Ω–∏–π –∫—ñ–Ω–µ—Ü—å?'
                    {if} –∫—ñ–Ω–µ—Ü—å {is} —Ö–æ—Ä–æ—à–∏–π {print} –º–µ–Ω–Ω—è '–±–µ—Ä–µ –º–µ—á —ñ –º–æ–Ω—Å—Ç—Ä —à–≤–∏–¥–∫–æ —Ç—ñ–∫–∞—î'
                    {else} {print} "–ú–æ–Ω—Å—Ç—Ä –∑'—ó–¥–∞—î" –º–µ–Ω–Ω—è
                    ```
                start_code: '{print} ''–¢—É—Ç –ø–æ—á–Ω–µ—Ç—å—Å—è —Ç–≤–æ—è —ñ—Å—Ç–æ—Ä—ñ—è!'''
            7:
                story_text: |
                    –í —ñ—Å—Ç–æ—Ä—ñ—ó —Ö—Ç–æ—Å—å –≤–∏–º–æ–≤–ª—è—î —Å–ª–æ–≤–∞ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–ª–∏ —Ö—Ç–æ—Å—å –∫–ª–∏—á–µ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É –∞–±–æ —Å–ø—ñ–≤–∞—î –ø—ñ—Å–Ω—é.
                    –í–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ç–∞–∫—ñ –ø–æ–≤—Ç–æ—Ä–∏ —É —Å–≤–æ—é —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{repeat}`.

                    ### –í–ø—Ä–∞–≤–∞
                    –î–æ–¥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–æ –≤–ª–∞—Å–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ –∑ —Ä—ñ–≤–Ω—è 6 —ñ
                    –∑–Ω–∞–π–¥—ñ—Ç—å —Ä—è–¥–æ–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å `{print}` —ñ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –π–æ–≥–æ!
                example_code: |
                    ```
                    {print} '–ü—Ä–∏–Ω—Ü –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞–≤ –∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É!'
                    {repeat} 5 {times} {print} '–î–æ–ø–æ–º–æ–∂—ñ—Ç—å!!!'
                    {print} '–ß–æ–º—É –º–µ–Ω—ñ –Ω—ñ—Ö—Ç–æ –Ω–µ –¥–æ–ø–æ–º–∞–≥–∞—î?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''–î–æ–ø–æ–º–æ–∂—ñ—Ç—å!!!'''
            8:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ —É –∫–æ–º–∞–Ω–¥–∞—Ö `{if}`, —Ç–∞–∫–∏–º —á–∏–Ω–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤—ñ–π —â–∞—Å–ª–∏–≤–∏–π –∞–±–æ —Å—É–º–Ω–∏–π –∫—ñ–Ω–µ—Ü—å!

                    ### –í–ø—Ä–∞–≤–∞ 1
                    –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ–¥—É –ø–æ–∫–∞–∑–∞–Ω–æ –¥–≤—ñ —Ä—ñ–∑–Ω—ñ –∫—ñ–Ω—Ü—ñ–≤–∫–∏: –æ–¥–Ω–∞, –¥–µ –≥–µ—Ä–æ—ó —Å—Ç—Ä–∏–±–∞—é—Ç—å —É –º–∞—à–∏–Ω—ñ —á–∞—Å—É, –∞ —ñ–Ω—à–∞, –¥–µ –≤–æ–Ω–∏ –Ω–µ —Å—Ç—Ä–∏–±–∞—é—Ç—å.
                    –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫—ñ–Ω—Ü—ñ–≤–∫–∏.
                    **(–¥–æ–¥–∞—Ç–∫–æ–≤–æ)** –ó—Ä–æ–±—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ–≤—à–æ—é. –©–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó? –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥—Ä—É–≥–µ `{ask}` –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏.

                    ### –í–ø—Ä–∞–≤–∞ 2
                    –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º, –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É –∑ 5-–≥–æ —Ä—ñ–≤–Ω—è. –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –≥–∞—Ä–Ω—É —ñ –ø–æ–≥–∞–Ω—É –∫—ñ–Ω—Ü—ñ–≤–∫–∏ –¥–æ–≤–∂–∏–Ω–æ—é –Ω–µ –º–µ–Ω—à–µ —Ç—Ä—å–æ—Ö —Ä—è–¥–∫—ñ–≤ –∫–æ–∂–Ω–∞!
                example_code: |
                    ```
                    {print} '–û, –Ω—ñ! –¢–∏—Ä–∞–Ω–æ–∑–∞–≤—Ä –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è!'
                    –∫—ñ–Ω–µ—Ü—å = {ask} '–í–∏ —Ö–æ—á–µ—Ç–µ —â–∞—Å–ª–∏–≤–∏–π —á–∏ —Å—É–º–Ω–∏–π –∫—ñ–Ω–µ—Ü—å?'
                     {if} –∫—ñ–Ω–µ—Ü—å {is} —â–∞—Å–ª–∏–≤–∏–π
                        {print} '–Ø–∫—Ä–∞–∑ –≤—á–∞—Å–Ω–æ, –†—ñ—á–∞—Ä–¥ —Å—Ç—Ä–∏–±–∞—î –Ω–∞–∑–∞–¥ —É –º–∞—à–∏–Ω—É —á–∞—Å—É!'
                        {print} _
                    {else}
                        {print} '–û –Ω—ñ! –†—ñ—á–∞—Ä–¥ –∑–∞–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–∏–π...'
                        {print} _
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            9:
                story_text: "–£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ `{if}` —ñ `{repeat}` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥ `{if}` —ñ `{repeat}`. \n–¶–µ –¥–∞—î –≤–∞–º –±–∞–≥–∞—Ç–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —ñ –¥—ñ–π—Å–Ω–æ –¥–æ–ø–æ–º–∞–≥–∞—î –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à—É —ñ—Å—Ç–æ—Ä—ñ—é —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—é.\n\n### –í–ø—Ä–∞–≤–∞ 1\n –ó–∞–∫—ñ–Ω—á—ñ—Ç—å –∫–æ–¥, —â–æ–± `{if}` –ø—Ä–∞—Ü—é–≤–∞–≤ –∫–æ—Ä–µ–∫—Ç–Ω–æ.\n\n### –í–ø—Ä–∞–≤–∞\
                    \ 2\n–î–æ–¥–∞–π—Ç–µ `{if}` —Ç–∞ `{else}` –¥–ª—è —Ç—ñ—î—ó —á–∞—Å—Ç–∏–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó, –¥–µ –†–æ–±—ñ–Ω —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ–¥–æ–º—É.\n \n### –í–ø—Ä–∞–≤–∞ 3\n–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–≤–æ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó 8-–≥–æ —Ä—ñ–≤–Ω—è —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–∞ `{if}` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —ñ–Ω—à–æ–≥–æ `{if}`.\n"
                example_code: |
                    ```
                    {print} '–†–æ–±—ñ–Ω –π–¥–µ —Ü–µ–Ω—Ç—Ä–æ–º –º—ñ—Å—Ç–∞'
                    –º—ñ—Å—Ü–µ = {ask} '–†–æ–±—ñ–Ω –π–¥–µ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É —á–∏ –¥–æ–¥–æ–º—É?'
                    {if} –º—ñ—Å—Ü–µ {is} –º–∞–≥–∞–∑–∏–Ω
                        {print} '–í–æ–Ω–∞ –∑–∞—Ö–æ–¥–∏—Ç—å –¥–æ –º–∞–≥–∞–∑–∏–Ω—É.'
                        {print} '–†–æ–±—ñ–Ω –±–∞—á–∏—Ç—å —Ü—ñ–∫–∞–≤—É –Ω–∞ –≤–∏–≥–ª—è–¥ –∫–Ω–∏–≥—É'
                        –∫–Ω–∏–≥–∞ = {ask} '–†–æ–±—ñ–Ω –∫—É–ø—É—î –∫–Ω–∏–≥—É?'
                        {if} –∫–Ω–∏–≥–∞ {is} —Ç–∞–∫
                        _ {print} '–†–æ–±—ñ–Ω –∫—É–ø—É—î –∫–Ω–∏–≥—É —ñ –π–¥–µ –¥–æ–¥–æ–º—É'
                        _ {else}
                        _ {print} '–†–æ–±—ñ–Ω –∑–∞–ª–∏—à–∞—î –º–∞–≥–∞–∑–∏–Ω —ñ –π–¥–µ –¥–æ–¥–æ–º—É'
                    {else}
                        {print} '–†–æ–±—ñ–Ω –π–¥–µ –¥–æ–¥–æ–º—É'
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            10:
                story_text: |
                    –ù–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É {for} —É —Å–≤–æ—ó–π —ñ—Å—Ç–æ—Ä—ñ—ó. –¢–∞–∫–∏–º —á–∏–Ω–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ –¥–∏—Ç—è—á—É –∫–Ω–∏–∂–∫—É '–ë—É—Ä–∏–π –≤–µ–¥–º–µ–¥–∏–∫, –±—É—Ä–∏–π –≤–µ–¥–º–µ–¥–∏–∫, —â–æ —Ç–∏ –±–∞—á–∏—à'.

                    ### –í–ø—Ä–∞–≤–∞

                    –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">—ñ—Å—Ç–æ—Ä—ñ—é</a> , —è–∫—â–æ –≤–∏ —ó—ó –Ω–µ –∑–Ω–∞—î—Ç–µ, —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–∞ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–∞ —Ç–∞–∫, —è–∫ —É –∫–Ω–∏–∂—Ü—ñ.
                example_code: |
                    ```
                    –∑–≤—ñ—Ä–∏ = _ , _ , _
                    {print} '–ë—É—Ä–∏–π –≤–µ–¥–º—ñ–¥—å, –ë—É—Ä–∏–π –≤–µ–¥–º—ñ–¥—å'
                    {print} '–©–æ —Ç–∏ –±–∞—á–∏—à?'
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            12:
                story_text: |-
                    –ù–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –ª–∞–ø–∫–∏ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Å–ª—ñ–≤ —É –∑–º—ñ–Ω–Ω—ñ–π.

                    ### –í–ø—Ä–∞–≤–∞

                    –ó–Ω–∞–π–¥—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è, –ø—ñ–¥—ñ–π–¥–µ –±—É–¥—å-—è–∫–∏–π —Ä—ñ–≤–µ–Ω—å. –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ª–∞–ø–∫–∏ –¥–æ–¥–∞–Ω—ñ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö.
                example_code: |
                    ```
                    —Ö—Ç–æ = '–ö–æ—Ä–æ–ª–µ–≤–∞ –ê–Ω–≥–ª—ñ—ó'
                    {print} —Ö—Ç–æ ' —ó–ª–∞ —à–º–∞—Ç–æ–∫ —Ç–æ—Ä—Ç–∞, —è–∫ —Ä–∞–ø—Ç–æ–º...'
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            13:
                story_text: |
                    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥–∏ `{and}` —Ç–∞ `{or}`, –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –±—ñ–ª—å—à —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–º–∏. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–≤–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥—Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.

                    ### –í–ø—Ä–∞–≤–∞ 1
                    –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É —ñ –∑–∞–∫—ñ–Ω—á—ñ—Ç—å –π–æ–≥–æ. –ü–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ —â–µ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –∫–æ–¥–∏ `{if}` –∑ `{and}` –∞–±–æ `{or}`.

                    ### –í–ø—Ä–∞–≤–∞ 2
                    –ó–Ω–∞–π–¥—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —ñ –¥–æ–¥–∞–π—Ç–µ –¥–æ –Ω–µ—ó –æ–¥–∏–Ω `{and}` –∞–±–æ `{or}`.
                example_code: |
                    ```
                    {print} '–ù–∞—à–∞ –≥–µ—Ä–æ–π–∫–∞ –π–¥–µ –ª—ñ—Å–æ–º'
                    {print} '–°—Ç–µ–∂–∫–∞ —Ä–æ–∑–¥—ñ–ª—è—î—Ç—å—Å—è –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏'
                    —à–ª—è—Ö = {ask} '–Ø–∫—É —Å—Ç–µ–∂–∫—É —ó–π –æ–±—Ä–∞—Ç–∏?'
                    –∑–±—Ä–æ—è = {ask} '–Ø–∫—É –∑–±—Ä–æ—é –≤–æ–Ω–∞ –≤–∏—Ç—è–≥–Ω–µ?'
                    {if} —à–ª—è—Ö {is} '–ª—ñ–≤–∏–π' {and} –∑–±—Ä–æ—è {is} '–º–µ—á'
                        _
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            15:
                story_text: |
                    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É `{while}` –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—ñ–∫–∞–≤—ñ—à–∏–º–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ `{while} –≥—Ä–∞ {is} '–ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è'`, —â–æ–± –≥—Ä–∞–≤–µ—Ü—å –º—ñ–≥ –≥—Ä–∞—Ç–∏, –¥–æ–∫–∏ –≥—Ä–∞ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è.
                    –ê–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ `{while} –º–µ—á {is} '–∑–∞–≥—É–±–ª–µ–Ω'`, —â–æ–± –≥—Ä–∞–≤–µ—Ü—å –Ω–µ –º—ñ–≥ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥—Ä—É, –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ —â–æ—Å—å.
                example_code: |
                    ```
                    –∫–ª—é—á—ñ = '–∑–∞–≥—É–±–ª–µ–Ω—ñ'
                    {print} '–í–∏ —Å—Ç–æ—ó—Ç–µ —É —Å–≤–æ—î–º—É —Å–∞–¥—É —ñ –∑–∞–≥—É–±–∏–ª–∏ –∫–ª—é—á—ñ.'
                    {print} '–î–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö —à—É–∫–∞—Ç–∏?'
                    {print} '–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏: –¥–µ—Ä–µ–≤–æ, –∫–ª—É–º–±–∞, –∫–∞–º—ñ–Ω—å, –ø–æ—à—Ç–æ–≤–∞ —Å–∫—Ä–∏–Ω—å–∫–∞'
                    {while} –∫–ª—é—á—ñ == '–∑–∞–≥—É–±–ª–µ–Ω—ñ'
                        –º—ñ—Å—Ü–µ = {ask} '–î–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏?'
                        {if} –º—ñ—Å—Ü–µ == '–∫–ª—É–º–±–∞'
                            {print} '–û—Å—å –≤–æ–Ω–∏!'
                            –∫–ª—é—á—ñ = '–∑–Ω–∞–π–¥–µ–Ω–æ'
                        {else}
                            {print} '–ù—ñ, —ó—Ö –Ω–µ–º–∞—î –≤ ' –º—ñ—Å—Ü–µ
                    {print} '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ –±—É–¥–∏–Ω–æ–∫!'
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
            18:
                story_text: |
                    –ú–∏ –∑–±–∏—Ä–∞—î–º–æ—Å—è –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ —â–µ –æ–¥–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é, –∞–ª–µ —Ç–µ–ø–µ—Ä –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—É–∂–∫–∏ –∑ `{print}`.

                    ### –í–ø—Ä–∞–≤–∞ 1
                    –°—Ç–≤–æ—Ä—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é —â–æ–Ω–∞–π–º–µ–Ω—à–µ –∑ 5 —Ä–µ—á–µ–Ω—å. –ü–æ–∫–∏ —â–æ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ '—ñ–º\'—è'.
                example_code: |
                    ```
                    {print}('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ü—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó!')
                    ```
                story_text_2: |
                    ### –í–ø—Ä–∞–≤–∞ 2
                    –ú–∏ –≤–∂–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∏ –¥–ª—è –≤–∞—Å `{input}`. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—É `{—ñ–º\'—è}` —É –≤–∞—à—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó.
                    –ü–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ –¥—Ä—É–≥–µ `{ask}` —ñ —Ç–∞–∫–æ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∑–º—ñ–Ω–Ω—É.
                    –ü–æ—Ä–∞–¥–∞: –ü–∞–º'—è—Ç–∞–π—Ç–µ –ø—Ä–æ –∫–æ–º–∏ —É `{print}` –º—ñ–∂ —Ç–µ–∫—Å—Ç–æ–º —ñ –∑–º—ñ–Ω–Ω–∏–º–∏!
                example_code_2: |
                    ```
                    name = {input}('–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?')
                    {print}('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ü—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó!')
                    ```
                start_code: '# –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# place your code here'
    calculator:
        name: Calculator
        default_save_name: Calculator
        description: Create a calculator
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} correct_answer {print} 'good job!'
                    {else} {print} 'Wrong! It was ' correct_answer
                    ```
                story_text_2: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_2: |
                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```
                story_text_3: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                start_code: '{print} ''Welcome to this calculator!'''
            9:
                story_text: |
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct_answer = number1 * number2
                        {print} 'What is ' number1 ' times ' number2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is' answer
                        {if} answer {is} correct_answer
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
                start_code: '{print} ''Welcome to this calculator!'''
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
                start_code: '# place your code here'
            13:
                story_text: |-

                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# place your code here'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: –í—Å—Ç—É–ø
        default_save_name: –í—Å—Ç—É–ø
        description: –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤
        levels:
            1:
                story_text: "–ù–∞ –ø–µ—Ä—à–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ `{print}`, `{ask}` —Ç–∞ `{echo}`.\n–ù–∞–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —É –ø–æ–ª—ñ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–µ–ª–µ–Ω—É –∫–Ω–æ–ø–∫—É –≤ –±–ª–æ—Ü—ñ –ø—Ä–∏–∫–ª–∞–¥—É –∫–æ–¥—É, —ñ –∫–æ–¥ –±—É–¥–µ –Ω–∞–±—Ä–∞–Ω–∏–π –∑–∞ –≤–∞—Å!\n–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–¥ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∑–µ–ª–µ–Ω—É –∫–Ω–æ–ø–∫—É \"–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–¥\"\
                    \ –ø—ñ–¥ –ø–æ–ª–µ–º –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.\n \n–í–∏–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –µ–∫—Ä–∞–Ω –º–æ–∂–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ `{print}`.     \n"
                start_code: '{print} –ø—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç–µ!'
            2:
                story_text: |
                    –ù–∞ 2-–º—É —Ä—ñ–≤–Ω—ñ –º–∏ –≤–∏–≤—á–∏–º–æ –¥–≤—ñ –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏: `{is}` —Ç–∞ `{sleep}`.
                    –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–≤–∞—Ç–∏ —Å–ª–æ–≤–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{is}`. –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω–æ—é. –£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∑–º—ñ–Ω–Ω—É –∑ –Ω–∞–∑–≤–æ—é name —ñ –∑–º—ñ–Ω–Ω—É –∑ –Ω–∞–∑–≤–æ—é age. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ª–æ–≤–æ name –≤ –±—É–¥—å-—è–∫–æ–º—É –º—ñ—Å—Ü—ñ –≤–∞—à–æ–≥–æ –∫–æ–¥—É, —ñ –≤–æ–Ω–æ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –•–µ–¥—ñ, –æ—Å—å —Ç–∞–∫:

                    –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –≤–∞–º –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `{echo}`
                example_code: |
                    ```
                    name {is} –•–µ–¥—ñ
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    –ö–æ–º–∞–Ω–¥–∞ `{print}` –ø—Ä–∞—Ü—é—î —Ç–∞–∫ —Å–∞–º–æ, –∞–ª–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è –∫–æ–º–∞–Ω–¥–∞ `{ask}`. –£ –∫–æ–º–∞–Ω–¥—ñ `{ask}` —Ç–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É. –í–∏–≥–ª—è–¥–∞—î —Ü–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∏–Ω–æ–º:
                start_code: '{print} –ø—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç–µ!'
            3:
                story_text: |
                    –ù–∞ —Ä—ñ–≤–Ω—ñ 3 –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–æ–∫. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä—É –≤–∏–±—Ä–∞—Ç–∏ —â–æ—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–µ –∑—ñ —Å–ø–∏—Å–∫—É. –î–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ `{at} {random}`.
                start_code: '{print} –ø—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç–µ!'
            4:
                story_text: |
                    –ù–∞ 4-–º—É —Ä—ñ–≤–Ω—ñ –∑–º—ñ–Ω–∏–ª–∏—Å—è `{ask}` —Ç–∞ `{print}`.
                    –¢–µ–∫—Å—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –±—Ä–∞—Ç–∏ –≤ –ª–∞–ø–∫–∏.
                    –¶–µ –∫–æ—Ä–∏—Å–Ω–æ, —Ç–æ–º—É —â–æ —Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞, —è–∫—ñ —Ö–æ—á–µ—Ç–µ. –¢–∞–∫–æ–∂ —Å–ª–æ–≤–∞, —è–∫—ñ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–æ–≥–æ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{is}`.
                    –ë—ñ–ª—å—à—ñ—Å—Ç—å –º–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞–∫–æ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–∞–ø–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä—ñ, —Ç–æ–∂ –º–∏ —Ç–∞–∫–æ–∂ —Å—Ç–∞—î–º–æ –Ω–∞ –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è!
                example_code: |
                    ```
                    {print} '–¢–µ–ø–µ—Ä –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∞–ø–∫–∏!'
                    –≤—ñ–¥–ø–æ–≤—ñ–¥—å {is} {ask} '–©–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É'
                    {print} '–ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ ' –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    ```
                start_code: '{print} ''–ü—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç–µ'''
            5:
                story_text: |
                    –£ 5 —Ä—ñ–≤–Ω—ñ –∑'—è–≤–∏–ª–æ—Å—è –¥–µ—â–æ –Ω–æ–≤–µ - `{if}`! –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{if}` –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±–∏—Ä–∞—Ç–∏ –º—ñ–∂ –¥–≤–æ–º–∞ —Ä—ñ–∑–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏.
                    –¶–µ–π –∫–æ–¥ —á—É–¥–æ–≤–æ –¥—Ä—É–∫—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏ –≤–≤–µ–¥–µ—Ç–µ Hedy —è–∫ —ñ–º'—è, —ñ –±—É–º! –Ø–∫—â–æ –≤–∏ –≤–≤–µ–¥–µ—Ç–µ —â–æ—Å—å —ñ–Ω—à–µ.
                    `{ask}` —ñ `{print}` –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—é—Ç—å —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –Ω–∞ 4-–º—É —Ä—ñ–≤–Ω—ñ.
                example_code: |
                    ```
                    —ñ–º º—è {is} {ask} '—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?'
                    {if} —ñ–º º—è {is} –•–µ–π–¥—ñ {print} '–∫–ª–∞—Å–Ω–æ' {else} {print} '—Ñ–µ!'
                    ```
                start_code: |-
                    —ñ–º º—è {is} {ask} '—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?'
                    {if} —ñ–º º—è {is} –•–µ–π–¥—ñ {print} '–∫—Ä—É—Ç–æ!' {else} {print} '–ø—Ñ'
            6:
                story_text: |-
                     –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—å –¥–µ—â–æ –Ω–æ–≤–µ: —Ç–µ–ø–µ—Ä –≤–∏ –≤–º—ñ—î—Ç–µ —â–µ –π —Ä–∞—Ö—É–≤–∞—Ç–∏.

                     –ü–ª—é—Å - —Ü–µ –ø—Ä–æ—Å—Ç–æ, –≤–∏ –ø–∏—à–µ—Ç–µ, —è–∫ —É –º–∞—Ç–µ–º–∞—Ç–∏—Ü—ñ: `5 + 5`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥. –ú—ñ–Ω—É—Å —Ç–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ, —Ü–µ `5 - 5`.

                     –ó —á–∞—Å–æ–º —Ç—Ä–æ—Ö–∏ —ñ–Ω–∞–∫—à–µ, –∞–¥–∂–µ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–µ–º–∞—î —Å–∏–º–≤–æ–ª—É —á–∞—Å—É. –ü—Ä–æ—Å—Ç–æ –ø–æ—à—É–∫–∞–π—Ç–µ, –π–æ–≥–æ –¥—ñ–π—Å–Ω–æ –Ω–µ–º–∞—î!
                     –û—Å—å —á–æ–º—É –º–∏ –º–Ω–æ–∂–∏–º–æ –∑—ñ—Ä–æ—á–∫–æ—é –Ω–∞–¥ 8: `5 * 5`. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ü–µ —è–∫ "5 –Ω–∞ 5", —â–æ –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —Ü–µ –Ω–∞–π–∫—Ä–∞—â–µ.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 –Ω–∞ 5 —Ü–µ '' 5 * 5'
            7:
                story_text: |
                    –†—ñ–≤–µ–Ω—å 7 –¥–æ–¥–∞—î –∫–æ–º–∞–Ω–¥—É `{repeat}`.  –ö–æ–º–∞–Ω–¥–∞ `{repeat}` –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∫–æ–¥—É –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy is fun!'''
            8:
                story_text: |
                    `{ask}` —ñ `{print}` –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—é—Ç—å —Ç–∞–∫, —è–∫ –≤–∏ —ó—Ö –∑–Ω–∞—î—Ç–µ. –ê–ª–µ `{if}`, `{else}`, —ñ `{repeat}` –∑–º—ñ–Ω–∏–ª–∏—Å—è!
                    –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –≥—Ä—É–ø–∏ –∫–æ–¥—É —Ä–∞–∑–æ–º, –∞–ª–µ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑—Ä–æ–±–∏—Ç–∏ *–≤—ñ–¥—Å—Ç—É–ø* —É –∫–æ–¥—ñ.
                    –¶–µ –æ–∑–Ω–∞—á–∞—î –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —á–æ—Ç–∏—Ä–∏ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞. –í–∞–º —Ç–∞–∫–æ–∂ –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –∑—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥—Å—Ç—É–ø, —è–∫—â–æ –≤–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–ª–æ–∫ –∑ –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞.
                example_code: |
                    –û—Å—å —è–∫ —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î –∫–æ–º–∞–Ω–¥–∞ `{repeat}`:
                    ```
                    {repeat} 5 {times}
                        {print} '–í—Å—ñ–º –ø—Ä–∏–≤—ñ—Ç'
                        {print} '–¶–µ –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è 5 —Ä–∞–∑—ñ–≤'
                    ```
                    –ê –æ—Å—å —è–∫ –∫–æ–º–∞–Ω–¥–∏ `{if}` —ñ `{else}` —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å:

                    ```
                    —ñ–º º—è {is} {ask} '–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?'
                    {if} —ñ–º º—è {is} –•–µ–π–¥—ñ
                        {print} '–í—ñ—Ç–∞—î–º–æ –•–µ–π–¥—ñ'
                        {print} '–ú–æ–∂–µ—à –≥—Ä–∞—Ç–∏—Å—è –Ω–∞ —Å–≤–æ—î–º—É –∫–æ–º–ø º—é—Ç–µ—Ä—ñ!'
                    {else}
                        {print} '–ü–û–†–£–®–ù–ò–ö!'
                        {print} '–ù–µ –º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ü–∏–º –∫–æ–º–ø º—é—Ç–µ—Ä–æ–º!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello folks'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –º–æ–∂–Ω–∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∑ `{if}` —Ç–∞ `{repeat}`, –∞–ª–µ –π –æ–±'—î–¥–Ω—É–≤–∞—Ç–∏ —ó—Ö —Ä–∞–∑–æ–º!
                    –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏ –±–∞—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `{if}` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ `{repeat}`. –¢–∞–∫–æ–∂ –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —ñ –Ω–∞–≤–ø–∞–∫–∏, —ñ `{if}` —Ç–∞–∫–æ–∂ –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ `{if}` —ñ `{repeat}` –≤ `{repeat}`.
                    –°–ø—Ä–æ–±—É–π—Ç–µ!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
            10:
                story_text: |-
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –º–∏ –≤–∏–≤—á–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥, —è–∫–∏–π –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è `{for}`. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{for}` –º–æ–∂–Ω–∞ —Å–∫–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏.
                    `{for}` —Å—Ç–≤–æ—Ä—é—î –±–ª–æ–∫, —è–∫ —ñ `{repeat}` —Ç–∞ `{if}`, —Ç–æ–º—É –≤—Å—ñ —Ä—è–¥–∫–∏ –≤ –±–ª–æ—Ü—ñ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
            11:
                story_text: |-
                    –ù–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –º–∏ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Ñ–æ—Ä–º—É `{for}`. –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä—ñ–≤–Ω—è—Ö –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ `{for}` –∑—ñ —Å–ø–∏—Å–∫–æ–º, –∞–ª–µ –º–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `{for}` –∑ —á–∏—Å–ª–∞–º–∏.
                    –ú–∏ —Ä–æ–±–∏–º–æ —Ü–µ, –¥–æ–¥–∞—é—á–∏ —ñ–º'—è –∑–º—ñ–Ω–Ω–æ—ó, –∑–∞ —è–∫–∏–º —Å–ª—ñ–¥—É—î `{in}` `{range}`.  –ü–æ—Ç—ñ–º –º–∏ –ø–∏—à–µ–º–æ —á–∏—Å–ª–æ, –∑ —è–∫–æ–≥–æ –ø–æ—á–Ω–µ–º–æ, `{to}` —ñ —á–∏—Å–ª–æ, –Ω–∞ —è–∫–æ–º—É —Ç—Ä–µ–±–∞ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏.

                    –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ —ñ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —â–æ –≤–∏–π–¥–µ! –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∞–º –∑–Ω–æ–≤—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç—É–ø–∏ —É —Ä—è–¥–∫–∞—Ö –ø—ñ–¥ `{for}` –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è–º–∏.
                start_code: |-
                    {for} counter {in} {range} 1 {to} 5
                        {print} counter
            12:
                story_text: |-
                    **–î–µ—Å—è—Ç–∫–æ–≤—ñ —á–∏—Å–ª–∞**
                    –î–æ —Ü—å–æ–≥–æ —á–∞—Å—É Hedy –Ω–µ –¥–æ–∑–≤–æ–ª—è–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–µ—Å—è—Ç–∫–æ–≤—ñ —á–∏—Å–ª–∞, —Ç–∞–∫—ñ —è–∫ 1,5, –∞–ª–µ —Ç–µ–ø–µ—Ä –º–∏ —Ü–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ. –ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å–∏–º–≤–æ–ª `.` –¥–ª—è –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
            13:
                story_text: "–ó–∞—Ä–∞–∑ –º–∏ –±—É–¥–µ–º–æ –≤–∏–≤—á–∞—Ç–∏ `{and}` —Ç–∞ `{or}`! –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏, –≤–∞–º –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–≤–∞ `{if}`, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `{and}` —ñ `{or}`. \n\n–Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ `{and}`, –æ–±–∏–¥–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏, –∑–ª—ñ–≤–∞ —ñ —Å–ø—Ä–∞–≤–∞ –≤—ñ–¥ `{and}`, –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —ñ—Å—Ç–∏–Ω–Ω–∏–º–∏.\
                    \ –ú–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `{or}`. –¢–æ–¥—ñ –ª–∏—à–µ –æ–¥–Ω–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º."
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
            14:
                story_text: |
                    –ú–∏ –∑ –≤–∞–º–∏ –±—É–¥–µ–º–æ –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –≤–∂–µ –∑–Ω–∞—î—Ç–µ —ó—Ö –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ - —Ü–µ `<` —Ç–∞ `>`.
                    –°–∏–º–≤–æ–ª `<` –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –º–µ–Ω—à–µ –∑–∞ –¥—Ä—É–≥–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–∫ `<` 12 –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—ñ–∫ –º–µ–Ω—à–µ –∑–∞ 12.
                    –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –¥—Ä—É–≥–æ–º—É, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `<=`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–∫ `<=` 11.
                    –°–∏–º–≤–æ–ª `>` –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–∏–º –∑–∞ –¥—Ä—É–≥–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `>` 10 –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —á–∏—Å–ª–æ –±—ñ–ª—å—à–∏–º –∑–∞ 10.
                    –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –¥—Ä—É–≥–æ–º—É, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ `>=`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—É–Ω–∫—Ç–∏ `>=` 11.
                    –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ü—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤ `{if}`, –æ—Å—å —Ç–∞–∫:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
            15:
                story_text: |-
                    –ó–∞—Ä–∞–∑ –º–∏ –≤–∏–≤—á–∏–º–æ –Ω–æ–≤–∏–π –≤–∏–¥ —Ü–∏–∫–ª—É - —Ü–∏–∫–ª `{while}`! –ú–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ü–∏–∫–ª –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—É–¥–µ –ø—Ä–∞–≤–¥–∏–≤–∏–º.
                    –¢–æ–∂ –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ü–∏–∫–ª—ñ.

                    –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ–¥—É –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ –¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
                    –Ø–∫—â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–¥–µ –¥–∞–Ω–∞, —Ç–æ —Ü–∏–∫–ª –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
            16:
                story_text: |-
                    –ú–∏ –±—É–¥–µ–º–æ —Å–∫–ª–∞–¥–∞—Ç–∏ —Å–ø–∏—Å–∫–∏ —É —Å—Ç–∏–ª—ñ Python, –∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏ –Ω–∞–≤–∫–æ–ª–æ —Å–ø–∏—Å–∫—ñ–≤! –ú–∏ —Ç–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∞–ø–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫ –º–∏ –≤–∂–µ –Ω–∞–≤—á–∏–ª–∏—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä—ñ–≤–Ω—è—Ö.
                    –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏, —â–æ–± –≤–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ü–µ —É —Å–ø–∏—Å–∫—É. –ö–æ–º–∞–Ω–¥—É {at} –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit
            17:
                story_text: |-
                    –ó–∞—Ä–∞–∑ –º–∏ —Ç—Ä—ñ—à–∫–∏ –∑–º—ñ–Ω–∏–º–æ –≤—ñ–¥—Å—Ç—É–ø–∏. –ö–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –∫–æ–ª–∏ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤—ñ–¥—Å—Ç—É–ø, –º–∏ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ `:` –Ω–∞ –ª—ñ–Ω—ñ—ó –ø–µ—Ä–µ–¥ –≤—ñ–¥—Å—Ç—É–ø–æ–º.

                    –ù–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ —Ç–∏ —Ç–∞–∫–æ–∂ –æ—Ç—Ä–∏–º–∞—î—à –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥—É `{elif}`. –ö–æ–º–∞–Ω–¥–∞ `{elif}` ‚Äì —Ü–µ —Å–ø–æ–ª—É—á–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ `{else}` —ñ `{if}`, —è–∫–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è —Ç–æ–±—ñ —è–∫—â–æ –≤ —Ç–µ–±–µ –±—É–¥–µ —Ç—Ä–∏ (–∞–±–æ –±—ñ–ª—å—à–µ!) –æ–ø—Ü—ñ–π.
                    –í–∏–ø—Ä–æ–±—É–π —ó—ó!
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
            18:
                story_text: |-
                    –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–æ–¥ Python! –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–¥—Ç–µ–ø–µ—Ä –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—É–∂–∫–∏ –∑ `{print}` —ñ `{range}`.
                    –¶–µ —Ç–∞–∫–æ–∂ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–¥ Hedy –∑ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è –≤ –±—É–¥—å-—è–∫–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ Python, —è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏. –Ø–∫—â–æ –≤–∏ —Ü—å–æ–≥–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.
                start_code: |-
                    —ñ–º º—è = '–•–µ–π–¥—ñ'
                    {print}('–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ', —ñ–º º—è)
    dice:
        name: Dice
        default_save_name: Dice
        description: Make your own dice
        levels:
            3:
                story_text: |
                    In this level we can choose from a list. With that we can let the computer choose one side of the die.
                    Take a look at the games you have in your closet at home.
                    Are there games with a (special) die? You can also copy it with this code.
                    For example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: '{print} What will the die indicate this time?'
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
                start_code: '{print} ''What will the die indicate this time?'''
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: '{print} ''What will the die indicate this time?'''
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |-

                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: '{print} ''What will the die indicate this time?'''
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: '{print} ''What will the die indicate this time?'''
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# place your code here'
    dishes:
        name: Dishes?
        default_save_name: Dishes
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
                start_code: '{print} Who does the dishes?'
            4:
                story_text: |
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} _ the dishes are done by _
                    {sleep}
                    {print} people {at} _
                    ```
                start_code: '{print} ''Who does the dishes?'''
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\ndishwasher {is} people {at} {random}\n{if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ \n{else} {print} 'luckily no dishes because' _ 'is already washing up'\n```\n"
                start_code: '{print} ''Who does the dishes?'''
            6:
                story_text: |
                    How often is everyone going to do the dishes? Is that fair? You can count it in this level.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    emma_washes = 0
                    dishwasher = people {at} {random}
                    {print} 'The dishwasher is' dishwasher
                    {if} dishwasher {is} Emma emma_washes = emma_washes + 1
                    {print} 'Emma will do the dishes this week' emma_washes 'times'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
                start_code: '{print} ''Who does the dishes?'''
            7:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
                start_code: '{print} ''Who does the dishes?'''
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
                start_code: '# place your code here'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Fortune teller
        default_save_name: Fortune Teller
        description: Let Hedy predict the future
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# place your code here'
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |-

                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I‚Äôm Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: '# place your code here'
            4:
                story_text: |
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: '# place your code here'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!ü§©' {else} {print} 'Bad luck! Someone {else} will win!üò≠'
                    ```
                start_code: '# place your code here'
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# place your code here'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Haunted House
        default_save_name: Haunted House
        description: Escape from the haunted house
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but if not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: '{print} How did I get here?'
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
                start_code: '# place your code here'
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: Language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'üê±'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'üê∏'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# place your code here'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: –ü–∞–ø—É–≥–∞
        default_save_name: –ü–∞–ø—É–≥–∞
        description: –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –ø–∞–ø—É–≥—É, —è–∫–∏–π –±—É–¥–µ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤–∞—Å!
        levels:
            1:
                story_text: |
                    –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –ø–∞–ø—É–≥—É, —è–∫–∏–π –±—É–¥–µ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤–∞—Å!
                example_code: |
                    ```
                    {print} –Ø - –ø–∞–ø—É–≥–∞ –•–µ–¥–∏.
                    {ask} –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### –í–ø—Ä–∞–≤–∞
                    –°–∫–æ–ø—ñ—é–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É –Ω–∞ –µ–∫—Ä–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∂–æ–≤—Ç—É –∫–Ω–æ–ø–∫—É.
                    –ó–º—É—Å—å—Ç–µ –ø–∞–ø—É–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —ñ–Ω—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ —É –ø—Ä–∏–∫–ª–∞–¥—ñ!
                    **–î–æ–¥–∞—Ç–∫–æ–≤–æ** –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–∞–ø—É–∑—ñ —Å—Ç–∞–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å. –í–≤–µ–¥—ñ—Ç—å —â–µ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É –ø—ñ–¥ –≤–∞—à–∏–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–¥–æ–º.
                example_code_2: |
                    ```
                    {print} –Ø - –ø–∞–ø—É–≥–∞ –•–µ–¥i.
                    {ask} _
                    {echo}
                    {echo}
                    ```
                start_code: |
                    {print} –Ø - –ø–∞–ø—É–≥–∞ –•–µ–¥i.
                    {ask} –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?
                    {echo}
                    {echo}
            2:
                story_text: |
                    –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –ø–∞–ø—É–≥—É, —è–∫–∏–π –±—É–¥–µ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤–∞—Å!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                start_code: '{print} Im Hedy the parrot!'
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} üßí Say new_word , Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ üßí Say _ new_word _, Hedy!_
                    {print} _ ü¶ú _ words {at} {random}
                    ```
                start_code: '# Write your code here'
            5:
                story_text: |
                    Reward your parrot if it says the correct word!
                example_code: |
                    ```
                    —Å–ª–æ–≤–∞ {is} –∫—Ä—è–∫–∞–π, –•–µ–¥—ñ.
                    {print} '–î—Ä–µ—Å–∏—Ä—É–π –ø–∞–ø—É–≥—É!'
                    –Ω–æ–≤–µ_—Å–ª–æ–≤–æ {is} {ask} '–Ø–∫–æ–º—É —Å–ª–æ–≤—É –≤–∏ —Ö–æ—á–µ—Ç–µ —ó—Ö –Ω–∞–≤—á–∏—Ç–∏?'
                    {add} –Ω–æ–≤–µ_—Å–ª–æ–≤–æ {to_list} —Å–ª–æ–≤–∞
                    —Å–∫–∞–∑–∞–Ω–µ_—Å–ª–æ–≤–æ {is} —Å–ª—ñ–≤ {at} {random}
                    {print} 'üßí –°–∫–∞–∂–∏ ' –Ω–æ–≤–µ_—Å–ª–æ–≤–æ ', –•–µ–¥—ñ!'
                    {print} 'ü¶ú ' —Å–∫–∞–∑–∞–Ω–µ_—Å–ª–æ–≤–æ
                    _ —Å–∫–∞–∑–∞–Ω–µ_—Å–ª–æ–≤–æ {is} –Ω–æ–≤–µ_—Å–ª–æ–≤–æ ' üßí –ú–æ–ª–æ–¥–µ—Ü—å, –•–µ–¥—ñ! üç™'
                    _ _ ' üßí –ù—ñ, –•–µ–¥—ñ! –°–∫–∞–∂–∏ ' –Ω–æ–≤–µ_—Å–ª–æ–≤–æ
                    ```
                start_code: '# place your code here'
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In this level you can let Hedy tell you {if} you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# place your code here'
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ‚ù§'
                    {else} {print} 'The prince was eaten by a hippopotamus üò≠'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# place your code here'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# place your code here'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Create your own virtual restaurant
        levels:
            1:
                story_text: |-
                     In level 1 you can make your own virtual restaurant and take your guests' orders.
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant üçü
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: '# place your code here'
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
                start_code: '# place your code here'
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level you have to use quotation marks when using the `{print}` command.
                    Can you make your code from the previous levels work in this level too by adding the quotation marks?

                    Be careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!
                    So instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    {print} 'Today we are serving pizza or lasagna.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'Great choice! The ' food ' is my favorite!'
                    topping {is} {ask} 'Would you like meat or veggies on that?'
                    {print} food ' with ' topping ' is on its way!'
                    drinks {is} {ask} 'What would you like to drink with that?'
                    {print} 'Thank you for your order.'
                    {print} 'Your ' food ' and ' drinks ' will be right there!'
                    ```
                start_code: '# place your code here'
            5:
                story_text: |
                    –ù–∞ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∞ `{if}` –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º `{ask}` –ø–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º —ñ –¥–∞–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
                    –£ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –Ω–∏–∂—á–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏ –±–∞—á–∏—Ç–µ, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ `{ask}` –∫–ª—ñ—î–Ω—Ç–∞ `{if}`, —è–∫—â–æ –≤—ñ–Ω —Ö–æ—á–µ –ø–æ—á—É—Ç–∏ –ø—Ä–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ Hedy –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
                start_code: '# place your code here'
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |-

                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –Ω–∞–≤—á–∏–ª–∏—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É `{repeat}` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –∫–æ–¥—É –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤.
                    –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ —É —Å–≤–æ—î–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ, —â–æ–± `{ask}` –∫—ñ–ª—å–∫–æ—Ö –ª—é–¥–µ–π, —â–æ –≤–æ–Ω–∏ —Ö–æ—Ç—ñ–ª–∏ –± –∑'—ó—Å—Ç–∏. –û—Å—å —Ç–∞–∫:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    ### Exercise
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: '# place your code here'
            9:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—é, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω –±—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º —Ç–∞ –≤–µ—Å–µ–ª–∏–º!
                    –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏ –º–æ–∂–µ—Ç–µ "`{ask}` —Å–æ—É—Å, `{if}` —Ö—Ç–æ—Å—å –∑–∞–º–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ–ø–ª—é —Ñ—Ä—ñ, –∞–ª–µ –≤–∏ –Ω–µ –±—É–¥–µ—Ç–µ —Ü—å–æ–≥–æ —Ä–æ–±–∏—Ç–∏, `{if}` —Ö—Ç–æ—Å—å –∑–∞–º–æ–≤–∏—Ç—å –ø—ñ—Ü—É!
                    –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —Ü–µ —É —Å–≤–æ—î–º—É –≤–ª–∞—Å–Ω–æ–º—É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ!
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                        {if} food {is} fries
                            price = price + 3
                            sauce = {ask} 'What kind of sauce would you like with your fries?'
                            {if} sauce {is} no
                                {print} 'no sauce'
                            {else}
                                price = price + 1
                                {print} 'with ' sauce
                        {if} food {is} pizza
                            price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    –ó–≤–∏—á–∞–π–Ω–æ, –≤–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –ª—é–¥–µ–π!
                    –ß–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Å—Ç—É–ø—É –¥–æ –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∫–æ–¥—É –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º?
                    –ü–æ—Ä–∞–¥–∞: –¥–µ—è–∫—ñ –ª—ñ–Ω—ñ—ó –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤—ñ–¥—Å—Ç—É–ø—É.
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
                start_code: courses = appetizer, main course, dessert
            11:
                story_text: |
                    –ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏`{for} i {in} {range} 1 {to} 5` –¥–ª—è `{print}` –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤—ñ–¥ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'Order number ' i
                        food = {ask} 'What would you like to eat?'
                        {print} food
                        {if} food {is} fries
                            sauce = {ask} 'What kind of sauce would you like with that?'
                            {print} sauce
                        drinks = {ask} 'What would you like to drink?'
                        {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything {else}?'
                    {print} 'Thank you!'
                    ```
                start_code: '# place your code here'
    rock:
        name: Rock, paper, scissors
        default_save_name: Rock
        description: Make your own rock, paper, scissors game
        levels:
            1:
                story_text: |
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                    Instead of using words, you could also use emojis of course: ‚úä‚úã‚úå
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ‚úä‚úã‚úå
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: '{print} Welcome to your own rock scissors paper!'
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
            3:
                story_text: |-

                    In this level we can enter lists and choose things from them.
                    You first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.
                    For example, you can let the computer pick from rock, paper and scissors.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: '{print} Welcome to your own rock scissors paper!'
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
                start_code: '# place your code here'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: SuperSpy
        default_save_name: SuperSpy
        description: Make your own spy code
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    if name {is} 'Agent007'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'TOPSECRET'
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} a + b
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    password {is} {ask} 'What is your password?'
                    {if} name {is} 'Agent007' {and} password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the trainstation at 10.00'
                     ```
                start_code: '# place your code here'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Sing a song!
        default_save_name: Song
        description: Print a song
        levels:
            6:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```

                    You can now repeat lines 2 to 9 as many times as you want by copying the lines.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
                start_code: '{print} ''Baby shark'''
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
                example_code: |
                    ```
                    verse = 99
                    {repeat} 99 {times}
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑–º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∏—Ç—è—á—É –ø—ñ—Å–µ–Ω—å–∫—É "–ü'—è—Ç—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞–≤–ø–æ—á–æ–∫". –ß–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏ —Å–∫–ª–∞—Å—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏—Å–ø—ñ–≤?
                    –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü—ñ–ª—É –ø—ñ—Å–µ–Ω—å–∫—É –ø—Ä–æ –∞–∫—É–ª—É (–≤–∫–ª—é—á–∞—é—á–∏ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∞–∫—É–ª –≤ —Å—ñ–º'—ó) –≤—Å—å–æ–≥–æ –∑–∞ 6 —Ä—è–¥–∫—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `{for}`!
                    –ê–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –ú–∞–∫–¥–æ–Ω–∞–ª—å–¥–∞ –∑ —É—Å—ñ–º–∞ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏.
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} 'if youre happy and you know it'
                            {print} action
                        {print} 'if youre happy and you know it and you really want to show it'
                        {print} 'if youre happy and you know it'
                        {print} action
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# place your code here'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Tic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# place your code here'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# place your code here'
    turtle:
        name: Turtle
        default_save_name: Turtle
        description: Make your own drawing
        levels:
            1:
                story_text: |
                    You can also use Hedy to draw. By combining turns and lines, you can make a square or stairs!

                    Using `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} {right}` turns a quarter turn in clockwise direction, `{turn} {left}` turns counter clockwise.
                    If you want to go backwards, you use the `{forward}` command but with a negative number. So for example `{forward} -100`

                    This is the start of a little staircase. Can you make it have 5 steps?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    In this level you can use variables to make the turtle interactive. For example you can ask the player how many steps the turtle must make.
                example_code: |
                    ```
                    answer {is} {ask} How many steps should the turtle make?
                    {forward} answer
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |-
                    {print} Turtle race!
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            3:
                story_text: |
                    In this level you can use use `{at} {random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list. You can copy and paste lines 2 and 3 to create a longer random path.
                example_code: |
                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
            4:
                story_text: |
                    In level 4 you have to use quotation marks with `{print}` and `{ask}`. Also when drawing!
                example_code: |
                    ```
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            5:
                story_text: |
                    In level 5 you can make a choice with `{if}`. For example between different types of figures.
                example_code: |
                    ```
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |-
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120 {else} angle {is} 90
                    {turn} angle
                    {forward} 25
            6:
                story_text: |
                    In this level you can use calculations to draw different figures.
                    You may have learned in school that turning a full circle is 360 degrees. If not, now you know!
                    That's why you also use 90 degrees for a square. 360 divided by 4 is 90.
                    Now that we can do math with Hedy, we can draw all the figures we want!
                example_code: |
                    ```
                    angles = {ask} 'How many angles do you want?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
                start_code: '{print} ''Drawing figures'''
            8:
                story_text: |
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
                example_code_2: |
                    ```
                    angles = {ask} 'How many angles should I draw?'
                    angle = 360 / angles
                    {repeat} angle {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: angles = {ask} 'How many angles should I draw?'
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: –ù–æ–≤–∏–π —Ä—ñ–∫
        default_save_name: –ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π –≤—ñ–¥–ª—ñ–∫
        description: –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É!
        levels:
            11:
                story_text: |
                    –£ —Ü—å–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É `{for}` —á–∏—Å–ª–æ `{in}` `{range}` –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É.

                    ### –í–ø—Ä–∞–≤–∞
                    –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ —ñ –∑–º—É—Å—å—Ç–µ –∫–æ–¥ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!
                example_code: |
                    ```
                    {for} –Ω–æ–º–µ—Ä {in} {range} _ {to} _
                        {print} –Ω–æ–º–µ—Ä
                    {print}'–ó –ù–æ–≤–∏–º —Ä–æ–∫–æ–º!'
                    ```
                start_code: '# —Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ —Ç—É—Ç'
