adventures:
    story:
        name: A t√∂rt√©net
        default_save_name: T√∂rt√©net
        description: K√©sz√≠ts egy interakt√≠v t√∂rt√©netet
        levels:
            1:
                story_text: |
                    Az 1. szinten elk√©sz√≠thetsz egy t√∂rt√©netet egy m√°sik f≈ëszerepl≈ëvel, amelyet te magad adsz meg.

                    Az els≈ë sorba √≠rt `{ask}` bek√©ri a t√∂rt√©net f≈ëszerepl≈ëj√©nek a nev√©t.

                    Az els≈ë sor ut√°n kezdd a `{print}` utas√≠t√°ssal, ha a mondatot ki kell √≠ratni.
                    Akkor haszn√°ld az `{echo}` parancsot, ha azt szeretn√©d, hogy f≈ëszerepl≈ë neve a mondat v√©g√©n legyen.
                example_code: |
                    ```
                    {ask} A t√∂rt√©net f≈ëszerepl≈ëje
                    {print} A f≈ëszerepl≈ë most az erd≈ëben fog s√©t√°lni
                    {echo} Kicsit f√©l, szeg√©ny
                    {print} ≈êr√ºlt zajokat hall minden√ºtt
                    {print} F√©l, hogy ez egy k√≠s√©rtet-j√°rta erd≈ë
                    ```
                story_text_2: |
                    Tudsz saj√°t t√∂rt√©netet √≠rni Hedy-ben a `{print}` , `{ask}` √©s `{echo}` haszn√°lat√°val?
                start_code: '{print} A t√∂rt√©neted itt kezd≈ëdik'
            2:
                story_text: |+
                    A 2. szinten sz√≥rakoztat√≥bb√° teheted a t√∂rt√©netedet. F≈ë karaktered neve mostant√≥l
                    b√°rhol lehet a mondatban.

                    Ehhez egy kicsit fel kell jav√≠tanod a k√≥dodat. Most el≈ësz√∂r el kell nevezned a f≈ëszerepl≈ëdet. Olyan nevet v√°lassz, amely nem tartalmaz √©kezetes bet≈±t.

                    Ezt a nevet b√°rhol elhelyezheted a mondatban.

                example_code: |
                    ```
                    nev is ask Mi a neve a f≈ëszerepl≈ënek?
                    print nev most futni fog az erd≈ëben
                    print nev kiss√© f√©l
                    print ≈êr√ºlt zajokat hall minden√ºtt
                    print nev f√©l hogy ez egy k√≠s√©rtetj√°rta erd≈ë
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
                start_code: print A te t√∂rt√©neted
            3:
                story_text: |
                    In level 3 you can make your story more fun. Hozz√°adhatsz valami v√©letlenszer≈±t is a t√∂rt√©net√©hez. B√°rmilyen sz√∂rnyet, √°llatot vagy m√°s akad√°lyt.
                example_code: |
                    ```
                    allatok is bagoly, s√ºndiszn√≥, tatu
                    print Most hallja a allatok at random hangj√°t
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example
                example_code_2: |
                    ```
                    {print} He hears a sound
                    animals {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} What do you think it is?
                    {add} animal {to_list} animals
                    {print} it was an animals {at} {random}
                    ```
                story_text_3: |
                    This is an example of the `{remove}` command in your story
                example_code_3: |
                    ```
                    {print} His backpack got way too heavy.
                    {print} Inside were a bottle of water, a flashlight and a brick.
                    bag {is} water, flashlight, brick
                    dump {is} {ask} Which item should he dump?
                    {remove} dump {from} bag
                    ```
                start_code: print A te t√∂rt√©neted
            4:
                story_text: |-
                    Lehet, hogy √©szrevetted, hogy m√©g mindig van hiba a 2. szinten.
                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot k√©sz√≠teni, amely tartalmazza a nev sz√≥t?
                    Ezt meg tudod oldani a 3. szinten.

                    Id√©z≈ëjeleket kell haszn√°lnod minden ki√≠rat√°shoz.
                example_code: |
                    ```
                    nev is Jancsi
                    print 'A f≈ë karakter neve ' nev
                    print nev ' most az erd≈ëben j√°r'
                    print nev ' egy kicsit f√©l'
                    allatok is bagoly, s√ºndiszn√≥, p√°nc√©los
                    print 'Hallja a k√∂vetkez≈ë √°llat hangj√°t: ' allatok at random
                    print nev ' f√©l, hogy ez egy k√≠s√©rtetj√°rta erd≈ë'
                    ```
                start_code: print 'A t√∂rt√©neted ide lesz √≠rva!'
            5:
                story_text: |-
                    Amit a 4. szinten megtehetsz, az m√©g sz√≥rakoztat√≥bb√° var√°zsolja t√∂rt√©netedet. A 4.
                    szinten a t√∂rt√©nethez k√ºl√∂nb√∂z≈ë v√©gz≈ëd√©seket programozhatsz.
                    Gondolj p√©ld√°ul a t√∂rt√©net k√©t k√ºl√∂nb√∂z≈ë v√©g√©re:
                    - A hercegn≈ë s√©t√°l az erd≈ën
                    - √ñsszefut egy sz√∂rnyeteggel
                    - Boldog befejez√©s: El≈ëveszi a kardj√°t, √©s a sz√∂rny gyorsan elszalad
                    - Rossz befejez√©s: A sz√∂rny megeszi a hercegn≈ët
                    Biztos√≠thatod azt is, hogy egy n√©v √∫jra be√≠rhat√≥ legyen. Ez ugyan√∫gy m≈±k√∂dik, mint a 3.
                    szinten. Kombin√°lhatod ezt egy `if`-fel, √©s akkor m√°r k√©sz√≠tett√©l is egy eg√©sz programot!
                example_code: |-
                    ```
                    nev is ask 'Ki j√°r az erd≈ëben?'
                    print nev ' s√©t√°l az erd≈ën'
                    print nev ' tal√°lkozik egy sz√∂rnnyel'
                    vege is ask ' Egy j√≥ vagy rossz v√©get szeretn√©l?'
                    if vege is j√≥ print nev ' el≈ëveszi a kardot √©s a sz√∂rny gyorsan elszalad' else print 'A sz√∂rny megeszi ' nev '-t'
                    ```
                start_code: print 'Itt lesz hamarosan a t√∂rt√©neted!'
            7:
                story_text: |-
                    A t√∂rt√©netben valaki bizonyos szavakat t√∂bbsz√∂r is elmond. P√©ld√°ul, ha valaki seg√≠ts√©get k√©r vagy el√©nekel egy dalt.
                    Az ilyen ism√©tl√©st be√≠rhatod a 6. szintbe tartoz√≥ t√∂rt√©netbe a 'repeat' paranccsal.
                example_code: |-
                    ```
                    print 'A herceg folyamatosan seg√≠ts√©get k√©rt'
                    repeat 5 times print 'Seg√≠ts√©g!'
                    print 'Mi√©rt nem seg√≠t nekem senki?'
                    ```
                start_code: repeat 5 times print 'Seg√≠ts√©g!'
            8:
                story_text: |
                    In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} 'Michael types in the code and...'
                        {print} 'üí•ZAP!üí•'
                        {print} 'They are back in their garage'
                    {else}
                        {print} 'Michael yells COME ON RICHARD! RUN FASTER!'
                        {print} 'But Richard is too slow...'
                        {print} 'The T-rex closes in and eats him in one big bite!ü¶ñ'
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: |
                    ```
                    animals = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} animal {in} animals
                        {print} 'I see a ' animal ' looking at me'
                        {print} animal
                        {print} animal
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.
                example_code: |
                    ```
                    sword = 'lost'
                    game = 'on'
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {for} i {in} {range} 0 {to} 2
                        {if} game {is} 'on'
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} 'left' {and} sword {is} 'found'
                                {print} 'Our hero comes across a dragon!'
                                {print} 'Luckily our hero has a sword to defeat the beast!'
                                game = 'over'
                            {if} path {is} 'left' {and} sword {is} 'lost'
                                {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                {print} 'Our hero is beaten by the dragon...'
                                {print} 'Try again'
                                game = 'over'
                            {if} path {is} 'right' {and} sword {is} 'found'
                                {print} 'You have already found the sword. There is nothing left here.'
                                {print} 'She walks back'
                            {if} path {is} 'right' {and} sword {is} 'lost'
                                {print} 'Our hero finds a sword'
                                {print} 'This could come in very handy'
                                sword = 'found'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.
                    Or you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
                start_code: '# place your code here'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
                start_code: '# Schrijf jouw code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# place your code here'
    calculator:
        name: Sz√°mol√≥g√©p
        default_save_name: Sz√°mol√≥g√©p
        description: K√©sz√≠ts sz√°mol√≥g√©pet
        levels:
            6:
                story_text: |-
                    Most, hogy tudsz sz√°molni, l√©trehozhatsz egy programot is a matematikai sz√°m√≠t√°sok gyakorl√°s√°hoz. A sz√°m√≠t√°sokat magad is elk√©sz√≠theted, p√©ld√°ul:
                    Azt is enged√©lyezheted, hogy a sz√°m√≠t√≥g√©p v√©letlenszer≈± sz√°m√≠t√°sokat v√©gezzen v√©letlensz√°mok haszn√°lat√°val.

                    √çgy v√°lassz ki p√°r t√°bl√°zatot a gyakorl√°shoz, √©s ett≈ël mindig m√°s eredm√©nyt kapsz
                example_code: |-
                    ```
                    jo_valasz = 11 * 27
                    valasz = ask 'Mennyi 11 √©s 27 szorzata?'
                    if valasz is jo_valasz print 'nagyszer≈±!'
                    else print 'Nem j√≥! Ennyi: ' jo_valasz
                    ```
                story_text_2: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_2: |-
                    ```
                    tablazat = 4, 5, 6, 8
                    szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabla = tablazat at random
                    szam = szamok at random
                    jo_valasz = tabla * szam
                    valasz = ask 'Mennyi ' tabla ' √©s ' szam ' szorzata?'
                    if valasz is jo_valasz print 'rendben'
                    else print 'hiba! ennyi: ' jo_valasz
                    ```
                story_text_3: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                start_code: print '√údv√∂zl√ºnk a sz√°mol√≥g√©pn√©l!'
            9:
                story_text: A 6. szinten megtanultad a sz√°mol√≥g√©p k√©sz√≠t√©s√©t, a 7. szinten kib≈ëv√≠theted ezt a k√≥dot, √©s egy kis matematikai j√°t√©kot k√©sz√≠thetsz bel≈ële. Mint ez...
                example_code: |-
                    ```
                    pontszam = 0
                    repeat 10 times
                        szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        szam1 = szamok at random
                        szam2 = szamok at random
                        helyesvalasz = szam1 * szam2
                        print 'Mennyi ' szam1 ' * ' szam2 '?'
                        valasz = ask 'G√©peld ide a v√°laszodat...'
                        print 'A v√°laszod: ' valasz
                        if valasz is helyesvalasz
                            pontszam = pontszam + 1
                    print 'Sz√©p munka! A pontsz√°mod... ' pontszam ' a 10-b≈ël!'
                    ```
                start_code: print '√údv√∂z√∂l√ºnk a sz√°mol√≥g√©pn√©l!'
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
                start_code: '# place your code here'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                start_code: '# place your code here'
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# place your code here'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Bevezet≈ë
        default_save_name: intro
        description: Szint magyar√°zat
        levels:
            1:
                story_text: "Az els≈ë szinten a `{print}`, `{ask}` √©s `{echo}` parancsokat haszn√°lhatod.\n√çrd a k√≥dodat a programoz√°si ablakba, vagy nyomd meg a gombot a p√©lda programok mellett, hogy bem√°sold!\nPr√≥b√°ld ki a k√≥dot a z√∂ld 'K√≥d futtat√°sa' gomb megnyom√°s√°val a programoz√°si ablak alatt!\n\n\
                    Sz√∂veget √≠rhatsz a k√©perny≈ëre a `{print}` paranccsal.     \n"
                start_code: '{print} Hell√≥ vil√°g!'
            2:
                story_text: |
                    A 2. szinten k√©t √∫j parancsot tanulunk: `{is}` √©s `{sleep}`.
                    Nevet adhatsz egy sz√≥nak az `{is}` paranccsal. Ezt a nevet v√°ltoz√≥nak nevezz√ºk. Ebben a p√©ld√°ban l√©trehoztunk k√©t v√°ltoz√≥t, az egyik neve n√©v, a m√°sik√© kor. B√°rhol haszn√°lhatod a n√©v sz√≥t a k√≥dodban, √©s a Hedy kicser√©li, valahogy √≠gy:

                    √çgy m√°r nincs sz√ºks√©g az `{echo}` parancsra.
                example_code: |
                    ```
                    n√©v {is} Hedy
                    kor {is} 15
                    {print} n√©v ma lesz kor √©ves
                    ```
                story_text_2: |
                    A `{print}` ugyan√∫gy m≈±k√∂dik, de a `{ask}` parancs megv√°ltozott. Haszn√°lnod kell egy v√°ltoz√≥t a `{ask}` paranccsal is. √çgy n√©z ki:
                start_code: '{print} Hell√≥ vil√°g!'
            3:
                story_text: |
                    A 3. szinten k√©sz√≠thetsz list√°t is. K√©rheted a sz√°m√≠t√≥g√©pet, hogy v√©letlenszer≈±en v√°lasszon valamit a list√°b√≥l. Ezt a `{at} {random}` paranccsal teheted meg.
                start_code: '{print} Hell√≥ vil√°g!'
            4:
                story_text: |
                    A 4. szinten a `{ask}` √©s a `{print}` m√°shogy m≈±k√∂dik.
                    Amit ki akarsz √≠ratni, id√©z≈ëjelbe kell tenned.
                    Ez hasznos, mert most m√°r mindent ki√≠rathatsz, amit csak akarsz, azokat a szavakat is, amiket arra haszn√°lt√°l, hogy elt√°rolj valamit az `{is}` paranccsal.
                    A legt√∂bb programoz√°si nyelv id√©z≈ëjelet haszn√°l a ki√≠rat√°shoz, √≠gy egy kicsit k√∂zelebb ker√ºl√ºnk az igazi programoz√°shoz!
                example_code: |
                    ```
                    {print} "Mostant√≥l id√©z≈ëjeleket kell haszn√°lni!"
                    v√°lasz {is} {ask} "Miket kell mostant√≥l haszn√°lni?"
                    {print} v√°lasz " kell haszn√°lni."
                    ```
                start_code: '{print} ''Hell√≥ vil√°g'''
            5:
                story_text: |
                    Az 5. szinten √∫jdons√°g k√∂vetkezik, a `{if}`! A `{if}` paranccsal k√©t lehet≈ës√©g k√∂z√ºl v√°laszthatsz.
                    Ez a k√≥d ki√≠rja, hogy klassz, ha a Hedy nevet adod meg n√©vk√©nt, √©s f√∫jt, ha valami m√°st √≠rsz be.
                    A `{ask}` √©s `{print}` ugyan√∫gy m≈±k√∂dnek, mint a 4. szinten.
                example_code: |
                    ```
                    n√©v {is} {ask} "Hogy h√≠vnak?"
                    {if} n√©v {is} Hedy {print} "klassz" {else} {print} "f√∫j!"
                    ```
                start_code: |-
                    n√©v {is} {ask} "Hogy h√≠vnak?"
                    {if} n√©v {is} Hedy {print} "klassz!" {else} {print} "ajaj"
            6:
                story_text: |
                    Ezen a szinten √∫j dolgot tanulunk: sz√°molni.

                    Az √∂sszead√°s k√∂nny≈±, ugyan√∫gy √≠rod, mint a matekban: `5 + 5`. A kivon√°s is j√≥l m≈±k√∂dik, √≠gy √≠rjuk: `5 - 5`.

                    A szorz√°s egy kicsit k√ºl√∂nb√∂zik, ugyanis nincs szorz√°sjel a billenty≈±zeten. N√©zd meg, t√©nyleg nincs!
                    Ez√©rt haszn√°ljuk a csillagot: `5 * 5`. Olvasd ezt "5-sz√∂r 5"-nek, √≠gy k√∂nnyen megjegyzed.
                example_code: |
                    ```
                    {print} "5 plusz 5 egyenl≈ë " 5 + 5
                    {print} "5 m√≠nusz 5 egyenl≈ë " 5 - 5
                    {print} "5-sz√∂r 5 egyenl≈ë " 5 * 5
                    ```
                start_code: '{print} "5-sz√∂r 5 az " 5 * 5'
            7:
                story_text: |
                    A 7. szinten bemutatkozik az `{repeat}` parancs. Ezzel egy sort t√∂bbsz√∂r v√©grehajthatsz.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} "A Hedy sz√≥rakoztat√≥!"
                    ```
                start_code: '{repeat} 3 {times} {print} "A Hedy sz√≥rakoztat√≥!"'
            8:
                story_text: |
                    A `{ask}` √©s a `{print}` m√©g mindig √∫gy m≈±k√∂dik, ahogyan ismered. De a `{if}`, `{else}` √©s az `{repeat}` utas√≠t√°sok megv√°ltoztak!
                    Most k√ºl√∂nb√∂z≈ë utas√≠t√°sok egy csoportj√°t futtathatod egyszerre, de beh√∫z√°ssal tagolnod kell a k√≥dot.
                    Ez azt jelenti, hogy n√©gy sz√≥k√∂zt kell tenn√ºnk a sor elej√©re. Ez akkor is √©rv√©nyes, ha csak egy soros blokkot akarsz l√©trehozni.
                example_code: |
                    √çgy m≈±k√∂dik mostant√≥l az `{repeat}` parancs:
                    ```
                    {repeat} 5 {times}
                        {print} "Sziasztok"
                        {print} "Ez 5-sz√∂r ism√©tl≈ëdik"
                    ```
                    √çgy m≈±k√∂dik mostant√≥l a `{if}` √©s az `{else}` parancs:

                    ```
                    n√©v {is} {ask} "Hogy h√≠vnak?"
                    {if} n√©v {is} Hedy
                        {print} "Szia Hedy!"
                        {print} "J√°tszhatsz a sz√°m√≠t√≥g√©ppel."
                    {else}
                        {print} "BEHATOL√ì!"
                        {print} "Nem haszn√°lhatod ezt a g√©pet!"
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} "Sziasztok"
                        {print} "Ez 5-sz√∂r lett ki√≠rva"
            9:
                story_text: |
                    Ezen a szinten m√°r nemcsak t√∂bb soros `{if}` √©s `{repeat}` parancsokat haszn√°lhatsz, hanem egym√°sba is teheted ≈ëket.
                    A p√©ld√°ban egy `{if}` van egy `{repeat}` parancson bel√ºl. Ford√≠tva is lehet csin√°lni, √©s m√©g `{if}` is lehet `{if}` `{if}` parancsba √°gyazva, vagy `{repeat}` `{repeat}`-be.
                    Pr√≥b√°ld ki!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        √©tel = {ask} "Mit k√©rsz?"
                        {if} √©tel {is} pizza
                            {print} "fincsi!"
                        {else}
                            {print} "a pizza finomabb"
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        √©tel = {ask} "Mit k√©rsz?"
                        {if} √©tel {is} pizza
                            {print} "fincsi!"
                        {else}
                            {print} "a pizza finomabb"
            10:
                story_text: |-
                    Ezen a szinten √∫j parancsot mutatunk be, a `{for}`-t. A `{for}` seg√≠ts√©g√©vel egy lista minden elem√©t haszn√°lhatod.
                    A `{for}` is l√©trehoz egy blokkot, pont √∫gy, ahogy az `{repeat}` √©s `{if}`, ez√©rt az √∂sszes sort a blokkban sz√≥k√∂z√∂kkel kell kezdeni.
                example_code: |
                    ```
                    √°llatok {is} kutya, cica, g√∂mbhal
                    {for} √°llat {in} √°llatok
                      {print} 'Sz√©p ' √°llat
                    ```
                start_code: |-
                    √°llatok {is} kutya, cica, g√∂mbhal
                    {for} √°llat {in} √°llatok
                      {print} 'Sz√©p ' √°llat
            11:
                story_text: |-
                    A `{print}` ugyan√∫gy m≈±k√∂dik, mint eddig, de a `{for}` parancsot egy √∫j form√°val eg√©sz√≠tj√ºk ki. Ahelyett, hogy `{repeat} 5 {times}` √≠rhatod azt, hogy `{for} sz√°ml√°l√≥ {in} {range} 1 {to} 5` √©s alatta haszn√°lhatod, `sz√°ml√°l√≥`t.
                    Pr√≥b√°ld ki, √©s n√©zd meg, mi t√∂rt√©nik! Ne felejts el beh√∫z√°sokat haszn√°lni a `{for}` √©s `{if}` utas√≠t√°sok ut√°n. (Ez azt jelenti, hogy egy sort n√©gy sz√≥k√∂zzel kell kezdened.)
                start_code: |-
                    {for} sz√°ml√°l√≥ {in} {range} 1 {to} 10
                        {print} sz√°ml√°l√≥
            12:
                story_text: |-
                    **Tizedes t√∂rtek**
                    Eg√©szen eddig a Hedy nem kezelte a t√∂rt sz√°mokat, mint az 1,5. Figyelj, hogy a sz√°m√≠t√≥g√©pek `.` haszn√°lnak, √≠gy: 1.5
                example_code: |
                    ```
                    {print} 'K√©t √©s f√©l plusz k√©t f√©l egyenl≈ë...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'a tizedes t√∂rtek pontot haszn√°lnak'
                    {print} 2.5 + 2.5
            13:
                story_text: Most megtanuljuk az `{and}` √©s `{or}` kifejez√©sek haszn√°lat√°t! Ha k√©t √°ll√≠t√°st szeretn√©l ellen≈ërizni, akkor nem kell kett≈ë {if} parancsot haszn√°lnod, haszn√°lhatod az `{and}` √©s `{or}` parancsokat. Ha az `{and}` parancsot haszn√°lod, akkor az `{and}` bal √©s jobb oldal√°n mindk√©t
                    √°ll√≠t√°snak igaznak kell lennie. `{or}` eset√©n csak egy √°ll√≠t√°snak kell helyesnek lennie.
                example_code: |
                    ```
                    n√©v = {ask} "Hogy h√≠vnak?"
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} n√©v {is} "Hedy" {and} kor {is} 2
                        {print} "Te vagy az igazi Hedy!"
                    ```
                start_code: |-
                    n√©v = {ask} "Hogy h√≠vnak?"
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} n√©v {is} "Hedy" {and} kor {is} 2
                        {print} "Te vagy az igazi Hedy!"
            14:
                story_text: |
                    Tov√°bbi √∫j elemeket fogunk megtanulni! Lehet, hogy m√°r a matematik√°b√≥l ismered ezeket a jeleket, a `<` √©s a `>`.
                    A `<` ellen≈ërzi, hogy az els≈ë sz√°m kisebb-e, mint a m√°sodik, p√©ld√°ul kor `<` 12 megmondja, hogy a kor kisebb-e, mint 12.
                    Ha arra vagy k√≠v√°ncsi, hogy az els≈ë sz√°m kisebb vagy egyenl≈ë-e a m√°sodikkal, a `<=` jelet haszn√°ld, p√©ld√°ul kor `<=` 11.
                    A `>` ellen≈ërzi, hogy az els≈ë sz√°m nagyobb-e, mint a m√°sodik, p√©ld√°ul pontsz√°m `>` 10 megmondja, hogy a pontsz√°m nagyobb-e, mint 10.
                    Ha arra vagy k√≠v√°ncsi, hogy az els≈ë sz√°m nagyobb vagy egyenl≈ë-e a m√°sodikkal, a `>=` jelet haszn√°ld, p√©ld√°ul pontsz√°m `<=` 11.
                    Ezeket az √∂sszehasonl√≠t√°sokat `{if}` parancsok ut√°n haszn√°lhatod, √≠gy:
                example_code: |
                    ```
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} kor > 12
                        {print} "Id≈ësebb vagy n√°lam!"
                    ```
                start_code: |-
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} kor < 13
                        {print} "Fiatalabb vagy n√°lam!"
                    {else}
                        {print} "Id≈ësebb vagy n√°lam!"
            15:
                story_text: |-
                    Tanulni fogunk egy √∫j ciklust, az `{while}` ciklust! Addig folytatjuk a ciklust, am√≠g az √°ll√≠t√°s igaz!
                    Sz√≥val ne felejtsd el m√≥dos√≠tani a ciklusban szerepl≈ë √©rt√©ket!

                    A p√©ldak√≥dban addig megy√ºnk, am√≠g meg nem kapjuk a helyes v√°laszt.
                    Ha soha nem kapjuk meg a megold√°st, akkor a ciklus soha nem √©r v√©get!
                example_code: |
                    ```
                    v√°lasz = 0
                    {while} v√°lasz != 25
                        v√°lasz = {ask} "Mennyi 5-sz√∂r 5?"
                    {print} "Ez a helyes v√°lasz"
                    ```
                start_code: |-
                    v√°lasz = 0
                    {while} v√°lasz != 25
                        v√°lasz = {ask} "Mennyi 5-sz√∂r 5?"
                    {print} "Ez a helyes v√°lasz"
            16:
                story_text: |-
                    List√°kat fogunk k√©sz√≠teni Python m√≥dra, sz√∂gletes z√°r√≥jelekkel! Megtartjuk az id√©z≈ëjeleket az elemek k√∂r√ºl, ahogy az el≈ëz≈ë szinteken tanultuk, √©s az eg√©sz list√°t sz√∂gletes z√°r√≥jelek k√∂z√© foglaljuk.
                    A sz√∂gletes z√°r√≥jeleket arra is haszn√°lhatod, hogy kiv√°laszd a lista elem√©t egy adott helyen.
                example_code: |
                    ```
                    bar√°tok = ["Alad√°r", "Bl√∂ki", "MZ/X"]
                    szerencs√©s_sz√°mok = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} bar√°tok[i] " szerencs√©s sz√°ma"
                        {print} "egyenl≈ë " szerencs√©s_sz√°mok[i]
                    ```
                start_code: |-
                    gy√ºm√∂lcs = ['alma', 'ban√°n', 'cseresznye']
                    {print} gy√ºm√∂lcs
            17:
                story_text: |-
                    Most egy kicsit meg fogjuk v√°ltoztatni a beh√∫z√°st. Minden alkalommal, amikor beh√∫z√°st haszn√°lunk, az el≈ëz≈ë sor v√©g√©re`:` jelet tesz√ºnk.

                    Ezen a szinten egy √∫j parancsot is haszn√°lhatsz: `{elif}`. Az `{elif}` az {else} {if} r√∂vid√≠t√©se, √©s sz√ºks√©ged lesz r√°, ha 3 (vagy t√∂bb!) alternat√≠v√°t szeretn√©l haszn√°lni.
                    Pr√≥b√°ld ki!
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} "Aki b√∫jt, aki nem, megyek!"
            18:
                story_text: El√©rt√ºnk az igazi Python k√≥dhoz! Ez azt jelenti, hogy z√°r√≥jeleket kell haszn√°lnunk a {print} √©s {range} eset√©ben.
                start_code: |-
                    n√©v = "Hedy"
                    {print}("A nevem ", n√©v)
    dice:
        name: K√©sz√≠tsd el a saj√°t kock√°dat
        default_save_name: Kocka
        description: K√©sz√≠tsd el a saj√°t kock√°dat
        levels:
            3:
                story_text: |-
                    A 2. szinten v√°laszthatunk egy list√°b√≥l. Ezzel hagyhatjuk, hogy a sz√°m√≠t√≥g√©p v√°lassza ki
                    a kocka egyik oldal√°t.
                    Vess egy pillant√°st azokra a j√°t√©kokra, amelyek otthon vannak a szekr√©nyedben.
                    Vannak (speci√°lis) kock√°val j√°tszott j√°t√©kok? Ezzel a k√≥ddal m√°solhatod is.
                    P√©ld√°ul a Giliszta j√°t√©k kock√°ja a 1‚Äì5-ig sz√°mokkal √©s egy giliszt√°val.
                    ! [Giliszta j√°t√©k kock√°ja a 1‚Äì5-ig sz√°mokkal √©s egy giliszt√°val]
                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot megfogalmazni, amely tartalmazza a
                    dob√°sokat?
                    P√©ld√°ul. `print V√°lasztottam a dobasok k√∂z√ºl`. Pr√≥b√°ld ki, ha m√©g nem tetted meg.
                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: Az [1, 2, 3, 4, 5, f√∂ldigiliszta] k√∂z√ºl
                    v√°lasztottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    print dobasok at random
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: print Mit dobunk ez√∫ttal?
            4:
                story_text: |-
                    A 3. szinten mondatokat k√©sz√≠thet√ºnk a v√°ltoz√≥ √©rt√©k√©vel, term√©szetesen id√©z≈ëjelekkel.
                    Ez√∫ttal a minta k√≥d nem eg√©szen teljes. Be tudod fejezni a k√≥dot?
                start_code: print 'Mit dobunk ez√∫ttal?'
            5:
                story_text: |-
                    Ism√©t k√©sz√≠thetsz egy kock√°t a 4. szinten az `if` haszn√°lat√°val.
                    T√∂ltsd ki a mintak√≥dot √∫gy, hogy a k√≥d azt mondja: "Meg√°ll√≠thatod a dob√°st", miut√°n
                    f√∂ldigiliszt√°t dobt√°l.
                    De lehet, hogy √∫jra l√©tre akarsz hozni egy kock√°t egy teljesen m√°s j√°t√©kb√≥l. Ez is
                    rendben van! Ezut√°n √°ll√≠tsd be a saj√°t reakci√≥j√°t. Pl. ‚ÄûIgen‚Äù 6-ra √©s ‚Äûk√°r‚Äù valami m√°sra.
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    dobas _
                    print 'Te' _ 'dobt√°l'
                    if _ is giliszta print 'Meg√°llhatsz.' _ print 'Dobj √∫jra!'
                    ```
                start_code: print 'Mit dobunk ez√∫ttal?'
            6:
                story_text: |-
                    Azt is megteheted, hogy √∫jra egy giliszta kock√°t csin√°lsz a 6. szinten, de most kisz√°m√≠thatod azt is, hogy h√°ny pontot dobt√°l.

                    Lehet, hogy tudod, hogy a giliszta 5 pontot sz√°m√≠t a j√°t√©kban. Most egy dob√°s ut√°n azonnal kisz√°m√≠thatod, h√°ny pontot dobott.

                    Ez az a k√≥d, amely kisz√°m√≠tja a pontokat egy dob√°shoz:

                    √Åt tudod alak√≠tani a k√≥dot, hogy megkapd a 8 kockadob√°s √∂sszpontsz√°m√°t? Ehhez ki kell v√°gnod √©s be kell illesztened a k√≥d egyes sorait.


                    Siker√ºlt kisz√°molni a 8 kocka pontsz√°m√°t? Ehhez sok v√°g√°s √©s beilleszt√©s kellett, igaz? Ezt megk√∂nny√≠tj√ºk a 7. szinten!
                example_code: |-
                    ```
                    dobasok = 1, 2, 3, 4, 5, giliszta
                    pontok = 0
                    dobas = dobasok at random
                    print 'a dob√°sod' dobas
                    if dobas is giliszta pontok = pontok + 5 else pontok = pontok + dobas
                    print 'Pontok:' pontok
                    ```
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: print 'Mit dobunk ez√∫ttal?'
            7:
                story_text: |-
                    Az 5. szinten ism√©t k√©sz√≠thetsz kock√°t . A `repeat` k√≥ddal k√∂nnyed√©n dobhatsz egy
                    csom√≥ dob√≥kock√°t.
                    Pr√≥b√°ld meg befejezni a mintak√≥dot! A k√∂t≈ëjeleknek t√∂bb parancsot √©s karaktert
                    kell tartalmazniuk.
                    De tal√°n teljesen m√°s kock√°t akarsz k√©sz√≠teni. Term√©szetesen lehet!
                example_code: |-
                    ```
                    dob√°sok is 1, 2, 3, 4, 5, giliszta
                    repeat _ _ print _ _
                    ```
                start_code: print 'Mit dobunk ez√∫ttal?'
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# place your code here'
    dishes:
        name: Ki mosogat?
        default_save_name: mosogat
        description: Haszn√°ld a sz√°m√≠t√≥g√©pet, hogy l√°sd, ki mosogat (Kezdd a 2. szinten)
        levels:
            3:
                story_text: |-
                    Otthon √°ltal√°ban nem √©rtesz egyet abban, hogy kinek kell ma mosogatnia vagy kicser√©lnie az alomdobozt?

                    Ezut√°n hagyhatod, hogy a sz√°m√≠t√≥g√©p nagyon tisztess√©gesen v√°lasszon. Ezt beprogramozhatod a 2. szinten!

                    El≈ësz√∂r √°ll√≠tsd √∂ssze a csal√°dja tagjainak list√°j√°t. Ezut√°n v√°laszd az 'at random' lehet≈ës√©get a list√°b√≥l.


                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot alkotni, amely az emberek sz√≥t tartalmazta?

                    Pl. `print Ezek k√∂z√ºl az emberek k√∂z√ºl v√°lasztottam`. Pr√≥b√°ld ki, ha m√©g nem tetted meg.

                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: [apu, anya, Edit, Gizi] k√∂z√ºl v√°lasztottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print emberek at random
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
                start_code: print Ki mosogat?
            4:
                story_text: |
                    Az id√©z≈ëjelek seg√≠ts√©g√©vel szebb√© teheted a mosogat√°s tervez√©s√©t.
                    Ez√∫ttal a minta k√≥d nem eg√©szen teljes.
                    Ki tudod eg√©sz√≠teni a k√≥dot a helyes parancsok vagy karakterek pontokra t√∂rt√©n≈ë be√≠r√°s√°val?
                    Minden √ºres helyet egy paranccsal kell kicser√©lni.
                    Tipp: Ne felejtsd el az id√©z≈ëjeleket.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print _ ≈ë mosogat: _
                    print emberek at _
                    ```
                start_code: print 'Ki mosogat?'
            5:
                story_text: |-
                    Az `if` seg√≠ts√©g√©vel most sz√≥rakoztat√≥bb√° teheted a v√°laszt√°st a programban.
                    Megk√©rheted a programot, hogy v√°laszoljon a sz√°m√≠t√≥g√©p v√°laszt√°s√°ra.
                    Befejezheted a k√≥dot √∫gy, hogy ‚Äût√∫l rosszul‚Äù √≠rja ki, amikor rajtad a sor, √©s egy√©bk√©nt
                    ‚Äûigen!‚Äù?
                    Ne felejtsd el az id√©zeteket!
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    mosogato is emberek at random
                    if mosogato is Gizi print _ sajnos mosogatnom kell _ else print 'szerencs√©re nem √©n,
                    mert' _ 'm√°r mosogat'
                    ```
                start_code: print 'Ki mosogat?'
            6:
                story_text: |-
                    Ki milyen gyakran mosogat? Ez igazs√°gos? Ezt megsz√°molhatod a 5. szinten.

                    Most n√©h√°nyszor √°tm√°solhatod a 3‚Äì5-√∂s sorokat (pl. az eg√©sz h√©tre 7-szer), hogy ism√©t egy eg√©sz h√©tre sz√°moljon.
                    Elk√©sz√≠ted az eg√©sz h√©t k√≥dj√°t?

                    Most sokat kell m√°solnod √©s beillesztened, igaz? Ezt a 7. szinten jav√≠tjuk.
                    Ezen a szinten a v√©ge a mosogat√≥ kalandnak! De m√©g mindig sok kaland van m√°s szinteken, p√©ld√°ul egy sz√°mol√≥g√©ppel, egy interakt√≠v t√∂rt√©nettel √©s egy bonyolultabb j√°t√©kkal.
                example_code: |-
                    ```
                    emberek = anya, apa, Edit, Gizi
                    edit_mosogat = 0
                    mosogato = emberek at random
                    print 'A mosogat√≥' mosogato
                    if mosogato is Edit edit_mosogat = edit_mosogat + 1
                    print 'Edit ezen a h√©ten' edit_mosogat 'alkalommal mosogatott'
                    ```
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
                start_code: print 'Ki mosogat?'
            7:
                story_text: |-
                    Az `repeat` seg√≠ts√©g√©vel megism√©telheted a k√≥dr√©szleteket. Ennek seg√≠ts√©g√©vel
                    kisz√°m√≠thatod, hogy kik fogj mosogatni az eg√©sz h√©ten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    repeat _ _ print 'a mosogat√≥:' _
                    ```
                start_code: print 'Ki mosogat?'
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
                start_code: '# place your code here'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: J√≥sn≈ë
        default_save_name: J√≥sn≈ë
        description: Hadd j√≥solja meg Hedy a j√∂v≈ët
        levels:
            1:
                story_text: |-
                    Volt√°l m√°r fesztiv√°lon, √©s egy j√≥sn≈ë megj√≥solta a j√∂v≈ëdet? Vagy j√°tszott√°l m√°r var√°zslatos nyolc labd√°val?
                    Akkor val√≥sz√≠n≈±leg tudod, hogy nem igaz√°n tudj√°k megj√≥solni a j√∂v≈ëdet, de ett≈ël m√©g sz√≥rakoztat√≥ j√°tszani!

                    A k√∂vetkez≈ë szinteken megtanulhatod, hogyan kell saj√°t j√≥sn≈ët l√©trehozni!
                    Az 1. szinten k√∂nnyen kezdheted, ha hagyod, hogy Hedy j√≥sn≈ëk√©nt mutatkozzon be, √©s hagyja, hogy visszhangozza a j√°t√©kosok v√°laszait.
                    Mint ez:
                example_code: |
                    ```
                    print Szia, Hedy, a j√≥sn≈ë vagyok!
                    ask Ki vagy te?
                    print Hadd n√©zzek bele a krist√°lyg√∂mb√∂mbe
                    print L√°tom... L√°tom...
                    echo A neved
                    ```
                    Hedy most csak a nevedet mondja meg. Ki tudod b≈ëv√≠teni a k√≥dot, hogy Hedy t√∂bb dolgot meg tudjon j√≥solni r√≥lad?

                    Nyilv√°nval√≥, hogy Hedy m√©g nem t√∫l j√≥ j√≥sn≈ë, hiszen csak meg tudja ism√©telni a j√°t√©kosok √°ltal adott v√°laszokat!
                    Vess egy pillant√°st a 2. szintre, hogy fejleszd a j√≥sn≈ëdet.
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# place your code here'
            3:
                story_text: |-
                    Az 1. szinten megalkottad els≈ë j√≥sl√°sg√©pedet, de Hedy nem tudott igaz√°n megj√≥solni semmit, csak visszhangot.
                    A 2. szinten haszn√°lhatsz egy v√°ltoz√≥t √©s az `at random`  parancsot, hogy val√≥ban engedd, hogy Hedy v√°laszoljon Neked. N√©zd meg p√©ld√°ul ezt a k√≥dot:

                    Most Hedy csak igennel, nemmel vagy tal√°n v√°laszolhat. Adhatsz Hedynek t√∂bb v√°laszlehet≈ës√©get, p√©ld√°ul ‚Äûhat√°rozottan‚Äù vagy ‚Äûk√©rdezz √∫jra‚Äù
                example_code: |-
                    Ebben a p√©ld√°ban a j√°t√©kos igen-nem k√©rd√©st tehet fel Hedynek, √©s Hedy v√©letlenszer≈± v√°laszt ad.
                    ```
                    print Szia Hedy a j√≥sn≈ë vagyok!
                    kerdes is ask Mit akarsz tudni?
                    print Ez az amit tudni akarsz: kerdes
                    valasz is igen, nem, talan
                    print A krist√°lyg√∂mb√∂m azt mondja... valasz at random
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: print Szia Hedy a j√≥sn≈ë vagyok!
            4:
                story_text: |-
                    A 3. szint nem tartalmaz √∫j funkci√≥kat, de lehet≈ëv√© teszi az id√©z≈ëjelek haszn√°lat√°nak gyakorl√°s√°t.
                    √öjra elk√©sz√≠theted a 2. szint≈± k√≥dot, √©s √ºgyelj arra, hogy az id√©z≈ëjeleket a megfelel≈ë helyre √≠rd!

                    Ne feledd, hogy a 2. szinten nem haszn√°lhattuk a ‚Äûkerdes‚Äù sz√≥t a v√°ltoz√≥ nev√©nek √©s egy norm√°l ki√≠rathat√≥ sz√≥nak sem.
                    A 3. szint≈± id√©z≈ëjelek lehet≈ëv√© teszik ezt!

                    Fontos! Ne feledd, hogy most, amikor id√©z≈ëjeleket haszn√°lunk, Hedy √∂sszezavarodik, amikor az aposztr√≥fot m√°s sz√∂veg√∂sszef√ºgg√©sben haszn√°lod.
                example_code: |
                    ```
                    print 'Szia, Hedy, a j√≥sn≈ë vagyok!'
                    kerdes is ask 'Mit akarsz tudni?'
                    print 'Ez az amit tudni akarsz: ' kerdes
                    valasz is igen, nem, talan
                    print 'A krist√°lyg√∂mb√∂m azt mondja... ' valasz at random
                    ```
                start_code: '# place your code here'
            5:
                story_text: |-
                    A 4. szinten megtanulod (titokban) az es√©lyeket a magad jav√°ra billenteni a j√≥sn≈ë haszn√°lata sor√°n!
                    Az `if` √©s `else` haszn√°lat√°val bebiztos√≠thatod, hogy mindig j√≥ szerencs√©t kapj, m√≠g m√°sok nem.
                    Tekintsd meg ezt a p√©ld√°t, hogy megtudd, hogyan.


                    Cser√©ld le Hedyt a saj√°t nevedre az utols√≥ sorban, √©s Hedy mindig azt j√≥solja, hogy te nyersz a lott√≥n, m√°sok nem!
                    Term√©szetesen ez gyanakv√°st kelthet a t√∂bbi j√°t√©kossal szemben ... Ennek elker√ºl√©se √©rdek√©ben gondoskodhatsz arr√≥l, hogy Hedy minden alkalommal m√°s v√°laszokat adjon a k√≥d futtat√°sakor.
                    De term√©szetesen neked tov√°bbra is pozit√≠v v√°laszt ad, a t√∂bbi j√°t√©kosnak pedig negat√≠v v√°laszt.

                    Ezeb az elven k√ºl√∂nf√©le programokat lehet k√©sz√≠teni, csak l√©gy kreat√≠v! P√©ld√°ul l√©trehozhatsz egy olyan g√©pet, amely megj√≥solja, hogy kedvenc sportcsapatod legy≈ëzi az √∂sszes versenyt√°rsat!
                    Vagy elk√©sz√≠theted H√≥feh√©rke var√°zslatos t√ºkr√©t a falon, hogy elmondd mindenkinek, hogy te vagy a legbecs√ºletesebb!
                    Hagyd, hogy a fant√°zi√°d v√©gezze a munk√°dat!
                example_code: |
                    ```
                    print 'Szia, Hedy, a j√≥sn≈ë vagyok'
                    print 'Meg tudom j√≥solni, nyersz-e a lott√≥n holnap!'
                    szemely is ask 'Ki vagy te?'
                    if szemely is Hedy print 'Bizonyosan nyerni fogsz!' else print 'Balszerencse! Valaki m√°s nyer!'
                    ```
                start_code: '# place your code here'
            6:
                story_text: |-
                    A 5. szinten j√∂vend≈ëmond√≥k√©nt haszn√°lhatod a matematik√°t el≈ërejelz√©seidben. Ez lehet≈ëv√© teszi (buta) k√©pletek kital√°l√°s√°t a j√∂v≈ë kisz√°m√≠t√°s√°hoz.
                    P√©ld√°ul kisz√°m√≠thatod, hogy milyen gazdag leszel, vagy h√°ny gyermeked lesz, ha feln≈ësz.
                example_code: |
                    ```
                    print 'Hedy, a j√≥sn≈ë vagyok!'
                    print 'Meg tudom j√≥solni, h√°ny gyermeked lesz, ha feln≈ësz!'
                    kor is ask 'H√°ny √©ves vagy?'
                    testver is ask 'H√°ny testv√©red van?'
                    magassag is ask 'H√°ny cm magas vagy?'
                    gyerekek is magassag / kor
                    gyerekek is gyerekek - testver
                    print 'Neked ...'
                    print gyerekek ' gyereked lesz!'
                    ```

                    Ha az el≈ëz≈ë p√©lda nem volt el√©g buta a sz√°modra, akkor n√©zd meg ezt!

                    ```
                    print 'Hedy vagyok a buta j√≥sn≈ë!'
                    print 'Meg tudom j√≥solni, milyen okos vagy!'
                    foci is ask '1-10-es sk√°l√°s mennyire szereted a focit?'
                    banan is ask 'H√°ny ban√°nt ett√©l a h√©ten?'
                    higienia is ask 'H√°nyszor mostad meg a kezed ma?'
                    eredmeny is banan + higienia
                    eredmeny is eredmeny * foci
                    print 'Te ' eredmeny ' sz√°zal√©k okos vagy.'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |-
                    Az 6. szinten a `repeat` paranccsal be√°ll√≠thatod, hogy a g√©p egyszerre t√∂bb j√≥slatot mondjon.

                    Amint l√°thatod, a k√©rd√©sek ebben a p√©ld√°ban nincsenek ki√≠ratva. Ennek az az oka, hogy a `k√©rd√©s` v√°ltoz√≥t h√°romszor m√≥dosult.
                    Valah√°nyszor a j√°t√©kos kit√∂lti az √∫j v√°laszt, Hedy fel√ºl√≠rja az el≈ëz≈ët, √≠gy a j√°t√©kos els≈ë v√°lasz√°t elfelejti.
                    Ez azt jelenti, hogy √≠gy nem tudja ki√≠ratni az √∂sszes k√©rd√©st.

                    Ha 1 helyett 3 k√ºl√∂nb√∂z≈ë v√°ltoz√≥t haszn√°lsz (p√©ld√°ul `kerdes1`,` kerdes2` √©s `kerdes3`), megoldhatod a probl√©m√°t, √©s ki√≠rathatod a k√©rd√©seket.
                    Ez azt jelenti, hogy a v√°laszokn√°l csak az "repeat" utas√≠t√°st kell haszn√°lnod, √©s az √∂sszes k√©rd√©st k√ºl√∂n kell feltenned √©s ki kell √≠ratnod.
                    Meg tudod csin√°lni?

                    A 7. szinten az ism√©tl√©s parancs elrendez√©se megv√°ltozik, ami lehet≈ëv√© teszi t√∂bb sor ism√©tl√©s√©t egyszerre.
                example_code: |
                    ```
                    print 'Hedy, a j√≥sn≈ë vagyok!'
                    print 'Feltehetsz 3 k√©rd√©st!'
                    repeat 3 times kerdes is ask 'Mit akarsz tudni?'
                    valasz is igen, nem, talan
                    repeat 3 times print 'A krist√°lyg√∂mb√∂m azt mondja... ' valasz at random
                    ```
                start_code: '# place your code here'
            8:
                story_text: |-
                    Az 5. szinten megtanultad, hogyan kell haszn√°lni az ism√©tl√©st, hogy a j√≥sn≈ë 3 k√©rd√©sre v√°laszoljon egym√°s ut√°n, de probl√©m√°nk ad√≥dott a k√©rd√©sek ki√≠rat√°s√°val.
                    A 7. szinten ez a probl√©ma megold√≥dott az ism√©tl√©s parancs √∫j m√≥dj√°nak k√∂sz√∂nhet≈ëen.
                    A k√∂vetkez≈ë p√©ld√°ban a j√≥sn≈ë 3 k√©rd√©st tehet fel, √©s ki√≠rathatja ≈ëket!
                example_code: |
                    ```
                    print 'Hedy a j√≥sn≈ë vagyok!'
                    print 'Feltehetsz 3 k√©rd√©st.'
                    valasz is igen, nem, tal√°n
                    repeat 3 times
                        kerdes is ask 'Mit akarsz tudni?'
                        print kerdes
                        print 'A krist√°lyg√∂mb√∂m azt mondja...' valasz at random
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# place your code here'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: K√≠s√©rteth√°z
        default_save_name: K√≠s√©rteth√°z
        description: menek√ºl√©s a k√≠s√©rtetj√°rta h√°zb√≥l
        levels:
            1:
                story_text: |-
                    Ebben a kalandban egy olyan j√°t√©k l√©trehoz√°s√°n dolgozol, amelyben a megfelel≈ë ajt√≥ kiv√°laszt√°s√°val menek√ºln√∂d kell egy k√≠s√©rtetj√°rta h√°zb√≥l.
                    Ha a megfelel≈ë ajt√≥t v√°lasztod, t√∫l√©led, de ha nem, egy rettenetes sz√∂rnyeteg ...

                    Az 1. szinten elkezdj√ºk a k√≠s√©rtetj√°rta h√°z j√°t√©kunkat egy ijeszt≈ë t√∂rt√©net kital√°l√°s√°val, √©s megk√©rdezz√ºk a j√°t√©kost, hogy milyen sz√∂rnyet l√°tnak a k√≠s√©rtetj√°rta h√°zban.
                example_code: |
                    ```
                    print Hogyan ker√ºltem ide?
                    print Eml√©kszem, a bar√°tom azt mondta, menjek be a r√©gi kast√©lyba ...
                    print √©s hirtelen minden els√∂t√©t√ºlt.
                    print De hogy ker√ºletem a padl√≥ra...?
                    print √©s fejem √∫gy f√°j, mintha egy baseball √ºt≈ëvel √ºt√∂tt√©k volna meg!
                    print Mi ez a hang?
                    print √ì, nem! √ögy √©rzem, nem vagyok egyed√ºl ebben a h√°zban!
                    print El kell mennem innen!
                    print H√°rom ajt√≥ van el≈ëttem ...
                    ask Melyik ajt√≥t v√°lasszam?
                    echo Az ajt√≥, amit v√°lasztok
                    print ...?
                    ```
                    Be tudod fejezni az ijeszt≈ë t√∂rt√©netet? Vagy kital√°lsz egy saj√°t k√≠s√©rtet√°z t√∂rt√©netet?
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: print Hogy ker√ºltem ide?
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |-
                    Az 1. szinten bemutatkozt√°l a k√≠s√©rteth√°z j√°t√©kodnak, de ahogy √©szrevetted, a t√∂rt√©netnek mindig rettenetes v√©ge lesz.
                    A 2. szinten interakt√≠vabb√° teheted a t√∂rt√©netet a j√°t√©k kimenetel√©nek megv√°ltoztat√°s√°val; n√©ha megesznek, n√©ha megmenek√ºlsz!
                    Hadd d√∂nts√∂n Hedy v√©letlenszer≈±en!


                    Ez a t√∂rt√©net meglehet≈ësen egyszer≈±, tal√°n egy kicsit √©rdekesebb√© teheted egy izgalmasabb t√∂rt√©net hozz√°ad√°s√°val.
                    Tov√°bb√° nagyon korl√°tozott eredm√©nyeket √©rhetsz el, csak 3 lehet≈ës√©g van arra, hogy mi van az ajt√≥k m√∂g√∂tt. Tal√°n m√©g t√∂bb sz√∂rnyetegre gondolhatsz, amelyet felvehetsz a list√°ba!

                    V√©gezet√ºl szeretn√©nk egy kih√≠v√°st k√ºldeni Neked,  hogy v√°ltoztasd meg ezt a j√°t√©kot olyan j√°t√©km≈±sorr√° (mint amilyenek a t√©v√©ben vannak), ahol a j√°t√©kosok ajt√≥t vagy b≈ër√∂nd√∂t v√°lasztanak, √©s valamelyik nagy d√≠jat tartalmaz!
                    Meg tudod csin√°lni?
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# place your code here'
            4:
                story_text: |-
                    A 3. szinten megtanulod haszn√°lni az id√©z≈ëjeleket a j√°t√©kaidban.
                    √Åt tudod alak√≠tani a kis√©rteth√°z j√°t√©kot √∫gy, hogy megfeleljen a 3. szintnek?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                    ```
                start_code: '# place your code here'
            5:
                story_text: |-
                    Eddig a szintig a k√≠s√©rtetj√°rta h√°z j√°t√©k mindig arra k√©rte a j√°t√©kost, hogy v√°lasszon egy ajt√≥t, de ahogy √©szrevett√©tek, nem igaz√°n kellett helyesen v√°laszolniuk.
                    Abban az esetben, ha a j√°t√©kos teljesen v√©letlenszer≈± v√°laszt adott, a j√°t√©k tov√°bbra is m≈±k√∂dne, √©s a j√°t√©kos ak√°r nyerhet is (annak ellen√©re, hogy nem v√°lasztott ajt√≥t).
                    A 4. szinten csak akkor nyerheti meg a j√°t√©kot, ha ugyanazt az ajt√≥t v√°lasztja, amelyet Hedy v√©letlenszer≈±en v√°lasztott ki.
                example_code: |
                    ```
                    print 'Szabadulj ki a k√≠s√©rteth√°zb√≥l!'
                    print 'H√°rom ajt√≥ van el≈ëtted...'
                    ajtok is 1,2,3
                    szornyek is verfarkas, mumia, vampir, zombi
                    valasztottajto is ask 'Melyik ajt√≥t v√°lasztod?'
                    print 'Az ajt√≥, amit v√°lasztott√°l...' valasztottajto
                    helyesajto is ajtok at random
                    if valasztottajto is helyesajto print 'Nagyszer≈±! Kiszabadult√°l!'
                    else print 'Jaj ne! Megevett a ...' szornyek at random
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?
                start_code: '{print} ''Escape from the haunted house!'''
            11:
                story_text: A 8. szinten megv√°ltoztattuk az ism√©tl√©s parancsot, √©s hozz√°adtunk egy sort a k√≠s√©rtetj√°rta h√°zunkhoz, amely megmondja a j√°t√©kosnak, hogy melyik szob√°ban vannak.
                example_code: |
                    ```
                    print 'Szabadulj ki a k√≠s√©rteth√°zb√≥l'
                    jatekos is elo
                    ajtok is 1, 2, 3
                    szornyek is  vampir, zombi, oriaspok
                    for i in range 1 to 3
                        if jatekos is elo
                            helyesajto is ajtok at random
                            print 'H√°rom ajt√≥ van el≈ëtted...'
                            valasztottajto is ask 'Melyik ajt√≥t v√°lasztod?'
                            if valasztottajto is helyesajto
                                print 'Itt nincs sz√∂rny!'
                            else
                                print 'Megevett a(z) ' szornyek at random
                                jatekos is halott
                        else
                            print 'GAME OVER'
                    if jatekos is elo
                        print 'Nagyszer≈±! T√∫l√©lted!'
                    ```
                start_code: print 'Szabadulj ki a k√≠s√©rteth√°zb√≥l'
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[random]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: Language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'üê±'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'üê∏'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# place your code here'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Parrot
        default_save_name: Parrot
        description: Create your own online pet parrot that will copy you!
        levels:
            1:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
                start_code: '{print} Im Hedy the parrot'
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                start_code: '{print} Im Hedy the parrot!'
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} üßí Say new_word , Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ üßí Say _ new_word _, Hedy!_
                    {print} _ ü¶ú _ words {at} {random}
                    ```
                start_code: '# Write your code here'
            5:
                story_text: |
                    Reward your parrot {if} it says the correct word!
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} 'üßí Say ' new_word ', Hedy!'
                    {print} 'ü¶ú ' said_word
                    {if} said_word {is} new_word {print} 'üßí Great job, Hedy! üç™'
                    {else} {print} 'üßí No, Hedy! Say ' new_word
                    ```
                start_code: '# place your code here'
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                start_code: '# place your code here'
            14:
                story_text: |
                    In this level you can let Hedy tell you {if} you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# place your code here'
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ‚ù§'
                    {else} {print} 'The prince was eaten by a hippopotamus üò≠'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# place your code here'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# place your code here'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: √âtterem
        default_save_name: √âtterem
        description: K√©sz√≠ts virtu√°lis √©ttermet
        levels:
            1:
                story_text: |-
                    Az 1. szinten elk√©sz√≠theted saj√°t virtu√°lis √©ttermedet √©s fogadhatod vend√©gei megrendel√©seit.

                    Tudn√°l m√©g egy sort felvenni az √©ttermi k√≥dodba? Megk√©rdezheted p√©ld√°ul a vend√©geket, hogy mit szeretn√©nek inni, megmondod-e nekik az √°rat, vagy k√≠v√°nsz-e nekik j√≥ √©tv√°gyat?
                example_code: |-
                    ```
                    print √údv√∂zl√ºnk a Hedy √©tteremben
                    ask Mit rendelsz?
                    echo Sz√≥val ezt szeretn√©d megrendelni
                    print K√∂sz√∂nj√ºk a rendel√©sedet!
                    print M√°r √∫ton van!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: '# place your code here'
            2:
                story_text: |-
                    A 2. szinten v√°ltoz√≥k seg√≠ts√©g√©vel b≈ëv√≠theted √©ttermedet. Az 1. szinten Hedy csak egyszer tudta visszhangozni a sorrendet, √©s csak az utols√≥ dologra eml√©kezett, amit rendeltek.
                    Most m√°r haszn√°lhatsz v√°ltoz√≥kat, √©s Hedy eml√©kszik mind az √©telekre, mind az italokra!
                example_code: |-
                    ```
                    print √údv√∂zl√ºnk a Hedy √©tteremben!
                    print Ma pizz√°t vagy lasagnat szolg√°lunk fel.
                    etel is ask Mit szeretn√©l enni?
                    print J√≥ v√°laszt√°s! A etel a kedvencem!
                    feltet is ask 'Szeretn√©l r√° h√∫st vagy z√∂lds√©get?'
                    print etel rajta feltet √∫ton van!
                    ital is ask 'Mit szeretn√©l inni?'
                    print K√∂sz√∂nj√ºk a rendel√©sedet.
                    print A etel √©s ital mindj√°rt itt lesz!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
                start_code: '# place your code here'
            3:
                story_text: |-
                    Nehezen tudod eld√∂nteni, mit szeretn√©l vacsor√°zni? Engedheted, hogy Hedy v√°lasszon neked!
                    Egyszer≈±en add hozz√° kedvenc (vagy legkev√©sb√© kedvenc) √©teleidnek list√°j√°t, √©s Hedy v√©letlenszer≈±en v√°laszthatja ki a vacsor√°dat.
                    Sz√≥rakozhatsz egy kicsit, ha hagyod, hogy Hedy megv√°lassza a vacsora √°r√°t is! Mit fogsz kapni?
                example_code: |
                    ```
                    print √údv√∂z√∂lj√ºk a Hedy's Random √©tteremben!
                    print Az egyetlen √©tterem amely v√©letlenszer≈±en kiv√°lasztja az √©tkez√©st √©s annak √°r√°t az √ñn sz√°m√°ra!
                    eloetelek is sal√°ta, leves, sajt
                    foetel is pizza, kelbimb√≥, spagetti
                    desszertek is brownie, fagylalt, francia sajtok
                    ital is k√≥la, s√∂r, v√≠z
                    arak is 1000 forint, 2000 forint, 3000 forint
                    print A k√∂vetkez≈ëvel indul: eloetelek at random
                    print Ezut√°n kiszolg√°ljuk: foetel at random
                    print √âs desszertk√©nt: desszertek at random
                    print Igyon egy italt
                    print Ez lesz: arak at random
                    print K√∂sz√∂n√∂m √©s √©lvezze az √©tkez√©st!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: '# place your code here'
            4:
                story_text: "A 3. szinten id√©z≈ëjeleket fogunk alkalmazni, amikor a `print` parancsot haszn√°ljuk.\nTudod-e id√©z≈ëjelek hozz√°ad√°s√°val m≈±k√∂dtetni a 2. szint≈± k√≥dodat a 3. szinten?\n\nL√©gy √≥vatos! A 2. szinten aposztr√≥fokat enged√©lyeztek a sz√∂vegben, de a 3. szinten Hedy √∂sszet√©veszti ≈ëket\
                    \ id√©z≈ëjelekkel, √©s a k√≥d nem fog m≈±k√∂dni!\nTeh√°t ahelyett, hogy be√≠rn√°d a `print ma pizz√°t szolg√°lunk fel` kifejez√©st, √≠rd be a `print` \n ma pizz√°t szolg√°lunk fel` parancsot."
                example_code: |-
                    ```
                    print '√údv√∂zl√ºnk a Hedy √âtteremben!'
                    print 'Ma pizz√°t vagy lasagnat szolg√°lunk fel.'
                    etel is ask 'Mit szeretn√©l enni?'
                    print 'J√≥ v√°laszt√°s! A(z) ' etel ' nekem is kedvencem!'
                    feltet is ask 'Szeretn√©l h√∫s vagy z√∂lds√©get r√°?'
                    print etel ' , rajta a(z) ' feltet ' m√°r √∫ton van!'
                    ital is ask 'Mit szeretn√©l inni hozz√°?'
                    print 'K√∂sz√∂nj√ºk a rendel√©sedet.'
                    print 'A(z) ' etel ' √©s a(z) ' ital ' mindj√°rt itt lesz!'
                    ```
                start_code: '# place your code here'
            5:
                story_text: |-
                    A 4. szinten az if parancs lehet≈ëv√© teszi, hogy k√©rd√©seket tegy√©l fel √ºgyfeleidnek, √©s k√ºl√∂nb√∂z≈ë m√≥don felelj a v√°laszaikra.
                    Az al√°bbi p√©ld√°ban l√°thatod, hogy megk√©rdezheted az √ºgyfeledet, hogy szeretn√©-e hallani a k√ºl√∂nlegess√©geket, √©s Hedy ennek megfelel≈ëen v√°laszolhat.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedy √âtteremben!'
                    kulonleges is ask 'Szeretn√©l hallani ma a k√ºl√∂nlegess√©geinkr≈ël?'
                    if kulonleges is igen print 'Mai k√ºl√∂nlegess√©g√ºnk piri piri csirke √©s rizs.' else print 'Nem probl√©ma.'
                    etel is ask 'Mit szeretn√©l enni?'
                    print 'Egy ' etel', mindj√°rt j√∂n!'
                    ital is ask 'Mit szeretn√©l inni hozz√°?'
                    if ital is k√≥la print 'Sajn√°lom a k√≥la kifogyott!' else print 'J√≥ v√°laszt√°s!!'
                    mas is ask 'Szeretn√©l valami m√°st?'
                    print 'Hadd ism√©teljem el a rendel√©sedet...'
                    print 'Egy ' etel
                    if ital is k√≥la print '√©s...' else print 'Egy ' ital
                    if mas is nem print 'Ez minden!' else print 'Egy  ' mas
                    print 'K√∂sz√∂nj√ºk a rendel√©sedet, j√≥ √©tv√°gyat !'
                    ```

                    Tudn√°l m√©g t√∂bb k√©rd√©st feltenni az √ºgyfeleknek, amikor rendelnek, √©s k√ºl√∂nb√∂z≈ë  m√≥don felelni a v√°laszaikra az if paranccsal?
                start_code: '# place your code here'
            6:
                story_text: |-
                    A 6. szinten matematikai sz√°m√≠t√°sokkal kisz√°m√≠thatod az √ºgyfelek megrendel√©s√©nek teljes √°r√°t, ami re√°lisabb√° teheti a virtu√°lis √©ttermet.

                    K√©sz√≠thetsz egyszer≈± √©ttermi k√≥dot, p√©ld√°ul.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedy √âtteremben'
                    print 'Ez a men√ºnk:'
                    print 'F≈ë √©teleink: pizza, lasagne vagy spagetti'
                    foetel is ask 'Melyik f≈ë√©telt szeretn√©d?'
                    ar is 0
                    if foetel is pizza ar is 1000
                    if foetel is lasagne ar is 1200
                    if foetel is spagetti ar is 800
                    print 'Ezt rendelted: ' foetel
                    print 'Ez ' ar ' forint lesz, k√©rem'
                    print 'K√∂sz√∂n√∂m, j√≥ √©tv√°gyat!'
                    ```

                    De m√©g sok mindent hozz√°adhatsz a virtu√°lis √©ttermedhez, p√©ld√°ul t√∂bb tanfolyamot.

                    Ebben a p√©ld√°ban h√°rom tanfolyam l√©tezik, amelyek t√∂bb k√≥dot √©s tov√°bbi kieg√©sz√≠t√©seket ig√©nyelnek az √°r kisz√°m√≠t√°sakor.

                    Hozz√°adhatsz m√©g sok mindent a virtu√°lis √©ttermedhez, p√©ld√°ul:
                    - k√©rdezd meg, h√°ny ember j√∂n, √©s szorozd meg az √°rat ezzel az √©rt√©kkel
                    - felveszel egy m√°sik √©telt?
                    - kedvezm√©nyt adsz az embereknek, amikor (titkos) kuponk√≥dot adnak meg?
                    - adsz hozz√° gyermekmen√ºt?
                    - gondolsz m√°s sz√≥rakoztat√≥ dolgokra?
                start_code: '# place your code here'
            7:
                story_text: |-
                    Az 6. szinten megtanultad, hogyan haszn√°lhatod az ism√©tl√©s parancsot egy k√≥dsor megism√©tl√©s√©re bizonyos sz√°m√∫ alkalommal.
                    Ezt haszn√°lhatod √©ttermedben, hogy megk√©rdezz t√∂bb embert, hogy mit szeretn√©nek enni. Mint ez:


                    Az 5. szinten t√∂bb embert is megk√©rdezhetsz, hogy mit szeretn√©nek enni, de nem lehet minden egyes rendel√©st k√ºl√∂n ki√≠ratni, mert csak egy k√≥dsort ism√©telhetsz meg.
                    A 7. szinten megtanulhatod, hogyan kell t√∂bb sor k√≥dot egyszerre megism√©telni, ami lehet≈ëv√© teszi t√∂bb rendel√©s k√©r√©s√©t √©s ki√≠rat√°s√°t is!
                example_code: |-
                    ```
                    print '√údv√∂zl√ºnk a Hedy √©tteremben!'
                    emberek is ask 'H√°ny ember j√∂n ma?'
                    repeat emberek times food is ask 'Mit szeretn√©l ennit?'
                    print 'K√∂sz√∂nj√ºk megrendel√©sedet! Mindj√°rt j√∂n!'
                    ```
                start_code: print '√údv√∂zl√ºnk a Hedy √©tteremben!'
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```

                    ### Exercise
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                story_text_2: |
                    ### Exercise
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: '# place your code here'
            9:
                story_text: |-
                    A 7. szinten t√∂bb sor k√≥d megism√©tl√©s√©vel bonyolultabb√° teheted virtu√°lis √©ttermedet. Mint ez:

                    Term√©szetesen ez a k√≥d b≈ëv√≠thet≈ë a men√º tov√°bbi elemeivel, italokkal √©s/vagy t√∂bb fog√°ssal, √≠gy nyugodtan adj hozz√° annyi lehet≈ës√©get, amennyit csak akarsz!
                example_code: |-
                    ```
                    print '√údv√∂zl√ºnk a Hedy √©tteremben!'
                    emberek is ask 'H√°ny ember j√∂n ma??'
                    print 'Nagyszer≈±!'
                    print 'A mai men√º pizza vagy sal√°ta'
                    ar is 0
                    repeat emberek times
                        etel is ask 'Mit szeretn√©l rendelni?'
                        print etel
                        if etel is pizza
                            ar is ar + 1000
                        else
                            ar is ar + 800
                    print 'K√∂sz√∂nj√ºk rendel√©sedet!'
                    print 'Ez ' ar ' forint lesz'
                    print 'K√∂sz√∂n√∂m, j√≥ √©tv√°gyat!!'
                    ```
                start_code: print '√údv√∂zl√ºnk a Hedy √©tteremben!'
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
                start_code: courses = appetizer, main course, dessert
            11:
                story_text: Az "for i in 1 in 5" tartom√°nyban haszn√°lhatjuk a t√∂bb v√°s√°rl√≥ megrendel√©seinek rendezett ki√≠rat√°s√°ra.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedyn√©l!'
                    emberek is ask 'H√°ny ember sz√°m√°ra rendelsz?'
                    for i in range 1 to emberek
                        print 'Rendel√©ssz√°m ' i
                        etel is ask 'Mit szeretn√©l enni?'
                        print etel
                        if etel is s√ºltkrumpli
                            szosz is ask 'Milyen sz√≥szt szeretn√©l hozz√°?'
                            print szosz
                        ital is ask 'Mit szeretn√©l inni?'
                        print ital
                    ar is 400 * emberek
                    print 'Ez ' ar ' forint lesz, k√©rem'
                    ```
                start_code: print '√údv√∂zl√ºnk a Hedy √©tteremben!'
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything {else}?'
                    {print} 'Thank you!'
                start_code: '# place your code here'
    rock:
        name: K≈ë, pap√≠r, oll√≥
        default_save_name: K≈ë
        description: K√©sz√≠ts saj√°t k≈ë, pap√≠r, oll√≥ j√°t√©kot
        levels:
            1:
                story_text: |-
                    Az 1. szinten kezdhetsz egy k≈ë, pap√≠r, oll√≥ j√°t√©kkal.

                    A `ask` utas√≠t√°ssal v√°laszthatsz, √©s az` echo'-val megism√©telheted ezt a v√°laszt√°st.

                    Az ism√©tl√©s term√©szetesen kiss√© unalmas, mert a sz√°m√≠t√≥g√©p nem v√°laszt semmit. Ezt k√©s≈ëbb mi magunk is elk√©sz√≠tj√ºk.
                example_code: |-
                    ```
                    print Mit v√°lasztott√°l?
                    ask V√°lassz k≈ë, pap√≠r √©s oll√≥ k√∂z√ºl
                    echo ez volt a v√°laszt√°sod:
                    ```
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ‚úä‚úã‚úå
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: print √údv√∂zl√ºnk saj√°t k≈ë, pap√≠r oll√≥ j√°t√©kodon!
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
            3:
                story_text: |
                    A 2. szinten list√°kat √≠rhatunk be, √©s v√°laszthatunk bel≈ël√ºk dolgokat.
                    El≈ësz√∂r k√©sz√≠ts egy list√°t az `is` seg√≠ts√©g√©vel. Ezut√°n hagyhatod, hogy a sz√°m√≠t√≥g√©p a `at
                    random` seg√≠ts√©g√©vel v√°lasszon ki valamit a list√°b√≥l.
                    P√©ld√°ul megengedheted, hogy a sz√°m√≠t√≥g√©p k≈ë, pap√≠r √©s oll√≥ k√∂z√ºl v√°logasson.

                    √öjra haszn√°lhatod a `ask'-t a 2. szinten. Ki√≠rathatod sz√°m√≠t√≥g√©p a v√°laszt√°s√°t?
                    Vigy√°zz, a `ask` most m√°sk√©pp m≈±k√∂dik, mint az 1. szinten. El≈ëtte el kell nevezni.

                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot megfogalmazni, amely tartalmazza a valasztas
                    v√°ltoz√≥t?
                    P√©ld√°ul. ```print Az eny√©m: valasztas```. Pr√≥b√°ld ki, ha m√©g nem tetted meg.
                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: a [k≈ë, pap√≠r, oll√≥] k√∂z√ºl v√°lasztottam.
                    Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    valasztas is k≈ë, pap√≠r, oll√≥
                    print valasztas at random
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: print √údv√∂zl√ºnk saj√°t k≈ë pap√≠r oll√≥ j√°t√©kodon!
            4:
                story_text: |
                    A 3. szinten tov√°bb programozhatunk k≈ë, pap√≠rt, oll√≥t. De ha sz√∂veget szeretn√©l
                    hozz√°adni, akkor itt is id√©z≈ëjeleket kell haszn√°lnod.
                    Eg√©sz√≠tsd ki a k√≥dot √∫gy, hogy a helyes parancsokat vagy karaktereket √≠rd be a
                    al√°h√∫z√°sokra?
                start_code: print '√údv√∂zl√ºnk saj√°t k≈ë, pap√≠r oll√≥ j√°t√©kodon!'
            5:
                story_text: |-
                    A 4. szinten meghat√°rozhatjuk, hogy ki nyert.
                    Ehhez sz√ºks√©ged van az √∫j `if` k√≥dra.

                    Mentsd el a a sz√°m√≠t√≥g√©p v√°laszt√°s√°t egy tetsz≈ëleges n√©vvel.
                    Ezut√°n haszn√°lhatod az `if' utas√≠t√°st, hogy l√°sd, azonosak-e vagy k√ºl√∂nb√∂znek-e.
                    Befejezed a k√≥dot?

                    El≈ësz√∂r t√∂ltsd ki a helyes k√≥dot a pontok hely√©n, √©s n√©zd meg, hogy d√∂ntetlen-e.
                example_code: |-
                    ```
                    lehetoseg is k≈ë, pap√≠r, oll√≥
                    szamitogepe is _
                    valaszt is ask Mit v√°lasztasz?
                    print 'ezt v√°lasztottad: ' _
                    print 'a sz√°m√≠t√≥g√©p v√°laszt√°sa: ' _
                    if _ is _ print 'd√∂ntetlen!' else print 'nem d√∂ntetlen'
                    if valaszt is k≈ë and szamitogepe is pap√≠r print 'sz√°m√≠t√≥g√©p nyert'
                    ```
                start_code: print '√údv√∂zl√ºnk saj√°t k≈ë, pap√≠r oll√≥ j√°t√©kodon!'
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scisscors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock'
                        {if} your_choice {is} 'paper'
                            {print} 'You win!'
                        {if} your_choice {is} 'scissors'
                            {print} 'You lose!'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                start_code: '# place your code here'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: SuperSpy
        default_save_name: language
        description: Make your own spy code
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    if name is 'Agent007'
                        a is 'Go to the airport '
                    else
                        a is 'Go to the trainstation '
                    password is ask 'What is the password?'
                    if password is 'TOPSECRET'
                        b is 'tomorrow at 02.00'
                    else
                        b is 'today at 10.00'
                    print a + b
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    password is ask 'What is your password?'
                    if name is 'Agent007' and password is 'TOPSECRET'
                        print 'Go to the airport at 02.00'
                    else
                        print 'Go to the trainstation at 10.00'
                    ```
                start_code: '# place your code here'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: √ânekelj egy dalt!
        default_save_name: Dal
        description: Dal ki√≠rat√°sa
        levels:
            6:
                story_text: |-
                    A dalok gyakran sok ism√©tl√©st tartalmaznak. N√©ha az ism√©tl√©s alapja a sz√°ml√°l√°s is.
                    P√©ld√°ul a j√≥l ismert dalban ‚Äû√ºveg s√∂r‚Äù. Programozhatod azt a dalt egy kis matekkal.

                    Most megism√©telheted a 2‚Äì9. Sort, ah√°nyszor csak akarod, a sorok m√°sol√°s√°val.

                    # El≈ëretekintve
                    Az 5. szinten megtanultunk 1 sort megism√©telni az `repeat` sz√≥val, √≠gy:

                    * repeat 3 times print 'Baby Shark Tutududududu'

                    De ahogyan ebben a leck√©ben l√°tni fogod, n√©ha t√∂bb sort is meg akarsz egy√ºtt ism√©telni. Ezt meg lehet tenni v√°g√°ssal √©s beilleszt√©ssel, de ez sok munka. A 7. szinten megtanulod, hogyan kell ezt k√∂nnyebben megtenni.
                example_code: |-
                    ```
                    verssor = 99
                    print verssor ' √ºveg s√∂r a falon'
                    print verssor ' √ºveg s√∂r'
                    print 'Vegy√©l egyet, add tov√°bb'
                    verssor = verssor - 1
                    print verssor ' √ºveg s√∂r a falon'
                    ```
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
                start_code: print 'Baby shark'
            7:
                story_text: |-
                    A dalok gyakran sok ism√©tl√©st tartalmaznak. P√©ld√°ul... Baby Shark! Ha el√©nekled, ugyanazt √©nekled folyamatosan:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ezt a dalt sokkal r√∂videbb√© teheted egy `repeat` utas√≠t√°ssal! Be tudod fejezni a k√≥dot?

                    A Baby Shark ut√°n term√©szetesen m√°s dalokat is programozhat. Sok dal van ism√©tl√©ssel.
                example_code: |-
                    ```
                    repeat _ _ print 'Baby Shark tututudutudu'
                    print 'Baby Shark'
                    ```
                start_code: print 'Baby Shark'
            8:
                story_text: A 6. szinten a "√úveg s√∂r" dalt programoztad. Egy verset alkott√°l, majd 99 -szer kellett lem√°solnod a verssorokat. A 7. szinten 99 alkalommal ism√©telheted meg a dalt, csak egy egyszer≈± sor hozz√°ad√°s√°val!
                example_code: |
                    ```
                    verssor = 99
                    print verssor ' √ºveg s√∂r a falon'
                    print verssor ' √ºveg s√∂r'
                    print 'Vegy√©l egyet, add tov√°bb'
                    verssor = verssor - 1
                    print verssor '√ºveg s√∂r a falon'
                    ```
                start_code: print '√úveg s√∂r'
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old McDonald with all the different animals.
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} '{if} youre happy and you know it'
                            {print} action
                        {print} '{if} youre happy and you know it and you really want to show it'
                        {print} '{if} youre happy and you know it'
                        {print} action
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# place your code here'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                    Have fun!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Taic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# place your code here'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# place your code here'
    turtle:
        name: Tekn≈ës
        default_save_name: tekn≈ës
        description: K√©sz√≠ts saj√°t rajzot
        levels:
            1:
                story_text: |-
                    Az 1. szinten Hedy seg√≠ts√©g√©vel rajzolhatsz is. A fordulatok √©s vonalak kombin√°l√°s√°val n√©gyzetet vagy l√©pcs≈ët k√©sz√≠thetsz!

                    Az "el≈ëre" seg√≠ts√©g√©vel h√∫zhatsz egy vonalat el≈ëre. A m√∂g√∂tte l√©v≈ë sz√°m hat√°rozza meg, hogy a tekn≈ës mennyit fog gyalogolni. "jobbra fordul" negyed fordulatot forgat az √≥ramutat√≥ j√°r√°s√°val megegyez≈ë ir√°nyba, "balra fordul" az √≥ramutat√≥ j√°r√°s√°val ellent√©tes ir√°nyba fordul

                    Ez egy kis l√©pcs≈ë kezdete. El tudod √©rni az 5 l√©p√©st?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    forward 50
                    turn left
            2:
                story_text: |-
                    Az 1. szinten a tekn≈ës csak balra vagy jobbra tudott fordulni. Ez egy kicsit unalmas!
                    A 2. szinten minden ir√°nyba tudja mutatni az orr√°t.

                    Haszn√°ld a 90-et a negyed fordulathoz. Ezeket fokoknak h√≠vjuk. A teljes fordulat 360 fok.
                    Tudsz √°br√°t k√©sz√≠teni ezzel a k√≥ddal? Tal√°n egy h√°romsz√∂g vagy egy k√∂r?
                example_code: |
                    ```
                    print √Åbr√°k rajzol√°sa
                    angle is 90
                    turn angle
                    forward 25
                    turn angle
                    forward 25
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |-
                    print Turtle race!
                    angle is 90
                    turn angle
                    forward 25
            3:
                story_text: |-
                    Iin level 3 you can use use `random` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `at random` to choose a value from a list. You can copy and paste lines 2 and 3 so create a longer random path.
                example_code: |-
                    ```
                    angles is 10, 50, 90, 150, 250
                    turn angles at random
                    forward 25
                    ```
                start_code: |-
                    angles is 10, 50, 90, 150, 250
                    turn angles at random
                    forward 25
            4:
                story_text: A 3. szinten id√©z≈ëjeleket kell haszn√°lni a "print" √©s az "ask" sz√∂veggel. A tekn≈ës haszn√°lata k√∂zben is
                example_code: |
                    ```
                    print 'Tekn≈ës verseny'
                    irany is ask 'H√°ny fokot forduljon?'
                    turn irany
                    tavolsag is ask 'Milyen messze menjen?'
                    forward tavolsag
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    print 'Tekn≈ës verseny'
                    irany is ask 'H√°ny fokot forduljon?'
                    turn irany
                    tavolsag is ask 'Milyen messze menjen?'
                    forward tavolsag
            5:
                story_text: A 4. szinten v√°laszt√°st hozhatsz l√©tre az `if` utas√≠t√°ssal. P√©ld√°ul v√°laszthatsz k√ºl√∂nb√∂z≈ë t√≠pus√∫ alakzatok k√∂z√∂tt.
                example_code: |-
                    ```
                    print '√Åbr√°k rajzol√°sa'
                    alakzat is ask 'N√©gyzetet vagy h√°romsz√∂get akarsz rajzolni?'
                    if alakzat is h√°romsz√∂g szog is 120 else szog is 90
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |
                    print 'Alakzatok rajzol√°sa'
                    alakzat is ask 'N√©gyzetet vagy h√°romsz√∂get akarsz rajzolni?'
                    if alakzat is h√°romsz√∂g szog is 120 else szog is 90
                    turn szog
                    forward 25
            6:
                story_text: |-
                    Az 5. szinten sz√°m√≠t√°sok seg√≠ts√©g√©vel k√ºl√∂nb√∂z≈ë alakzatokat rajzolhatsz.
                    Lehet, hogy az iskol√°ban m√°r tanultad, hogy a teljes k√∂r fordulata 360 fokos. Ha nem, most m√°r tudod!
                    Ez√©rt is haszn√°lsz 90 fokot egy n√©gyzethez. 360 osztva 4 -gyel 90.
                    Most, hogy tudunk matematik√°zni Hedyvel, megrajzolhatjuk az √∂sszes k√≠v√°nt alakzatot!
                example_code: |-
                    ```
                    szogek is ask 'H√°ny sz√∂get akarsz?'
                    szog is 360 / szogek
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    ```
                start_code: print 'Alakzatok rajzol√°sa'
            8:
                story_text: |-
                    Most, hogy t√∂bb sort megism√©telhet√ºnk, k√∂nnyebben k√©sz√≠thet√ºnk alakzatokat.
                    Csak egyszer kell be√°ll√≠tani a sz√∂get, majd ezt a v√°ltoz√≥t haszn√°lni a `repeat` utas√≠t√°ssal.


                    Tov√°bb√° jav√≠thatjuk azt a programot, amely k√ºl√∂nb√∂z≈ë alakzatokat rajzol.
                    Kital√°lod, mennyit kell itt fordulnia a tekn≈ësnek? Fejezd be a k√≥dot, √©s rajzolhatsz tetsz≈ëleges soksz√∂get!
                example_code: |-
                    ```
                    szog is 90
                    repeat 10 times
                        turn szog
                        forward 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
                example_code_2: |-
                    ```
                    szogek is ask 'How many angles should I draw?'
                    szog is 360 / szogek
                    repeat szog times
                        turn _
                        forward_
                    ```
                start_code: szogek is ask 'H√°ny sz√∂get kell rajzolnom?'
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                    **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: '# place your code here'
