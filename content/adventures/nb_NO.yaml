adventures:
    story:
        name: Fortelling
        default_save_name: Fortelling
        description: Fortelling
        levels:
            1:
                story_text: "På nivå 1 kan du lage en fortelling med en hovedperson som du velger selv.\n\nSom første linje, bruk denne koden:\n\n```\n{ask} hvem er stjernen i fortellingen din?\n```\n\nEtter den første linjen, start med `{print}` hvis du vil at setningen skal skrives ut. \nDu bruker `{echo}`\
                    \ hvis du vil ha hovedpersonen din skal være på slutten av setningen.\n"
                example_code: |
                    ```
                    {ask} Hovedpersonen i fortellingen er
                    {print} Hovedpersonen skal nå på tur i skogen
                    {echo} Han er litt redd,
                    {print} Han hører skumle lyder overalt
                    {print} Han er redd dette er en forhekset skog
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?
                start_code: '{print} Fortellingen din starter her'
            2:
                story_text: |
                    På nivå 2 kan du gjøre fortellingen din gøyere. Hovedpersonen sitt navn kan nå være overalt i setningen.

                    Du må programmere litt ekstra for det. Du må nå navngi hovedpersonen din først.

                    Da kan du bruke navnet hvor som helst i en setning.
                example_code: |
                    ```
                    navn {is} {ask} Hva heter hovedpersonen?
                    {print} navn skal nå løpe i skogen
                    {print} navn er litt redd
                    {print} Plutselig hører han en skummel lyd...
                    {sleep}
                    {print} navn er redd dette er en forhekset skog
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
                start_code: '{print} fortellingen din'
            3:
                story_text: |
                    På nivå 3 kan du gjøre historien din enda mer gøy. Du kan bruke tilfeldighet for å velge et hvilket som helst monster, dyr eller hindring slik:
                example_code: |
                    ```
                    dyrene {is} 🦔, 🐿, 🦉, 🦇
                    {print} Han hører nå lyden av en dyrene {at} {random}
                    ```
                story_text_2: |
                    Kommandoen `{add}` kan også være nyttig i historien din.
                example_code_2: |
                    ```
                    {print} Han hører en lyd
                    dyrene {is} 🐿, 🦔, 🦇, 🦉
                    dyret {is} {ask} Hva tror du det er?
                    {add} dyret {to_list} dyrene
                    {print} det var en dyrene {at} {random}
                    ```
                story_text_3: |
                    Dette er et eksempel på `{remove}` kommandoen i historien din
                example_code_3: |
                    ```
                    {print} Ryggsekken hans ble alt for tung.
                    {print} Inni den var en vannflaske, en lommelykt og en murstein.
                    ryggsekk {is} vannflaske, lommelykt, murstein
                    dump {is} {ask} Hvilken ting skal han legge igjen?
                    {remove} dump {from} ryggsekk
                    ```
                start_code: '{print} Fortellingen din'
            4:
                story_text: |
                    Du kan ha lagt merke til at det fremdeles er et problem med forrige nivå. Prøvde du å skrive ut en settning som inneholdt ordet navn?
                    Du kan fikse det på dette nivået. Du må bruke hermetegn rundt alt som du vil skrive ut.
                example_code: |
                    ```
                    navn {is} Ola
                    {print} 'Navnet på hovedpersonen er' navn
                    {print} navn 'skal nå gå en tur i skogen'
                    {print} navn 'er litt redd'
                    dyrene {is} 🦔, 🐿, 🦉, 🦇
                    {print} 'Han hører lyden av en' dyrene {at} {random}
                    {print} navn 'er redd for at det spøker i skogen'
                    ```
                start_code: '{print} ''Fortellingen din vil bli skrevet her!'''
            5:
                story_text: |
                    På dette nivået kan du programmere forskjellige avsluttninger, som vil gjøre fortellingen din enda gøyere.

                    Tenk på to avslutninger på fortellingen, for eksempel:

                    - Prinsessen går gjennom skogen
                    - Hun treffer på et monster

                    - Lykkelig slutt: Hun tar sverdet sitt og monsteret løper sin vei
                    - Ulykkelig slutt: Monsteret spiser prinsessen

                    Du kan også sørge for at et navn kan bli skrevet inn på nytt. Det fungerer akkurat som på de forrige nivåene. Du kan kombinere det med en `{if}`, så har du allerede laget et helt program!
                example_code: |
                    ```
                    navn {is} {ask} 'Hvem er det som går i skogen?'
                    {print} navn 'går i skogen'
                    {print} navn 'støter på et monster'
                    slutt {is} {ask} 'Vil du ha en glad eller trist slutt?'
                    {if} slutt {is} glad {print} navn 'tar sverdet og monsteret løper sin vei'
                    {else} {print} 'Monsteret spiser' navn
                    ```
                start_code: '{print} ''Her starter fortellingen din!'''
            7:
                story_text: |
                    I en fortelling sier noen ord flere ganger. For eksempel når noen roper etter hjelp eller synger en sang.
                    Du kan putte inn slike repetisjoner i historien din på dette nivået med `{repeat}`.
                example_code: |
                    ```
                    {print} 'Prinsen ropte og ropte etter hjelp'
                    {repeat} 5 {times} {print} 'Hjelp!'
                    {print} 'Hvorfor hjelper ingen meg?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Hjelp!'''
            8:
                story_text: |
                    På dette nivået kan du bruke flere linjer i din {if} kommando. På denne måten kan du oppgradere din lykkelige eller triste slutt!
                example_code: |
                    ```
                    {print} 'Å NEI! T-rexen haler innpå!'
                    slutt = {ask} 'Vil du ha en lykkelig eller en trist slutt?'
                    {if} slutt {is} lykkelig
                        {print} 'Akkurat i tide hopper Rolf tilbake i tidsmaskinen!'
                        {print} 'Mikal skriver inn koden og...'
                        {print} '💥PANG!💥'
                        {print} 'De er tilbake i garasjen sin'
                    {else}
                        {print} 'Mikal roper KOM IGJEN ROLF! LØP RASKERE!'
                        {print} 'Men Rolf løper for sakte...'
                        {print} 'T-rexen haler innpå og spiser ham i ett stort jafs!🦖'
                    ```
                start_code: '# skriv koden din her'
            9:
                story_text: |
                    På dette nivået kan du bruke nøsting til å putte {if}, {repeat} eller {for}kommandoer inne i andre {if}, {repeat} eller {for}kommandoer. Dette gir deg mange muligheter og virkelig gjør fortellingen din interaktiv.
                example_code: |
                    ```
                    {print} 'Robin er på tur i byen'
                    plassering = {ask} 'Skal Robin gå inn i en butikk eller går hun hjem?'
                    {if} plassering {is} butikk
                        {print} 'Hun går inn i butikken.'
                        {print} 'Robin ser en bok som ser interessant ut'
                        bok = {ask} 'Kjøper Robin boken?'
                        {if} bok {is} ja
                            {print} 'Robin kjøper boken og går hjem'
                        {else}
                            {print} 'Robin forlater butikken og går hjem'
                    {else}
                        {print} 'Robin går hjem'
                    ```
                start_code: '# skriv koden din her'
            10:
                story_text: |
                    På dette nivået kan du bruke {for} kommandoen i fortellingen din. På denne måten kan du enkelt programmere barneboken 'brunbjørn, brunbjørn, hva ser du'.
                example_code: |
                    ```
                    dyreliste = rød fugl, svart sau, grønn frosk, gul and, lite barn
                    {print} 'brunbjørn'
                    {print} 'brunbjørn'
                    {print} 'Hva ser du?'
                    {for} dyr {in} dyreliste
                        {print} 'Jeg ser et ' dyr ' som ser på meg'
                        {print} dyr
                        {print} dyr
                        {print} 'Hva ser du?'
                    {print} 'Jeg ser alle dyrene som ser på meg!'
                    ```
                start_code: '# skriv koden din her'
            12:
                story_text: |
                    På dette nivået kan du bruke hermetegn for å lagre flere ord i en variabel.
                example_code: |
                    ```
                    navn = 'Dronningen av England'
                    {print} navn ' spiste kake, da plutselig ...'
                    ```
                start_code: '# skriv koden din her'
            13:
                story_text: |
                    Ved å bruke `{and}` og `{or}` kommandoene, kan du korte ned historier. For eksempel, sjekk ut historien om dragen.
                example_code: |
                    ```
                    sverd = 'tapt'
                    spill = 'i gang'
                    {print} 'Helten vår går gjennom skogen'
                    {print} 'Veien deler seg i to'
                    {for} i {in} {range} 0 {to} 2
                        {if} spill {is} 'i gang'
                            vei = {ask} 'Hvilken vei skal hun velge?'
                            {if} vei {is} 'venstre' {and} sverd {is} 'funnet'
                                {print} 'Helten vår støter på en drage!'
                                {print} 'Heldigvis har helten et sverd til å beseire beistet'
                                spill = 'ferdig'
                            {if} vei {is} 'venstre' {and} sverd {is} 'tapt'
                                {print} 'Helten vår støter på en drage, men hun har ingen våpen!'
                                {print} 'Helten vår blir tatt av monsteret...'
                                {print} 'Prøv igjen'
                                spill = 'ferdig'
                            {if} vei {is} 'høyre' {and} sverd {is} 'funnet'
                                {print} 'Du har allerede funnet sverdet, det er ikke noe mer her'
                                {print} 'Hun går tilbake'
                            {if} vei {is} 'høyre' {and} sverd {is} 'tapt'
                                {print} 'Helten vår finner et sverdy'
                                {print} 'Dette kan være veldig hendig'
                                sverd = 'funnet'
                    ```
                start_code: '# skriv koden din her'
            15:
                story_text: |
                    Ved hjelp av `{while}` løkke kan man gjøre historier mer interessante. For eksempel kan du bruke `{while} spillet {is} 'i gang'`så du kan spille til spillet er over.
                    Eller så kan du bruke `{while} sverd {is} 'mistet'` så spilleren ikke kan fortsette før de har funnet noe.
                example_code: |
                    ```
                    keys = 'mistet'
                    {print} 'Du står i hagen din og har mistet nøklene dine.'
                    {print} 'Hvor vil du lete etter de?'
                    {print} 'Du kan velge mellom: tre, blomsterbed, stein, postboks'
                    {while} keys == 'mistet'
                        location = {ask} 'Hvor vil du lete?'
                        {if} location == 'blomsterbed'
                            {print} 'Der var de ja!'
                            keys = 'funnet'
                        {else}
                            {print} 'Nei, de er ikke ved ' location
                    {print} 'Nå kan du gå inn i huset!'
                    ```
                start_code: '# skriv koden din her'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
                start_code: '# Schrijf jouw code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# place your code here'
    calculator:
        name: Kalkulator
        default_save_name: Kalkulator
        description: Lag en kalkulator
        levels:
            6:
                story_text: |
                    Nå som du kan regne så kan du også lage et program til å øve på regnestykker. Du kan lage regnestykker til deg selv, for eksempel:
                example_code: |
                    ```
                    riktig_svar = 11 * 27
                    ditt_svar = {ask} 'Hvor mye er 11 ganger 27?'
                    {if} ditt_svar {is} riktig_svar {print} 'godt jobbet!'
                    {else} {print} 'Feil! Riktig svar er ' riktig_svar
                    ```
                story_text_2: |
                    Du kan også la datamaskinen lage tilfeldige regnestykker på egenhånd ved hjelp av `{at} {random}`.
                    Dette er hvordan du velger tall fra en tabell med tall å øve på og fra det vil du få forskjellige summer:
                example_code_2: |
                    ```
                    tabellene = 4, 5, 6, 8
                    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabell = tabellene {at} {random}
                    tall = tallene {at} {random}
                    riktig_svar = tabell * tall
                    ditt_svar = {ask} 'hvor mye er ' tabell ' ganget med ' tall '?'
                    {if} ditt_svar {is} riktig_svar {print} 'riktig'
                    {else} {print} 'feil! det var ' riktig_svar
                    ```
                story_text_3: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                start_code: '{print} ''Velkommen til denne kalkulatoren!'''
            9:
                story_text: |
                    På de forrige nivåene lærte du hvordan å lage en kalkulator. På dette nivået kan du utvide koden til å lage et lite mattespill. Slik som dette...
                example_code: |
                    ```
                    poengsum = 0
                    {repeat} 10 {times}
                        tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        tall1 = tallene {at} {random}
                        tall2 = tallene {at} {random}
                        riktig_svar = tall1 * tall2
                        {print} 'Hva er ' tall1 ' ganget med ' tall2 '?'
                        ditt_svar = {ask} 'Skriv svaret ditt her...'
                        {print} 'Ditt svar er ' ditt_svar
                        {if} ditt_svar {is} riktig_svar
                            poengsum = poengsum + 1
                    {print} 'Godt jobbet! Din poengsum er... ' poengsum ' av 10!'
                    ```
                start_code: '{print} ''Velkommen til denne kalkulatoren!'''
            10:
                story_text: |
                    Dette kalkulatorspillet hjelper med å øve på multiplikasjonstabeller!
                    Om du legger til flere tall på listen så kan du øve på alle gangetabellene.
                example_code: |
                    ```
                    tallene = 1, 2, 3
                    {for} tall1 {in} tallene
                        {for} tall2 {in} tallene
                            ditt_svar = {ask} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'
                            riktig_svar = tall1 * tall2
                            {if} ditt_svar {is} riktig_svar
                                {print} 'Godt jobbet!'
                            {else}
                                {print} 'Det er feil. Det riktige svaret er ' riktig_svar
                    ```
                start_code: '# skriv koden din her'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    Du kan lage en kalkulator som fungerer med desimaltall.
                example_code: |
                    ```
                    tall1 = {ask} 'Hva er det første tallet?'
                    tall2 = {ask} 'Hva er det andre tallet?'
                    riktig_svar = tall1 + tall2
                    {print} tall1 ' pluss ' tall2 ' er ' riktig_svar
                    ```
                start_code: '# skriv koden din her'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    På dette nivået kan du programmere spillet "Gjett hvilket nummer"
                example_code: |
                    ```
                    {print} 'Gjett hvilket nummer'
                    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tallet = tallene {at} {random}
                    spill = 'i gang'
                    {for} i {in} {range} 1 {to} 10
                        {if} spill == 'i gang'
                            gjetting = {ask} 'Hvilket tall tror du det er?'
                            {if} gjetting > tallet
                                {print} 'Lavere!'
                            {if} gjetting < tallet
                                {print} 'Høyere!'
                            {if} gjetting == tallet
                                {print} 'Du vant!'
                                spill = 'slutt'
                    ```
                start_code: '# skriv koden din her'
            15:
                story_text: |
                    Du kan legge til en `{while}`-løkke til kalkulatorspillet du lærte å lage på det forrige nivået.
                    Dette gjør det sånn at spilleren ikke kan fortsette til neste spørsmål om de har svart feil.
                example_code: |
                    ```
                    poengsum = 0
                    {for} i {in} {range} 0 {to} 9
                        tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        tall1 = tallene {at} {random}
                        tall2 = tallene {at} {random}
                        riktig_svar = tall1 * tall2
                        ditt_svar = 0
                        {while} ditt_svar != riktig_svar
                            {print} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'
                            ditt_svar = {ask} 'Skriv inn ditt svar:'
                            {print} 'Ditt svar er ' ditt_svar
                        {print} 'Godt jobbet!'
                    {print} 'Du vant!'
                    ```
                start_code: '# skriv koden din her'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Introduction
        default_save_name: intro
        description: Level explanation
        levels:
            1:
                story_text: |
                    På Nivå 1 kan du bruke kommandoene `{print}`, `{ask}` og `{echo}`.
                    Skriv koden i programmeringsfeltet, eller trykk på den grønne boksen i eksempelkodeblokken og koden vil bli skrevet for deg!
                    Prøv koden selv med den grønne 'Kjør kode' knappen under programmeringsfeltet.

                    Du kan skrive tekst til skjermen ved å bruke `{print}` kommandoen.
                start_code: '{print} hallo verden!'
            2:
                story_text: |
                    På nivå 2 lærer vi to nye kommandoer: `{is}` og `{sleep}`.
                    Du kan navngi et ord med `{is}`. Dette kalles en variabel. I dette eksempelet har vi laget en variabel kalt 'navn' og en variabel kalt 'alder'. Du kan bruke ordet 'navn' hvor som helst i koden og det vil bli erstattet av Hedy, som dette:

                    På denne måten trenger du ikke lenger `{echo}`kommandoen!
                example_code: |
                    ```
                    navn {is} Hedy
                    alder {is} 15
                    {print} navn is alder år gammel
                    ```
                story_text_2: |
                    `{print}` fungerer fortsatt som før, men `{ask}` kommandoen har endret seg. Fra nå må du bruke en variabel når du bruker `{ask}` kommandoen. Det ser slik ut:
                start_code: '{print} hallo verden!'
            3:
                story_text: |
                    På nivå 3 kan du lage lister. Du kan la datamaskinen velge noe tilfeldig fra listen, du gjør det med `{at} {random}`.
                start_code: '{print} hallo verden!'
            4:
                story_text: |
                    På nivå 4 har `{ask}` og`{print}` blitt endret.

                    Du må fra nå av legge tekst du vil skrive ut mellom fnutter.

                    Dette er nyttig, fordi nå kan du skrive ut alle ordene du vil. Også de ordene du har brukt til å lagre noe med `{is}`.

                    De fleste programmeringsspråk bruker også fnutter når de skriver ut ting, så vi går altså enda et steg nærmere ekte programmering!
                example_code: |
                    ```
                    {print} 'Du må bruke fnutter fra nå av!'
                    svar {is} {ask} 'Hva må vi bruke fra nå av?'
                    {print} 'Vi må bruke' svar
                    ```
                start_code: '{print} ''Hallo verden'''
            5:
                story_text: |
                    På nivå 5 er det noe nytt å lære seg, `{if}`! Med `{if}` kommandoen kan du velge mellom to forskjellige valg.
                    Denne koden skriver ut 'nice' hvis du skriver inn Hedy som navn, og 'buu!' hvis du skriver noe annet.
                    `{ask}` and `{print}` vil fungere på samme måte som de gjorde i nivå 4.
                example_code: |
                    ```
                    navn {is} {ask} 'Hva heter du?'
                    {if} navn {is} Hedy {print} 'wow!' {else} {print} 'fysj!'
                    ```
                start_code: |-
                    navn {is} {ask} 'Hva heter du?'
                    {if} navn {is} Hedy {print} 'kult!' {else} {print} 'meh'
            6:
                story_text: |
                    På dette nivået skal du få lære noe nytt! Du kan nå bruke Hedy til å gjøre matte.

                    Å plusse sammen to tall er enkelt, du bare gjør som du ville gjort i mattetimen, for eksempel: `5 + 5`. Minus funker også: `5 - 5`.

                    Å gange er litt anederledes, fordi det ikke er et gangesymbol på tastaturet ditt. Bare se hvis du vil, der er virkelig ikke et gangeteng.
                    Derfor bruker vi vanligvis en stjerne `*` når vi ganger. `5 * 5`kan leses som "5 ganger 5". Det kan være du må holde inne SHIFT knappen for å kunne skrive *-tegnet.
                example_code: |
                    ```
                    {print} '5 pluss 5 er ' 5 + 5
                    {print} '5 minus 5 er ' 5 - 5
                    {print} '5 ganger 5 er ' 5 * 5
                    ```
                start_code: '{print} ''5 ganger 5 er '' 5 * 5'
            7:
                story_text: |
                    Nivå 7 legger til `{repeat}` kommandoen. {repeat} kan brukes til å kjøre en kodelinje flere ganger.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy {is} morro!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy er morro!'''
            8:
                story_text: |
                    `{ask}` {and} `{print}` fungerer fortsatt slik du er vandt til, men `{if}` {and} `{repeat}` har endret seg litt!
                    Du kan nå kjøre små blokker med kode sammen, men du må gi koden korrekt *innrykk*.
                    Det betyr at du må legge til fire mellomrom på starten av kodelinjen. Du må også ha nytt innrykk når du skal lage en blokk på en linje.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo alle sammen'
                        {print} 'Dette blir gjentatt 5 ganger'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo folkens'
                        {print} 'Dette vil bli skrevet ut 5 ganger'
            9:
                story_text: |
                    På dette nivået kan du bruke både `{if}` med kodeblokker {and} `{repeat}` sammen!
                    I eksempelet kan du se en `{if}` kommando inni en `{repeat}` kommando. Det er også mulig å gjøre det motsatte (`{repeat}` inni en `{if}`).
                    Du kan også legge en `{if}` inni en annen `{if}` og en `{repeat}` inni en `{repeat}`.
                    Prøv å se om du får det til!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        matrett = {ask} 'Hva vil du ha?'
                        {if} matrett {is} pizza
                            {print} 'bra!'
                        else
                            {print} 'pizza er bedre'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        matrett = {ask} 'Hva vil du ha?'
                        {if} matrett {is} pizza
                            {print} 'nice!'
                        else
                            {print} 'pizza er bedre'
            10:
                story_text: |
                    På dette nivået skal vi lære et nytt nøkkelord `{for}`. Med `{for}` kan du lage en liste og bruke alle elementene i listen.
                    `{for}` lager en kodeblokk, på samme måte som `{repeat}` og `{if}`, så alle linjene i kodeblokken må starte med 4 mellomrom (innrykk).
                example_code: |
                    ```
                    dyrene {is} hunder, katter, flyndre
                    {for} dyr {in} dyrene
                        {print} 'Jeg elsker ' dyr
                    ```
                start_code: |-
                    dyrene {is} hunder, katter, flyndre
                    {for} dyr {in} dyrene
                        {print} 'Jeg elsker ' dyr
            11:
                story_text: |
                    `{print}` fungerer på samme måten som før, men vi legger til en ny versjon av `{for}`. Nå kan du skrive`{for} teller {in} {range} 1 {to} 5` and og bruke `teller` i programmet ditt. En {range} er bare noen tall som kommer etter hverandre på tall-linjen.
                    Prøv det ut og se hva som skjer! Husk å ha innrykk på linjen etter `{for}` og `{if}` uttrykkene (det betyr at du må starte setningen med fire mellomrom)
                start_code: |-
                    {for} teller {in} {range} 1 {to} 5
                        {print} teller
            12:
                story_text: |
                    **Desimaltall**
                    Før dette nivået har det ikke vært mulig å bruke desimaltall som 1.5 i Hedy, men fra nå av kan du det! Legg merke til at datamaskiner bruker punktum `.` som skilletegn i desimaltall.
                example_code: |
                    ```
                    {print} 'To og en halv pluss to og en halv er lik...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'desimaltall må bruke et punktum nå'
                    {print} 2.5 + 2.5
            13:
                story_text: |
                    Nå skal vi lære om `{and}` og`{or}`! Hvis du har lyst til å sjekke to påstander trenger du ikke å bruke to `{if}`, du kan bruke `{and}` og `{or}`. Hvis du bruker `{and}` må begge påstandene være sann. Vi kan også bruke `eller`, da trenger kun en av påstandene å være sann.
                example_code: |
                    ```
                    navn = {ask} 'Hva heter du?'
                    alder = {ask} 'Hvor gammel er du?'
                    {if} navn {is} 'Hedy' {and} alder {is} 2
                        {print} 'Du er den ekte Hedy'
                    ```
                start_code: |-
                    navn = {ask} 'Hva heter du?'
                    alder = {ask} 'Hvor gammel er du?'
                    {if} navn {is} 'Hedy' {and} alder {is} 2
                        {print} 'Du er den ekte Hedy!'
            14:
                story_text: |
                    Vi skal lære enda flere nye ting. Det kan være du allerede kjenner til disse fra mattetimen, `<`og `>`.
                    `<` kaller vi 'mindre enn'-tegnet. Dette bruker vi for å sjekke om det første tallet er *mindre enn* det andre, f.eks: `alder < 12`kan leses som `alder er mindre enn 12`.
                    Hvis du vil sjekke om det første tallet er mindre eller like stort som det andre, kan du bruke `<=`, f.eks: `alder <= 11`.
                    `>` kaller vi `større enn`-tegnet. Dette bruker vi for å sjekke om det første tallet er *større enn* det andre, f.eks: `poeng > 10` kan leses som `poeng er større enn 10`.
                    Hvis du vil sjekke om det første tallet er større eller like stort som det andre, kan du bruke `>=`, f.eks: `poeng >= 11`.
                    Du kan bruke disse sammenligningene i en `hvis`, for eksempel slik:
                example_code: |
                    ```
                    alder = {ask} 'Hvor gammel er du?'
                    {if} alder > 12
                        {print} 'Du er eldre enn meg!'
                    ```
                start_code: |-
                    alder = {ask} 'Hvor gammel er du?'
                    {if} alder < 13
                        {print} 'Du er yngre enn meg!'
                    {else}
                        {print} 'Du er eldre enn meg!'
            15:
                story_text: |
                    Vi skal lære en ny løkke, `{while}` løkken! Denne løkken fortsetter å kjøre så lenge påstanden er sann.
                    Det er derfor veldig viktig å endre verdien i løkken.

                    I eksempelkoden lar vi løkken kjøre til vi får det riktige svaret.
                    Hvis ikke vi aldri får det riktige svaret, så fortsetter løkken for alltid!
                example_code: |
                    ```
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Hva er 5 ganger 5?'
                    {print} 'A korrekt svar ble gitt'
                    ```
                start_code: |-
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Hva er 5 ganger 5?'
                    {print} 'Det svaret var riktig'
            16:
                story_text: |
                    Vi skal nå lage lister på Python måten, med firkantparanteser rundt listene! Vi beholder fnuttene rundt tekstene i listen slik som vi lærte på et tidligere nivå.
                    Du kan bruke firkanparantesene til å peke på en plass i listen.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    frukt = ['eple', 'banan', 'kirsebær']
                    {print} frukt
            17:
                story_text: "Nå gjør vi en liten endring i koden når vi bruker innrykk. Hver gang vi trenger innrykk, må vi nå skrive `:` på linjen før innrykket.\n\n På dette nivået kan du også bruke en ny kommando `{elif}`. `{elif}` er en forkortelse for {else} {if} og du trenger det når du har lyst\
                    \ til å lage kode med 3 (eller fler!) alternativer.\nSjekk hvordan det blir!\n```\npremier = ['1 million kroner', 'en eplekake', 'ingenting']\ndin_premie = premier[{random}]\n {print} 'Du vinner ' din_premie \n{if} din_premie == '1 million kroner':\n    {print} 'Hurra! Du er rik!'\n\
                    {elif} din_premie == 'en eplekake':\n    {print} 'Digg, eplekake!'\n{else}:\n    {print} 'Bedre lykke neste gang..'\n```\n"
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Klar eller ei, her kommer jeg!'
            18:
                story_text: |-
                    Vi har ankommet nivået hvor vi skriver virkelig pythonkode! Python er riktignok ikke på norsk, men du kan bruke knappen oppe i høyre hjørne av kodefeltet hvis du vil se hvordan koden ser ut på engelsk.
                    Nå når vi har nådd ekte pythonkode må vi bruke paranteser når vi bruker {print} og {range}.
                    Dette ser slik ut:
                    ```
                    {print}('Mitt navn er Hedy!')
                    ```
                    For å skrive ut mer enn en ting må du bruke et komma mellom tingene.
                    ```
                    navn = 'Hedy'
                    {print}('Mitt navn er ', navn)
                    ```
                start_code: |-
                    navn = 'Hedy'
                    {print}('Mitt navn er ', navn)
    dice:
        name: Terninger
        default_save_name: Terninger
        description: Lag din egen terning
        levels:
            3:
                story_text: |
                    På dette nivået kan vi velge fra en liste. Med det kan vi la datamaskinen velge en side av en terning.
                    Ta en titt på spillene du har i skapet hjemme.
                    Er det spill der med en (spesiell) terning? Du kan også kopiere den med denne koden.
                    For eksempel, en terning fra spillet Earthworms med tallene 1 til 5 og en makk på

                    ![Terning fra Earthworms med 1 til 5 og en makk på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    valgene {is} 1, 2, 3, 4, 5, makk
                    {print} valgene {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: '{print} Hva vil terningen vise denne gangen?'
            4:
                story_text: |
                    På dette nivået kan vi lage setninger med terningens verdi i setningen, med fnutter så klart.
                    Denne gangen er ikke eksempelkoden helt ferdig. Kan du fullføre koden?
                start_code: '{print} ''Hva vil terningen vise denne gangen?'''
            5:
                story_text: |
                    Du ha også lage en terning igjen på dette nivået ved å bruke `{if}`.
                    Fullfør eksempelkoden slik at koden sier "Du kan slutte å trille" så snart du har trillet en makk.

                    Men kanskje du har lyst å gjenskal en terning fra et annet spill. Det er også greit! Isåfall lager du din egen reaksjon. F.eks. 'ja' for 6 og 'det var synd' for alt annet.
                example_code: |
                    ```
                    valgene {is} 1, 2, 3, 4, 5, makk
                    kastet {is} _
                    {print} 'du trillet ' _ 'med terningen'
                    {if} _ {is} makk {print} 'Du kan slutte å trille.' _ {print} 'Prøv igjen!'
                    ```
                start_code: '{print} ''Hva vil terningen vise denne gangen?'''
            6:
                story_text: |
                    Du kan også lage en Earthworm-terning igjen i dette, men nå kan du også kalkulere hvor mange poeng som har blitt trillet.
                    Du vet kanskje at makken teller for 5 poeng i Earthworms. Etter hver trilling kan du umiddelbart kalkulere antall poeng du har trillet.
                    Dette er koden for å kalkulere poeng for 1 terning:
                example_code: |
                    ```
                    valgene = 1, 2, 3, 4, 5, makk
                    poeng = 0
                    verdi = valgene {at} {random}
                    {print} 'du trillet' verdi
                    {if} verdi {is} makk poeng = poeng + 5 {else} poeng = poeng + verdi
                    {print} 'det er' poeng ' poeng'
                    ```
                    Kan du gjøre det slik at koden gir deg den totale poengsummen for 8 terningkast? For å gjøre det må du kopiere og lime inn et par linjer kode.
                example_code_2: |
                    Klarte du å beregne poeng for 8 terninger? Det krevde mye kopiering og liming, sant? Vi skal gjøre det lettere på nivå 7!
                start_code: '{print} ''Hva vil terningen vise denne gangen?'''
            7:
                story_text: |
                    Du kan også lage en terning igjen på nivå 5. Med `{repeat}` kan du enkelt trille en hel håndfull med terninger.
                    Prøv å fullføre eksempelkoden. Der det er streker skal det være flere kommandoer og tegn.

                    Men kanskje du har lyst å lage en helt annen terning. Selvfølgelig kan du det!
                example_code: |
                    ```
                    valgene = 1, 2, 3, 4, 5, makk
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: '{print} ''Hva vil terningen vise denne gangen?'''
            10:
                story_text: |
                    Bruker alle for lang tid på å trille terninger? På dette nivået kan du la Hedy trille alle terningene på en gang!
                example_code: |
                    ```
                    spillere = Anne, Jon, Jørgen
                    valg = 1, 2, 3, 4, 5, 6
                    {for} spiller {in} spillere
                        {print} spiller ' triller ' valg {at} {random}
                        {sleep}
                    ```
                start_code: '# skriv koden din her'
            15:
                story_text: |
                    I dette spillet må du trille 6 på så få forsøk som mulig.
                example_code: |
                    ```
                    valg = 1, 2, 3, 4, 5, 6
                    {print} 'Trill 6 så raskt som du kan!'
                    trillet = 0
                    forsøk = 0
                    {while} trillet != 6
                        trillet = valg {at} {random}
                        {print} 'Du trillet ' trillet
                        forsøk = forsøk + 1
                    {print} 'Jippi! Du trillet 6 på ' forsøk ' forsøk.'
                    ```
                start_code: '# skriv koden din her'
    dishes:
        name: Retter?
        default_save_name: Retter
        description: Bruk datamaskinen til å se hvem som skal ta oppvasken (Start på nivå 2)
        levels:
            3:
                story_text: |
                    Er dere alltid uenig hjemme om hvem som skal ta oppvasken eller hvem som skal rense kattedoen?
                    Da kan du la datamaskinen velge helt rettferdig. Du kan programmere det på dette nivået!
                    Først må du lage en liste over folk i familien. Så velger du `{at} {random}` fra listen.
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                example_code: |
                    ```
                    familie {is} mamma, pappa, Emma, Sofie
                    {print} familie {at} {random}
                    ```
                story_text_2: |
                    Føler du ikke for å ta oppvasken selv? Hack programmet til å fjerne navnet ditt fra listen.
                start_code: '{print} Hvem tar oppvasken?'
            4:
                story_text: |
                    Med fnutter kan du gjøre oppvaskeplanleggingen penere.
                    Denne gangen er eksempelkoden ikke helt ferdig.

                    Kan du fullføre koden ved å fylle inn det som mangler? Hver tomme plass må erstattes med et ord eller et symbol.

                    Tips: Ikke glem fnutter!
                example_code: |
                    ```
                    familie {is} mamma, pappa, Emma, Sofie
                    {print} _ oppvasken blir tatt av _
                    {sleep}
                    {print} familie {at} _
                    ```
                start_code: '{print} ''Hvem tar oppvasken?'''
            5:
                story_text: |
                    Med `{if}`kan du nå ha det mer gøy med valg i programmet. Du kan få programmet til å respondere med det valget maskinen har tatt.

                    Kan du fullføre koden så det skriver ut 'det var dumt' når det er din tur og 'jippi!' ellers?
                    Ikke glem fnutter!
                example_code: |
                    ```
                    familie {is} mamma, pappa, Emma, Sofie
                    oppvasker {is} familie {at} {random}
                    {if} oppvasker {is} Sofie {print} _ det var dumt at jeg må ta oppvasken _ {else} {print} 'heldigvis ingen oppvask fordi' _ 'allerede tar oppvasken'
                    ```
                start_code: '{print} ''Hvem tar oppvasken?'''
            6:
                story_text: |
                    Hvor ofte må hver ta oppvasken? Er det rettferdig? Du kan telle det på dette nivået.
                example_code: |
                    ```
                    familie = mamma, pappa, Emma, Sofie
                    emma_vasker = 0
                    oppvasker = familie {at} {random}
                    {print} 'Den som tar oppvasken er ' oppvasker
                    {if} oppvasker {is} Emma emma_vasker = emma_vasker + 1
                    {print} 'Emma tar oppvasken ' emma_vasker ' ganger denne uken'
                    ```

                    Du kan nå kopiere linjene 3 til 5 et par ganger (f.eks. 7 ganger for en hel uke) for å regne ut for hele uken.
                    Lager du koden for hele uken?
                story_text_2: |
                    Om du er ekstremt uheldig så kan det forrige programmet velge deg til å gjøre oppvasken hele uken! Det er ikke rettferdig!
                    For å lage et mer rettferdig system så kan du bruke `{remove}`-kommandoen for å fjerne en gitt person fra listen. På denne måten trenger du ikke å ta oppvasken igjen før alle har tatt sin tur.

                    Mandag og tirsdag er klar for deg! Kan du legge til resten av uken?
                    Og.. kan du komme på en løsning dersom listen er tom?
                example_code_2: |
                    ```
                    familie = mamma, pappa, Emma, Sofie
                    oppvasker = familie {at} {random}
                    {print} 'Mandag blir oppvasken tatt av: ' oppvasker
                    {remove} oppvasker {from} familie
                    oppvasker = familie {at} {random}
                    {print} 'Tirsdag blir oppvasken tatt av: ' oppvasker
                    {remove} oppvasker {from} familie
                    oppvasker = familie {at} {random}
                    ```
                start_code: '{print} ''Hvem tar oppvasken?'''
            7:
                story_text: |
                    Med `{repeat}` kan du repetere deler av kode. Du kan bruke dette til å beregne hvem som skal ta oppvasken for hele uken.
                example_code: |
                    ```
                    familie = mamma, pappa, Emma, Sofie
                    {repeat} _ _ {print} 'Den som tar oppvasken er ' _
                    ```
                start_code: '{print} ''Hvem tar oppvasken?'''
            10:
                story_text: |
                    På dette nivået kan du lage en enda bedre oppvaskeplan.
                example_code: |
                    ```
                    dager = Mandag, Tirsdag, Onsdag, Torsdag, Fredag, Lørdag, Søndag
                    navn = mamma, pappa, Emma, Sofie
                    {for} day {in} dager
                        {print} navn {at} {random} ' tar oppvasken på ' day
                    ```
                start_code: '# skriv koden din her'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Spåkone
        default_save_name: Spåkone
        description: La Hedy forutsi fremtiden
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# skriv koden din her'
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I’m Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: '# skriv koden din her'
            4:
                story_text: |
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: '# skriv koden din her'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'
                    ```
                start_code: '# skriv koden din her'
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: '# skriv koden din her'
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                start_code: '# skriv koden din her'
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: '# skriv koden din her'
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# skriv koden din her'
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# skriv koden din her'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Spøkelseshus
        default_save_name: Spøkelseshus
        description: flykt fra det forheksede huset
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but {if} not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: '{print} Hvordan kom jeg meg her?'
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# skriv koden din her'
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                    ```
                start_code: '# skriv koden din her'
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# skriv koden din her'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Flykt fra det forheksede huset!'''
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Flykt fra det forheksede huset!'''
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# skriv koden din her'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[random]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# skriv koden din her'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Språk
        default_save_name: språk
        description: Øv på ord fra andre språk
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# skriv koden din her'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# skriv koden din her'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Papegøye
        default_save_name: Papegøye
        description: Lag din egen online papegøye som hermer etter det du sier!
        levels:
            1:
                story_text: |
                    Lag din egen online papegøye som hermer etter deg!
                example_code: |
                    ```
                    {print} Jeg er papegøyen Hedy
                    {ask} hva er ditt navn?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
                start_code: '{print} Jeg er papegøyen Hedy'
            2:
                story_text: |
                    Lag din egen online papegøye som hermer etter deg!
                example_code: |
                    ```
                    {print} Jeg er papegøyen Hedy
                    navn {is} {ask} hva er ditt navn?
                    {print} navn
                    {sleep}
                    {print} skrik!
                    {sleep}
                    {print} navn
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                start_code: '{print} Jeg er papegøyen Hedy!'
            3:
                story_text: |
                    Lær papegøyen din et nytt ord med `{add}`.
                example_code: |
                    ```
                    ordene {is} skrik, Hedy
                    {print} Lær din papegøye!
                    nytt_ord {is} {ask} Hvilket nytt ord vil du lære den?
                    {add} nytt_ord {to_list} ordene
                    {print} 🧒 Si nytt_ord , Hedy!
                    {print} 🦜 ordene {at} {random}
                    ```
                start_code: '# skriv koden din her'
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
                start_code: '# Write your code here'
            5:
                story_text: |
                    Belønn papegøyen din om det sier det riktige ordet!
                example_code: |
                    ```
                    ordene {is} skrik, Hedy
                    {print} 'Tren papegøyen din!'
                    nytt_ord {is} {ask} 'Hvilket nytt ord vil du lære den?'
                    {add} nytt_ord {to_list} ordene
                    uttalt_ord {is} ordene {at} {random}
                    {print} '🧒 Si ' nytt_ord ', Hedy!'
                    {print} '🦜 ' uttalt_ord
                    {if} uttalt_ord {is} nytt_ord {print} '🧒 Godt jobbet, Hedy! 🍪'
                    {else} {print} '🧒 Nei, Hedy! Si ' nytt_ord
                    ```
                start_code: '# skriv koden din her'
    piggybank:
        name: Sparebøsse
        default_save_name: Sparebøsse
        description: Tell sparepengene dine!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
                start_code: '# skriv koden din her'
            14:
                story_text: |
                    In this level you can let Hedy tell you {if} you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# skriv koden din her'
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# place your code here'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Quizmester
        default_save_name: Quizmester
        description: Lag din egen quiz!
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# skriv koden din her'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Lag din egen virtuelle restaurant
        levels:
            1:
                story_text: |
                    På nivå 1 kan du lage din egne virtuelle restaurant og ta imot dine gjesters bestillinger.
                example_code: |
                    ```
                    {print} Velkommen til Hedys restaurant 🍟
                    {ask} Hva har du lyst å bestille?
                    {echo} Så du vil bestille
                    {print} Takk for din bestilling!
                    {print} Den er på vei!
                    ```
                story_text_2: |
                    Kan du tenke deg flere linjer du kan legge til restaurantens kode? For eksempe, kan du spørre gjestene hva de har lyst å drikke, fortelle de prisen eller å ønske de et godt måltid?
                start_code: '# skriv koden din her'
            2:
                story_text: |
                    På nivå 2 kan du utvide din restaurant ved å bruke variabler. På nivå 1 kunne Hedy bare svare med bestillingen 1 gang og den kunne bare huske siste ting som var bestilt.
                    Nå kan du bruke variabler og Hedy kan huske både mat og drikke!
                example_code: |
                    ```
                    {print} Velkommen til Hedys restaurant!
                    {print} I dag har vi pizza og lasagne på menyen.
                    maten {is} {ask} Hva har du lyst til å spise?
                    {print} Godt valg! maten er min favoritt!
                    tilbehør {is} {ask} Foretrekker du vegetar eller med kjøtt?
                    {print} maten med tilbehør skal bli!
                    drikken {is} {ask} Vil du ha noe å drikke med det?
                    {print} Takk for bestillingen
                    {print} maten og drikken kommer snart!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
                start_code: '# skriv koden din her'
            3:
                story_text: |
                    Har du problemer med å bestemme hva du vil ha til middag? Du kan la Hedy bestemme for deg!
                    Lag en liste over dine favorittmåltid og Hedy kan tilfeldig plukke ut en middag til deg.
                    Du kan også ha litt gøy ved å la Hedy velge prisen for middagen også. Hva blir det til middag i dag?`
                example_code: |
                    ```
                    {print} Velkommen til Hedys Tilfeldige Restaurant!
                    {print} Den eneste restauranten som tilfeldig velger hva du får servert og hva det vil koste!
                    forretter {is} salat, suppe, carpaccio
                    hovedretter {is} pizza, rosenkål, spaghetti
                    desserter {is} brownies, iskrem, franske oster
                    drikker {is} cola, øl, vann
                    priser {is} 10 kroner, 100 kroner, 1000 kroner
                    {print} Du vil begynne med: forretter {at} {random}
                    {print} Og så vil vi servere: hovedretter {at} {random}
                    {print} Og til slutt: desserter {at} {random}
                    {print} Til maten vil du få drikker {at} {random} å drikke
                    {print} Det vil koste deg: priser {at} {random}
                    {print} Takk og vel bekomme!
                    ```
                story_text_2: |
                    Har dine gjester noen allergier eller noen retter de ikke liker? Da kan du bruke `{remove}`-kommandoen til å fjerne ting fra menyen.
                example_code_2: |
                    ```
                    {print} Mysteriemilkshake
                    smaker {is} jordbær, sjokolader, vanilje
                    allergier {is} {ask} Er du allergisk til en av smakene?
                    {remove} allergier {from} smaker
                    {print} Du vil få en smaker {at} {random} milkshake
                    ```
                start_code: '# skriv koden din her'
            4:
                story_text: |
                    På dette nivået må du bruke fnutter når du bruker `{print}`-kommandoen.
                    Kan du gjøre sånn at koden fra forrige nivå også fungerer ved å legge til fnutter?

                    Vær forsiktig! I forrige nivå var fnutter lov i tekst, men på dette nivået vil det forvirre Hedy om du har fnutter i teksten din.
                    Så istedenfor å skrive `{print} I dag serverer vi pizza`, må du nå skrive `{print} 'I dag serverer vi pizza'`
                example_code: |
                    ```
                    {print} 'Velkommen til Hedys Restaurant!'
                    {print} 'I dag er det pizza og lasagne på menyen.'
                    maten {is} {ask} 'Hva har du lyst til å spise?'
                    {print} 'Godt valg! ' maten ' er min favoritt!'
                    tilbehør {is} {ask} 'Foretrekker du vegetar eller med kjøtt?'
                    {print} maten ' med ' tilbehør ' skal bli!'
                    drikken {is} {ask} 'Vil du ha noe å drikke til?'
                    {print} 'Takk for bestillingen.'
                    {print} maten ' og ' drikken ' kommer snart!'
                    ```
                start_code: '# skriv koden din her'
            5:
                story_text: |
                    På dette nivået lar `{if}`-kommandoen deg å spørre kunder spørsmål og gi forskjellige ting til svar.
                    I eksempelet under kan du se at du kan spørre kunden om de har lyst å høre om dagens rett og Hedy kan svare deretter.
                example_code: |
                    ```
                    {print} 'Velkommen til Hedys restaurant!'
                    vil_høre {is} {ask} 'Vil du høre om dagens rett?'
                    {if} vil_høre {is} ja {print} 'Dagens rett er kylling piri piri med ris.' {else} {print} 'Ikke noe problem.'
                    matønske {is} {ask} 'Hva har du lyst å spise?'
                    {print} 'en ' matønske ' er på vei!'
                    drikke {is} {ask} 'Hva har du lyst å drikke til?'
                    {if} drikke {is} cola {print} 'Beklager, vi er tom for cola!' {else} {print} 'Godt valg!'
                    annet {is} {ask} 'Vil du ha noe annet?'
                    {print} 'La meg lese opp bestillingen...'
                    {print} 'En ' matønske
                    {if} drikke {is} cola {print} 'og...' {else} {print} 'En ' drikke
                    {if} annet {is} nei {print} 'Det var det!' {else} {print} 'En ' annet
                    {print} 'Takk for bestillingen og vel bekomme!'
                    ```
                start_code: '# skriv koden din her'
            6:
                story_text: |
                    På dette nivået kan du bruke matte til å regne ut totalprisen på kundens bestilling. Dette vil gjøre den virtuelle restauranten mer realistisk.
                example_code: |
                    Enkel
                    Du kan lage koden for en enkel restaurant slik:
                    ```
                    {print} 'Velkommen til Hedys restaurant'
                    {print} 'Her er vår meny:'
                    {print} 'Våre hovedretter er pizza, lasagne og spaghetti'
                    hovedrett = {ask} 'Hvilken hovedrett vil du ha?'
                    pris = 0
                    {if} hovedrett {is} pizza pris = 100
                    {if} hovedrett {is} lasagne pris = 120
                    {if} hovedrett {is} spaghetti pris = 80
                    {print} 'Du har bestilt ' hovedrett
                    {print} 'Det blir ' pris ' kroner, takk'
                    {print} 'Takk, vel bekomme!'
                    ```
                start_code: '# skriv koden din her'
            7:
                story_text: |
                    På dette nivået har du lært å bruke `{repeat}`-kommandoen til å repeterer en linje med kode et visst antall ganger.
                    Du kan bruke det i din restaurant til å spørre flere gjester hva de har lyst på. Slik:
                example_code: |
                    ```
                    {print} 'Velkommen Hedys restaurant!'
                    antall_personer = {ask} 'Hvor mange personer er dere i dag?'
                    {repeat} antall_personer times mat = {ask} 'Hva vil du spise?'
                    {print} 'Takk for bestillingen, den er på vei!'
                    ```
                start_code: '# skriv koden din her'
            8:
                story_text: |
                    På dette nivået kan du lage din virtuelle restaurant enda mer forseggjort ved å reptere flere linjer med kode. Slik:
                example_code: |
                    ```
                    {print} 'Velkommen til Hedys restaurant!'
                    antall_personer = {ask} 'Hvor mange er dere i dag?'
                    {print} 'Supert!'
                    {repeat} antall_personer {times}
                        ønsker = {ask} 'Hva har dere lyst på?'
                        {print} ønsker
                    {print} 'Takk for bestillingen!'
                    {print} 'Vel bekomme!'
                    ```
                story_text_2: |
                    Selvfølgelig, denne koden kan utvides med flere tin i menyen, tilbud om drikke, og/eller flere retter så legg til så mye du ønsker!
                start_code: '# skriv koden din her'
            9:
                story_text: |
                    På dette nivået kan du putte `{if}` inni `{if}` for å gjøre restauranten din mer realistisk og gøy!
                    Du kan for eksempel spørre om saus om noen bestiller pommes frites, men det passer kanskje ikke om noen bestiller lasagne!
                    Sjekk ut eksempelet og prøv dette på din egne virtuelle restaurant!
                example_code: |
                    ```
                    {print} 'Velkommen til Hedys restaurant!'
                    antall_personer = {ask} 'Hvor mange er dere i dag?'
                    {print} 'Supert!'
                    pris = 0
                    {repeat} antall_personer {times}
                        ønsket_mat = {ask} 'Hva ønsker dere å bestille?'
                        {print} ønsket_mat
                        {if} ønsket_mat {is} pommes frites
                            pris = pris + 30
                            dressing = {ask} 'Ønsker dere dressing med det?'
                            {if} dressing {is} no
                                {print} 'ingen dressing'
                            {else}
                                pris = pris + 10
                                {print} 'med ' dressing
                        {if} ønsket_mat {is} pizza
                            pris = pris + 40
                    {print} 'Det blir ' pris ' kroner'
                    {print} 'Vel bekomme!'
                    ```
                start_code: '# skriv koden din her'
            10:
                story_text: |
                    På dette nivået kan du lære hvordan å enkelt spørre om gjestenes ønsker i kort kode.
                example_code: |
                    ```
                    retter = forrett, hovedrett, dessert
                    {for} rett {in} retter
                        ønsket_mat = {ask} 'Hva ønsker du til ' rett '?'
                        {print} ønsket_mat ' skal du få til ' rett
                    ```
                story_text_2: |
                    Selvfølgelig, du kan også bestille for flere personer!
                example_code_2: |
                    ```
                    retter = forrett, hovedrett, dessert
                    navnene = Timon, Onno
                    {for} navn {in} navnene
                        {for} rett {in} retter
                            ønsket_mat = {ask} navn ', hva vil du ha til ' rett '?'
                            {print} navn ' bestiller ' ønsket_mat ' til ' rett
                    ```
                start_code: retter = forrett, hovedrett, dessert
            11:
                story_text: |
                    Vi kan bruke `{for} i {in} {range} 1 {to} 5`til å skrive ut ordrene fra flere kunder på en ordnet måte.
                example_code: |
                    ```
                    {print} 'Velkommen til Restaurant Hedy!'
                    antall_personer = {ask} 'Hvor mange personer er dere i dag?'
                    {for} i {in} {range} 1 {to} antall_personer
                        {print} 'Ordre nummer ' i
                        ønsket_mat = {ask} 'Hva vil du ha å spise?'
                        {print} ønsket_mat
                        {if} ønsket_mat {is} pommes frites
                            dressing = {ask} 'Ønsker dere dressing med det?'
                            {print} dressing
                        drikke = {ask} 'Hva vil du ha å drikke?'
                        {print} drikke
                    pris = 40 * antall_personer
                    {print} 'Det blir ' pris ' kroner, takk!'
                    ```
                start_code: '# skriv koden din her'
            12:
                story_text: |
                    Fra dette nivået av kan du bruke desimaltall for å gjøre menyen mer realistisk.
                example_code: |
                    ```
                    pris = 0
                    ønsket_mat = {ask} 'What would you like to order?'
                    ønsket_drikke = {ask} 'What would you like to drink?'
                    {if} ønsket_mat {is} 'hamburger'
                        pris = pris + 60.50
                    {if} ønsket_mat {is} 'pizza'
                        pris = pris + 50.75
                    {if} ønsket_drikke {is} 'vann'
                        pris = pris + 10.50
                    {if} ønsket_drikke {is} 'brus'
                        pris = pris + 20.35
                    {print} 'Det blir ' pris ' kroner, takk!'
                    ```
                start_code: '# skriv koden din her'
            13:
                story_text: |
                    På dette nivået kan vi bruke de nye kommandoen til å oppgradere restauranten vår.
                    Vi bruker `{and}`til å se om to ting begge stemmer.
                example_code: |
                    ```
                    pris = 100
                    ønsket_mat = {ask} 'Hva vil du ha å spise?'
                    ønsket_drikke = {ask} 'Hva ønsker du å drikke til maten?'
                    {if} ønsket_mat {is} 'toast' {and} ønsket_drikke {is} 'juice'
                        {print} 'Det er på tilbudsmenyen'
                        pris = pris - 30
                    {print} 'Det blir ' pris ' kroner'
                    ```
                start_code: '# skriv koden din her'
            15:
                story_text: |
                    Med `{while}` kan du sørge for at kundene dine kan fortsette å bestille til de er ferdig.
                example_code: |
                    ```
                    {print} 'Velkommen til McHedy'
                    mer = 'ja'
                    {while} mer == 'ja'
                        ønsker = {ask} 'Hva vil du bestille?'
                        {print} ønsker
                        mer = {ask} 'Vil du ha noe mer?'
                    {print} 'Takk!'
                    ```
                start_code: '# skriv koden din her'
    rock:
        name: Stein, saks, papir
        default_save_name: Stein
        description: Lag ditt eget stein, saks,papir-spill
        levels:
            1:
                story_text: |
                    På nivå 1 kan du starte med spillet stein, saks, papir.

                    Med `{ask}` kan du ta et valg og med `{echo}` kan du gjenta det valget.
                example_code: |
                    ```
                    {print} hva velger du?
                    {ask} velg mellom stein, saks, papir
                    {echo} du valgte:
                    ```
                    Istedenfor å bruke ord så kan du selvfølgelig bruke emoji: ✊✋✌
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: '{print} Velkommen til din egen stein saks papir!'
            2:
                story_text: |
                    På dette nivået kan du øve deg på å bruke variabler så du kan lage stein, saks, papir-spillet på neste nivå!
                example_code: |
                    ```
                    valg {is} _
                    {print} Jeg velger valg
                    ```
                start_code: '# skriv koden din her'
            3:
                story_text: |
                    På dette nivået kan vi lage lister og velge ting fra de.
                    Du kan først lage en liste med `{is}`. Så kan du la datamaskinen velge noe annet fra listen med `{at} {random}`.
                    For eksempel så kan du la datamaskinen velge mellom stein, saks og papir.
                example_code: |
                    ```
                    valgene {is} stein, saks, papir
                    {print} valgene {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: '{print} Velkommen til din egen stein saks papir!'
            4:
                story_text: |
                    På dette nivået kan vi programmere videre på stein, saks, papir. Om du vil legge til tekst må du bruke fnutter her også.
                    Kan du fullføre koden ved å fylle ut de riktige kommandoene og tengene der det er streker?
                start_code: '{print} ''Velkommen til din egen stein saks papir!'''
            5:
                story_text: |
                    På dette nivået kan vi bestemme hvem som vant.
                    Til det trenger vi den nye `{if}`-koden.

                    Ta vare på ditt valg og datamaskinens valg.
                    Så kan du bruke `{if}` for å se om de er det samme eller forskjellig.
                    Kan du fullføre koden?
                example_code: |
                    ```
                    valgene {is} stein, saks, papir
                    datamaskin_valg {is} _
                    ditt_valg {is} {ask} 'Hva velger du?'
                    {print} 'du velger ' _
                    {print} 'datamaskinen velger ' _
                    {if} _ {is} _ {print} 'uavgjort!' {else} {print} 'ikke uavgjort'
                    ```

                    Fyll ut resten av koden der det er linjer for å se om det er uavgjort.
                start_code: '{print} ''Velkommen til din egen stein saks papir!'''
            9:
                story_text: |
                    På dette nivået kan du programmere hele stein, saks, papir ved å plassere `{if}`-kommandoer inni `{if}`-kommandoer. Kan du fullføre koden?
                example_code: |
                    ```
                    valgene {is} stein, saks, papir
                    ditt_valg {is} {ask} 'Hva velger du?'
                    {print} 'Du valgte ' ditt_valg
                    datamaskinens_valg {is} valgene {at} {random}
                    {print} 'Datamaskinen valgte ' datamaskinens_valg
                    {if} datamaskinens_valg {is} ditt_valg
                        {print} 'Uavgjort'
                    {if} datamaskinens_valg {is} stein
                        {if} ditt_valg {is} papir
                            {print} 'Du vant!'
                        {if} ditt_valg {is} saks
                            {print} 'Du tapte!'
                    ```
                start_code: '# skriv koden din her'
            10:
                story_text: |
                    Er du for lat til å spille spillet selv? La Hedy spille det for deg!
                example_code: |
                    ```
                    valgene = stein, saks, papir
                    spillere = Maren, Magnus
                    {for} spiller {in} spillere
                         {print} spiller ' velger ' valgene {at} {random}
                    ```
                start_code: '# skriv koden din her'
            13:
                story_text: |
                    Med `{and}`-kommandoen kan du korte ned stein, saks, papir-koden din! Sjekk ut eksempelkoden under og prøv å fullføre den.
                example_code: |
                    ```
                    valgene = 'stein', 'saks', 'papir'
                    ditt_valg = {ask} 'Hva velger du?'
                    datamaskinens_valg = valgene {at} {random}
                    {print} 'Du valgte ' ditt_valg
                    {print} 'Datamaskinen valgte ' datamaskinens_valg
                    {if} datamaskinens_valg {is} ditt_valg
                        {print} 'Uavgjort'
                    {if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'papir'
                        {print} 'Du vant!'
                    {if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'saks'
                        {print} 'Datamaskinen vant!'
                    ```
                start_code: '# skriv koden din her'
            15:
                story_text: |
                    Spill til du klarer å slå datamaskinen! Men først, fullfør eksempelkoden...
                example_code: |
                    ```
                    vunnet = 'nei'
                    valgene = 'stein', 'saks', 'papir'
                    {while} vunnet == 'nei'
                        ditt_valg = {ask} 'Hva velger du?'
                        datamaskinens_valg = valgene {at} {random}
                        {print} 'du valgte ' ditt_valg
                        {print} 'datamaskinen valgte ' datamaskinens_valg
                        {if} datamaskinens_valg == ditt_valg
                            {print} 'Uavgjort!'
                        {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'saks'
                            {print} 'Du tapte!'
                        {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'papir'
                            {print} 'Du vant!'
                            vunnet = 'yes'
                    ```
                start_code: '# skriv koden din her'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: SuperSpion
        default_save_name: språk
        description: Lag din egen spionkode
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name is ask 'Hva heter du??'
                    if name is 'Agent007'
                        a is 'Go to the airport '
                    else
                        a is 'Go to the trainstation '
                    passord is ask 'Hva er passordet?'
                    if passord is 'TOPSECRET'
                        b is 'tomorrow at 02.00'
                    else
                        b is 'today at 10.00'
                    print a + b
                    ```
                start_code: '# skriv koden din her'
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name is ask 'Hva heter du??'
                    passord is ask 'Hva er ditt passord?'
                    if name is 'Agent007' and passord is 'TOPSECRET'
                        print 'Go to the airport at 02.00'
                    else
                        print 'Go to the trainstation at 10.00'
                    ```
                start_code: '# skriv koden din her'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Syng en sang!
        default_save_name: Sang
        description: Skriv ut en sang
        levels:
            6:
                story_text: |
                    Sanger inneholder ofte en del repetisjon. Noen ganger er repetisjonen også basert på telling.
                    For eksempel i den velkjente sangen 'Bottles of beer'. Du kan programmere den sangen med litt matte.
                example_code: |
                    ```
                    vers = 99
                    {print} vers ' bottles of beer on the wall'
                    {print} vers ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = vers - 1
                    {print} vers ' bottles of beer on the wall'
                    ```

                    Du kan repetere linjene 2 til 9 så mange ganger du vil ved å kopiere de linjene.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
                start_code: '{print} ''Baby shark'''
            7:
                story_text: |
                    Sanger inneholder ofte en del repetisjon. For eksempel... Baby Shark! Om du synger den så kan du fortsette å synge det samme:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    Du kan lage denne sangen mye kortere med en `{repeat}`! Kan du fullføre koden?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    Etter Baby Shark kan du selvfølgelig programmere andre sanger. Det er mange sanger med repetisjon.
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    På et tidligere nivå programmerte du sangen 'Bottles of beer'. Du lagde ett vers og så måtte du kopiere verset 99 ganger. På nivå 7 kan du repetere sangen 99 ganger, bare legg til en enkel linje!
                example_code: |
                    ```
                    vers = 99
                    {repeat} 99 {times}
                        {print} vers ' bottles of beer on the wall'
                        {print} vers ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = vers - 1
                        {print} vers ' bottles of beer on the wall'
                    ```
                start_code: '# skriv koden din her'
            10:
                story_text: |
                    På dette nivået kan du lett lage barnesangen "Fem små aper". Kan du lage det siste refrenget?
                    Du kan også lage hele "baby shark"-sangen (inkludert alle de andre haiene i familien) på bare 6 linjer!
                    Eller du kan lage "Old McDonald" med alle de forskjellige dyrene.
                example_code: |
                    ```
                    apene = 5, 4, 3, 2
                    {for} ape {in} apene
                        {print} ape ' små aper hopper i en seng'
                        {print} 'En falt av og dunket hodet sitt'
                        {print} 'å mamma ringte doktoren og doktoren sa'
                        {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'
                    ```

                    ```
                    haiene = baby, mommy, daddy, grandma, grandpa
                    {for} hai {in} haiene
                        {print} hai 'tututututudu'
                        {print} hai 'tututututudu'
                        {print} hai 'tututututudu'
                        {print} hai
                    ```
                    ```
                    dyrene = pig, dog, cow
                    {for} dyret {in} dyrene
                        {if} dyret {is} pig
                            lyd = oink
                        {if} dyret {is} dog
                            lyd = woof
                        {if} dyret {is} cow
                            lyd = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' dyret
                        {print} 'E I E I O!'
                        {print} 'with a ' lyd lyd ' here'
                        {print} 'and a ' lyd lyd ' there'
                        {print} 'here a ' lyd
                        {print} 'there a ' lyd
                        {print} 'everywhere a ' lyd lyd
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# skriv koden din her'
            11:
                story_text: |
                    På dette nivået kan du bruke `{for} i {in} {range}` kommandoen til å lage sanger som bruker telling.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' små aper hopper i en seng'
                        {print} 'En falt av og dunket hodet sitt'
                        {print} 'Så mamma ringte doktoren og doktoren sa'
                        {if} i {is} 1
                            {print} 'FÅ DE APENE RETT TIL SENGS!'
                        {else}
                            {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'
                    ```
                start_code: '# skriv koden din her'
            12:
                story_text: |
                    I denne sangen kan vi gjøre det enda enklere å programmere  'Hvis du er lyklig og du vet det, klappe klapp'. Fordi vi kan putte alle handlingene i en variabel, sjekk ut dette:
                example_code: |
                    ```
                    handlinger = 'klappe klapp', 'trampe tramp', 'rop hurra!'
                    {for} handling {in} handlinger
                        {for} i {in} {range} 1 {to} 2
                            {print} 'Hvis du er lykkelig og du vet det'
                            {print} handling
                        {print} 'Hvis du er lykkelig og vet det må du la alle andre se det'
                        {print} 'Hvis du er lykkelig og du vet det'
                        {print} handling
                    ```
                start_code: '# skriv koden din her'
            16:
                story_text: |
                    På dette nivået kan du programmere en sang som "Old MacDonald" enda raskere. Du kan knytte sammen det riktige dyret til den riktige lyden ved å putte de på den samme plassen i listen.
                    "The Drunken Sailor" er også rask å lage på dette nivået. Du trenger bare 8 linjer for hele sangen, sjekk det ut!
                example_code: |
                    ```
                    dyrene = ['pig', 'dog', 'cow']
                    lydene = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        dyret = dyrene[i]
                        lyden = lydene[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' dyret
                        {print} 'E I E I O!'
                        {print} 'with a ' lyden lyden ' here'
                        {print} 'and a ' lyden lyden ' there'
                        {print} 'here a ' lyden
                        {print} 'there a ' lyden
                        {print} 'everywhere a ' lyden lyden
                    ```

                    ```
                    linjene = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} linjen {in} linjene
                        {for} i {in} {range} 1 {to} 3
                            {print} linjen
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# skriv koden din her'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                    Have fun!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Taic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# place your code here'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# place your code here'
    turtle:
        name: Skilpadde
        default_save_name: Skilpadde
        description: Lag din egen tegning
        levels:
            1:
                story_text: |
                    Du ha også bruke Hedy til å tegne. Ved å kombinere svinger og linjer så kan du lage firkanter eller trapper!

                    Ved å bruke `{forward}` kan du tegne en linje fremover. Talle bak kommandoen bestemmer hvor langt skilpadden vil gå. `{turn} {right}` snur skilpadden en kvart runde med klokken, `{turn} {left}` snur skilpadden mot klokken.

                    Dette er starten på en liten trapp. Kan du få den til å ha 5 trinn?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    På nivå 1 kunne skilpadden kun snu seg til høyre eller venstre. Det er litt kjedelig!
                    På nivå 2 kan den peke nesen i alle retninger.

                    Bruk 90 til å snu en kvart omdreining. Vi kalle dette grader. En full rotasjon er 360 grader.
                    Kan du lage en liten figur med denne koden? Kanskje et triangel eller en sirkel?
                example_code: |
                    ```
                    {print} Tegner figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |
                    {print} Skilpadderace!
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            3:
                story_text: |
                    På dette nivået kan du bruke `{at} {random}` med den tegnende skilpadden. Et tilfeldig valg gjør at skilpadden går en ny rute hver gang.
                    Bruk `{at} {random}` for å velge en verdi fra listen. Du kan kopiere og lime inn line 2 og 3 for å lage en lenger tilfeldig sti.
                example_code: |
                    ```
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
                    ```
                start_code: |
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
            4:
                story_text: |
                    På nivå 4 kan du bruke fnutter med `{print}` og `{ask}`. Også når du tegner!
                example_code: |
                    ```
                    {print} 'Tegner figurer'
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |
                    {print} 'Tegner figurer'
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            5:
                story_text: |
                    På nivå 5 kan du ta valg med `{if}`. For eksempel mellom forskjellige typer figurer.
                example_code: |
                    ```
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du lage en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du lage en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120 {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            6:
                story_text: |
                    På dette nivået kan du bruke regning for å tegne forskjellige figurer.
                    Du kan ha lært på skolen at å snu en full sirkel er 360 grader. Hvis ikke så vet du det nå!
                    Det er derfor du bruker 90 grader for en firkant. 360 grader delt på 4 er 90.
                    Nå som vi kan gjøre matte med Hedy så kan vi tegne alle figurene vi vil!
                example_code: |
                    ```
                    hjørner = {ask} 'Hvor mange hjørner vil du ha?'
                    grader = 360 / hjørner
                    {forward} 50
                    {turn} grader
                    {forward} 50
                    {turn} grader
                    {forward} 50
                    {turn} grader
                    {forward} 50
                    {turn} grader
                    {forward} 50
                    {turn} grader
                    {forward} 50
                    {turn} grader
                    ```
                start_code: |
                    {print} 'Tegner figurer'
            8:
                story_text: |
                    Nå som vi kan repetere flere linjer så kan vi lage figurer lettere.
                    Vi trenger bare å sette vinkelen en gang og så bruke den variabelen i en `{repeat}`.
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 10 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    Vi kan også forbedre programmet som tegner forskjellige figurer.
                    Kan du finne ut hvor langt skilpadden må snu seg her? Fullfør koden og du kan tegne et hvilket som helst polygon!
                example_code_2: |
                    ```
                    hjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'
                    grader = 360 / hjørner
                    {repeat} grader {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |
                    hjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                    **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: '# place your code here'
