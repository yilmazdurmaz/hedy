adventures:
    story:
        name: Berättelse
        default_save_name: Berättelse
        description: Berättelse
        levels:
            1:
                story_text: |
                    På nivå 1 kan du göra en berättelse där du får ange namnet på huvudkaraktären själv.

                    På första raden, använd `{ask}` för att fråga vem huvudkaraktären i din saga ska vara.

                    Efter den första raden, börja med `{print}` om en mening ska skrivas ut på skärmen.
                    Du använder `{echo}` om du vill att namnet på huvudkaraktären ska vara på slutet av meningen.
                example_code: |
                    ```
                    {ask} Huvudkaraktären av denna berättelse är
                    {print} Nu kommer huvudkaraktären ta en promenad i skogen
                    {echo} Han är lite rädd,
                    {print} Han hör galna ljud överallt
                    {print} Han är rädd för att detta är en hemsökt skog
                    ```
                story_text_2: |
                    ### Övning
                    Gör nu en egen berättelse med minst sex kodrader.
                    Berättelsen får inte vara samma som exempelkoden.
                    Använd minst ett `{ask}` - och ett `{echo}` -kommando.
                    Du kan göra den om vilket ämne som helst.
                    Om du inte kan komma på något ämne kan du använda ett av våra val: ett biobesök, en sportmatch eller en dag i djurparken.
                start_code: '{print} Din berättelse börjar här'
            2:
                story_text: |
                    På nivå 2 kan du göra din berättelse roligare. Huvudpersonens namn kan nu stå var som helst i meningen.

                    Men du får programmera lite extra för det. Du måste nu namnge din huvudperson först.

                    Du kan sedan sätta det namnet var som helst i meningen.
                example_code: |-
                    ```
                    namn {is} {ask} Vad heter huvudkaraktären?
                    {print} namn ska nu gå en promenad i skogen
                    {print} namn är lite rädd
                    {print} Plötsligt hör han ett galet ljud...
                    {sleep}
                    {print} namn är rädd att detta är en hemsökt skog
                    ```
                story_text_2: |
                    ### Övning
                    Dags att lägga till variabler till din egen berättelse som du skapade på föregående nivå.
                    Gå till 'Mina program', leta efter ditt nivå 1-äventyr och kopiera koden. Klistra in koden på din inmatningsskärm på den här nivån.

                    Den här koden fungerar inte på den här nivån eftersom du inte har använt variabler än.
                    Ändra kommandona `{ask}` och `{echo}` i din kod till rätt form som du har lärt dig på den här nivån.

                    **Extra** Lägg till ett {sleep}-kommando i din kod för att bygga upp spänningen i berättelsen.
                start_code: '{print} Din berättelse'
            3:
                story_text: |
                    I nivå 3 kan du göra din berättelse lite roligare. Du kan använda slumpen för monster, djur, eller annat hinder, så här:
                example_code: |
                    ```
                    djur {is} 🦔, 🐿, 🦉, 🦇
                    {print} Han hör nu ljudet av en djur {at} {random}
                    ```
                story_text_2: |
                    Kommandot `{add}` kan också vara användbar för din berättelse.
                example_code_2: |
                    ```
                    {print} Han hör ett ljud
                    djur {is} 🐿, 🦔, 🦇, 🦉
                    djuret {is} {ask} Vad tror du det är?
                    {add} djuret {to_list} djur
                    {print} det var ett djur {at} {random}
                    ```
                story_text_3: |
                    Detta är ett exempel på kommandot `{remove}` i din berättelse

                    ### Övning
                    Kopiera din berättelse från de tidigare nivåerna till den här nivån.
                    På den här nivån har du lärt dig tre nya kommandon: `{at} {random}`, `{add} {to}` och `{remove} {from}`.
                    Lägg till nya kodrader i din berättelse så att alla de nya kommandona finns med minst en gång i din berättelse.
                example_code_3: |
                    ```
                    {print} Hans ryggsäck blev alldeles för tung.
                    {print} Inuti var en vattenflaska, en ficklampa, och en tegelsten.
                    säck {is} vatten, ficklampa, tegelsten
                    kasta {is} {ask} Vad ska han kasta bort?
                    {remove} kasta {from} säck
                    ```
                start_code: '{print} Din berättelse'
            4:
                story_text: |
                    Du kanske har märkt att det fortfarande finns ett problem i de tidigare nivåerna. Försökte du skriva ut en mening som innehöll ordet namn? Dvs. `{print}` mitt namn är namn.
                    Du kan lösa det på den här nivån. Du måste använda citattecken runt allt du ska skriva ut.

                    ### Övning
                    Kopiera exempelkoden och avsluta den genom att lägga till citattecken på de tomma fälten på rad 1 och 2.
                    De tomma fälten på rad 3 och 4 ska inte ersättas med citattecken, utan ett `{sleep}`- och ett `{clear}`-kommando. Kan du få det att fungera?

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera din berättelsekod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                    Tänk på: Variablerna i din egen berättelse ska vara utanför citattecknen. Precis som den andra raden i exempelkoden. På den raden placeras variabelnamnet utanför citattecken.
                example_code: |
                    ```
                    name {is} {ask} _ Vad heter du? _
                    {print} Huvudpersonen heter _ namn
                    _
                    _
                    {print} namn _ ska nu vandra i skogen _
                    {print} namn _ är lite rädd _
                    djur {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Han hör ljudet av _ djur {at} {random}
                    {print} namn _ är rädd för att detta är en trollskog _
                    ```
                start_code: '{print} ''Din berättelse skrivs ut här!'''
            5:
                story_text: |
                    På den här nivån kan du programmera olika slut, vilket gör din berättelse ännu roligare.
                    I exempelkoden kan du se hur du skapar två olika slut.

                    ### Övning 1
                    Skriv en ny berättelse på minst sex kodrader om ett ämne som du själv väljer.
                    Ingen inspiration? Välj ett av dessa ämnen: en superhjälte, en tråkig skoldag, strandad på en öde ö.

                    Ge nu spelaren möjlighet att välja ett lyckligt eller dåligt slut, precis som i exempelkoden.
                    Programmera båda sluten.

                    ### Övning 2
                    Kopiera den berättelse som du har skapat i ditt eget berättelseäventyr i de tidigare nivåerna.
                    Hitta ett sätt att lägga till minst två kommandon `{if}` och `{else}` i din berättelse.
                    Detta kan vara med ett lyckligt eller dåligt slut, men du kan också försöka hitta andra sätt att få med kommandona.
                example_code: |
                    ```
                    namn {is} {ask} 'Vem går genom skogen?'
                    {print} namn ' går genom skogen'
                    {print} namn ' stöter på ett monster'
                    slutet {is} {ask} 'Vill du ha ett lyckligt eller olyckligt slut?'
                    {if} slutet {is} lyckligt {print} namn ' tar sitt svärd och monstret springer bort'
                    {else} {print} 'Monstret äter upp ' namn
                    ```
                start_code: '{print} ''Här börjar din berättelse!'''
            7:
                story_text: |
                    I en berättelse säger någon samma ord flera gånger. Till exempel när någon ropar på hjälp eller sjunger en sång.
                    Du kan lägga in sådana upprepningar i din berättelse, på den här nivån med `{repeat}`.

                    ### Övning
                    Lägg till upprepningar i din egen berättelse. Gå tillbaka till dina sparade program, välj ditt berättelseprogram från nivå 6 och
                    hitta en rad som innehåller `{print}` och upprepa den!
                example_code: |
                    ```
                    {print} 'Prinsen fortsatte ropa på hjälp'
                    {repeat} 5 {times} {print} 'Hjälp!'
                    {print} 'Varför hjälper ingen mig?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Hjälp!'''
            8:
                story_text: |
                    På den här nivån kan du använda flera rader i dina `{if}` -kommandon; på så sätt kan du uppgradera ditt glada eller sorgliga slut!

                    ### Övning 1
                    Exempelkoden visar två olika slut; ett där karaktärerna hoppar i en tidsmaskin och ett där de inte gör det.
                    Fyll i tomrummen med minst en mening per slut.
                    **Extra** Gör berättelsen längre. Vad händer i berättelsen? Du kan också lägga till ett andra `{ask}`-kommando med olika alternativ.

                    ### Övning 2
                    Gå tillbaka till dina sparade program och välj ditt berättelseprogram från nivå 5. Skriv nu ett bra och ett dåligt slut på minst tre rader vardera!
                example_code: |
                    ```
                    {print} 'ÅH NEJ! T-rex närmar sig!"
                    end = {ask} 'Vill du ha ett lyckligt eller sorgligt slut?'
                    {if} slut {is} lyckligt
                        {print} 'I sista ögonblicket hoppar Richard tillbaka in i tidsmaskinen!'
                        {print} _
                    {else}
                        {print} 'Åh nej! Richard är för långsam ..."
                        {print} _
                    ```
                start_code: '# Placera din kod här'
            9:
                story_text: |
                    På den här nivån kan du använda kommandona `{if}` och `{repeat}` inuti andra `{if}`- och `{repeat}`-kommandon.
                    Detta ger dig många möjligheter och hjälper dig verkligen att göra din berättelse interaktiv.

                    ### Övning 1
                    Gör klart koden så att `{if}` fungerar korrekt.

                    ### Övning 2
                    Lägg till en `{if}` och `{else}` för den del av berättelsen där Robin också åker hem.

                    ### Övning 3
                    Gå tillbaka till din berättelse på nivå 8 och använd minst två `{if}` inom ett annat `{if}`.
                example_code: |
                    ```
                    {print} 'Robyn promenerar i stan'
                    plats = {ask} 'Går Robyn till en affär eller går hon hem?'
                    {if} plats {is} affär
                        {print} 'Hon går in i affären'
                        {print} 'Robyn ser en bok som ser spännande ut'
                        bok = {ask} 'Köper Robyn boken?'
                        {if} bok {is} ja
                            {print} 'Robyn köper boken och går hem'
                        {else}
                            {print} 'Robyn lämnar affären och går hem'
                    {else}
                        {print} 'Robyn går hem'
                    ```
                start_code: '# placera din kod här'
            10:
                story_text: |
                    På den här nivån kan du använda kommandot {for} i din berättelse. På detta sätt kan du enkelt programmera barnboken  'Brown bear, Brown bear, what do you see'.

                    ### Övning

                    Titta på <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> berättelsen</a> om du inte känner till den, och se till att den skrivs ut som i boken.
                example_code: "```\ndjur = _ , _ , _ , _ \n{print} 'Brunbjörn, brunbjörn'\n {print} 'Vad ser du?'\n```\n"
                start_code: '# placera din kod här'
            12:
                story_text: |-
                    På den här nivån behövs citattecken för att_spara flera ord i en variabel.

                    ### Övning

                    Hitta en berättelse från en tidigare nivå, vilken nivå som helst är okej. Lägg till citattecken på rätt ställen.
                example_code: |
                    ```
                    namn = 'Drottningen av England'
                    {print} namn ' åt en tårtbit, när plötsligt...'
                    ```
                start_code: '# placera din kod här'
            13:
                story_text: |
                    Med kommandona `{and}` och `{or}` kan du göra dina berättelser mer flexibla. Du kan ställa två frågor och svara baserat på båda svaren.

                    ### Övning 1
                    Titta på exempelkoden och gör den klar. Lägg sedan till minst två ytterligare `{if}` -satser med `{and}` eller `{or}`.

                    ### Övning 2
                    Hitta en berättelse från en tidigare nivå och lägg till ett `{and}` eller `{or}`.
                example_code: |
                    ```
                    {print} 'Vår hjälte går genom skogen'
                    {print} 'Vägen delar sig på två håll'
                    väg = {ask} 'Vilken väg ska hon välja?'
                    vapen = {ask} 'Vilket vapen drar hon?'
                    {if} väg {is} 'vänster' {and} vapen {is} 'svärd'
                        _
                    ```
                start_code: '# placera din kod här'
            15:
                story_text: |
                    Med `{while}`-loopen kan du göra dina berättelser mer intressanta. Du kan t.ex. använda `{while} game {is} 'on'` så att du kan spela tills spelet är slut.
                    Eller så kan du använda `{while} sword {is} 'lost'` så att spelaren inte kan fortsätta spelet förrän den har hittat något.
                example_code: |
                    ```
                    nycklar = 'förlorade'
                    {print} 'Du står i din trädgård och du har tappat dina nycklar.'
                    {print} 'Var vill du leta efter dem?'
                    {print} 'Du kan välja: träd, rabatt, sten, postlåda'
                    {while} nycklar == 'förlorade'
                        plats = {ask} 'Var vill du titta?'
                        {if} plats == 'rabatt'
                            {print} 'Här är de!'
                            nycklar = 'hittade'
                        {else}
                            {print} 'Nej, de är inte här: ' plats
                    {print} 'Nu kan du gå in i huset!'
                    ```
                start_code: '# placera din kod här'
            18:
                story_text: |
                    Vi ska skriva ut en annan historia, men nu måste vi använda parenteser med `{print}`.

                    ### Övning 1
                    Skapa en berättelse med minst fem meningar. Du behöver inte använda 'namn' än.
                example_code: |
                    ```
                    {print}('Välkommen till den här berättelsen!')
                    ```
                story_text_2: |
                    ### Övning 2
                    Vi har redan förberett en `{input}` åt dig. Använd först variabeln `name` i din berättelse.
                    Lägg sedan till en andra `{ask}` och använd den variabeln också.
                    Tips: Kom ihåg kommatecken i en `{print}` mellan text och variabler!
                example_code_2: |
                    ```
                    namn = {input}("Vad heter du?")
                    {print}('Välkommen till den här berättelsen!')
                    ```
                start_code: '# placera din kod här'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: kommandot_lägg_till_ta_bort
        description: introduktion till lägg till och ta bort
        levels:
            3:
                story_text: |
                    ## Lägg till
                    Du kan lägga till element i listan med kommandot `{add} {to}`. För att lägga till ett element i en lista kan du helt enkelt skriva `{add} penguin {to} animals` eller så kan du använda kommandot `{ask}` som i exempelkoden.
                example_code: |
                    ```
                    djur {is} hund, katt, känguru
                    gillar {is} {ask} Vilket är ditt favoritdjur?
                    {add} gillar {to_list} djur
                    {print} Jag väljer djur {at} {random}
                    ```
                story_text_2: |
                    ## Ta bort
                    Om du kan lägga till element i en lista kan du naturligtvis också ta bort dem. Detta görs med kommandot `{remove} {from}`.
                example_code_2: |
                    ```
                    djur {is} hund, katt, känguru
                    ogillar {is} {ask} Vilket djur gillar du inte?
                    {remove} ogillar {from} djur
                    {print} Jag väljer djur {at} {random}
                    ```
                story_text_3: |
                    ### Övning
                    Prova de nya kommandona i denna virtuella restaurang. Lägg till den smak som spelaren hoppas på i listan och ta bort de smaker som den är allergisk mot.
                example_code_3: |
                    ```
                    {print} Hemlig milkshake
                    smaker {is} jordgubb, choklad, vanilj
                    hoppas {is} {ask} Vilken smak hoppas du på?
                    _
                    allergier {is} {ask} Är du allergisk mot några smaker?
                    _
                    {print} Du får en milkshake med smaker {at} {random}
                    ```
                start_code: |-
                    djur {is} hund, katt, känguru
                    gillar {is} {ask} Vilket är ditt favoritdjur?
                    {add} gillar {to_list} djur
                    ogillar {is} {ask} Vilket djur gillar du inte?
                    {remove} ogillar {from} djur
                    {print} Jag väljer djur {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: och eller
        description: introduktion och eller
        levels:
            13:
                story_text: |-
                    Vi ska nu lära oss `{and}` och `{or}`! Om du vill kontrollera två påståenden behöver du inte använda två `{if}` utan kan använda `{and}` och `{or}`.

                    Om du använder `{and}` måste båda påståendena, vänster och höger om `{and}` vara sanna. Vi kan också använda `{or}`. Då behöver bara ett påstående vara korrekt.
                example_code: |
                    ```
                    namn = {ask} 'vad heter du?'
                    ålder = {ask} 'hur gammal är du?'
                    {if} namn {is} 'Hedy' {and} ålder {is} 2
                        {print} 'Du är den riktiga Hedy!'
                    ```
                start_code: |-
                    namn = {ask} 'vad heter du?'
                    ålder = {ask} 'hur gammal är du?'
                    {if} namn {is} 'Hedy' {and} ålder {is} 2
                        {print} 'Du är den riktiga Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: kommandot_fråga
        description: Introduktion till kommandot fråga
        levels:
            1:
                story_text: |
                    ## Kommandot fråga
                    Nu när du kan använda kommandot `{print}` är du redo att lära dig nästa kommando: `{ask}`. Med kommandot `{ask}` kan du ställa en fråga. Kolla in det här:
                example_code: |
                    ```
                    {print} Hej!
                    {ask} Vad heter du?
                    ```
                story_text_2: |
                    ## Kommandot eko
                    Om du vill att datorn ska upprepa svaret kan du använda kommandot `{echo}`. Tänk på att svaret återges i slutet av meningen, så i det här exemplet efter hej.
                example_code_2: |
                    ```
                    {print} Hej!
                    {ask} Vad heter du?
                    {echo} hej
                    ```
                story_text_3: |
                    ### Övning
                    Prova kommandona `{ask}` och `{echo}`. Fyll först i de tomma fälten för att få programmet att fungera.
                    Ställ sedan ytterligare två frågor med kommandot `{ask}`. Efter varje `{ask}` använder du ett `{echo}` för att skriva ut svaret på skärmen.
                example_code_3: |
                    ```
                    _ Hur mår du?
                    _
                    ```
                start_code: |
                    {print} Hej!
                    {ask} Vad heter du?
                    {echo} hej
            2:
                story_text: |
                    ## Kommandot fråga
                    Nu när vi kan använda **variabler** i vår kod behöver vi inte längre kommandot `{echo}`.
                    Vi kan använda variabler för att lagra svaren på våra frågor och på så sätt kan vi använda svaret på flera frågor i vår kod.
                    Kolla in det:

                    På så sätt blir din kod interaktiv!
                example_code: |
                    ```
                    namn {is} {ask} Vad heter du?
                    {print} Hej namn
                    ålder {is} {ask} Hur gammal är du?
                    {print} namn är ålder år gammal.
                    ```
                story_text_2: |
                    ### Övning
                    I förra fliken övade du på att tilldela variabler med kommandot `{is}`.
                    Du har skapat minst tre variabler och använt dem med ett print-kommando.
                    Nu vill vi att du istället för att sätta variablerna gör dem interaktiva, som vi gjorde i vårt exempel.

                    Kopiera din kod från föregående flik och gör variablerna interaktiva med `{ask}`-kommandon.
                example_code_2: |
                    ```
                    favoritdjur is ask Vilket är ditt favoritdjur?
                    print Jag gillar favoritdjur
                    ```
                start_code: |-
                    namn {is} {ask} Vad heter du?
                    {print} Hej namn
                    ålder {is} {ask} Hur gammal är du?
                    {print} namn är ålder år gammal.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Försök att hamna så nära 21 som möjligt
        levels:
            17:
                story_text: |
                    Blackjack är ett enkelt kortspel där det gäller att komma så nära 21 poäng som möjligt. Du får två kort. Varje kort är värt sitt siffervärde och bildkorten (knekt, dam och kung) är värda tio poäng.
                    Esset är värt antingen 1 eller 11 poäng (du kan välja). Given, din motspelare, får också två kort.
                    Om du vill kan du ta ytterligare ett kort, och dess poäng läggs till din totala poängsumma. Given kan också välja att ta ett annat kort.
                    Men se upp så att du inte får mer än 21 poäng, för om du får det förlorar du!
                    Den spelare som kommer närmast 21, utan att gå över det, vinner!

                    Ha det så kul!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    kort = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'knekt', 'dam', 'kung', 'ess']
                    poäng = 0
                    givens_poäng = 0
                    kort_1 = kort[{random}]
                    kort_2 = kort[{random}]
                    kort_3 = kort [{random}]
                    givens_kort_1 = kort[{random}]
                    givens_kort_2 = kort[{random}]
                    givens_kort_3 = kort[{random}]
                    # Poäng för kort 1
                    {if} kort_1 == 'knekt' {or} kort_1 == 'dam' {or} kort_1 == 'kung':
                        poäng = poäng + 10
                    {elif} kort_1 == 'ess':
                        poäng = poäng + 11
                    {else}:
                        poäng = poäng + kort_1
                    # Poäng för kort 2
                    {if} kort_2 == 'knekt' {or} kort_2 == 'dam' {or} kort_2 == 'kung':
                        poäng = poäng + 10
                    {elif} kort_2 == 'ess':
                        poäng = poäng + 11
                    {else}:
                        poäng = poäng + kort_2
                    # Poäng för givens_kort 1
                    {if} givens_kort_1 == 'knekt' {or} givens_kort_1 == 'dam' {or} givens_kort_1 == 'kung':
                        givens_poäng = givens_poäng + 10
                    {elif} givens_kort_1 == 'ess':
                        givens_poäng = givens_poäng + 11
                    {else}:
                        givens_poäng = givens_poäng + givens_kort_1
                    # Poäng för givens_kort 2
                    {if} givens_kort_2 == 'knekt' {or} givens_kort_2 == 'dam' {or} givens_kort_2 == 'kung':
                        givens_poäng = givens_poäng + 10
                    {elif} givens_kort_2 == 'ess':
                        givens_poäng = givens_poäng + 11
                    {else}:
                        givens_poäng = givens_poäng + givens_kort_2
                    # Två ess
                    {if} kort_1 == 'ess' {and} kort_2 == 'ess':
                        poäng = 12
                    {if} givens_kort_1 == 'ess' {and} givens_kort_2 == 'ess':
                        givens_poäng = 12
                    # Resultattavla
                    {print} 'Du har en ' kort_1 ' och en ' kort_2 ' (' poäng ' poäng)'
                    {print} 'Given har en ' givens_kort_1 ' och en ' givens_kort_2 ' (' givens_poäng ' poäng)'
                    # Extra kort för spelaren
                    hit = {ask} 'Vill du ha ett extra kort?'
                    {if} hit == 'ja':
                        {if} kort_3 == 'knekt' {or} kort_3 == 'dam' {or} kort_3 == 'kung':
                            poäng = poäng + 10
                        {elif} kort_3 == 'ess':
                            {if} poäng > 11:
                                poäng = poäng + 11
                            {else}:
                                poäng = poäng + 1
                        {else}:
                            poäng = poäng + kort_3
                        {print} 'Du får ett extra ' kort_3 ' (' poäng ' poäng)'
                    {else}:
                        {print} 'Inga extra kort'
                    # Vinnare
                    {if} poäng > 21 {or} givens_poäng > poäng {or} givens_poäng == 21:
                        {print} 'Du förlorar'
                    {elif} givens_poäng < 17:
                        {print} 'Given tar ett extra kort. Det är ... ' givens_kort_3
                        {if} givens_kort_3 == 'knekt' {or} givens_kort_3 == 'dam' {or} givens_kort_3 == 'kung':
                            givens_poäng = givens_poäng + 10
                        {elif} givens_kort_3 == 'ess':
                            {if} givens_poäng < 11:
                                givens_poäng = givens_poäng + 11
                            {else}:
                                givens_poäng = givens_poäng + 1
                        {else}:
                            givens_poäng = givens_poäng + givens_kort_3
                        {print} 'Given har ' givens_poäng ' poäng nu'
                        {if} givens_poäng < 21 {and} givens_poäng > poäng:
                            {print} 'Du förlorar'
                        {else}:
                            {print} 'Du vinner'
                    {elif} poäng > givens_poäng {and} poäng < 21:
                        {print} 'Du vinner!'
                    ```
                start_code: '# skriv din kod här'
    calculator:
        name: Kalkylator
        default_save_name: Kalkylator
        description: Gör en kalkylator
        levels:
            6:
                story_text: |
                    Nu när du kan räkna kan du göra en miniräknare själv!
                example_code: |
                    ```
                    tal_1 {is} {ask} 'Mata in första talet:'
                    tal_2 {is} {ask} 'Mata in andra talet:'
                    rätt_svar = tal_1 * tal_2
                    {print} tal_1 ' gånger ' tal_2 ' är ' rätt_svar
                    ```
                story_text_2: |
                    ### Övning
                    Kalkylatorn här ovanför räknar ut svaret åt dig, men du kan också göra ett program för att testa dina egna matteskills, så här:
                    Fyll i luckorna för att göra det klart!
                example_code_2: |
                    ```
                    rätt_svar = 11 * 27
                    answer = {ask} 'Hur mycket är 11 gånger 27?'
                    {if} svar {is} _ {print} 'Bra jobbat!'
                    {else} {print} 'Fel! Det var ' _
                    ```
                story_text_3: |
                    **Extrauppgift** Du kan också låta datorn göra slumpmässiga summor på egen hand med random.

                    Så här väljer du ett antal tabeller att öva på och av det får du alltid en annan summa:
                start_code: '{print} ''Välkommen till den här kalkylatorn!'''
            9:
                story_text: |
                    På nivå 6 gjorde du en miniräknare och på den här nivån kan du utöka den koden så att den ställer flera frågor.

                    ### Övning 1
                    Kan du avsluta rad 10 så programmet fungerar?

                    ### Övning 2
                    Ge spelaren feedback när den matar in rätt eller fel svar. För att göra det behöver du lägga till ett `{else}`.
                example_code: |
                    ```
                    poäng = 0
                    {repeat} 10 {times}
                        tal = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        tal1 = tal {at} {random}
                        tal2 = tal {at} {random}
                        korrekt_svar = tal1 * tal 2
                        {print} 'Vad är ' tal1 ' gånger ' tal2 '?'
                        svar = {ask} 'Skriv ditt svar här ...'
                        {print} 'Du svarade' svar
                        {if} _ {is} _
                            poäng = poäng + 1
                    {print} 'Bra jobbat! Du har ... ' poäng ' av 10 poäng!'
                    ```
                start_code: '{print} ''Välkommen till den här kalkylatorn!'''
            10:
                story_text: |
                    Det här räknespelet hjälper dig att öva på multiplikationstabellerna!
                    ### Övning
                    Kan du lägga till fler tal i listan så du kan öva multiplikationstabellerna upp till 10?
                example_code: |
                    ```
                    tal = 1, 2, 3
                    {for} tal1 {in} tal
                        {for} tal2 {in} tal
                            svar = {ask} 'Hur mycket är ' tal2 ' gånger ' tal1 '?'
                            rätt = tal1 * tal2
                            {if} svar {is} rätt
                                {print} 'Bra jobbat!'
                            {else}
                                {print} 'Det är fel. Rätt svar är ' rätt
                    ```
                start_code: '# skriv din kod här'
            11:
                story_text: |
                    Med en `{for}` kan du förenkla övningsprogrammet för multiplikationstabeller.

                    ### Övning 1
                    Förbättra exempelkoden så att den skriver ut en snygg multiplikationstabell: <br> "1 gånger 10 är 10", "2 gånger 10 är 20", etc.

                    ### Övning 2
                    Gå tillbaka till din multiplikationskod på nivå 10 och ändra den så att den använder `{for}` och `{range}`.
                example_code: |
                    ```
                    tal = 10
                    {for} i {in} {range} 1 till 10
                        {print} i * tal
                    ```
                start_code: '# skriv din kod här'
            12:
                story_text: |
                    På den här nivån kan du göra en miniräknare som fungerar för decimaltal.

                    ### Övning 1
                    Fyll i tomrummen för att göra klart miniräknaren. Kom ihåg att använda punkt och inte komma för decimaltal.

                    ### Övning 2
                    Skapa ett nytt matematikövningsprogram, men använd nu decimaltal.
                    Skapa en lista med tal, välj två som ska multipliceras och låt spelaren svara.
                    Och naturligtvis måste du kolla svaret! **Extrauppgift** Öka svårighetsgraden genom att lägga till liv: En spelare förlorar ett liv för ett felaktigt svar och efter tre felaktiga svar slutar spelet.
                example_code: |
                    ```
                    tal1 = {ask} 'Vilket är det första talet?'
                    tal1 = {ask} 'Vilket är det andra talet?'
                    svar = _
                    {print} tal1 ' plus ' tal2 ' är ' _
                    ```
                start_code: '# skriv din kod här'
            13:
                story_text: |
                    ### Övning 1
                    Vi gör övningsprogrammet lite svårare. Spelaren måste nu svara rätt på två frågor. Fyll i de tomma fälten för att göra klart programmet.

                    ### Övning 2 Extrauppgift
                    Ibland har beräkningar flera rätta svar. Till exempel kan 10 delas med 5 och med 2. Så frågan 'Vilket tal delar 10?' kan besvaras med 2 och med 5.
                    Be om en beräkning som har flera korrekta svar, be spelaren att svara på den och avgör om den är korrekt med hjälp av `{or}`.
                    Töm programmeringsfältet och skapa din egen lösning.
                example_code: |
                    ```
                    svar1 = {ask} 'Vad är 10 gånger 7?'
                    svar2 = {ask} 'Vad är 6 gånger 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Skriv din kod här'
            14:
                story_text: |
                    På den här nivån kan du programmera spelet 'Gissa talet'
                example_code: |
                    ```
                    {print} 'Gissa talet'
                    tal = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    talet = tal {at} {random}
                    spel = 'pågår'
                    {for} i {in} {range} 1 {to} 10
                        {if} spel == 'pågår'
                            gissning = {ask} 'Vilket tal tror du det är?'
                            {if} gissning > talet
                                {print} 'Lägre!'
                            {if} gissning < talet
                                {print} 'Högre!'
                            {if} gissning == talet
                                {print} 'Du vann!'
                                spel = 'slut'
                    ```
                start_code: '# skriv din kod här'
            15:
                story_text: |
                    Du kan lägga till `{while}` -slingan i räknespelet som du lärder dig göra på en tidigare nivå.
                    Det gör att spelaren inte kan fortsätta till nästa fråga om den svarar fel.
                example_code: |
                    ```
                    poäng = 0
                    {for} i {in} {range} 0 {to} 9
                        tal = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        tal1 = tal {at} {random}
                        tal2 = tal {at} {random}
                        rätt = tal1 * tal2
                        svar = 0
                        {while} svar != rätt
                            {print} 'Hur mycket är ' tal1 ' gånger ' tal2 '?'
                            svar = {ask} 'Fyll i ditt svar:'
                            {print} 'Ditt svar är ' svar
                        {print} 'Bra jobbat!'
                    {print} 'Du vann!'
                    ```
                start_code: '# skriv din kod här'
    clear_command:
        name: '{clear}'
        default_save_name: kommandot_sudda
        description: kommandot sudda
        levels:
            4:
                story_text: |
                    Dags för ett nytt kommando! Med `{clear}` kan du sudda all text från utdataskärmen. På så sätt kan du hindra att skärmen blir för full med text.
                    Se upp! Om du använder ett `{clear}`-kommando, så kom ihåg att använda ett `{sleep}` ovanför det. Annars kommer Hedy att sudda skärmen utan att ge dig tid att läsa!
                example_code: |
                    ```
                    {print} '3'
                    sov
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} 'SURPRISE!'
                    ```
                start_code: |
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} 'SURPRISE!'
    default:
        name: Introduction
        default_save_name: introduktion
        description: Nivåbeskrivning
        levels:
            1:
                story_text: |
                    Välkommen till Hedy! På nivå 1 kan du börja med att skriva ut en berättelse.

                    Prova koden själv med den gröna 'Kör kod'-knappen under programmeringsfältet.

                    Är du klar? Gå då till nästa flik och lär dig ditt första kommando!
                start_code: '{print} hej världen!'
            2:
                story_text: |
                    Grattis! Du har nått nivå 2. Förhoppningsvis har du redan gjort lite fantastisk kod!
                    På den första nivån kanske du märkte att kommandot `{echo}` bara kan spara en information åt gången.
                    Till exempel: i restaurangäventyret kunde man upprepa vad kunden ville äta, eller vad de ville dricka, men inte båda i en mening.
                example_code: |
                    ```
                    {print} Välkommen till Hedys
                    {ask} Vad önskas att äta?
                    {echo} Så du vill ha
                    {ask} Vad vill du dricka till?
                    {echo} Så du vill ha
                    ```
                story_text_2: |
                    Om spelaren skriver en hamburgare och cola kan du inte säga "så du vill ha en hamburgare och cola", utan du måste göra två separata rader.
                    Dessutom  upprepar `{echo}`-kommandot bara ordet i slutet av meningen. Så du kan inte säga "din hamburgare är på väg!".

                    Det ändras på nivå 2. På nivå 2 lär du dig att arbeta med variabler, som låter dig spara flera olika informationer och skriva ut dem var du vill.
                    Så fortsätt nu till nästa flik!
                start_code: '{print} hej världen!'
            3:
                story_text: |
                    På den föregående nivån har du lärt dig vad en variabel är och hur du kan använda den för att göra dina äventyr mer interaktiva.
                    Men ... det är inte det enda du kan göra med variabler! Du kan också använda variabler för att skapa listor.
                    Och du kan till och med låta Hedy välja ett slumpmässigt ord från en lista, vilket låter dig göra riktiga spel!
                    Ta en snabb titt på nästa flik!
                start_code: '{print} hej världen!'
            4:
                story_text: |
                    På de tidigare nivåerna har du övat på att använda variabler, men du kanske har stött på ett problem.
                    Du kanske har försökt att köra en kod som denna:

                    Naturligtvis ville du skriva ut

                    `My name is Sophie`

                    men Hedy skriver

                    `My Sophie is Sophie`.

                    På den här nivån löser vi problemet genom att använda citattecken.
                example_code: |
                    ```
                    namn {is} Sophie
                    {print} Jag heter namn
                    ```
                start_code: '{print} ''Hej världen'''
            5:
                story_text: |
                    På de tidigare nivåerna har du redan lärt dig att använda `{at} {random}` som gjorde dina spel annorlunda varje gång du körde koden.
                    Men det är inte riktigt interaktivt för spelaren har inget inflytande på vad som händer i spelet.

                    På den här nivån kommer du att lära dig kommandot `{if}`, som låter dig ge olika svar i ditt program. På så sätt kan du till exempel programmera ett hemligt lösenord för din dator.
                    Fortsätt till nästa flik för det nya kommandot!
                example_code: |
                    ```
                    lösenord {is} {ask} 'Vad är rätt lösenord?'
                    ```
                start_code: |-
                    namn {is} {ask} 'Vad heter du?'
                    {if} namn {is} Hedy {print} 'cool!' {else} {print} 'meh'
            6:
                story_text: |
                    På föregående nivå har du övat med `{ask}` och `{if}`. Du kan till exempel fråga gästerna vad de skulle vilja äta.
                    Vad du dock inte kan göra ännu är att räkna ut priset för allas middag.

                    Nästa nivå gör det möjligt att använda addition, subtraktion och multiplikation i dina program. På så sätt kan du räkna ut priserna i din restaurang, men du kan också lägga till en hemlig kod för att ge dina vänner och familj rabatt.
                    Ett annat alternativ i nästa nivå är att programmera ditt eget mattespel, så att ditt småsyskon kan öva multiplikationstabellen.
                    Gå och se själv!
                example_code: |
                    ```
                    matpris {is} 0
                    drickapris {is} 0
                    totalpris {is} 0
                    {print} 'Välkommen till McHedy'
                    beställning {is} {ask} 'Vad önskas att äta?'
                    {if} beställning {is} hamburgare matpris {is} 5
                    {if} beställning {is} pommes frites matpris {is} 2
                    dricka {is} {ask} 'Vad vill du dricka?'
                    {if} dricka {is} vatten drickapris {is} 0
                    else drickapris {is} 3
                    totalpris {is} food_price + drink_price
                    {print} 'Det blir ' totalpris ' dollar, tack'
                    ```
                start_code: '# placera din kod här'
            7:
                story_text: |
                    Bra jobbat! Du har nått nästa nivå, vilket betyder att du har tränat på `{if}` och `{else}`. Du har säkert märkt att din kod blir längre och längre.
                    Till exempel om du vill programmera 'Happy Birthday'.

                    Det är mycket kod för i huvudsak samma ord om och om igen. I nästa flik lär du dig tack och lov en lösning med kommandot `{repeat}`, som låter dig upprepa en kodrad flera gånger.
                example_code: |
                    ```
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    Nu har du lärt dig hur du upprepar en enstaka kodrad. Detta är praktiskt, men det räcker inte alltid. Ibland vill du upprepa flera rader samtidigt.
                    Den här nivån låter dig gruppera flera rader kod och upprepa den gruppen av rader på en gång!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'På nästa flik kan du upprepa flera rader kod samtidigt!'
                    ```
                start_code: '{print} ''Vi forsätter till nästa flik!'''
            9:
                story_text: |
                    Bra jobbat! Du har nått en ny nivå! På den föregående nivån lärde du dig använda flera rader kod i ett {if}- eller {repeat}-kommando. Men du kan ännu inte kombinera dem ...
                    Goda nyheter! På den här nivån kommer du att få lägga en {if} inuti en {if}, eller inuti ett {repeat}-kommando.
                example_code: |
                    ```
                    svar = {ask} 'Är du redo att lära dig något nytt?'
                    {if} svar {is} ja
                        {print} 'Bra! Du kan lära dig att använda kommandot repeat i if-kommandot!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Kanske du ska öva lite mer på förra nivån'
                start_code: '{print} Fortsätt till nästa flik!'
            10:
                story_text: |
                    Det här gå ju bra! På de tidigare nivåerna stod vi fortfarande inför ett litet problem. Du har lärt dig att repetera kodrader, men tänk om du skulle vilja ändra raden lite.
                    Till exempel om du vill sjunga låten 'if you're happy and you know it' så skulle det se ut så här:

                    Om du vill fortsätta med nästa vers, 'stomp your feet' och nästa och nästa, måste du ändra koden helt.
                    På den här nivån kommer du att lära dig kommandot `{for}`, som låter dig göra en lista med moment och upprepa koden med en nytt moment varje gång!
                    Ta en titt!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
                    ```
                start_code: '{print} ''Vi forsätter till nästa flik!'''
            11:
                story_text: |
                    Du har nått nivå 10: bra jobbat! På de högre nivåerna fokuserar Hedy mer och mer på att lära dig programspråket Python.
                    I Python finns inget `{repeat}` -kommando, men det finns ett kommando som fungerar som {repeat}. Är du nyfiken på hur man säger `{repeat}` på Python-språk? Fortsätt snabbt för att ta reda på det!
                start_code: '{print} ''Fortsätt till nästa flik!'''
            12:
                story_text: |
                    Kanske du testade att använda decimaltal i ditt restaurangäventyr. Om du gjorde det märkte du förmodligen att Hedy inte förstod dem än och alltid avrundade.
                    Från den här nivån kan du använda decimaltal.
                example_code: |
                    ```
                    hamburgare = 5
                    dryck = 2
                    totalt = hamburgare + dryck
                    print 'Du har beställt en hamburgare och en dryck'
                    print 'Det kostar' totalt 'dollar tack'
                    ```
                start_code: '{print} ''Fortsätt till nästa flik!'''
            13:
                story_text: |
                    På de tidigare nivåerna lärde du dig hur man lägger två `{if}`-kommandon inuti varandra. Det här fungerar bra, men det ger dig väldigt lång och klumpig kod som den här:

                    I det här systemet måste du ange både rätt användarnamn och rätt lösenord.
                    På den här nivån kommer du att lära dig kommandot `{and}` som att gör den här koden mycket kortare och lättbegriplig!
                    Kolla in det!
                example_code: |
                    ```
                    användar = {ask} 'Vad är ditt användarnamn?'
                    lösenord = {ask} 'Vad är ditt lösenord?'
                    {if} användarnamn {is} 'Hedy'
                        {if} lösenord {is} 'hemligt'
                            {print} 'Välkommen Hedy!'
                        {else}
                            {print} 'Tillträde förbjudet'
                    {else}
                        {print} 'Tillträde förbjudet!'
                    ```
                start_code: '{print} ''Fortsätt till nästa nivå!'''
            14:
                story_text: |
                    Med programmet här under kan du räkna ut om du har godkänt ett ämne i skolan (alltså ett betyg på sex eller högre).
                    Du kan se att den här koden är extremt ineffektiv, på grund av den mycket långa koden på rad fem.
                    Alla olika betyg från 1 till 5 måste programmeras separat. Tur för dig, för på den här nivån kommer du att lära dig hur du gör detta utan denna extremt långa kod!
                example_code: |
                    ```
                    första_poäng = {ask} 'Vilken poäng fick du på ditt första prov?'
                    andra_poäng = {ask} 'Vilket poäng fick du på ditt andra prov?'
                    sammanlagt = första_poäng + andra_poäng
                    medelvärde = sammanlagt / 2
                    {if} medelvärde = 1 {or} medelvärde = 2 {or} medelvärde = 3 {or} medelvärde = 4 {or} medelvärde = 5
                        {print} 'Åh nej! Du har misslyckats med ämnet ...'
                    {else}
                        {print} 'Bra! Du har klarat ämnet!'
                    ```
                start_code: '{print} ''Fortsätt till nästa flik'''
            15:
                story_text: |
                    I det spelet här nedanför finns kod för att se till att spelaren kan spela så länge den vill ...
                    Men koden är ineffektiv och alldeles för lång. Och vad händer om spelaren vill spela 101 spel istället för 100?
                    Kan du inte spela hur många gånger som helst?
                    På den här nivån kommer du att lära dig ett kommando som gör allt detta mycket enklare!
                example_code: |
                    ```
                    spel {is} 'pågår'
                    {for} i {in} {range} 1 {to} 100
                        {if} spel {is} 'pågår'
                            svar = {ask} 'Vill du fortsätta?'
                            {if} svar {is} 'nej'
                                spel {is} 'över'
                            {if} svar {is} 'ja'
                                {print} 'Ok, vi fortsätter'
                    ```
                start_code: '{print} ''Fortsätt till nästa nivå!'''
            16:
                story_text: |
                    På den här nivån kommer vi att växa lite mer mot riktig Python-kod. Du kommer också att lära dig hur du matchar två listor.
                    På så sätt kan du skriva kod där ett djur matchas till rätt ljud.
                    För de två koderna här under är rent nonsens!
                example_code: |
                    ```
                    djur = 'höna', 'häst', 'ko'
                    läten = 'kluck', 'gnägg', 'mu'
                    {for} vad {in} djur
                        {print} 'En 'vad' säger ' läten {at} {random}
                    ```
                    Du kan också försöka få det att fungera på det här sättet, men ...
                    ```
                    djur = 'höna', 'häst', 'ko'
                    läten = 'kluck', 'gnägg', 'mu'
                    {for} vad {in} djur
                        {for} läte {in} läten
                            {print} 'En 'vad' säger 'läte
                    ```
                start_code: '{print} ''Fortsätt till nästa flik!'''
            17:
                story_text: |
                    Du har nästan nått sista nivån i Hedy – bra jobbat! På den här nivån kommer du att lära dig ett riktigt Python-sätt att använda `{print}`.
                start_code: '{print} ''Fortsätt till nästa nivå!'''
            18:
                story_text: |
                    Grattis! Du har nått den sista nivån i Hedy! Koden du skrivit här kan kopieras till riktiga Python-miljöer som replit eller PyCharm och du kan fortsätta lära dig där!
                    Notera att Python bara kan läsa engelska kommandon, så om du har använt andra språk måste du byta till engelska nu.
                start_code: '{print} (''Bra jobbat!!!'')'
    dice:
        name: Tärning
        default_save_name: Tärning
        description: Gör din egen tärning
        levels:
            3:
                story_text: |
                    På den här nivån kan vi välja från en lista. I och med det kan vi låta datorn kasta tärning åt oss.
                    Ta en titt på de spel du har i garderoben hemma.
                    Finns det spel med en (speciell) tärning? Du kan också kopiera den med den här koden.
                    Till exempel tärningen i spelet Earthworms som har siffrorna 1 till 5 och en daggmask.

                    ![Tärning av daggmaskar med 1 till 5 och en daggmask på den](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    val {is} 1, 2, 3, 4, 5, earthworm
                    {print} Du kastade _ {at} {random}
                    ```
                story_text_2: |
                    ### Övning
                    Tärningarna i exemplet ovan är för ett visst spel. Kan du göra vanliga tärningar?
                    Eller andra specialtärningar från ett annat spel?
                example_code_2: |
                    ```
                    val {is} _
                    ```
                start_code: '{print} Vad kommer tärningen att visa den här gången?'
            4:
                story_text: |
                    På den här nivån kan du också skapa tärningar. Men den här gången kan du prova det själv, utan exempelkod!

                    ### Övning
                    Gör dina egna tärningar i den här nivån.
                    Tips: Om du inte har någon aning om hur man gör tärningar. Ta en titt på dina tärningar från föregående nivå, men glöm inte att lägga till citattecken.
                start_code: '{print} ''Vad kommer tärningen att visa den här gången?'''
            5:
                story_text: |
                    Vi ska lägga till kommandona `{if}` och `{else}` till vår tärning!

                    ### Övning
                    Komplettera exempelkoden så att koden säger "Du kan sluta kasta" när du har kastat en daggmask. Den ska säga "Du måste kasta igen" om du har kastat något annat.
                    **Extra** Kanske vill du återskapa en tärning från ett helt annat spel. Det går också bra! Hitta då på en egen reaktion, t.ex. 'ja' för 6 och 'synd' för något annat.
                example_code: |
                    ```
                    valmöjligheter {is} 1, 2, 3, 4, 5, daggmask
                    kast {is} val {at} {random}
                    {print} 'du har kastat' kast
                    _ throw {is} daggmask {print} 'Du kan sluta kasta.'
                    _ {print} 'Du måste kasta igen!'
                    ```
                start_code: '{print} ''Vad kommer tärningen att visa den här gången?'''
            6:
                story_text: |
                    Du kan också låta en daggmask dö igen, men nu kan du också beräkna hur många poäng som har kastats.
                    Du kanske vet att masken räknar fem poäng för daggmaskar. Nu kan du efter ett kast direkt räkna ut hur många poäng du har kastat.
                    Detta är koden för att beräkna poäng för en tärning:

                    ### Övning
                    Kan du göra koden så att du får fram den totala poängen för åtta tärningar? För att göra det måste du klippa och klistra in några rader i koden.
                example_code: |
                    ```
                    val = 1, 2, 3, 4, 5, daggmask
                    poäng = 0
                    kast = val {at} {random}
                    {print} 'du kastade ' kast
                    {if} kast {is} daggmask poäng = poäng + 5 {else} poäng = poäng + kast
                    {print} 'det är ' poäng ' poäng'
                    ```
                example_code_2: |
                    Lyckades du räkna ut poängen för åtta tärningar? Det behövdes en hel del klippande och klistrande, eller hur? Vi kommer att göra det enklare på nivå 7!
                start_code: '{print} ''Vad kommer tärningen att visa den här gången?'''
            7:
                story_text: |
                    Du kan också göra en tärning igen på den här nivån. Med `{repeat}` -koden kan du enkelt kasta en handfull tärningar.

                    ### Övning
                    Försök att avsluta exempelkoden!  **Extrauppgift** Tänk på ett spel du känner till som använder en tärning och programmera det med hjälp av `{repeat}`.
                example_code: |
                    ```
                    val = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''Vad kommer tärningarna att visa den här gången?'''
            10:
                story_text: |
                    ### Övning
                    Är alla för långsamma på att kasta tärning? På den här nivån kan du låta Hedy kasta allas tärningar på en gång!
                    Byt ut namnen mot namnen på dina vänner eller familj och avsluta koden så att alla kastar.
                example_code: |
                    ```
                    spelare = Ann, John, Jesse
                    val = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} 'spelare ' kastar ' val {at} {random}
                       {sleep}
                    ```
                start_code: '# skriv din kod här'
            15:
                story_text: |
                    I det här spelet måste du kasta en sexa på så få försök som möjligt.
                example_code: |
                    ```
                    alternativ = 1, 2, 3, 4, 5, 6
                    {print} 'Kasta 6 så fort du kan!'
                    kastad = 0
                    försök = 0
                    {while} kastad != 6
                        kastad = alternativ {at} {random}
                        {print} 'Du kastade ' kastad
                        försök = försök + 1
                    {print} 'Ja! Du kastade 6 på ' försök ' försök.'
                    ```
                start_code: '# skriv din kod här'
    dishes:
        name: Disk?
        default_save_name: Disk
        description: Använd datorn för att se vem som diskar
        levels:
            3:
                story_text: |
                    Är ni alltid oense hemma om vem som ska diska eller göra vid kattlådan idag?
                    Då kan du låta datorn välja mycket rättvist. Det kan du programmera på den här nivån!
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    {print} personer {at} {random} får diska
                    ```
                story_text_2: |
                    ### Övning
                    Gör en egen version av programmet för diskmaskinen. Gör först en lista över dina familjemedlemmar.
                    Tänk sedan ut en uppgift som måste göras och låt datorn bestämma vem som ska göra uppgiften med kommandot `{at} {random}`.

                    **Extra** Känner du inte för att diska själv? Hacka programmet genom att ta bort ditt namn från listan med kommandot `{remove}` `{from}`.
                start_code: '{print} Vem diskar?'
            4:
                story_text: |
                    Med citattecken kan du göra ditt diskprogram ännu bättre.

                    ### Övning
                    Fyll först i rätt symboler eller kommandon i tomrummen för att få detta exempelprogram att fungera.
                    Fick du rätt på det? Bra! Kopiera nu din egen kod från föregående nivå och få den att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    {print} _ ansvarig för att diska är _
                    {sleep}
                    {print} personer {at} _
                    ```
                start_code: '{print} ''Vem diskar?'''
            5:
                story_text: |
                    Med `{if}` kan du nu ha roligare valmöjligheter i programmet. Du kan låta programmet reagera på datorns val.
                    ### Övning
                    Kan du avsluta koden så att den skriver ut 'tyvärr' när det är din tur och annars 'ja!'?
                    Glöm inte citattecken!
                example_code: |
                    ```
                    personer {is} mamma, pappa, Emma, Sophie
                    diskare {is} personer {at} {random}
                    _ diskare {is} Sophie {print} _ synd att jag måste diska _
                    _ {print} 'lyckligtvis ingen disk eftersom ' _ ' redan diskar'
                    ```
                start_code: '{print} ''Vem diskar?'''
            6:
                story_text: |
                    Hur ofta ska var och en diska? Är det rättvist? Du kan räkna ut det på den här nivån.
                example_code: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    emma_diskar = 0
                    diskare = personer {at} {random}
                    {print} 'Disken sköts av ' diskare
                    {if} diskare {is} Emma emma_diskar = emma_diskar + 1
                    {print} 'Den här veckan kommer Emma att diska' emma_diskar 'gånger'
                    ```

                    Nu kan du kopiera raderna 3 till 5 några gånger (t.ex. sju gånger för en hel vecka) för att beräkna för en hel vecka igen.
                    Har du gjort koden för hela veckan?
                story_text_2: |
                    Om du har extrem otur kan det tidigare programmet bestämma att du ska diska hela veckan! Det är inte rättvist!
                    För att skapa ett mer rättvist system kan du använda kommandot `{remove}` för att ta bort den valda personen från listan. På så sätt behöver du inte diska igen förrän alla andra har gjort det.

                    Måndag och tisdag är redan klara för dig! Kan du lägga till resten av veckan?
                    Och … kan du komma på en lösning för när din lista är tom?
                example_code_2: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    diskare = personer {at} {random}
                    {print} 'Måndagsdisken sköts av: ' diskare
                    {remove} diskare {from} personer
                    diskare = personer {at} {random}
                    {print} 'Tisdagsdisken sköts av: ' diskare
                    {remove} diskare {from} personer
                    ```
                start_code: '{print} ''Vem diskar?'''
            7:
                story_text: |
                    Med `{repeat}` kan du upprepa delar av koden. Du kan använda detta för att beräkna vem som kommer att diska under flera dagar!
                    ### Övning
                    Använd kommandot `{repeat}` för att bestämma vem som ska diska under en hel vecka. Varje tomrum måste fyllas med ett kommando eller ett tal!
                    **Extrauppgift** Kan du komma på andra uppgifter i huset? Anpassa koden så att den beslutar om tre hushållssysslor. Glöm inte att skriva ut vilka uppgifter det handlar om!
                example_code: |
                    ```
                    personer = mamma, pappa, Emma, Sophie
                    {repeat} _ _ {print} 'Disken kommer att skötas av ' _ _ _
                    ```
                start_code: '{print} ''Vem diskar?'''
            10:
                story_text: |
                    På den här nivån kan du göra ett schema för hela veckan på ett enkelt sätt!

                    ### Övning
                    Lägg till en andra syssla, t.ex. dammsugning eller städning, och se till att den också är uppdelad för hela veckan.
                    <br> **Extrauppgift** Programmet är inte rättvist – du kan ha otur och behöva diska hela veckan. Hur skulle du kunna göra programmet mer rättvist?
                example_code: |
                    ```
                    dagar = måndag, tisdag, onsdag, torsdag, fredag, lördag, söndag
                    namn = mamma, pappa, Emma, Sophie
                    {for} dag {in} dagar
                        {print} namn {at} {random} ' diskar på ' dag
                    ```
                start_code: '# skriv din kod här'
    elif_command:
        name: '{elif}'
        default_save_name: annarsom
        description: annarsom
        levels:
            17:
                story_text: |
                    På den här nivån kan du också använda ett nytt kommando: `{elif}`. `{elif}` är en förkortning för `{else}` `{if}` och du behöver det när du vill göra tre (eller fler!) alternativ.
                    Kolla in det!
                example_code: |
                    ```
                    priser = ['1 miljon dollar', 'en äppelpaj', 'ingenting']
                    ditt_pris = priser[{random}]
                    {print} 'Du vinner ' ditt_pris
                    {if} ditt_pris == '1 miljon dollar' :
                        {print} 'Hurra! Du är rik!'
                    {elif} ditt_pris == 'en äppelpaj' :
                        {print} 'Härligt, en äppelpaj!'
                    {else}:
                        {print} 'Bättre tur nästa gång …'
                    ```
                start_code: |-
                    priser = ['1 miljon dollar', 'en äppelpaj', 'ingenting']
                    ditt_pris = priser[{random}]
                    {print} 'Du vinner ' ditt_pris
                    {if} ditt_pris == '1 miljon dollar' :
                        {print} 'Hurra! Du är rik!'
                    {elif} ditt_pris == 'en äppelpaj' :
                        {print} 'Härligt, en äppelpaj!'
                    {else}:
                        {print} 'Bättre tur nästa gång …'
    for_command:
        name: '{for}'
        default_save_name: för
        description: kommandot för
        levels:
            10:
                story_text: |-
                    ## För
                    På den här nivån lär vi oss ett nytt kommando som heter `{for}`. Med `{for}` kan du skapa en lista och gå igenom alla element.
                    `{for}` skapar ett block, som `{repeat}` och `{if}` så alla rader i blocket måste börja med fyra mellanslag.
                example_code: |
                    ```
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                        {print} 'Jag älskar ' djuret
                    ```
                start_code: |-
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                        {print} 'Jag älskar ' djuret
            11:
                story_text: |-
                    På den här nivån lägger vi till en ny form av `{for}`. På tidigare nivåer använde vi `{for}` med en lista, men vi kan också använda `{for}` med tal.
                    Det gör vi genom att lägga till ett variabelnamn, följt av `{in}` `{range}`. Vi skriver sedan talet vi vill börja på, `{to}` och talet vi vill sluta på.

                    Prova exemplet för att se vad som händer! På den här nivån måste alltid använda indrag på raderna under `{for}`-satserna.
                example_code: |
                    ```
                    {for} räknare {in} {range} 1 {to} 10
                        {print} räknare
                    {print} 'Redo eller icke, nu kommer jag!'
                    ```
                start_code: |-
                    {for} räknare {in} {range} 1 {to} 10
                        {print} räknare
                    {print} 'Redo eller icke, nu kommer jag!'
            17:
                story_text: |
                    Nu ska vi ändra reglerna för indragning lite. Varje gång vi behöver en indragning måste vi ha `:` på raden före indragningen.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Klar eller inte, här kommer jag!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Klar eller inte, här kommer jag!'
    fortune:
        name: Spådam
        default_save_name: Spådam
        description: Låt Hedy förutspå framtiden
        levels:
            1:
                story_text: |
                    Har du någonsin varit på marknad och fått din framtid förutspådd av en spådam? Eller har du någonsin spelat med en magisk åttaboll?
                    Då vet du säkert att de inte riktigt kan förutse din framtid, men det är ändå kul att spela!

                    På de kommande nivåerna kan du lära dig hur du skapar din egen spåmaskin!
                    På nivå 1 kan du börja enkelt genom att låta Hedy presentera sig som en spådam och låta henne `{echo}` spelarnas svar.
                    Så här:
                example_code: |
                    ```
                    _ Hej, jag är spådamen Hedy!
                    _ Vem är du?
                    _ Låt mig ta en titt i min kristallkula.
                    _ Jag ser ... Jag ser ...
                    _ Ditt namn är
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm och fyll i de tomma rutorna så att koden fungerar.
                    **Extra** Ändra koden och låt spådamen inte bara förutsäga ditt namn utan även din ålder, ditt favoritsportlag eller något annat om dig själv.
                start_code: '# skriv din kod här'
            3:
                story_text: |
                    På de tidigare nivåerna har du skapat din första spåmaskin, men Hedy kunde inte förutsäga någonting, bara `{echo}`.
                    På den här nivån kan du använda en variabel och kommandot `{at} {random}` för att verkligen låta Hedy välja ett svar åt dig. Titta till exempel på den här koden:
                example_code: |
                    ```
                    {print} Jag är spådamen Hedy!
                    fråga {is} {ask} Vad vill du veta?
                    {print} Det här är vad du vill veta: fråga
                    svar {is} ja, nej, kanske
                    {print} Min kristallkula säger …
                    {sleep} 2
                    {print} svar {at} {random}
                    ```
                story_text_2: |
                    ### Övning
                    Just nu kan Hedy bara svara ja, nej eller kanske. Kan du ge Hedy fler svarsalternativ, till exempel 'definitivt' eller 'fråga igen'.
                start_code: '# skriv din kod här'
            4:
                story_text: |
                    Den här nivån har inga nya funktioner, men ger dig chansen att öva på att använda citattecken.
                    Du kan göra om din kod från nivå 3 och se till att lägga till citattecken på rätt ställen!

                    Tänk på att vi på nivå 3 inte kunde använda ordet 'fråga' både som namn på variabeln och som ett normalt ord som kan skrivas ut.
                    Citattecken på nivå 4 gör detta möjligt!

                    ### Övning
                    Vi har tagit bort alla citattecken från den här exempelkoden – kan du lägga till dem på alla ställen där det behövs?

                    ### Övning 2
                    Gå tillbaka till den föregående nivån och kopiera din spådomskod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    _ Lägg till citattecken i denna kod _
                    {print} Jag är spådamen Hedy!
                    fråga {is} {ask} Vad vill du veta?
                    {print} Detta är din fråga: fråga
                    svar {is} ja, nej, kanske
                    {print} Min kristallkula säger ...
                    {sleep} 2
                    {print} svar {at} {random}
                    ```
                start_code: '# skriv din kod här'
            5:
                story_text: |
                    ### Övning
                    I exempelkoden ser du hur man gör ett spåprogram som låter dig vända oddsen till din fördel. Detta fuskprogram säger alltid att du kommer att vinna på lotteriet, men dina vänner kommer aldrig att vinna.

                    Använd detta för att göra ditt eget program – var kreativ! Du kan till exempel skriva kod som förutspår att:
                    * ditt favoritsportlag kommer att slå alla konkurrenter!
                    * din favoritfilm kommer att väljas till filmkvällen!
                    * du vinner biljetter till din favoritshow!
                    * du är den vackraste av dem alla, som Snövits magiska spegel.
                    Släpp loss din fantasi!

                    Ditt program måste bestå av minst 10 rader kod och måste ha minst ett `{if}`- och `{else}`-kommando.
                example_code: |
                    ```
                    vänner {is} Jordan, Lucy, Dave
                    {print} 'Jag kan förutse om du kommer att vinna på lotteriet imorgon!'
                    person {is} {ask} 'Vem är du?'
                    bra_svar {is} Hurra! Du vinner!, Du kommer definitivt att vinna!, Vi har en vinnare!
                    dåligt_svar {is} Otur! Försök igen!, En annan person kommer att vinna, Du förlorar!
                    {if} person {in} vänner {print} bra_svar {at} {random}
                    {else} {print} dåligt_svar {at} {random}
                    ```
                start_code: '# skriv din kod här'
            6:
                story_text: |
                    På den här nivån kan du använda matematik i dina förutsägelser som spåkvinna. Detta gör att du kan hitta på (fåniga) formler för att beräkna framtiden.
                    Du kan till exempel beräkna hur rik du kommer att bli eller hur många barn du kommer att få när du blir vuxen.



                    ### Övning
                    Kan du hitta på en egen (fånig) spåmaskin?
                example_code: |
                    ```
                    {print} 'Jag är spådamen Hedy!'
                    {print} 'Jag kan förutsäga hur många barn du kommer att få när du blir stor!'
                    ålder = {ask} 'Hur gammal är du?'
                    syskon = {ask} 'Hur många syskon har du?'
                    längd = {ask} 'Hur lång är du i centimeter?'
                    barn = längd / ålder
                    barn = barn - syskon
                    {print} 'Du kommer att få …'
                    {sleep}
                    {print} barn ' barn!'
                    ```
                start_code: '# skriv din kod här'
            7:
                story_text: |
                    ### Övning
                    Avsluta det här programmet som talar om för dig om din crush älskar dig tillbaka eller inte.
                example_code: |
                    ```
                    {print} 'Jag har en blomma med magiska kronblad'
                    {print} 'Om du plockar kronbladen kommer blomman att berätta för dig om din crush älskar dig tillbaka'
                    antal = {ask} 'Hur många kronblad vill du välja?'
                    alternativ = de älskar dig, de älskar dig inte
                    _ _ _ _ alternativ {at} {random}
                    ```
                start_code: '# skriv din kod här'
            8:
                story_text: |
                    I nästa exempel kan du låta din spådam ställa flera frågor och även skriva ut dem!

                    ### Övning
                    Kan du fylla i rätt kommando på de tomma platserna?
                example_code: |
                    ```
                    {print} 'Jag är spådamen Hedy!'
                    {print} 'Du kan ställa tre frågor till mig.'
                    svar = ja, nej, kanske
                    _ _ _
                       fråga = {ask} 'Vad vill du veta?'
                       {print} fråga
                       {sleep}
                       {print} 'Min kristallkula säger ...' svar {at} {random}
                    ```
                start_code: '# skriv din kod här'
            10:
                story_text: |
                    På den här nivån lär du dig att programmera spelet MASH (M=herrgård, A=lägenhet, S=stuga, H=hus). I det här spelet kan du förutsäga för alla spelare samtidigt hur deras framtid kommer att se ut.

                    ### Övning
                    Fyll i tomrummen genom att använda de nya kommandon du lärt dig på den här nivån.
                example_code: |
                    ```
                    bostäder = en herrgård, en lägenhet, ett skjul, ett hus
                    kärlekar = ingen, en kunglighet, sin granne, sin sanna kärlek
                    husdjur = hund, katt, elefant
                    namn = Jenna, Ryan, Jim
                    _
                        {print} namn ' bor i ' bostäder {at} {random}
                        {print} namn ' kommer att gifta sig med ' älskar {at} {random}
                        {print} namn ' kommer att få en ' husdjur {at} {random} ' som husdjur.
                       {sleep}
                    ```
                start_code: '# place your code here'
            12:
                story_text: |-
                    Från och med nivå 12 måste du också använda citattecken i listor, före och efter varje punkt.

                    ### Övning
                    Lägg till två förutsägelser i listan
                example_code: |
                    ```
                    spådomar = 'du kommer att halka på ett bananskal', _
                    {print} 'Jag ska ta en titt i min kristallkula om din framtid.'
                    {print} 'Jag ser … jag ser …'
                    {sleep}
                    {print} spådomar {at} {random}
                    ```
                start_code: '# skriv din kod här'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter-äventyr
        levels:
            10:
                story_text: |
                    ### Övning
                    Vi kan också skapa en spådam med Harry Potter-tema. Fyll i tomrummen så att nio rader skrivs ut.
                    **Extrauppgift** Ändra temat för spådamen till något annat, till exempel din favoritbok, film eller tv-program.
                example_code: |
                    ```
                    hus = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    ämnen = drycker, försvar mot svartkonst, förtrollningar, förvandling
                    rädslor = Voldemort, spindlar, att misslyckas med sitt OWL-test
                    namn = Harry, Ron, Hermione
                    _
                    _ {print} namn ' är placerad i ' hus {at} {random}
                    _ {print} namn ' är bra på ' ämnen {at} {random}
                    _ {print} namn 's största rädsla är ' rädslor {at} {random}
                    ```
                start_code: '# skriv din kod här'
    haunted:
        name: Spökhuset
        default_save_name: Spökhuset
        description: Flykten från spökhuset
        levels:
            1:
                story_text: "I det här äventyret jobbar du med att skapa ett spel där du måste fly från ett hemsökt hus genom att välja rätt dörr.\nOm du väljer rätt dörr kommer du att överleva, men om du inte gör det kan ett hemskt monster...\n \nPå nivå 1 börjar vi vårt spökhusspel med att hitta på\
                    \ en skrämmande historia och frågar spelaren vilket monster de kommer att se i spökhuset.\n"
                example_code: |
                    ```
                    {print} Hur kom jag hit?
                    {print} Jag minns att min vän sa åt mig att gå in i den gamla herrgården …
                    {print} och plötsligt blev allt svart.
                    {print} Men hur hamnade jag på golvet …?
                    {print} Mitt huvud gör ont som om jag blivit slagen av ett baseballträ!
                    {print} Vad är det för ljud?
                    {print} Åh nej! Det känns som om jag inte är ensam i det här huset!
                    {print} Jag måste ta mig ut härifrån!
                    {print} Det finns tre dörrar framför mig …
                    {ask} Vilken dörr ska jag välja?
                    {echo} Jag väljer dörr
                    {print} …?
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Avsluta nu berättelsen genom att lägga till minst fem rader kod.
                    Kom ihåg att börja varje kodrad med ett `{print}`-kommando.
                start_code: '{print} Hur kom jag hit?'
            2:
                story_text: |
                    I detta spökhus kan du välja dina monster med emoji. Naturligtvis kan du också använda ord.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} Du går in i spökhuset.
                    {print} Plötsligt ser du ett monster_1
                    {print} Du springer in i det andra rummet …
                    {print} Men där väntar ett monster_2 på dig!
                    {print} Åh, nej! Gå snabbt till köket.
                    {print} Men när du går in anfaller monster_3 dig!
                    ```
                story_text_2: |
                    ### Övning
                    I exemplet ovan är monstren förutbestämda. Så varje gång du kör din kod blir resultatet detsamma.
                    Kan du lägga till `{ask}` -kommandon för att göra spökhuset interaktivt och låta spelarna välja vilka monster de stöter på?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} Du går in i spökhuset.
                    {print} Plötsligt ser du ett monster_1
                    {print} Du springer in i det andra rummet …
                    {print} Men där väntar ett monster_2 på dig!
                    {print} Åh, nej! Gå snabbt till köket.
                    {print} Men när du går in anfaller monster_3 dig!
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    På de tidigare nivåerna har du gjort en början till ditt spökhusspel, men som du kanske har märkt har berättelsen alltid haft ett hemskt slut.
                    På den här nivån kan du göra din berättelse mer interaktiv genom att ändra utgången av spelet; ibland blir du uppäten, ibland flyr du!
                    Låt Hedy bestämma slumpmässigt!

                    ### Övning
                    Kopiera exempelkoden och fyll i luckorna för att få det att fungera!

                    **Extrauppgift** Den här berättelsen är ganska enkel, så du kanske kan lägga till en mer spännande berättelse.
                    Du har också mycket begränsade resultat just nu – det finns bara tre alternativ för vad som finns bakom dörrarna. Kanske kan du komma på fler monster att lägga till i listan!
                example_code: |
                    ```
                    _ Fly från spökhuset!
                    _ Det finns 3 dörrar framför dig …
                    _ _ _ Vilken dörr väljer du?
                    _ Du valde dörr … val
                    monster _ en zombie, en vampyr, INGENTING DU KOM UNDAN
                    _ Du ser …
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# skriv din kod här'
            4:
                story_text: |
                    På den här nivån lär du dig att använda citattecken i dina spel.

                    ### Övning
                    Kan du göra ditt spökhus så att det fungerar på nivå 4?

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera koden för ditt spökhus. Få koden att fungera i den här nivån genom att lägga till citattecken på rätt ställen.
                example_code: |
                    ```
                    _ Lägg till citattecken till denna kod _
                    {print} Fly från spökhuset!
                    {print} Det finns tre dörrar framför dig ...
                    val {is} {ask} Vilken dörr väljer du?
                    {print} Du valde dörr ... val
                    monster {is} en zombie, en vampyr, INGENTING DU KLARADE DIG
                    {print} Du ser ...
                    {sleep}
                    {print} monster {at} {random}
                     ```
                start_code: '# skriv din kod här'
            5:
                story_text: |
                    Fram till den här nivån har Spökhusspelet alltid bett spelaren att välja en dörr, men som du kanske har märkt behöver spelaren inte svara rätt.
                    Om spelaren fyllde i ett helt slumpmässigt svar fungerade spelet fortfarande och spelaren kunde till och med vinna (trots att hen inte valde en dörr).
                    I den här nivån kan du bara vinna spelet genom att välja samma dörr som Hedy valde slumpmässigt.

                    ### Övning
                    Kan du hitta de fyra ord som saknas för att göra koden färdig?
                example_code: |
                    ```
                    {print} 'Fly från spökhuset!'
                    {print} 'Det finns tre dörrar framför dig ...'
                    dörrar {is} 1, 2, 3
                    monster {is} varulv, mumie, vampyr, zombie
                    vald_dörr {is} {ask} 'Vilken dörr väljer du?'
                    {print} 'Du valde dörr ...' vald_dörr
                    {sleep}
                    korrekt_dörr {is} dörrar {at} {random}
                    _ _ _ _ {print} 'Bra! Du har rymt!'
                    {else} {print} 'Åh nej! Du blir uppäten av en ...' monster {at} {random}
                    ```
                start_code: '# skriv din kod här'
            9:
                story_text: "På den här nivån kan du använda dig av nästlade satser, vilket gör spökhuset ännu mer interaktivt!\n\n### Övning\nNu är det väldigt svårt att vinna det här spelet; kan du göra det lättare att vinna?\nÄndra din kod så att den bara har en felaktig dörr och två korrekta dörrar\
                    \ istället för en korrekt dörr och två felaktiga? \nTips: Detta innebär att du ändrar variabeln korrekt_dörr till fel_dörr och byter ut koden `{if}` och `{else}`.\n Och naturligtvis kan du också ändra berättelsen och göra den mer personlig. Ändra monstren eller gör det till en glad\
                    \ spelshow där du får en gåva!\n"
                example_code: |
                    ```
                    {print} 'Fly från spökhuset!'
                    spelare = lever
                    dörrar = 1, 2, 3
                    monster = zombie, vampyr, jättespindel
                    {repeat} 3 {times}
                        {if} spelare {is} lever
                            rätt_dörr {is} dörrar {at} {random}
                            {print} 'Det finns tre dörrar framför dig …'
                            vald_dörr = {ask} 'Vilken dörr väljer du?'
                            {if} vald_dörr {is} rätt_dörr
                                {print} 'Inga monster här!'
                            {else}
                                {print} 'Du blir uppäten av en ' monster {at} {random}
                                spelare = död
                        {else}
                            {print} 'GAME OVER'
                    {if} spelare {is} lever
                        {print} 'Bra! Du överlevde!'
                    ```
                start_code: '{print} ''Fly från spökhuset!'''
            11:
                story_text: "På den här nivån har vi ändrat kommandot `{for}` så att vi kan berätta för spelaren var den befinner sig. \n\n### Övning 1\nAvsluta programmet så att spelaren vet vilket rum den befinner sig i.\n\n### Övning 2\nGör programmet till ett äventyr genom att följa dessa steg:\n\n\
                    1. Gör en lista med valmöjligheter (till exempel: slåss eller fly).\n2. Se till att spelaren kan välja ett alternativ med `{ask}`\n3. Är svaret rätt? Då får den gå vidare till nästa monster. Ger den fel svar? Låt spelaren veta det med en `{print}`. \n\n**Extrauppgift** Om du väljer\
                    \ fel visas ändå ett monster! Hur kan man ändra på det?\n"
                example_code: |
                    ```
                    {print} "Escape from the Haunted House!"
                    monster = zombie, vampyr, jättespindel
                    _
                        {print} 'Rum' i
                        vilket_monster = monster {at} {random}
                    ```
                start_code: '{print} ''Fly från spökhuset!'''
            14:
                story_text: |
                    På den här nivån kan du använda symbolerna `<` och `>` för att lägga till liv i ditt spel.
                example_code: |
                    ```
                    {print} 'Fly från spökhuset'
                    liv = 3
                    dörrar = 1, 2, 3
                    monster = 'den onda häxan', 'en zombie', 'en sovande trehövdad hund'
                    {for} i {in} {range} 1 {to} 10
                        {if} liv > 0
                            bra_dörr = dörrar {at} {random}
                            monster = monster {at} {random}
                            vald_dörr = {ask} 'Vilken dörr väljer du?'
                            {if} bra_dörr == vald_dörr
                                {print} 'Du har valt rätt dörr'
                            {else}
                                {print} 'Du ser … ' monster
                                {if} monster == 'en sovande trehövdad hund'
                                    {print} 'Puuh … den sover'
                                {else}
                                    {print} 'Du förlorar ett liv'
                                    liv = liv - 1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# skriv din kod här'
            16:
                story_text: |
                    Detta spökhusspel använder sambandet mellan listorna du kan använda på denna nivå.
                    Till exempel: alla egenskaper som tillhör zombien är först i alla listor, häxan på andra plats och vampyren på tredje plats.
                    Kolla in koden!
                example_code: |
                    ```
                    siffror = [1, 2, 3]
                    i = siffror[{random}]
                    ledtråd = ['morrande', 'ett kacklande skratt', 'fladdrande fladdermusvingar']
                    monster = ['zombie', 'häxa', 'vampyr']
                    otur = ['Din hjärna är uppäten', 'Du är för evigt förbannad', 'Du är biten']
                    tur = ['Du kastar skinkan. Zombien är distraherad och börjar äta den.', 'Du sätter eld på gardinerna. Häxan flyr av rädsla för elden', 'Vampyren hatar vitlök och flyr']
                    vapen = ['skinka', 'tändare', 'vitlök']
                    {print} 'Du står framför en gammal herrgård'
                    {print} 'Det är något som inte stämmer här'
                    {print} 'Du hör ' ledtråd[i]
                    {print} 'Du ska utforska det'
                    {print} 'Du går in i köket och ser en tändare, en rå skinka och en vitlök.'
                    ditt_vapen = {ask} 'Vad tar du med dig?'
                    {print} 'Med en ' ditt_vapen ' går du in i vardagsrummet'
                    {print} 'Där hittar du ett ' monster[i]
                    behöver_vapen = vapen[i]
                    {if} ditt_vapen == behövs_vapen
                        {print} 'Du använder ' ditt_vapen
                        {print} tur[i]
                        {print} 'DU VANN!'
                    {else}
                        {print} 'Du valde fel vapen ...'
                        {print} otur[i]
                        {print} 'SPELET SLUT'
                    ```
                start_code: '# skriv din kod här'
    if_command:
        name: '{if} & {else}'
        default_save_name: kommandot_if
        description: Introduktion till kommandot if
        levels:
            5:
                story_text: |
                    ## Om … annars …
                    På nivå 5 finns det något nytt, `{if}`! Med `{if}` kan du välja mellan två olika alternativ.
                    Den här koden skrivs ut fint om du anger Hedy som namn, och bu! om du anger något annat.
                    `{ask}` och `{print}` fungerar fortfarande som på nivå 4.
                example_code: |
                    ```
                    namn {is} {ask} 'vad heter du?'
                    {if} namn {is} Hedy {print} 'nice' {else} {print} 'bu!'
                    ```
                story_text_2: |
                    Ibland blir koden med `{if}` riktigt lång och får inte plats på raden. <br> Du kan också dela koden över två rader så att den andra raden börjar med `{else}` så här:
                example_code_2: |
                    ```
                    namn {is} {ask} 'vad heter du?'
                    {if} namn {is} Hedy {print} 'nice'
                    {else} {print} 'bu!'
                    ```
                story_text_3: |
                    ### Övning
                    Försök att skriva din egen kod med `{if}` och `{else}`. Du kan använda exempelkoden om du vill.
                example_code_3: |
                    ```
                    svara {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Bra jobbat!'
                    _ _ 'Nej, 2 + 2 = 4'
                    ```
                start_code: |-
                    namn {is} {ask} 'vad heter du?'
                    {if} namn {is} Hedy {print} 'nice'
                    {else} {print} 'bu!'
            8:
                story_text: |
                    ## Om … Annars …
                    Du har lärt dig att upprepa ett block med kodrader efter ett `{repeat}`-kommando.
                    Nu kan du också använda indrag för att skapa block efter ett {if}- eller {else}-kommando.
                    Kolla in exempelkoden.

                    ### Övning
                    Lägg till ett {else}-kommando till exempelkoden. Gör ett kodblock med indrag. Det gör du genom att börja varje rad med fyra mellanslag.
                example_code: |
                    ```
                    namn {is} {ask} 'Vad heter du?'
                    {if} namn {is} Hedy
                        {print} 'Välkommen Hedy'
                        {print} 'Du kan spela på din dator!'
                    ```
                start_code: |
                    namn {is} {ask} 'Vad heter du?'
                    {if} namn {is} Hedy
                        {print} 'Välkommen Hedy'
                        {print} 'Du kan spela på din dator!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: kommandot_i
        description: Introduktion till kommandot i
        levels:
            5:
                story_text: |
                    ## Listor
                    När vi vill kontrollera om något finns i en lista kan vi nu använda kommandot `{in}`.
                    Den här koden skriver ut snyggt! om du väljer grönt eller gult, annars meh.
                example_code: |
                    ```
                    snygga_färger {is} grönt, gult
                    favoritfärg {is} {ask} 'Vilken är din favoritfärg?'
                    {if} favoritfärg {in} snygga_färger {print} 'snyggt!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Övning
                    Gör klar exempelkoden genom att fylla i luckorna med kommandon som du har lärt dig.
                    När du är klar med koden, försök att lägga till egen kod och använd en fråga som du själv har kommit på.
                example_code_2: |
                    ```
                    djur är hund, ko, får
                    svaret är fråga 'Vilket är ditt favoritdjur?'
                    _ svar _ djur _ 'Mitt också!'
                    _ _ 'Mina favoritdjur är hundar, kor och får'
                    ```
                start_code: |-
                    snygga_färger {is} grön, gul
                    favoritfärg {is} {ask} 'Vilken är din favoritfärg?'
                    {if} favoritfärg {in} snygga_färger {print} 'snyggt!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: kommandot_är
        description: introduktion till kommandot är
        levels:
            2:
                story_text: |
                    ## Variabler
                    Du kan döpa ett ord med `{is}`. Det kallas för en **variabel**. I det här exemplet har vi skapat en variabel som heter namn och en variabel som heter ålder. Du kan använda ordet namn var som helst i din kod och det kommer att ersättas med Hedy, till exempel så här:
                example_code: |
                    ```
                    namn {is} Hedy
                    ålder {is} 15
                    {print} namn är ålder år gammal
                    ```
                story_text_2: |
                    ### Övning
                    Dags att göra dina egna variabler!
                    I exempelkoden gjorde vi ett exempel på variabeln `favorite_animals`. På rad 1 sätts (tilldelas) variabeln och på rad 2 har vi använt variabeln i ett skriv-kommando.
                    Avsluta först vårt exempel genom att fylla i ditt favoritdjur i de tomma fälten. Gör sedan minst tre av dessa koder själv. Välj en variabel och sätt variabeln med kommandot {is}. Använd den sedan med ett {print}-kommando, precis som vi gjorde.
                example_code_2: |
                    ```
                    favoritdjur är _
                    {print} Jag gillar favoritdjur
                    ```
                start_code: |-
                    namn {is} Hedy
                    ålder {is} 15
                    {print} namn är ålder år gammal
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    Vi kommer att lära oss fler nya saker. Du kanske redan känner till dem från matematiken, `<` och `>`.
                     `<` kollar om det första talet är mindre än det andra, t.ex. ålder `<` 12 kontrollerar om ålder är mindre än 12.
                    Om du vill kolla om det första talet är mindre eller lika med det andra kan du använda `<=`, t.ex. ålder `<=` 11.
                     `>` kollar om det första talet är större än det andra, t.ex. poäng `>` 10 kollar om poäng är större än 10.
                    Om du vill kolla om det första talet är större eller lika med det andra kan du använda `>=`, t.ex. poäng `>=` 11.
                    Du använder dessa jämförelser i en `{if}`, så här:
                example_code: |
                    ```
                    ålder = {ask} 'Hur gammal är du?'
                    {if} ålder > 12
                        {print} 'Du är äldre än jag!'
                    ```
                story_text_2: |
                    Från och med den här nivån kan du använda två likhetstecken om du vill jämföra exakt. Detta är vad de flesta programspråk gör:
                example_code_2: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn == 'Hedy'
                        {print} 'Du är cool!'
                    ```
                story_text_3: |
                    Du kan också jämföra om något *inte* är lika med något annat med hjälp av `!=` så här:
                example_code_3: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn != 'Hedy'
                        {print} 'Du är inte Hedy'
                    ```
                start_code: |-
                    ålder = {ask} 'Hur gammal är du?'
                    {if} ålder < 13
                        {print} 'Du är yngre än jag!'
                    {else}
                        {print} 'Du är äldre än jag!'
    language:
        name: Språk
        default_save_name: Språk
        description: Öva glosor på ett främmande språk
        levels:
            5:
                story_text: |
                    Gör ditt eget program för att öva glosor på ett nytt språk.

                    ### Övning
                    Gör koden längre genom att lägga till minst tre ytterligare glosor som spelaren ska lära sig.
                    **Extra** Du kan naturligtvis välja att använda ett annat språk än franska. Du kan ändra koden till vilket språk som helst som du vill lära dig.
                example_code: |
                    ```
                    {print} 'Lär dig franska!'
                    katt {is} {ask} '🐱'
                    {if} katt {is} chat {print} 'Fantastiskt!'
                    {else} {print} 'Nej, katt heter chat'
                    groda {is} {ask} '🐸'
                    {if} groda {is} grenouille {print} 'Superbt!'
                    {else} {print} 'Nej, groda heter grenouille'
                    ```
                start_code: '# skriv din kod här'
            16:
                story_text: |
                    Gör ditt eget program för att öva ditt ordförråd på ett nytt språk.
                example_code: |
                    ```
                    franska_ord = ['bonjour', 'ordinateur', 'pomme de terre']
                    översättning = ['hej', 'dator', 'potatis']
                    poäng = 0
                    {for} i {in} {range} 1 {to} 3
                        svar = {ask} 'Vad betyder ' franska_ord[i] '?'
                        rätt = översättning[i]
                        {if} svar == rätt
                            {print} 'Rätt!'
                            poäng = poäng + 1
                        {else}
                            {print} 'Fel, ' franska_ord[i] ' betyder ' översättning[i]
                    {print} 'Du gav ' poäng ' rätta svar.'
                    ```
                start_code: '# skriv din kod här'
    maths:
        name: matte
        default_save_name: matte
        description: Introduktion till matte
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    På den här nivån lär du dig något nytt: du kan nu också räkna ut saker.

                    Plus är enkelt, du skriver det som med matematik: `5 + 5` till exempel. Minus fungerar också bra, det är `5 - 5`.

                    Gånger är lite annorlunda, eftersom det inte finns någon gångersymbol på tangentbordet. Sök bara, det finns verkligen inte!
                    Det är därför vi multiplicerar med asterisken till vänster om ä: `5 * 5`. Läs det som '5 gånger 5' – det är bästa minnesregeln.
                example_code: |
                    ```
                    {print} '5 plus 5 är ' 5 + 5
                    {print} '5 minus 5 är ' 5 - 5
                    {print} '5 gånger 5 är ' 5 * 5
                    ```
                start_code: '{print} ''5 gånger 5 är '' 5 * 5'
            12:
                story_text: |-
                    **Decimaltal**
                    Hittills har Hedy inte tillåtit decimaltal som 1.5, men nu tillåter vi det. Tänk på att datorer använder `.` för decimaltal.
                example_code: |
                    ```
                    {print} 'Två och en halv plus två och en halv är …'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimaltal behöver nu använda en punkt'
                    {print} 2.5 + 2.5
    parrot:
        name: Papegoja
        default_save_name: Papegoja
        description: Skapa din egen papegoja som härmar dig!
        levels:
            1:
                story_text: |
                    Skapa din egen papegoja som härmar dig!
                example_code: |
                    ```
                    {print} Jag heter papegojan Hedy
                    {ask} vad heter du?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Låt papegojan ställa en annan fråga. Fyll i de tomma rutorna i exemplet!
                    **Extra** Du kan också låta papegojan ställa flera frågor. Lägg till några fler rader kod under din egen kod.
                example_code_2: |
                    ```
                    {print} Jag heter papegojan Hedy
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Jag är papegojan Hedy
                    {ask} Vad heter du?
                    {echo}
                    {echo}
            2:
                story_text: |
                    På förra nivån skapade du en papegoja som härmar dig. På den här nivån kommer vi att göra papegojan interaktiv med en variabel och `{ask}`-kommandot.
                    Vi kommer också att göra papegojan mer verklighetstrogen genom att lägga till `{sleep}`-kommandon efter att något har sagts.
                example_code: |
                    ```
                    {print} Jag är papegojan Hedy
                    namn _ _ vad heter du?
                    {print} namn
                    _
                    {print} skri
                    _
                    {print} namn
                    ```
                story_text_2: |
                    ### Övning
                    Avsluta först rad 2 med ett `{is}`- och ett `{ask}`-kommando.
                    Fyll sedan i ett `{sleep}`-kommando på rad 4 och 6 för att låta papegojan vara tyst en liten stund.

                    **Extrauppgift** Kan du få papegojan att fråga efter mer än bara ditt namn genom att lägga till fler rader kod?
                start_code: '{print} Jag är papegojan Hedy!'
            3:
                story_text: |
                    Lär din papegoja ett nytt ord med `{add}`.
                    ### Övning
                    Kan du lägga till kommandot `{add} {to}` för att få koden att fungera?
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} Träna din papegoja!
                    nytt_ord {is} {ask} Vilket ord vill du lära den?
                    _ nytt_ord _ ord
                    {print} 🧒 Säg nytt_ord, Hedy!
                    {print} 🦜 ord {at} {random}
                    ```
                start_code: '# placera din kod här'
            4:
                story_text: |
                    På den här nivån måste vi använda citattecken i kommandona `{ask}` och `{print}`.
                    ### Övning
                    Komplettera koden genom att fylla i citattecken på de tomma platserna.
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} _ Träna din papegoja! _
                    nytt_ord {is} {ask} _ Vilket ord vill du lära den? _
                    {add} nytt_ord {to_list} ord
                    {print} _ 🧒 Säg _nytt_ord _, hedy!_
                    {print} _ 🦜 _ ord {at} {random}
                    ```
                start_code: '# Skriv din kod här'
            5:
                story_text: |
                    Belöna din papegoja om den säger rätt ord!

                    ### Övning
                    Avsluta koden genom att fylla i de fyra saknade kommandona.
                example_code: |
                    ```
                    ord {is} skri, Hedy
                    {print} 'Träna din papegoja!'
                    nytt_ord {is} {ask} 'Vilket ord vill du lära den?'
                    {add} nytt_ord {to_list} ord
                    sagt_ord {is} ord {at} {random}
                    {print} '🧒 Säg ' nytt_ord', Hedy!'
                    {print} '🦜' sagt_ord
                    _ sagt_ord {is} nytt_ord _ '🧒 Bra jobbat, Hedy! 🍪'
                    _ _ '🧒 Nej, Hedy! Säg ' nytt_ord
                    ```
                start_code: '# placera din kod här'
    piggybank:
        name: Spargris
        default_save_name: Spargris
        description: Räkna dina fickpengar!
        levels:
            12:
                story_text: |
                    I det här äventyret får du lära dig att göra en digital spargris.

                    ### Övning
                    Gör klart koden för att beräkna hur mycket pengar du har och hur lång tid du behöver spara för att köpa det du vill ha!
                    **Extrauppgift** Kanske har du redan sparat lite pengar? Dra av det från det belopp som du kommer att behöva spara ihop.
                example_code: |
                    ```
                    {print} 'Den digitala spargrisen'
                    önskan = {ask} 'Vad skulle du vilja köpa?'
                    pris = {ask} 'Vad kostar det?'
                    sparat = {ask} 'Hur mycket pengar har du redan sparat?'
                    fickpeng = {ask} 'Hur mycket fickpengar får du per vecka?'
                    att_spara = pris - sparat
                    veckor = att_spara / fickpeng
                    {print} 'Du kan köpa en ' _ ' om ' _ ' veckor.'
                    ```
                start_code: '# skriv din kod här'
            14:
                story_text: |
                    På den här nivån kan du låta Hedy berätta för dig om du har sparat tillräckligt med pengar!
                example_code: |
                    ```
                    pengar = {ask} 'Hur mycket pengar har du sparat?'
                    önskan = {ask} 'Hur mycket pengar behöver du?'
                    veckopeng = {ask} 'Hur mycket fickpengar får du varje vecka?'
                    att_spara = önskan - pengar
                    veckor = att_spara / veckopeng
                    {if} önskan > pengar
                        {print} 'Du måste spara lite mer!'
                        {print} 'Du behöver ' veckor ' veckor till.'
                    {else}
                        {print} 'Bra! Du har tillräckligt'
                        {print} 'Nu handlar vi!'
                    ```
                start_code: '# skriv din kod här'
    pressit:
        name: Knapptryckningar
        default_save_name: Tryckt
        description: Prova att koppla en tangent till ett kommando!
        levels:
            5:
                story_text: |
                    På den här nivån finns ytterligare ett nytt nyckelord: `{pressed}`!
                    Med `{pressed}` kan du använda tangenterna på ditt tangentbord för att styra vilka rader som används.

                    ### Övning
                    Titta på exemplet och lägg till ytterligare en kodrad som reagerar på en tangenttryckning.
                example_code: |
                    ```
                    {print} 'Vill du ha ett lyckligt (l) eller olyckligt (o) slut?'
                    {if} l {is} {pressed} {print} 'De levde lyckliga i alla sina dagar ❤'
                    {else} {print} 'Prinsen blev uppäten av en flodhäst 😭'
                    ```
                story_text_2: |
                    Du kan också koppla sköldpaddskommandon till knappar.

                    ### Övning
                    Kopiera raderna några gånger så att du kan skapa en större ritning.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# skriv din kod här'
            7:
                story_text: |
                    Nu när du har lärt dig om `{repeat}`, kan vi trycka på tangenterna flera gånger.
                    Du kan använda det för att få sköldpaddan att gå framåt och vända sig.

                    ### Övning
                    Koden som du har sett på nivå 5 kontrollerar bara tangenten en gång. Kopiera exempelkoden och lägg till en `{repeat}` till den, så att du kan trycka på tangenterna många gånger.
                    Använd denna kod för att rita något snyggt.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# skriv din kod här'
            9:
                story_text: |
                    Nu när du vet hur man kombinerar påståenden kan du skapa ett verktyg för att skriva på tangentbord med `{pressed}`-kommandot.

                    ### Övning
                    Gör klart koden. Varje gång ska en slumpmässig bokstav väljas, som du måste trycka på. Du får en poäng för en korrekt tryckning och två poängs avdrag för en felaktig tryckning.
                    **Extrauppgift** Rensa skärmen efter varje bokstav, och visa användaren hur många poäng de har fått.
                example_code: |
                    ```
                    poäng = 0
                    bokstäver = a, b, c, d, e
                    {repeat} 10 {times}
                        bokstav = _ _ _
                        {print} 'Tryck på bokstaven ' bokstav
                        {if} bokstav {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# skriv din kod här'
    print_command:
        name: '{print}'
        default_save_name: skriv
        description: Introduktion till kommandot print
        levels:
            1:
                story_text: |
                    ## Kommandot skriv
                    Du kan skriva ut text på skärmen med kommandot `{print}`.
                example_code: |
                    ```
                    {print} Hej, programmerare!
                    {print} Välkommen till Hedy!
                    ```
                story_text_2: |
                    ### Övning
                    I Hedy hittar du övningar i varje äventyr. En övning ger dig möjlighet att öva på de nya kommandona och begreppen och låter dig gör exempelkoden mer personlig.
                    I den här övningen ser du ett rosa tomt utrymme. Du måste fylla i det tomma utrymmet innan koden kan köras.

                    Fyll i kommandot `{print}` i det tomma utrymmet och lägg sedan till ytterligare fem rader kod. Varje rad måste börja med ett `{print}`-kommando.
                    Ha så kul!
                example_code_2: |
                    ```
                    _ Hej!
                    ```
                start_code: |
                    {print} Välkommen till Hedy!
            18:
                story_text: |-
                    Vi har kommit fram till riktig Python-kod! Det betyder att vi måste använda parenteser med `{print}` och `{range}` från och med nu.
                    Det betyder också att du kan använda Hedy-kod från den här nivån i vilken Python-miljö som helst så länge du använder de engelska nyckelorden. Om du inte har gjort det hittils kan du ställa om det i kommandomenyn.
                example_code: |
                    ```
                    {print}('Hej!')
                    {for} i {in} {range}(1, 10):
                       {print}('Detta är rad ', i)
                    ```
                story_text_2: Om du vill skriva ut mer än en sak måste du ha kommatecken mellan.
                example_code_2: |
                    ```
                    temperatur = 25
                    {print}('Det är ', temperatur, ' grader ute')
                    ```
                story_text_3: Den sista ändringen vi behöver göra för att få Python-kod är att ändra `{ask}` till `{input}`.
                example_code_3: |
                    ```
                    {print}('Jag heter Hedy!')
                    namn = {input}('Vad heter du?')
                    {print}('Du heter alltså ', namn)
                    ```
                start_code: |-
                    namn = 'Hedy'
                    {print}('Jag heter ', namn)
    quizmaster:
        name: Quizmästare
        default_save_name: Quizmästare
        description: Gör ditt eget quiz!
        levels:
            14:
                story_text: |
                    I det här äventyret kan du göra din egen frågesport! Fyll i luckorna, lägg till fler frågor och njut av din egen frågesport!
                    Du kan göra en frågesport om vad du vill: din hobby, ditt favoritdjur, din favoritbok eller vad som helst!
                example_code: |
                    ```
                    {print} 'Gör ditt eget quiz'
                    poäng_a = 0
                    poäng_b = 0
                    {print} 'Fråga'
                    {print} 'Svarsalternativ A'
                    {print} 'Svarsalternativ B'
                    svar = {ask} 'Vilket svar?'
                    {if} svar == 'A'
                        poäng_a = poäng_a + 1
                    {if} svar == 'B'
                        poäng_b = poäng_b + 1
                    {print} 'Slut på quizet!'
                    {print} 'Vi kollar resultatet!'
                    {if} poäng_a > poäng_b
                        {print} 'Du tillhör A-klubben'
                    {if} poäng_b > poäng_a
                        {print} 'Du tillhör B-klubben'
                    ```
                start_code: '# skriv din kod här'
    quotation_marks:
        name: '''citattecken'''
        default_save_name: citattecken
        description: Introduktion till citattecken
        levels:
            4:
                story_text: |
                    ## 'Citattecken'
                    På nivå 4 har `{ask}` och `{print}` ändrats.
                    Du måste sätta texten du vill skriva ut mellan citattecken.
                    Detta är bra, för nu kan du skriva ut alla ord du vill ha. Även orden du använde för att spara något med `{is}`.
                    De flesta programspråk använder citattecken vid utskrift, så vi kommer också ett steg närmare riktig programmering!
                example_code: |
                    ```
                    {print} 'Du måste använda citattecken från och med nu!'
                    svar {is} {ask} 'Vad behöver vi använda från och med nu?'
                    {print} 'Vi måste använda ' svar
                    ```
                story_text_2: |
                    ##  Sammandragningar i engelsk text
                    Obs! Tänk på att nu när vi använder citattecken kommer Hedy att bli förvirrad när du använder apostrof för sammandragningar som I'm eller What's.
                    Se till att ta bort dessa apostrofer och ändra stavningen till Im eller Whats om du skriver på engelska.
                    Kolla in exempelkoden för att se fel sätt att använda apostrof.
                example_code_2: |
                    ```
                    _ Detta är fel sätt att använda apostrof t.ex. i engelsk text_
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'Du måste använda citattecken från och med nu!'
                    svar {is} {ask} 'Vad behöver vi använda från och med nu?'
                    {print} 'Vi måste använda ' svar
            12:
                story_text: |
                    **All text måste stå inom citattecken**
                    Från och med den här nivån måste du också använda citattecken när du sparar en text med `=`:
                example_code: |
                    ```
                    namn = 'Roboten Hedy'
                    {print} 'Hej ' namn
                    ```
                story_text_2: |
                    **Alla element i listor behöver också citattecken**.
                    Listor är texter, så de behöver också citattecken. Tänk på att varje element i listan ska ha citattecken.
                    Detta gör att du kan spara två ord som ett element i listan, till exempel 'Iron Man'.
                example_code_2: |
                    ```
                    superhjältar = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superhjältar {at} {random}
                    ```
                story_text_3: |
                    **All text efter `{if}`-jämförelser behöver också citattecken**
                example_code_3: |
                    ```
                    namn = {ask} 'Vad heter du?'
                    {if} namn = 'Roboten Hedy'
                        {print} 'Hej på dig!'
                    ```
                story_text_4: |
                    **Tal behöver inte citattecken**
                    För tal använder du inte citattecken i `=`:
                example_code_4: |
                    ```
                    poäng = 25
                    {print} 'Du har ' poäng ' poäng'
                    ```
                start_code: |-
                    namn = {ask} 'Vad heter du?'
                    {if} namn = 'Roboten Hedy'
                        {print} 'Hej på dig!'
    random_command:
        name: random
        default_save_name: kommandot_random
        description: introduktion av kommandot random
        levels:
            3:
                story_text: |
                    ## På slump
                    På den här nivån kan du göra en lista med kommandot `{is}`. Du kan låta datorn välja ett slumpmässigt element från den listan. Det gör du med `{at} {random}`.
                example_code: |
                    ```
                    djur {is} hundar, katter, kängurur
                    {print} djur {at} {random}
                    ```
                story_text_2: |
                    Du kan använda kommandot `{at} {random}` i en mening också.
                example_code_2: |
                    ```
                    mat {is} smörgås, pizzaslice, sallad, burrito
                    {print} Jag ska ha mat {at} {random} till lunch.
                    ```
                story_text_3: |
                    ### Övning
                    Prova kommandot `{at} {random}` genom att göra din egen spelshow (som de på tv) där du väljer en dörr eller resväska och den innehåller ett stort pris!
                    Kan du göra det? Vi har redan lagt in de första raderna i exempelkoden.
                example_code_3: |
                    ```
                    {print} Den stora spelshowen!
                    {print} Det står tre resväskor framför dig …
                    valt {is} {ask} Vilken resväska väljer du?
                    priser {is} _
                    _
                    ```
                start_code: |
                    djur {is} hund, katt, känguru
                    {print} djur {at} {random}
            16:
                story_text: |-
                    Vi ska göra listor på Python-sättet, med hakparenteser runt listorna! Vi skriver också citattecken runt varje element som vi har lärt oss på tidigare nivåer.
                    Vi använder hakparenteser för att peka ut en plats i en lista. Kommandot {at} {random} kan inte längre användas.
                example_code: |
                    ```
                    vänner = ['Ahmed', 'Ben', 'Cayden']
                    lyckotal = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'lyckotalet för ' vänner[i]
                        {print} 'är ' lyckotal[i]
                    ```
                start_code: |-
                    frukt = ['äpple', 'banan', 'körsbär']
                    {print} frukt[slump]
    repeat_command:
        name: Upprepa
        default_save_name: kommandot_upprepa
        description: kommandot upprepa
        levels:
            7:
                story_text: |
                    ## Upprepa! Upprepa! Upprepa!
                    Nivå 7 lägger till kommandot `{repeat}`. `{repeat}` kan användas för att köra en kodrad flera gånger. Så här:

                    ### Övning
                    Lek litet med kommandot upprepa. Kan du göra happy birthday på bara tre rader kod istället för fyra nu?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy är kul!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Upprepa-kommandon och indrag
                    På den här nivån kan du upprepa flera rader kod med bara ett upprepa-kommando.
                    Det gör du genom att ha ett block med rader som du vill upprepa.
                    Raderna i det blocket kommer att behöva **indrag** .
                    Det betyder att man sätter fyra mellanslag i början av varje rad. Du måste också göra indrag även om ditt kodblock bara har en kodrad.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hej allihop'
                        {print} 'Allt detta upprepas fem gånger'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hej allihop!'
                        {print} 'Detta kommer att skrivas ut fem gånger'
            9:
                story_text: |
                    På den här nivån kan du inte bara använda flera rader med `{if}` och `{repeat}`, utan du kan också sätta ihop dem!
                    I exemplet ser du ett `{if}`-kommando inuti ett `{repeat}`-kommando. Det är också tillåtet tvärtom, och en `{if}` är också tillåten i en `{if}` och en `{repeat}` i en `{repeat}`.
                    Testa det!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        mat = {ask} 'Vad vill du äta?'
                        {if} mat {is} pizza
                            {print} 'najs!'
                        {else}
                            {print} 'pizza är bättre'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        mat = {ask} 'Vad vill du äta?'
                        {if} mat {is} pizza
                            {print} 'najs!'
                        {else}
                            {print} 'pizza är bättre'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: kommandot_upprepa_2
        description: kommandot upprepa 2
        levels:
            7:
                story_text: |
                    ## Upprepa med andra kommandon och med variabler
                    Du har övat på kommandot `{repeat}` i kombination med kommandot `{print}` nu, men visste du att du också kan använda andra kommandon med `{repeat}`?
                    I exempelkoden kan du se att `{repeat}` även kan användas med ett `{ask}`-, `{if}`- eller `{else}`-kommando.
                example_code: |
                    ```
                    {repeat} 2 {times} svar = {ask} 'Visste du att du kan ställa en fråga flera gånger?'
                    {if} svar {is} ja {repeat} 2 {times} {print} 'Det visste du redan!'
                    {else} {repeat} 3 {times} {print} 'Du har lärt dig något nytt!'
                    ```
                story_text_2: |
                    En annan intressant sak du kan göra med kommandot `{repeat}` är att använda variabler för att ställa in hur många gånger något ska upprepas. I exempelkoden kan du se att vi först frågar personen hur gammal den är.
                    Sedan, på rad 3, upprepas frågan 'ålder' gånger. Så vi använder variabeln 'ålder' med kommandot `{repeat}`.
                example_code_2: |
                    ```
                    {print} 'Hurra! Det är din födelsedag!'
                    ålder = {ask} 'Hur gammal är du nu?'
                    {repeat} ålder {times} {print} 'Hipp hipp hurra!'
                    ```
                start_code: |-
                    {repeat} 2 {times} svar = {ask} 'Visste du att du kan ställa en fråga flera gånger?'
                    {if} svar {is} ja {repeat} 2 {times} {print} 'Det visste du redan!'
                    {else} {repeat} 3 {times} {print} 'Du har lärt dig något nytt!'
            8:
                story_text: |
                    ### Inuti blocket eller inte?
                    På den här nivån måste du tänka noga vilka rader kod som ska vara i blocket och vilka som inte ska vara det.
                    Till exempel: Du vill sjunga låten *the muffin man*. Då vill du att bara raden med 'the muffin man' ska upprepas två gånger.
                    Det betyder att den sista raden inte ska börja med indrag eftersom den inte hör till blocket.
                    Om du börjar den sista raden med indrag kommer låten att bli fel.

                    ## Övning
                    Varje rad i exempelkoden börjar med ett mellanrum. Ta bort mellanrummen och försök ta reda på vilken rad som behöver dras in och vilken som inte ska dras in för att sjunga sången.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'Den här raden kommer att upprepas …'
                        {print} 'Den här också …'
                    {print} 'men inte denna!'
    restaurant:
        name: Restaurang
        default_save_name: Restaurang
        description: Skapa din egen virtuella restaurang
        levels:
            1:
                story_text: |
                    På nivå 1 kan du göra din egen virtuella restaurang och ta emot dina gästers beställningar.
                example_code: |
                    ```
                    {print} Välkommen till Hedys restaurang 🍟
                    _ Vad vill du beställa?
                    {echo} Så du vill beställa
                    {print} Tack för din beställning!
                    {print} Den är på väg!
                    ```
                story_text_2: |
                    ### Övning
                    Kopiera exempelkoden till din inmatningsskärm genom att klicka på den gula knappen.
                    Fyll först i rätt kommando på de tomma platserna för att koden ska fungera korrekt.
                    Lägg sedan till minst fyra rader kod till restaurangprogrammet.
                    Fråga kunden vad han eller hon vill dricka och fråga om han eller hon vill betala med kontanter eller kort.
                    Fundera till sist ut ett trevligt sätt att säga hejdå till din kund.
                start_code: '# skriv din kod här'
            2:
                story_text: |
                    På nivå 2 kan du utöka din restaurang genom att använda variabler. På nivå 1 kunde Hedy bara `{echo}` beställningen en gång och bara komma ihåg det sista som beställdes.
                    Nu kan du använda variabler och Hedy kan komma ihåg både maten och påläggen!
                example_code: |
                    ```
                    {print} Välkommen till Hedys restaurang!
                    {print} Idag serverar vi pizza eller lasagne.
                    mat {is} {ask} Vad vill du äta?
                    {print} Bra val! Det är min älsklingsrätt!
                    topping {is} {ask} Vill du ha kött eller grönsaker till?
                    {print} mat med topping är på väg!
                    ```
                story_text_2: |
                    #### Övning
                    Kopiera din egen restaurangkod från föregående nivå till inmatningsskärmen nedan.
                    Rätta koden genom att byta ut kommandona `{ask}` och `{echo}` och använda variabler, som du har lärt dig på den här nivån.

                    Nu när din kod fungerar igen är det dags att lägga till något mer.
                    Titta på den sista raden i exempelkoden: `{print} mat med topping är på väg!`
                    På den raden används två variabler för att skapa en sammanfattning av beställningen.
                    Lägg nu till din egen sammanfattning av den mat och dryck som kunden beställt.

                    **Extra** Nu när du har lärt dig hur man använder variabler kan du använda så många variabler i en rad som du vill. Kan du lägga till fler variabler i din kod, till exempel äta på plats eller take away, kontant eller kort, med eller utan sugrör osv.
                start_code: '# skriv din kod här'
            3:
                story_text: |
                    Har du svårt att bestämma vad du vill äta till middag? Du kan låta Hedy välja åt dig!
                    Lägg helt enkelt till listor över dina favoriträtter (eller minst favoriträtter) så kan Hedy slumpmässigt välja din middag.
                    Du kan också ha lite kul genom att låta Hedy välja priset för din middag också! Vad kommer du att få?
                example_code: |
                    ```
                    rätter {is} spagetti, brysselkål, hamburgare
                    {print} Du kommer att få rätter {at} {random} ikväll!
                    priser {is} 1 euro, 10 euro, 100 euro
                    {print} Det kostar priser {at} {random} tack.
                    ```
                story_text_2: |
                    ### Övning
                    Gör nu din egen version av den slumpmässiga restaurangen.
                    Gör själv en lista över förrätter, huvudrätter, efterrätter, drycker och priser.
                    Använd sedan kommandona `{print}` och `{at} {random}` för att tala om för kunden vad som kommer att finnas menyn ikväll.
                example_code_2: |
                    ```
                    {print} Välkommen till din egen slumpmässiga restaurang!
                    förrätter {is} _
                    huvudrätter {is} _
                    efterrätter {is} _
                    drycker {is} _
                    priser {is} _
                    _
                    ```
                start_code: '# skriv din kod här'
            4:
                story_text: |
                    På den här nivån måste du använda citattecken när du använder kommandona `{print}` eller `{ask}`.

                    ### Övning
                    Lägg till citattecken till den här koden för att få det att fungera! Var försiktig: variabler ska inte vara inom citattecken.
                    Använd sedan kommandot `{clear}` för att bara visa en rad i taget på utdataskärmen.

                    ### Övning 2
                    Gå tillbaka till föregående nivå och kopiera din restaurangkod. Få koden att fungera på den här nivån genom att lägga till citattecken på rätt ställen och lägga till några `{clear}`-kommandon.
                example_code: |
                    ```
                    _ Lägg till citattecken i den här koden _
                    {print} Välkommen till Restaurang Chez Hedy!
                    {print} Idag serverar vi pizza eller lasagne.
                    mat {is} {ask} Vad vill du äta?
                    {print} Bra val! Det är min älsklingsrätt!
                    topping {is} {ask} Vill du ha kött eller grönsaker till det?
                    {print} mat med topping är på väg!
                    dryck {is} {ask} Vad vill du dricka till?
                    {print} Tack för din beställning.
                    {print} Din mat och dryck kommer strax!
                    ```
                start_code: '# skriv din kod här'
            5:
                story_text: |
                    ### Övning
                    Exempelkoden visar hur du kan programmera att du har slut på ett menyalternativ i din restaurang.
                    Kopiera din egen restaurangkod från de tidigare nivåerna. Skapa ett problem i din restaurang och koda det, som i exempelkoden.
                    Du kan till exempel också få slut på ett menyalternativ, eller så tar du inte kreditkort eller så är glassmaskinen trasig.

                    **Extrauppgift** Har du programmerat problemet och lämpliga svar? Försök sedan att lägga till fler `{if}`- och `{else}`-kommandon i din kod.
                    Försök att lägga till en `{if}` efter varje `{ask}`-kommando i din kod för att göra den så interaktiv som möjligt!
                example_code: |
                    ```
                    drycker_i_lager {is} vatten, läsk, cola, apelsinjuice
                    dryck {is} {ask} 'Vad vill du dricka?'
                    {if} dryck {in} drycker_i_lager {print} 'En' dryck 'på väg!'
                    {else} {print} 'Tyvärr, vi har inte det'
                    ```
                start_code: '# skriv din kod här'
            6:
                story_text: |
                    På den här nivån kan du använda matematik för att beräkna det totala priset på din kunds beställning, vilket kan göra din virtuella restaurang mer realistisk.
                    Men du kan också lägga till många fler saker till din virtuella restaurang, till exempel fler rätter.

                    ### Övning
                    Du kan lägga till många fler saker till din virtuella restaurang. Kan du till exempel …
                    - fråga hur många som kommer och multiplicera priset med det beloppet?
                    - lägga till en ny rätt?
                    - ge folk rabatt när de anger en (hemlig) kupongkod?
                    - lägga till en barnmeny?
                    - komma på andra roliga saker att lägga till?
                example_code: |
                    Du kan skapa en enkel restaurangkod, så här:
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy'
                    {print} 'Här är vår meny:'
                    {print} 'Våra huvudrätter är pizza, lasagne eller spagetti'
                    huvudrätt = {ask} 'Vilken huvudrätt vill du ha?'
                    pris = 0
                    {if} huvudrätt {is} pizza pris = 10
                    {if} huvudrätt {is} lasagne pris = 12
                    {if} huvudrätt {is} spagetti pris = 8
                    {print} 'Du har beställt ' huvudrätt
                    {print} 'Det blir ' pris ' dollar, tack'
                    {print} 'Tack, smaklig måltid!'
                    ```
                start_code: '# skriv din kod här'
            7:
                story_text: |
                    På den här nivån har du lärt dig hur du använder kommandot `{repeat}` för att upprepa en kodrad ett visst antal gånger.
                    Du kan använda det i din restaurang för att `{ask}` flera personer vad de vill äta.

                    ### Övning
                    Kan du komplettera koden? Hedy måste upprepa den här frågan lika många gånger som det finns människor. Så om det finns fem personer måste frågan ställas fem gånger.
                    **Extrauppgift** Utöka din kod med fler frågor, till exempel om drycker eller sås.
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy'
                    people = {ask} 'Hur många personer är det i sällskapet?'
                    ```
                start_code: '# skriv din kod här'
            8:
                story_text: |
                    På den här nivån kan du göra din virtuella restaurang mer avancerad genom att upprepa flera kodrader. Till exempel så här:
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy!'
                    personer = {ask} 'Hur många personer är det i sällskapet idag?'
                    {print} 'Bra!'
                    {repeat} personer {times}
                        mat = {ask} 'Vad skulle du vilja beställa?'
                        {print} mat
                    {print} 'Tack för beställningen!'
                    {print} 'Smaklig måltid!'
                    ```
                story_text_2: |
                    ### Övning
                    Den här koden kan utökas med fler alternativ på menyn, t.ex. drycker eller flera rätter eller efterrätter. Lägg till minst ett ytterligare alternativ.
                    **Extrauppgift** Lägg till ännu fler artiklar, så många alternativ du vill!
                start_code: '# skriv din kod här'
            9:
                story_text: "På den här nivån kan du använda dig av nästlad kod för att göra din restaurang mer realistisk och roligare!\n\n### Övning\nIndragen (mellanslagen) togs bort i exempelkoden. \nKan du räkna ut hur mycket indrag varje rad behöver för att koden ska fungera korrekt?\nOm kunden\
                    \ beställer pizza ska Hedy inte fråga vilken sås kunden vill ha.\n\n**Extrauppgift** En restaurang har inte alla såser i lager. Gör en lista över tillgängliga såser och ge ett svar vid varje beställning om ni säljer den. <br>\n**Extrauppgift** Pizzor har en fyllning. Fråga kunderna\
                    \ vad de vill ha.<br>\n**Extrauppgift** Vill kunderna ha något att dricka? Fråga dem också! <br>\n"
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Chez Hedy!'
                    people = {ask} 'Hur många personer är det i sällskapet?'
                    {print} 'Bra!'
                    pris = 0
                    {repeat} personer {times}
                    _ mat = {ask} 'Vad önskas?'
                    _ {print} mat
                    _ {if} mat {is} pommes frites
                    _ pris = pris + 3
                    _ sås = {ask} 'Vilken typ av sås vill du ha till dina pommes frites?'
                    _ {if} sås {is} nej
                    _ {print} 'ingen sås'
                    _ {else}
                    _ pris = pris + 1
                    _ {print} 'med ' sås
                    _ {if} mat {is} pizza
                    _ pris = pris + 4
                    {print} 'Det blir ' pris ' dollar'
                    {print} 'Smaklig måltid!'
                    ```
                start_code: '# skriv din kod här'
            10:
                story_text: |
                    På den här nivån lär du dig hur du enkelt tar upp beställningar för olika maträtter.

                    ### Övning 1
                    Gör klart koden med en `{ask}` där det är tomt så att kunden får en fråga vad de vill äta för varje rätt.
                example_code: |
                    ```
                    rätter = förrätt, varmrätt, efterrätt
                    {for} rätt {in} rätter
                        {print} 'Vad önskas till ' rätt '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### Övning
                    Naturligtvis kan du också beställa för flera personer!
                    Kan du lägga till rätt mängd indrag före varje rad så att koden fungerar korrekt?
                    Tips: Vissa rader behöver inte ha någon indragning alls.
                example_code_2: |
                    ```
                    _ rätter = förrätt, varmrätt, efterrätt
                    _ namn = Timon, Onno
                    _ {for} namnet {in} namn
                    _ {for} rätt {in} rätter
                    _ mat = {ask} namnet ', vad vill du ha till ' rätt '?'
                    _ {print} namnet ' beställer ' mat ' till ' rätt
                    ```
                start_code: rätter = förrätt, huvudrätt, efterrätt
            11:
                story_text: |
                    Vi kan använda `{for}` med `{range}` för att skriva ut beställningar från flera kunder på ett ordnat sätt.

                    ### Övning
                    Avsluta restaurangkoden så att du kan ta upp en beställning av flera personer. Skriv ut ordernumret varje gång: 'Order 1', 'Order 2' osv.
                    Är du osäker på hur du ska gå till väga? Ta en titt på din nivå 8-kod.

                    **Extrauppgift** På nivå 9 använde restaurangen även priser. Det kan du lägga till här också!
                example_code: |
                    ```
                    {print} 'Välkommen till restaurang Hedy!'
                    människor = {ask} 'För hur många personer vill du beställa?'
                    {print} 'Du vill alltså beställa för ' människor ' människor.'
                    {print} 'Då börjar vi!'
                    ```
                start_code: '# skriv din kod här'
            12:
                story_text: |
                    Från och med den här nivån kan du använda decimaltal för att göra menyn mer realistisk.

                    ### Övning
                    Kan du komma på en kod för att ge dina vänner och din familj 15% rabatt?
                example_code: |
                    ```
                    pris = 0.0
                    mat = {ask} 'Vad önskas?'
                    dricka = {ask} 'Vad vill du dricka?'
                    {if} mat {is} 'hamburgare'
                        pris = pris + 6.50
                    {if} mat {is} 'pizza'
                        pris = pris + 5.75
                    {if} dricka {is} 'vatten'
                        pris = pris + 1.20
                    {if} dricka {is} 'läsk'
                        pris = pris + 2.35
                    {print} 'Det blir ' pris ' dollar, tack'
                    ```
                start_code: '# skriv din kod här'
            13:
                story_text: |
                    På den här nivån kommer du att lära dig nya kommandon för att utöka din kod ytterligare.

                    ### Övning 1
                    Placera ett `{and}` och ett `{or}` på den logiska platsen i programmet.

                    ### Övning 2
                    Utöka din restaurang med minst ett till `{and}` och ett `{or}`.
                    Skapa till exempel en speciell rabattkupong som endast gäller pizza, eller ge din kund en gratis dryck
                    med pommes frites och pannkakor. Eller något helt annat förstås!
                example_code: |
                    ```
                        {print} 'Detta är vår rabattmeny'
                        pris = pris - 3
                    {if} dryck {is} 'vatten' _ dryck {is} 'juice'
                        {print} 'Det är ett hälsosamt val'
                    {print} 'Det kostar ' pris ' dollar'
                    ```
                start_code: '# skriv din kod här'
            15:
                story_text: |
                    Med `{while}` kan du göra så att dina kunder kan fortsätta att lägga till beställningar tills de är klara.
                example_code: |
                    ```
                    {print} 'Välkommen till McHedy'
                    mer = 'ja'
                    {while} mer == 'ja'
                        order = {ask} 'Vad vill du beställa?'
                        {print} order
                        mer = {ask} 'Vill du beställa något mer?'
                    {print} 'Tack!'
                    ```
                start_code: '# skriv din kod här'
    rock:
        name: Sten, sax, påse
        default_save_name: Sten_2
        description: Gör ditt eget sten, sax, påse-spel
        levels:
            1:
                story_text: |
                    I nivå 1 kan du börja med ett sten, sax, påse-spel.

                    Med `{ask}` kan du göra ett val, och med `{echo}` kan du upprepa det valet.
                example_code: |
                    ```
                    {print} Vad väljer du?
                    {ask} Välj mellan sten, sax eller påse.
                    {echo} Så ditt val var:
                    ```
                story_text_2: |
                    ### Övning
                    Istället för att använda ord skulle man kunna använda emojier: ✊✋✌
                    Kan du skriva en kod med emojier?
                example_code_2: |
                    ```
                    {print} vad väljer du?
                    {ask} välj bland _
                    {echo} så ditt val var:
                    ```
                start_code: |
                    {print} Välkommen till din egen sten sax påse!
                    {ask} Vad väljer du?
            2:
                story_text: |
                    På den här nivån kan du öva på att variablerna, så att du kan göra spelet sten, sax, påse på nästa nivå!
                    ### Övning
                    Avsluta koden genom att fylla i **variabeln** i tomrummen.
                    Det här spelet är inte särskilt interaktivt, men inga bekymmer! På nästa flik kommer du att lära dig hur du använder variabler med kommandot `{ask}` för att göra ditt spel interaktivt!
                example_code: |
                    ```
                    val är sten
                    {print} Jag väljer _
                    ```
                start_code: '# skriv din kod här'
            3:
                story_text: |
                    Du kan använda kommandot `{at} {random}` för att låta datorn välja sten, sax eller påse!

                    ### Övning
                    Avsluta koden genom att använda kommandot `{at} {random}`.
                example_code: |
                    ```
                    val {is} sten, sax, påse
                    {print} val _
                    ```
                story_text_2: |
                    **Extra** Gör ett spel för två spelare. Be först de två spelarna att mata in sina namn. Låt sedan datorn slumpmässigt välja åt dem.
                example_code_2: |
                    ```
                    val {is} sten, sax, påse
                    spelare_1 {is} {ask} Namn på spelare 1:
                    _
                    ```
                start_code: '{print} Välkommen till ditt eget sten, sax, påse!'
            4:
                story_text: |
                    På den här nivån kan vi också programmera sten, sax, påse. Men om du vill lägga till text måste du använda citattecken även här.
                    ### Övning
                    Kopiera din kod från föregående nivå och få den att fungera genom att använda citattecken efter varje `{print}` - eller `{ask}` -kommando.
                start_code: '{print} ''Välkommen till ditt eget sten, sax, påse!'''
            5:
                story_text: |
                    På den här nivån kan vi avgöra om det är oavgjort eller inte. För det behöver du det nya nyckelordet `{if}`.

                    ### Övning
                    Avsluta koden genom att fylla i luckorna:
                    * Låt datorn välja ett slumpmässigt alternativ
                    * Fråga spelaren vad han eller hon vill välja
                    * Fyll i de korrekta variablerna på rad 4 och 5.
                    * Gör klart rad 6 så att Hedy kan kolla om det är oavgjort eller inte.
                example_code: |
                    ```
                    alternativ {is} sten, sax, påse
                    datorns_val {is} _
                    val {is} _
                    {print} 'du valde ' _
                    {print} 'datorn valde ' _
                    {if} _ {is} _ {print} 'oavgjort!' {else} {print} 'inte oavgjort'
                    ```

                    Fyll i rätt kod i tomrummen för att se om det är oavgjort.
                start_code: '{print} ''Välkommen till ditt eget sten, sax, påse!'''
            9:
                story_text: "På den här nivån kan du programmera hela spelet sten, sax, påse genom att nästla `{if}` -kommandon. \n\n### Övning\nKan du göra klart koden? Programmet behöver berätta vem som har vunnit för varje kombination.\n\n **Extrauppgift** Vill du spela mer än en omgång? Bygg ut koden\
                    \ så att du kan spela flera omgångar. Du kan till och med använda en `{ask}` för att fråga användaren hur många rundor hen vill spela.\n"
                example_code: |
                    ```
                    val {is} sten, sax, påse
                    ditt_val {is} {ask} 'Vad väljer du?'
                    {print} 'Du väljer ' ditt_val
                    datorval {is} val {at} {random}
                    {print} 'Datorn väljer ' datorval
                    {if} datorval {is} ditt_val
                        {print} 'Oavgjort'
                    {if} datorval {is} sten
                        {if} ditt_val {is} påse
                            {print} 'Du vann!'
                        {if} ditt_val {is} sax
                            {print} 'Du förlorade!'
                    # gör klart koden
                    ```
                start_code: '# skriv din kod här'
            10:
                story_text: |
                    ### Övning
                    På de tidigare nivåerna har du ofta gjort ditt eget sten-sax-påse-spel. Kan du skriva klart koden och använda kommandot {for} rätt så spelet fungerar?
                example_code: |
                    ```
                    val = _
                    spelare = _
                    {for} _
                    ```
                start_code: '# skriv din kod här'
            13:
                story_text: |
                    Med kommandot `{and}` kan du förkorta din sten-, sax-, påsekod! Kolla in exempelkoden.

                    ### Övning
                    Gör färdigt koden så att en vinnare alltid koras. Kör din kod några gånger för att kolla att vinnaren alltid skrivs ut.
                example_code: |
                    ```
                    alternativ = 'sten', 'sax', 'påse'
                    ditt val = {ask} 'Vad väljer du?'
                    datorval = alternativ {at} {random}
                    {print} 'Du väljer' ditt_val
                    {print} 'Datorn väljer ' datorval
                    {if} datorval {is} ditt_val
                        {print} 'Oavgjort'
                    {if} datorval {is} 'sten' {and} ditt_val {is} 'påse'
                        {print} 'Du vann!'
                    {if} datorval {is} 'sten' {and} ditt_val {is} 'sax'
                        {print} 'Datorn vann!'
                    _
                    ```
                start_code: '# skriv din kod här'
            15:
                story_text: |
                    Spela tills du slår datorn! Men först måste du göra klart exempelkoden …
                example_code: |
                    ```
                    vunnit = 'nej'
                    alternativ = 'sten', 'sax', 'påse'
                    {while} vunnit == 'nej'
                        ditt_val = {ask} 'Vad väljer du?'
                        datorval = alternativ {at} {random}
                        {print} 'du valde ' ditt_val
                        {print} 'datorn valde ' datorval
                        {if} datorval == ditt_val
                            {print} 'Oavgjort!'
                        {if} computer_choice == 'sten' {and} your_choice == 'sax'
                            {print} 'Du förlorade!'
                        {if} computer_choice == 'sten' {and} your_choice == 'påse'
                            {print} 'Du vann!'
                            vunnit = 'ja'
                    _
                    ```
                start_code: '# skriv din kod här'
    rock_2:
        name: Sten, sax, påse 2
        default_save_name: sten_2
        description: Del 2 av sten, sax, påse
        levels:
            2:
                story_text: |
                    Nu när du har lärt dig använda kommandot `{ask} kan du göra din sten, sax, påse-kod interaktiv också!

                    ### Övning
                    Gör sten, sax, påse-koden interaktiv genom att lägga till kommandot `{ask}` och en fråga.
                example_code: |
                    ```
                    val är _
                    {print} Jag väljer val
                    ```
                start_code: '# skriv din kod här'
    secret:
        name: SuperSpion
        default_save_name: SuperSpion
        description: Skapa din egen spionkod
        levels:
            12:
                story_text: |
                    I det här äventyret kan du skapa din egen superspionkod. Koda ett meddelande som bara rätt agent kan avkoda.
                    Om fienden försöker knäcka koden kommer de att få falsk information för att slösa på deras tid.

                    ### Övning 1
                    Gör din egen hemliga kod för din superspion och lämna tillbaka båda delarna bara till den rätta spionen.

                    ### Övning 2
                    Lägg till en tredje komponent till koden, till exempel ett klädesplagg eller ett föremål.
                example_code: |
                    ```
                    namn {is} {ask} 'Vad heter du?'
                    om namn {is} '_'
                        a {is} 'Åk till flygplatsen'
                    {else}
                        a {is} 'Åk till tågstationen'
                    lösenord {is} {ask} 'Vad är lösenordet?'
                    {if} lösenord {is} _
                        b {is} 'imorgon kl. 02.00'
                    {else}
                        b {is} 'idag kl. 10.00'
                    {print} _ _ _
                    ```
                start_code: '# ha din kod här'
            13:
                story_text: |
                    Vi kan förenkla superspionkoden med `{and}`, så att vi bara behöver en `{if}`.

                    ### Övning 1
                    Komplettera koden genom att fylla i det rätta kommandot på den tomma platsen. Tips: Superspionen måste besvara BÅDA frågorna korrekt innan hen får den hemliga informationen!

                    ### Övning 2
                    Vi vill förvirra fienden ännu mer! Skapa en lista med falska svar och välj ett slumpmässigt när ett felaktigt svar ges.
                example_code: |
                    ```
                    name {is} {ask} 'Vad heter du?'
                    lösenord {is} {ask} 'Vad är ditt lösenord?'
                    {if} namn {is} 'Agent007' _ lösenord {is} 'TOPSECRET'
                        {print} 'Åk till flygplatsen kl. 02.00'
                    {else}
                        {print} 'Åk till tågstationen kl. 10.00'.
                     ```
                start_code: '# ha din kod här'
    sleep_command:
        name: '{sleep}'
        default_save_name: kommandot_sov
        description: introduktion till kommandot sov
        levels:
            2:
                story_text: |
                    Ett annat nytt kommando på denna nivå är `{sleep}`, som pausar ditt program i en sekund. Om du skriver ett tal efter kommandot {sleep}, pausas programmet i det antalet sekunder.

                    ### Övning
                    Öva på det nya kommandot genom att göra egen kod där du använder kommandot {sleep} minst 3 gånger. För varje {sleep}-kommando ska paustiden variera.
                example_code: |
                    ```
                    {print} Min favoritfärg är …
                    {sleep} 2
                    {print} grön!
                    ```
                start_code: |-
                    {print} Min favoritfärg är …
                    {sleep} 2
                    {print} grön!
    songs:
        name: Sjung en sång!
        default_save_name: Sång
        description: Skriv ut en sång
        levels:
            6:
                story_text: |
                    Sånger innehåller ofta många upprepningar. Ibland bygger upprepningarna också på räkning.
                    Till exempel i den välkända sången 'Bottles of beer'. Du kan programmera den låten med lite matematik.

                    Tips: Använd funktionen för högläsning för att låta Hedy sjunga sången för dig!

                    ### Övning
                    Du kan nu upprepa raderna 2 till 7 hur många gånger som helst genom att kopiera raderna.
                example_code: |
                    ```
                    vers = 99
                    {print} vers ' ölflaskor på väggen'
                    {print} vers ' ölflaskor'
                    {print} 'Ta en ner, skicka runt den'
                    vers = vers - 1
                    {print} vers ' ölflaskor på väggen'
                    {sleep}
                    ```
                story_text_2: |
                    Denna barnvisa räknar ner från fem små apor till en apa.
                    Om du kopierar rad 2–7 och klistrar in dem under koden kan du sjunga hela sången!
                example_code_2: |
                    ```
                    antal = 6
                    antal = antal - 1
                    {print} antal ' små apor som hoppar på sängen.'
                    {print} 'En av dem ramla ner av och slog huvudet.'
                    {print} 'Mamma ringde till doktorn och doktorn sa'
                    {print} 'INGA FLER APOR SOM HOPPAR PÅ SÄNGEN!'
                    {sleep}
                    ```
                start_code: '{print} ''Vi sjunger!'''
            7:
                story_text: |
                    Sånger innehåller ofta många upprepningar. Till exempel ... Baby Shark! Om du sjunger den sjunger du samma sak hela tiden:

                    Baby Shark tututududutudu <br>
                    Baby Shark tututududutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Övning
                    Kan du skriva ut låten Baby Shark med `{repeat}`? Avsluta koden genom att ersätta tomrummen i koden?
                    **Extra** Efter Baby Shark kan du naturligtvis också programmera andra låtar. Det finns många låtar med upprepning!
                    Kan du komma på en sång  tilloch skriva ut den?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    I en tidigare nivå har du programmerat låten 'Bottles of beer'. Men utan kommandot `{repeat}` var du tvungen att kopiera verserna många gånger.
                    I den här nivån kan du upprepa sången 99 gånger, bara genom att lägga till en endarad!

                    ### Övning
                    Lägg till rätt kommando på de tomma platserna och indentera koden på rätt sätt.
                example_code: |
                    ```
                    verse = 99
                    _ 99 {times}
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```
                start_code: '# placera din kod här'
            10:
                story_text: |
                    Med `{for}` kan du skriva ut hela sången om baby shark (inklusive alla andra hajar i familjen) på bara 6 rader!

                    ### Övning 1
                    Kan du göra baby shark-koden ännu kortare genom att använda kommandot `{for}`? Gör klart exempelkoden.
                example_code: "```\nfamily = baby, mammy, daddy, grandma, grandpa\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Övning 2
                    Skriv ut låten Fem små apor hoppade på sängen. Slå upp texten om du inte kommer ihåg.

                    **Extrauppgift** Skriv ut låten Old MacDonald had a farm och se till att alla djur gör olika ljud med hjälp av ett `{if}`.
                example_code_2: |
                    ```
                    apor = 5, 4, 3, 2, 1
                    ```
                start_code: '# placera din kod här'
            11:
                story_text: |
                    På den här nivån kan du använda `{for}` med `{range}` för att göra sånger där du räknar, till exempel fem små apor.

                    ### Övning 1
                    Fyll i luckorna och få koden att fungera! Om du inte kommer ihåg sångtexten kan du slå upp den själv.

                    ### Övning 2
                    Sångens sista rad skiljer sig från de andra. Skriv ut den raden inuti `{for}` och använd en `{if}` för att få den att fungera korrekt.
                example_code: |
                    ```
                    _ monkeys _ _ 5 _ 1
                        {print} monkeys ' little monkeys jumping on the bed'
                        _
                    ```
                start_code: '# placera din kod här'
            12:
                story_text: |
                    I den här sången kan vi göra det ännu enklare att programmera 'if you're happy and you know it, clap your hands'. Eftersom vi kan placera alla handlingar i en variabel, kolla in det:

                    ### Övning
                    Kan du lägga till rätt antal indrag (mellanslag) på varje rad för att få låten att spelas korrekt?
                    Tips: Alla rader behöver inte vara indragna.
                example_code: |
                    ```
                    _ handlingar = 'klappa händerna', 'stampa fötterna', 'ropa hej till nån'
                    _ {for} handling {in} handlingar
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} handling
                    _ {print} 'om du är riktigt glad'
                    _ {print} 'du kan också glädja andra som på denna jorden vandra'
                    _ {print} handling
                    _ {print} 'om du är riktigt glad'
                    ```
                start_code: '# placera din kod här'
            16:
                story_text: |
                    På den här nivån kan du programmera en sång som OldMacDonald ännu snabbare. Du kan koppla rätt djur till rätt ljud genom att helt enkelt placera dem på samma plats i listan.
                    The Drunken Sailor går också snabbt att göra på den här nivån. Du behöver bara åtta rader för hela låten; kolla in det här!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# placera din kod här'
            18:
                story_text: |
                    På nivå 16 gjorde vi låtar med hjälp av listor. De programmen fungerar inte längre korrekt på denna nivå. Kolonen från nivå 17 och parenteserna från nivå 18 behöver fortfarande läggas till.

                    ### Övning 1
                    Drunken sailor-låten ges som exempelkod, men fungerar inte än.
                    Kan du se till att allt fungerar igen? För att hjälpa dig har vi placerat _ på platsen för _några_ av felen.

                    ### Övning 2
                    Slå nu också upp din Old MacDonald-låt från nivå 16 och korrigera den.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# placera din kod här'
    tic:
        name: Luffarschack
        default_save_name: Tripp
        description: Spela en omgång Luffarschack!
        levels:
            13:
                story_text: |
                    I det här äventyetr kan du programmera en omgång Luffarschack. Två personer kan spela. I tur och ordning väljer du ett nummer på den plats (1–9) du vill sätta ditt tecken (x eller o) på.
                    Den första spelaren som får tre i rad (horisontellt, vertikalt eller diagonalt) vinner!

                    ### Övning 1
                    Spelet fungerar, men det har några problem. Till exempel kan alla spelare välja vilket fält som helst, även ett som redan tagits! Använd en `{if}` om platsen är tagen, och varna isåfall spelaren.

                    ### Övning 2
                    Spelet avgör inte heller vem som har vunnit. Du behöver lägga till detta genom att kontrollera om tre rutor på rad har samma symbol.

                    ### Övning 3 Extrauppgift
                    Man har inte alltid en kompis att spela med. Kan du skapa en datormotståndare?
                example_code: |
                    ```
                    spelare = 'x'
                    ruta = '.', '.', '.', '.', '.', '.', '.', '.', '.'

                    {for} i {in} {range} 1 {to} 9
                        val = {ask} 'Spelare ' spelare ', vilken plats väljer du?'
                        ruta {at} val = spelare
                        {clear}
                        print ruta {at} 1 ruta {at} 2 ruta {at} 3
                        print ruta {at} 4 ruta {at} 5 ruta {at} 6
                        print ruta {at} 7 ruta {at} 8 ruta {at} 9
                        {if} spelare = 'x'
                            spelare = 'o'
                        {else}
                            spelare = 'x'
                    ```
                start_code: '# Skriv din kod här'
            14:
                story_text: |
                    På de tidigare nivåerna har du gjort ett tripp-trapp-trull-spel. Nu har du lärt dig hur du använder =-tecknet, ==-tecknet och !=-tecknet.
                    Du kan använda den kunskapen i ditt nya Tripp Trapp Trull, så här:
                example_code: |
                    ```
                    tecken = 'x'
                    lediga_rutor = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spel = 'pågår'
                    ruta_1 = '.'
                    ruta_2 = '.'
                    ruta_3 = '.'
                    ruta_4 = '.'
                    ruta_5 = '.'
                    ruta_6 = '.'
                    ruta_7 = '.'
                    ruta_8 = '.'
                    ruta_9 = '.'
                    {print} 'LUFFARSCHACK!'
                    {print} ruta_1 ruta_2 ruta_3
                    {print} ruta_4 ruta_5 ruta_6
                    {print} ruta_7 ruta_8 ruta_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} spel != 'över'
                            val = {ask} 'Spelare ' tecken ', vilken ruta?'
                            {if} val {in} lediga_rutor
                                {remove} val {from} lediga_rutor
                                {if} val == 1
                                    ruta_1 = tecken
                                {if} val == 2
                                    ruta_2 = tecken
                                {if} val == 3
                                    ruta_3 = tecken
                                {if} val == 4
                                    ruta_4 = tecken
                                {if} val == 5
                                    ruta_5 = tecken
                                {if} val == 6
                                    ruta_6 = tecken
                                {if} val == 7
                                    ruta_7 = tecken
                                {if} val == 8
                                    ruta_8 = tecken
                                {if} val == 9
                                    ruta_9 = tecken
                            {else}
                                {print} 'Den rutan är redan tagen'
                            {print} ruta_1 ruta_2 ruta_3
                            {print} ruta_4 ruta_5 ruta_6
                            {print} ruta_7 ruta_8 ruta_9
                            {print} ' '
                            vinnare = {ask} 'Vann du?'
                            {if} vinnare == 'ja'
                                {print} 'Bra jobbat, spelare ' tecken '!'
                                spel = 'över'
                            {else}
                                {if} tecken == 'x'
                                    tecken = 'o'
                                {else}
                                    tecken = 'x'
                    ```
                start_code: '# ha din kod här'
            15:
                story_text: |
                    På den här nivån kan du förbättra ditt tripp-trapp-trull-spel med {while}-loopen. Med den loopen kan du kombinera `{if} game != 'over'` och `{for} i {in} {range} 1 {to} 9` till bara en kodrad.
                    Kolla själv:
                example_code: |
                    ```
                    tecken = 'x'
                    lediga_rutor = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spel = 'pågår'
                    ruta_1 = '.'
                    ruta_2 = '.'
                    ruta_3 = '.'
                    ruta_4 = '.'
                    ruta_5 = '.'
                    ruta_6 = '.'
                    ruta_7 = '.'
                    ruta_8 = '.'
                    ruta_9 = '.'
                    {print} 'LUFFARSCHACK!'
                    {print} ruta_1 ruta_2 ruta_3
                    {print} ruta_4 ruta_5 ruta_6
                    {print} ruta_7 ruta_8 ruta_9
                    {print} ' '
                    {while} spel != 'över'
                        val = {ask} 'Spelare ' tecken ', vilken ruta?'
                        {if} val {in} lediga_rutor
                            {remove} val {from} lediga_rutor
                            {if} val == 1
                                ruta_1 = tecken
                            {if} val == 2
                                ruta_2 = tecken
                            {if} val == 3
                                ruta_3 = tecken
                            {if} val == 4
                                ruta_4 = tecken
                            {if} val == 5
                                ruta_5 = tecken
                            {if} val == 6
                                ruta_6 = tecken
                            {if} val == 7
                                ruta_7 = tecken
                            {if} val == 8
                                ruta_8 = tecken
                            {if} val == 9
                                ruta_9 = tecken
                        {else}
                            {print} 'Den rutan var redan tagen'
                        {print} ruta_1 ruta_2 ruta_3
                        {print} ruta_4 ruta_5 ruta_6
                        {print} ruta_7 ruta_8 ruta_9
                        {print} ' '
                        vinnare = {ask} 'Vann du?'
                        {if} vinnare == 'ja'
                            {print} 'Bra jobbat, spelare ' tecken '!'
                            spel = 'över'
                        {else}
                            {if} tecken == 'x'
                                tecken = 'o'
                            {else}
                                tecken = 'x'
                    ```
                start_code: '# ha din kod här'
            17:
                story_text: |
                    På de tidigare nivåerna hade tripp-trapp-trull-spelet en irriterande funktion. Efter varje drag var man tvungen att själv fylla i om man hade vunnit eller inte.
                    Detta gjorde spelet spelbart, men också ganska långsamt. På den här nivån har vi lärt oss kommandot `{elif}`, som kan lösa det problemet.
                    Att använda `{elif}` för att låta Hedy kontrollera om en spelare har vunnit eller inte är kul, men det kräver också en hel del extra rader.

                    I exempelkoden ser du att vi lagt till kraven för att vinna (tre rutor på rad horisontellt, vertikalt eller diagonalt).
                    Du hittar dem på rad 46 till 69. Du kan se att varje gång kravet är uppfyllt (alltså om en spelare har vunnit) sätts variabeln spel till 'over'.
                    Detta innebär att `{while}`-slingan stoppas och att spelet avslutas.
                example_code: |
                    ```
                    tecken = 'x'
                    lediga_rutor = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    spel = 'på'
                    ruta_1 = '.'
                    ruta_2 = '.'
                    ruta_3 = '.'
                    ruta_4 = '.'
                    ruta_5 = '.'
                    ruta_6 = '.'
                    ruta_7 = '.'
                    ruta_8 = '.'
                    ruta_9 = '.'
                    {print} 'LUFFARSCHACK!'
                    {print} ruta_1 ruta_2 ruta_3
                    {print} ruta_4 ruta_5 ruta_6
                    {print} ruta_7 ruta_8 ruta_9
                    {print} ' '
                    {while} spel != 'över':
                        val = {ask} 'Spelare ' tecken ', vilken ruta?'
                        {if} val {in} lediga_rutor:
                            {remove} val {from} lediga_rutor
                            {if} val == 1:
                                ruta_1 = tecken
                            {if} val == 2:
                                ruta_2 = tecken
                            {if} val == 3:
                                ruta_3 = tecken
                            {if} val == 4:
                                ruta_4 = tecken
                            {if} val == 5:
                                ruta_5 = tecken
                            {if} val == 6:
                                ruta_6 = tecken
                            {if} val == 7:
                                ruta_7 = tecken
                            {if} val == 8:
                                ruta_8 = tecken
                            {if} val == 9:
                                ruta_9 = tecken
                        {else}:
                            {print} ‘Den rutan var redan tagen’
                        {print} ruta_1 ruta_2 ruta_3
                        {print} ruta_4 ruta_5 ruta_6
                        {print} ruta_7 ruta_8 ruta_9
                        {print} ' '
                        {if} ruta_1 == ruta_2 {and} ruta_2 == ruta_3 {and} ruta_1 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_4 == ruta_5 {and} ruta_5 == ruta_6 {and} ruta_4 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_7 == ruta_8 {and} ruta_8 == ruta_9 {and} ruta_7 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_1 == ruta_4 {and} ruta_4 == ruta_7 {and} ruta_1 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_2 == ruta_5 {and} ruta_5 == ruta_8 {and} ruta_2 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_3 == ruta_6 {and} ruta_6 == ruta_9 {and} ruta_3 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_1 == ruta_5 {and} ruta_5 == ruta_9 {and} ruta_1 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {elif} ruta_3 == ruta_5 {and} ruta_5 == ruta_7 {and} ruta_3 != '.':
                            {print} 'Spelare ' tecken ' vinner!'
                            spel = 'över'
                        {else}:
                            {if} tecken == 'x':
                                tecken = 'o'
                            {else}:
                                tecken = 'x'
                    ```
                start_code: '# ha din kod här'
    turtle:
        name: Sköldpadda
        default_save_name: Sköldpadda
        description: Gör din egen ritning
        levels:
            1:
                story_text: |
                    Du kan också rita med Hedy. Genom att kombinera svängar och linjer kan du göra en fyrkant eller trappa!

                    Med `{forward}` ritar du en linje framåt. Talet efter avgör hur långt sköldpaddan kommer att gå. `{turn} {right}` vrider ett kvarts varv medurs, `{turn} {left}` vrider moturs.

                    Om du vill gå bakåt använder du kommandot `{forward}` men med ett negativt tal. Till exempel `{forward} -100`

                    ### Övning
                    Det här är början på en liten trappa. Kan du göra så den får fem steg?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    På den här nivån kan du använda variabler för att göra sköldpaddan interaktiv. Du kan t.ex. fråga spelaren hur många steg sköldpaddan ska ta.
                example_code: |
                    ```
                    svar {is} {ask} Hur många steg ska sköldpaddan ta?
                    {forward} svar
                    ```
                story_text_2: |
                    På nivå 1 kunde sköldpaddan dessutom bara svänga till vänster eller höger. Det är lite tråkigt!
                    På nivå 2 kan den peka med näsan åt alla håll.

                    Använd 90 för att vrida en kvarts varv. Vi kallar detta för grader. Ett helt varv är 360 grader.

                    ### Övning
                    Kan du göra en figur med den här koden? Kanske en triangel eller en cirkel?
                example_code_2: |
                    ```
                    {print} Rita figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} Sköldpaddslopp!
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            3:
                story_text: |
                    På den här nivån kan du använda `{at} {random}` med sköldpaddan. Ett slumpmässigt val gör att sköldpaddan går en annan väg varje gång.
                    Använd `{at} {random}` för att välja ett värde från en lista.
                    ### Övning
                    Kan du kopiera och klistra in rad 2 och 3 för att skapa en längre slumpmässig väg?
                example_code: |
                    ```
                    vinklar {is} 10, 50, 90, 150, 250
                    {turn} vinklar {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    vinklar {is} 10, 50, 90, 150, 250
                    {turn} vinklar {at} {random}
                    {forward} 25
            4:
                story_text: |
                    På nivå 4 måste du använda citattecken med `{print}` och `{ask}`. Även när du ritar!
                example_code: |
                    ```
                    {print} _ Rita figurer _
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kan också ändra färgen på linjerna med kommandot `{color}`. Kolla in exemplet.
                    Du kan också använda kommandot `{color} {white}` för att skapa 'osynliga' linjer. Du kan använda dessa vita linjer för att flytta sköldpaddan var som helst på skärmen innan du börjar rita.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Rita figurer'
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            5:
                story_text: |
                    På nivå 5 kan du göra ett val med `{if}`, till exempel mellan olika typer av figurer.
                example_code: |
                    ```
                    {print} 'Rita figurer'
                    figur {is} {ask} 'Vill du ha en kvadrat eller en triangel?'
                    {if} figur {is} triangel vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### Övning
                    Fyll i rätt tal i den här koden för att få det att fungera.
                    När du har gjort det kan du försöka lägga till alternativet baklänges.

                    **Extra** Istället för att använda 'vänster' och 'höger', gör om programmet med nord, ost, syd och väst.
                    På så sätt kan du lägga till ännu fler vägbeskrivningar som nordost och sydväst etc.
                example_code_2: |
                    ```
                    riktning {is} {ask} "Vill du gå åt vänster, höger eller rakt fram?
                    {if} riktning {is} vänster {turn} _
                    {if} riktning {is} höger {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} 'Rita figurer'
                    figur {is} {ask} 'Vill du ha en kvadrat eller triangel?'
                    {if} figur {is} triangel vinkel {is} 120 {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            6:
                story_text: |
                    På den här nivån kan du använda beräkningar för att rita olika figurer.
                    Du kanske har lärt dig i skolan att det är 360 grader på ett helt varv. Om inte så vet du det nu!
                    Därför använder du 90 grader för en kvadrat. 360 dividerat med 4 är 90.
                    Nu när vi kan matte med Hedy kan vi rita alla figurer vi vill ha!
                example_code: |
                    ```
                    vinklar = {ask} 'Hur många vinklar vill du ha?'
                    vinkel = 360 / vinklar
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    ```
                start_code: '{print} ''Rita figurer'''
            8:
                story_text: "Nu när vi kan upprepa flera rader kan vi lättare skapa figurer.\n Vi behöver bara ställa in vinkeln en gång och sedan använda den variabeln i `{repeat}`.\n\n### Övning 1\nExempelkoden skapar en kvadrat. Ändra koden så att den skapar en annan figur, till exempel en triangel\
                    \ eller en sexhörning. \nDetta kräver en ändring av två kodrader.\nTips: En hel cirkel är 360 grader.\n \n### Övning 2\nSkapa nu en ritning som består av minst två polygoner.\n"
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 4 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    **Extrauppgift** Vi kan nu förbättra programmet för att rita olika figurer. Gör klart koden så kan du vilken polygon som helst!
                example_code_2: |
                    ```
                    figur = {ask} 'Hur många hörn ska jag rita?'
                    vinkel = 360 / figur
                    {repeat} figur {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: figur = {ask} 'Hur många vinklar ska jag rita?'
            9:
                story_text: |
                    Nu när vi kan använda en `{repeat}` inuti en `{repeat}`, kan vi skapa mer komplexa figurer.

                    ### Övning 1
                    Den här koden skapar tre svarta trianglar – ändra det till fem rosa kvadrater.

                     **Extrauppgift** Skapa en figur som du själv väljer som består av minst två olika former.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# skriv din kod här'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: kommandot_så_länge
        description: så länge
        levels:
            15:
                story_text: |-
                    Vi ska lära oss en ny slinga, `{while}`-slingan! Vi fortsätter slingan så länge påståendet är sant.
                    Så glöm inte att uppdatera värdet inuti slingan.

                    I exempelkoden fortsätter vi tills ett korrekt svar har getts.
                    Om det rätta svaret aldrig ges slutar slingan aldrig!
                example_code: |
                    ``
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Vad är 5 gånger 5?'
                    {print} 'Ett korrekt svar har getts'
                    ```
                start_code: |-
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Vad är 5 gånger 5?'
                    {print} 'Ett korrekt svar har getts'
    years:
        name: Nyårsdagen
        default_save_name: Nedräkning till nyår
        description: Nedräkning till det nya året!
        levels:
            11:
                story_text: |
                    På den här nivån kan du använda kommandot `{for}` number `{in}` `{range}` för att räkna ner till det nya året.

                    ### Övning
                    Fyll i luckorna och få koden att fungera!
                example_code: |
                    ```
                    {for} tal {in} {range} _ {to} _
                        {print} tal
                    {print} 'Gott nytt år!'
                    ```
                start_code: '# placera din kod här'
