adventures:
    story:
        name: 故事
        default_save_name: 故事
        description: 故事
        levels:
            1:
                story_text: |
                    在第1级中你可以自己添加角色创作一个有不同主角的故事动画。。

                    在第一行，使用`{ask}`，问谁是故事的主角。

                    在这第一行之后，如果需要打印这个句子，就用`{print}`开始这个句子。
                    如果你想让你的主角的名字出现在句子的末尾，你可以用`{echo}`。
                example_code: |
                    ```
                    {ask} 这个故事的主人公是（谁）
                    {print}主人公现在要到森林里去散步
                    {echo} 他有点害怕，
                    {print} 他听到到处都有疯狂的声音
                    {print} 他害怕这是一片闹鬼的森林
                    ```
                story_text_2: |
                    ### 练习
                    现在创建至少有6行代码的你自己的故事。
                    这个故事不能与示例代码相同。
                    至少要使用一个`{ask}`和一个`{echo}`命令。
                    你可以把它写成任何你喜欢的主题。
                    如果你想不出来，可以使用我们的给你的选择：看电影、体育比赛或动物园的一天。
                start_code: '{print} 你的故事从这里开始'
            2:
                story_text: |
                    在第2关，你可以让你的故事更有趣些。你的主人公的名字可以放在句子里的任何位置了。

                    为此你确实需要多写一点代码。你需要先给主人公一个名字。

                    然后就可以把名字放在句子里的任何位置。
                example_code: |-
                    ```
                    名字 {is} {ask} 主角的名字是什么？
                    {print} 名字 现在要去森林里散步了
                    {print} 名字 有点害怕
                    {print} 突然，他听到一个疯狂的声音……
                    {sleep}
                    {print} 名字 害怕这个森林里面闹鬼
                    ```
                story_text_2: |
                    ### 练习
                    现在是时候给你在上一关中制作的自己的故事添加变量了。
                    进入 "我的程序"，寻找你的第1关故事冒险，复制代码。把代码粘贴到本关的输入屏幕中。

                    这段代码在本关不会起作用，因为你还没有使用变量。
                    把你代码中的`{ask}`命令和`{echo}`命令改成你在本关学到的正确形式。

                    **另外**在你的代码中添加一个睡眠命令，在你的故事中建立起紧张感。
                start_code: '{print} 你的故事'
            3:
                story_text: |
                    在第3关，你可以让你的故事更有趣些。你可以随机选择怪物、动物或者其它障碍，比如：
                example_code: |
                    ```
                    动物们 {is} 🦔, 🐿, 🦉, 🦇
                    {print} 他现在听到了一个的声音 动物们 {at} {random}
                    ```
                story_text_2: |
                    你的故事也用得上`{add}`命令。
                example_code_2: |
                    ```
                    {print} 他听到一个声音
                    动物们 {is} 🐿，🦔，🦇，🦉
                    某动物 {is} {ask} 你觉得它是什么？
                    {add} 某动物 {to_list} 动物们
                    {print} 它 是 动物们 {at} {random}
                    ```
                story_text_3: |
                    这是一个在故事里使用`{remove}`命令的例子

                    ### 练习
                    将你在前几级的故事复制到这一级。
                    在此级中，你已经学会了3个新命令`{at} {random}` , `{add} {to}` 和 `{remove} {from}`.
                    在你的故事中添加新的代码行，让所有的新命令在你的故事中至少出现一次。
                example_code_3: |
                    ```
                    {print} 他的背包太重了。
                    {print} 包里有一瓶水，一个手电筒和一块砖。
                    包 {is} 水, 手电筒, 砖
                    扔掉的 {is} {ask} 他应该扔掉哪个东西？
                    {remove} 扔掉的 {from} 包
                    ```
                start_code: '{print} 你的故事'
            4:
                story_text: "你可能注意到了，在之前的级别里还有个问题。你有没有试过打印含有“名字”这个词的句子？即：`{print}` 我的名字是名字。\n 在这一级里你可以解决这个问题。你必须给所有需要打印的东西加上引号。\n\n### 练习1\n复制示例代码并通过添加引号来使其正常工作。 \n\n ### 练习 2 \n返回到上一个级别并复制故事代码。通过在正确的位置添加引号，使代码在此级别中正常工作。 \n注意：你自己故事中的变量应该在引号之外。就像范例代码的第二行一样。在该行中，变量名称放在引号之外。\n"
                example_code: "```\n名字 {is} {ask}_你的名字是什么? _\n{print}     _ 主人公的名字是_名字 \n {print} 名字     _正准备走进树林_\n{print} 名字 _有点害怕'\n动物们 {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} _他听到了一个_ 动物们{at} {random} 的声音\n{print} 名字_担心这片森林闹鬼_\n```\n"
                start_code: '{print} ''你的故事会打印在这里！'''
            5:
                story_text: |
                    在此级别中，你可以设计不同的结局，这将使你的故事更加有趣。
                    在范例代码中，你可以看到如何设计两个不同的结局。

                    ### 练习1
                    请选择一个主题然后用至少6行代码写一个新的小故事。
                    没有灵感？可以从这些主题中选一个：超级英雄、无聊的学校生活、搁浅在荒岛上。

                    现在给玩家一个机会选择故事的结局，可以是好的结局也可以是坏的结局，就像范例代码中的那样。
                    对这两种结局进行编程。

                    ### 练习2
                    复制你在前几级自己的冒险活动-故事中创建的故事。
                    想办法给你的故事添加至少2个`{if}` 和`{else}` 命令。
                    这可以是一个好的或坏的结局，但你也可以尝试用其他的方式来加入这些命令。
                example_code: |
                    ```
                    名字 {is} {ask} '谁在森林里行走？'
                    {print} 名字 '走在森林里'
                    {print} 名字 '遇到了一头怪物'
                    结局 {is} {ask} '你想看好结局还是坏结局？'
                    {if} 结局 {is} 好 {print} 名字 '拔出了剑，怪物立即逃跑了'
                    {else} {print} '怪物吃掉了' 名字
                    ```
                start_code: '{print} ''你的故事从这里开始！'''
            7:
                story_text: "在故事里，有人会重复同一个词好几次。比如，当有人在呼救或者唱歌。\n在这一级，你可以通过`{repeat}`在故事中加入这种重复。\n \n### 练习 \n在你自己的故事中加入重复的内容。返回你保存的程序中，选择第6级的故事程序，找到一个包含`{print}` 的行，然后重复它！\n"
                example_code: |
                    ```
                    {print} '王子不断地呼救'
                    {repeat} 5 {times} {print} '救命啊！'
                    {print} '为什么没有人来救我？'
                    ```
                start_code: '{repeat} 5 {times} {print} ''救命！'''
            8:
                story_text: "在这一级中，你可以在你的{if} 条件语句中使用多行，这样你就可以升级你的好的或坏的结局！\n\n### 练习1\n代码范例中显示了两种不同的结局；一种是主人公跳上时光机，另一种是没有跳上时光机。\n 每个结局都至少需要用一个句子完成空格。 \n**（额外的）**使故事更长。故事中会发生什么？您还可以添加具有不同选项的第二个 `{ask}`\n \n### 练习2\n返回你保存的程序中，从第5级选择你的故事程序。现在写一个好的和一个坏的结局，每个结局至少有三行长! \n"
                example_code: |
                    ```
                    {print} '哦，不！霸王龙来了！'
                    结局 = {ask} '你想要好结局还是坏结局？'
                    {if} 结局 {is} 好
                        {print} '理查德在千钧一发之际跳回了时光机里！'
                        {print} _
                    {else}
                        {print} '哦，不！理查德太慢了……'
                        {print} _
                    ```
                start_code: '# 在这里写你的代码'
            9:
                story_text: "在这一级，你可以通过嵌套，在一个 `{if}`和`{repeat}` 语句里包含其它 `{if}`和`{repeat}`语句。\n 这让你有了很多选择，极大地提高了故事地互动性。\n\n### 练习1 \n完成代码，使`{if}` 能正常工作。 \n\n### 练习2 \n 为故事中罗宾也回家的部分添加一个`{if}` 和`{else}`语句 。 \n\n### 练习3 \n回到你第8级的故事中，在另一个`{if}` 条件语句里面至少使用两个`{if}`条件语句。\n"
                example_code: |
                    ```
                    {print} '罗宾来到了市区'
                    地点 = {ask} '罗宾是要去商店还是回家？'
                    {if} 地点 {is} 商店
                        {print} '她走进了商店。'
                        {print} '罗宾发现了一本有趣的书'
                        书 = {ask} '罗宾买了这本书吗？'
                        {if} 书 {is} 是
                        {print}_ '罗宾买了这本书，回家了'
                         _{else}
                        _{print} '罗宾离开商店，回家了'
                    {else}
                        {print} '罗宾回了家'
                    ```
                start_code: '# 在这里写你的代码'
            10:
                story_text: "在这一级，你可以在你的故事里使用 {for} 命令。这样很容易就能写出儿童书里的“棕熊，棕熊，你看到了什么”的故事。\n\n ### 练习\n\n请看\n<a \nhref=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> the story</a> 如果你不知道这个故事，请确保它是按照书中的内容打印的。\n"
                example_code: "```\n动物们 = _ , _ , _ \n{print} '棕熊，棕熊 '\n{print} '你看到了什么？'\n```\n"
                start_code: '# 在这里写你的代码'
            12:
                story_text: 在此级别中，您可以使用引号将多个单词保存在一个变量中。
                example_code: |
                    ```
                    名字 = '英国女王'
                    {print} 名字'正在吃一块蛋糕，突然......'
                    ```
                start_code: '# 在这里写你的代码'
            13:
                story_text: "通过使用`{and}`和`{or}`命令，你可以把故事写得更短。比如这个龙的故事。\n\n### 练习 \n你能像这样制作你自己的迷你冒险游戏吗？\n"
                example_code: |
                    ```
                    {print} “我们的英雄正在穿过森林”
                    {print} “路径分两路”
                    path= {ask} “她应该选择哪条路径？”
                    武器={ask} “她画的是什么武器？”
                    {if} 路径 {is} “左” {and} 武器 {is} “剑”
                        _
                    ```
                start_code: '# 在这里写你的代码'
            15:
                story_text: |
                    运用`{while}`循环能让你的故事更有趣。比如，用`{while} game {is} 'on'`可以让游戏一直进行到结束为止。
                    或者用`{while} sword {is} 'lost'`来要求玩家必须先找到剑，才能继续游戏。
                example_code: |
                    ```
                    钥匙 = '丢失'
                    {print} '你站在你的花园里，你的钥匙丢了。'
                    {print} '你想去哪里找它们？'
                    {print} '你可以选择：树、花坛、石头、邮筒'
                    {while} 钥匙 == '丢失'
                        位置 = {ask} '你想去哪里找？'
                        {if} 位置 == '花坛'
                            {print} '它们在这里！'
                            钥匙 = '找到'
                        {else}
                            {print} '没有，他们不在'位置
                    {print} '现在你可以进入房子了！'
                    ```
                start_code: '# 在这里写你的代码'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('欢迎来到这个故事！')
                    ```
                story_text_2: |
                    ### 练习 2
                    我们已经为您准备了一个 `{input}`。 首先，在您的故事中使用 `name` 变量。
                    然后，请添加第二个 `{ask}` 并使用该变量。
                    提示：记得文本和变量之间 `{print}` 中的逗号！
                example_code_2: |
                    ```
                    naam = {input}("你叫什么名字？")
                    {print}('欢迎来到这个故事！')
                    ```
                start_code: '# 在此处键入代码'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# place your code here'
    calculator:
        name: 计算器
        default_save_name: 计算器
        description: 创建一个计算器
        levels:
            6:
                story_text: |
                    现在你可以做数学了，你可以自己做一个计算器！
                example_code: |
                    ```
                    数一 {is} {ask} '填写第一个数字：'
                    数二 {is} {ask} '填写第二个数字：'
                    正确答案 = 数一 * 数二
                    {print} 数一 ' 乘以 '数二 ' 是 ' 正确答案
                    ```
                story_text_2: |
                    ### 练习
                    上面的计算器会为你计算出答案，但你也可以编写一个程序来测试你自己的运算能力，如下所示：
                    填空使其完整！
                example_code_2: |
                    ```
                    正确答案 = 11 * 27
                    答案 = {ask} '11乘以27是多少？'
                    {if} 答案 {is} _ {print} '做得好！'
                    {else} {print} '错了！是' _
                    ```
                story_text_3: |
                    您还可以让计算机自己使用 {random} 求随机数的和。
                    这就是你如何选择几个运算表进行练习的例子，而且你总会从中获得不同的和：
                start_code: '{print} ''欢迎来到这个计算器!'''
            9:
                story_text: |
                    在第 6 级中，您编写了一个计算器程序，在此级别中，您可以扩展该程序来提出多个问题。

                    ### 练习 1
                    你能完成第 10 行以使程序工作吗？

                    ### 练习 2
                    输入正确或错误的答案时给出反馈。为此，请使用 `{else}` 来扩展程序。
                example_code: |
                    ```
                    分数 = 0
                    {repeat} 10 {times}
                        一组数 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        数一 = 一组数 {at} {random}
                        数二 = 一组数 {at} {random}
                        正确答案 = 数一 * 数二
                        {print} 数一 '乘以' 数二 '是多少？'
                        答案 = {ask} '在这里输入你的答案……'
                        {print} '你的答案是' 答案
                        {if} _ {is} _
                            分数 = 分数 + 1
                    {print} '做得好！你的分数是' 分数 '分，满分是10分！'
                    ```
                start_code: '{print} ''欢迎来到这个计算器!'''
            10:
                story_text: |
                    这个计算器游戏帮助您练习你的乘法口诀表！ 
                    ### 练习
                    你能在列表中加入更多的数字，这样你就可以练习乘法表直到10？
                example_code: |
                    ```
                    数字 = 1, 2, 3
                    {for} 数一 {in} 数字
                        {for} 数二 {in} 数字
                            答案 = {ask} 数一 '乘以' 数二 '是多少？'
                            正确答案 = 数一 * 数二
                            {if} 答案 {is} 正确答案
                                {print} '做得好！'
                            {else}
                                {print} '回答错误。正确答案是' 正确答案
                    ```
                start_code: '# 在这里写你的代码'
            11:
                story_text: |
                    使用 `{for}`你可以简化乘法运算表的程序。

                    ### 练习 1
                    改进范例代码，使其打印出一个漂亮的乘法表：<br> “1 乘以 10 是 10”、“2 乘以 10 是 20”等。

                    ### 练习 2
                    返回到你在 10 级完成的乘法运算表程序，并使用 `{for}` 和 `{range}`对其进行修改。
                example_code: |
                    ```
                    数字 = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * 数字
                    ```
                start_code: '# 将你的代码写在这里'
            12:
                story_text: |
                    现在您可以编写一个可以计算小数的计算器。
                example_code: |
                    ```
                    数一 = {ask} '第一个数字是几？'
                    数二 = {ask} '第二个数字是几？'
                    答案 = _
                    {print} 数一 ' 加 ' 数二 '等于 ' 答案
                    ```
                start_code: '# 在这里写你的代码'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    在这关中你可以编写一个“猜数”游戏
                example_code: |
                    ```
                    {print} '猜猜是哪个数字'
                    一组数= 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    数字 = 一组数 {at} {random}
                    游戏 = '开始'
                    {for} i {in} {range} 1 {to} 10
                        {if} 游戏 == '开始'
                            猜测 = {ask} '你认为是哪一个数字?'
                            {if} 猜测 > 数字
                                {print} '更小！ '
                            {if} 猜测 < 数字
                                {print} '更大！'
                            {if} 猜测 == 数字
                                {print} '你赢了！ '
                                game = '结束'
                    ```
                start_code: '# 在这里写你的代码'
            15:
                story_text: |
                    您可以添加 `{while}` 循环到您已经在上一级中学过的计算器游戏中去。 
                    这可以确保{if}玩家在没有回答正确的情况下不能回答下一个问题。
                example_code: |
                    ```
                    分数 = 0
                    {for} i {in} {range} 0 {to} 9
                        数字 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        数一 = 数字 {at} {random}
                        数二 = 数字 {at} {random}
                        正确 = 数一 * 数二
                        答案 = 0
                        {while} 答案 != 正确
                            {print} 数一 '乘以' 数二 '是多少？'
                            答案 = {ask} '填写答案'
                            {print} '你的答案是' 答案
                        {print} '做得好！'
                    {print} '你赢了！'
                    ```
                start_code: '# 在这里写你的代码'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: 介绍
        default_save_name: 介绍
        description: 级别说明
        levels:
            1:
                story_text: "在第1级，你可以使用命令`{print}`、`{ask}`和`{echo}`。\n在编程栏里面输入你的代码。或者按下代码范例框里面的绿色按钮，它会为你输入代码!\n 你可以用左边编程栏下方绿色的 “运行程序” 按钮测试你的代码。\n\n你可以使用`{print}`命令将文本打印到屏幕上。     \n"
                start_code: '{print} 你好，世界！'
            2:
                story_text: |
                    在第2级中，我们学习了两个新的命令：`{is}`和`{sleep}`。
                    你可以用`{is}`命名一个词，这叫变量。在这个例子中，我们定义了一个变量“名字”和另外一个变量“年龄”。你可以在代码中的任何地方使用“名字”这个词，它将被“海蒂”替换，就像这样：

                    这样，你就不再需要`{echo}`命令了!
                example_code: |
                    ```
                    名字 {is} 海蒂
                    年龄 {is} 15
                    {print} 名字 今年 年龄 岁
                    ```
                story_text_2: |
                    `{print}` 仍然可以正常工作，但 `{ask}` 命令已更改。 您还需要在 `{ask}` 命令中使用变量。 它看起来像这样：
                start_code: '{print} 你好世界!'
            3:
                story_text: |
                    在第3级你也可以创建一个列表。你可以让计算机从列表中随机选择一些项目。您可以使用 `{at} {random}` 执行此操作。
                start_code: '{print} 你好世界!'
            4:
                story_text: |
                    在第4级目标中 `{ask}` 和 `{print}` 已更改。
                    你必须将要打印的文本放在单引号之间。
                    这很有用,因为现在你可以打印所有你想要打印的词汇了. 你也可以打印那些用 `{is}`命名并保存的词汇.
                    大多数编程语言在打印时也使用引号，所以我们也距离真正的编程更近了一步!
                example_code: |
                    ```
                    {print} '从现在开始你们需要使用引号！'
                    答案 {is} {ask} '从现在开始我们需要使用什么？'
                    {print} '我们需要使用 ' 答案
                    ```
                start_code: '{print} ''你好世界'''
            5:
                story_text: |
                    `{if}`是第五级别的新东西！使用 `{if}`，你可以在两个不同的选项之间进行选择。
                    如果您输入海蒂作为名字，那么此代码会打印出“赞！” 如果您输入其他内容，那么此代码会打印出“嘁！”这个词。
                    `{ask}` 和 `{print}` 的使用方法和在第 4 级中一样。
                example_code: |
                    ```
                    名字 {is} {ask} '你叫什么名字？'
                    {if} 名字 {is} 海蒂 {print} '赞' {else} {print} '嘁!'
                    ```
                start_code: |-
                    名字 {is} {ask} '你的名字是什么?'
                    {if} 名字 {is} 海蒂 {print} '酷!' {else} {print} '呵呵'
            6:
                story_text: |
                    这一级我们会学到一些新内容：现在你可以做计算啦。

                    加法运算很简单，和数学公式里一样，比如`5 + 5`。减法运算也一样，就是`5 - 5`。

                    乘法运算有点不同，因为键盘上面没有乘法符号。你可以找一下，真的没有！
                    所以我们用数字8上面的星号表示乘法： `5 * 5`。把它读作“5乘5”会有利于你记住它。
                example_code: |
                    ```
                    {print} '5 加 5 是 ' 5 + 5
                    {print} '5 减 5 是 ' 5 - 5
                    {print} '5 乘 5 是 ' 5 * 5
                    ```
                start_code: '{print}''5乘以5等于 5 * 5'''
            7:
                story_text: |
                    在第7级的学习内容里面增加了`{repeat}` 循环命令。   `{repeat}` 循环语句可以用来多次执行一段代码。
                example_code: |
                    ```
                    {repeat} 3 {times} {print} '海蒂很好玩！'
                    ```
                start_code: '{repeat} 3 {times} {print} ''海蒂很好玩！'''
            8:
                story_text: |
                    `{ask}` 和 `{print}`  的使用方法依旧保持不变。但是 `{if}`，`{else}` 条件语句，{pressed}和 `{repeat}` 循环语句已经改变了！
                    你现在可以把几行代码组合在一起，但你必须*缩进*代码。
                    缩进的意思是在每一行代码开头空四格。即使你的代码块只包括一行代码时你也必须使用缩进。
                example_code: |
                    `{repeat}`命令现在是这样用的：
                    ```
                    {repeat} 5 {times}
                        {print} '大家好'
                        {print} '这些都会重复5遍'
                    ```

                    `{if}`和`{else}`命令现在是这样用的：
                    ```
                    名字 {is} {ask} '你叫什么？'
                    {if} 名字 {is} 海蒂
                        {print} '你好海蒂'
                        {print} '你可以玩你的电脑了！'
                    {else}
                        {print} '私闯民宅！'
                        {print} '你不能使用这台电脑！'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} '大家好'
                        {print} '这句话将被打印5次'
            9:
                story_text: |
                    在这个级别中，你不仅可以一起使用`{if}`条件语句和`{repeat}`循环语句编写多行代码，还可以将它们嵌套在一起使用！
                    在范例中，你可以看到 `{repeat}` 命令中嵌入一个 `{if}` 命令。反之亦然，在 `{if}`命令中嵌入一个`{if}`命令，在一个`{repeat}`循环语句中嵌入一个`{repeat}`循环语句。
                    试试吧！
                example_code: |
                    ```
                    {repeat} 3 {times}
                        食物 = {ask} '你想吃什么？'
                        {if} 食物 {is} 披萨
                            {print} '好啊！'
                        {else}
                            {print} '披萨更好吃'
                    ```
                start_code: "{repeat} 3 {times}\n    食物 = {ask} '你想吃什么？'\n    {if} 食物 {is} 披萨\n        {print} '好啊！'\n    {else}  \n        {print} '披萨更好吃'"
            10:
                story_text: |-
                    在这一关中，我们要学习一个名为`{for}`的命令。你可以通过 `{for}` 一个列表，并使用其中所有元素。
                    同 `{repeat}` 和 `{if}` 一样，`{for}` 会创建一个块，所以块中的每一行都需要以空格开头。
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                    ```
                start_code: |-
                    动物 {is} 狗，猫，泡泡鱼
                    {for} animal {in} 动物
                      {print} '我爱 ' animal
            11:
                story_text: |-
                    在本关中，我们增加了一种新的`{for}`形式。在前面的关卡中，我们将`{for}`用于列表，我们也可以将`{for}`用于数字。
                    我们通过添加一个变量名，在其后面接着`{in}``{range}`。然后我们写上数字来开始，`{to}`来作为数字的终点。

                    试试这个例子，看看会发生什么! 在这一关卡中，你将需要在`{for}`语句下面的行中使用缩进。
                start_code: |-
                    {for} 计数器 {in} {range} 1 {to} 5
                        {print} 计数器
            12:
                story_text: |-
                    **十进制数**
                    到目前为止，海蒂不允许出现1.5这样的小数，但现在我们允许了。请注意，计算机使用`.`来表示小数点。
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} '十进制数字现在需要加上小数点'
                    {print} 2.5 + 2.5
            13:
                story_text: 我们将要学习 `{and}` 和 `{or}` ！如果你想判断两个语句，你不需要使用两个{if}语句，而是可以使用`{and}`和`{or}`。如果你用了`{and}`，那么`{and}`左右两边的语句都需要为真。我们也可以使用`{or}`，那么它左右两边的语句中只需要有一个是正确的。
                example_code: |
                    ```
                    名字 = {ask} '你叫什么名字?'
                    年龄 = {ask} '你的年龄是多少？ '
                    {if} 名字 {is} '海蒂' {and} 年龄 {is} 2
                        {print} '你才是真正的海蒂！'
                    ```
                start_code: |-
                    名字 = {ask} '你叫什么名字?'
                    年龄 = {ask} '你的年龄是多少？ '
                    {if} 名字 {is} '海蒂' {and} 年龄 {is} 2
                        {print} '你才是真正的海蒂！'
            14:
                story_text: |
                    我们将要学习更多新的内容! 你可能在数学课上已经学过这些内容了, 那就是小于号 `<` 和大于号 `>`。
                    小于号 `<` 用来判断第一个数字是否小于第二个数字, 比如 年龄 `<` 12 判断是否年龄小于12。
                    如果你想判断第一个数字是否小于或等于第二个数字，你可以使用`<=`，例如年龄`<=` 11。
                    大于号`>` 用来判断第一个数字是否大于第二个数字, 比如 点数 `>`10判断是否点数大于10。
                    如果你想判断第一个数字是否大于或等于第二个数字，你可以使用 `>=`, 例如 点数 `>=`= 11。
                    你可以在一个`{if}`条件语句中使用这些比较运算符号，如下所示：
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                start_code: |-
                    年龄 = {ask} '你今年几岁了？'
                    {if} 年龄 < 13
                        {print} '你比我年纪小！'
                    {else}
                        {print} '你比我年纪大！'
            15:
                story_text: "我们将要学习一个新的循环, 就是`{while}` 循环！只要语句为真/有效，我们就不停的执行循环语句！\n所以别忘了改变循环语句中的变量值。\n \n因此在范例代码中，我们一直不停的执行循环语句直到一个正确的答案被给出。 \n如果正确答案一直没有被给出, 这个循环语句就不会结束!"
                example_code: |
                    ```
                    答案 = 0
                    {while} 答案 != 25
                        答案 = {ask} '5乘以5等于几？'
                    {print} '已经给出了一个正确答案'
                    ```
                start_code: |-
                    答案 = 0
                    {while} 答案 != 25
                        答案 = {ask} '5乘以5等于几?'
                    {print} '已经给出了一个正确的答案'
            16:
                story_text: |-
                    我们将用Python的方式来制作列表，把列表(list)的内容用中括号括起来！我们现在也需要把列表里面的每一个元素都用单引号标示清楚，就像我们在前几级学到的那样。
                    你也可以使用中括号来指出列表中的某个位置。
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    水果 = ['苹果', '香蕉', '樱桃']
                    {print} 水果
            17:
                story_text: |-
                    现在我们将对缩进进行一些改变。每当我们需要用缩进时，我们都需要在缩进前的那一行使用冒号`:` 。

                    在此级别中，你还可以使用新命令：`{elif}`。 `{elif}` 是 {else} {if} 的缩写，当您想要在3 个（或更多！）选项中做出选择的时候需要用到它。
                    看看吧！
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '无论你是否准备好了，我都会来的!'
            18:
                story_text: |-
                    我们到达了真正的 Python 代码！这意味着从现在开始我们需要在 {print} 和 {range} 后使用括号。
                    这也意味着从这一级之后你可以使用英文指令来使用海蒂代码在任何Python环境中。如果你到现在还没有这么做，你可以在命令菜单中切换开关来这样做。
                start_code: |-
                    名字 = '海蒂'
                    {print}('我的名字是', 名字)
    dice:
        name: 骰子
        default_save_name: 骰子
        description: 制作你自己的骰子
        levels:
            3:
                story_text: |
                    在这一级我们可以从列表中选择。通过这种方式，我们能让电脑选择骰子哪一面朝上。
                    看看你家里柜子里的游戏。
                    有没有用骰子玩的游戏？你也可以用这段代码来复制它。
                    比如，蚯蚓游戏用的骰子上印着1到5和一条蚯蚓。

                    ![蚯蚓游戏的骰子，有1到5和一条蚯蚓](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    选项 {is} 1, 2, 3, 4, 5, 蚯蚓
                    {print} 你扔了_ {at} {random}
                    ```
                story_text_2: |
                    ### 练习
                    上面的例子中的骰子是一种特定游戏的骰子。你能制作普通的骰子吗？
                    或者其他不同游戏的特殊骰子？
                example_code_2: |
                    ```
                    选择 {is} _
                    ```
                start_code: '{print} 骰子这次会投出什么？'
            4:
                story_text: |
                    在这一级，我们可以用骰子的点数来造句，当然要用引号。
                    这次的示例代码没有全部完成。你能把代码补全吗？
                start_code: '{print} ''骰子这次会投出什么？'''
            5:
                story_text: |
                    在这一级，你可以用`{if}`再制作一个骰子。
                    补全示例代码，让它在你投出蚯蚓的时候说“你不用再投了”。

                    不过也许你想要重新搞一个别的游戏里的完全不同的骰子。那也没关系！你只要做出对应的回应，比如在投出6的时候说“好”，投出其他的时候说“可惜”。
                example_code: |
                    ```
                    选项 {is} 1, 2, 3, 4, 5, 蚯蚓
                    投 {is} _选择 {at} {random}
                    {print} “你投出了”选择
                    _ 投 {is} 蚯蚓 {print} '你可以停止投掷了。'
                    _ {print} '你得重新投一次！'
                    ```
                start_code: '{print} ''骰子这次会投出什么？'''
            6:
                story_text: |
                    你这次可以再做一个蚯蚓骰子，但是这次你可以计算你总共投了多少点数。
                    你可能知道，投出蚯蚓算5点。现在每一轮过后你都能立即算出你投了多少点。
                    这段代码会对一个骰子统计点数：

                    ###练习
                    你能使这段代码计算你得到的8个骰子的总分吗？要做到这一点你需要剪切和粘贴代码的一些行。
                example_code: |
                    ```
                    选项 = 1, 2, 3, 4, 5, 蚯蚓
                    点数 = 0
                    投出数 = 选项 {at} {random}
                    {print} '你投出了' 投出数
                    {if} 投出数 {is} 蚯蚓 点数 = 点数 + 5 {else} 点数 = 点数 + 投出数
                    {print} '现在是' 点数 '点'
                    ```
                example_code_2: |
                    你计算出8个骰子的点数了吗？这需要大量复制粘贴，对吗？在第7级，我们会让它更简单！
                start_code: '{print} ''骰子这次会投出什么？'''
            7:
                story_text: |
                    在第5级，你又可以做一个骰子。通过运用`{repeat}`命令，你可以轻松投出一大把骰子。

                    ### 练习
                    试着补全示例代码！
                    **(另外)**想一想你所知道的有关骰子的游戏，并使用`{repeat}`进行编程。
                example_code: |
                    ```
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''骰子这次会投出什么？'''
            10:
                story_text: |
                    大家投骰子是不是要花太长时间？在这一级，你可以让海蒂一次投出所有骰子！

                    ###练习
                    把名字改成你的朋友们或者家人的名字，然后完成代码，让他们分组各自掷出。
                example_code: |
                    ```
                    玩家们 = 安, 约翰, 杰西
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} 玩家 '投出了' 选项 {at} {random}
                        {sleep}
                    ```
                start_code: '# 在这里写你的代码'
            15:
                story_text: |
                    在这个游戏里，你需要用尽可能少的次数投出6。
                example_code: |
                    ```
                    选项 = 1, 2, 3, 4, 5, 6
                    {print} '用最快的速度投出6！'
                    投 = 0
                    次数 = 0
                    {while} 投 != 6
                        投 = 选项 {at} {random}
                        {print} '你投了' 投
                        次数 = 次数 + 1
                    {print} '很好！你在' 次数 '次里投出了6！'
                    ```
                start_code: '# 在这里写你的代码'
    dishes:
        name: 洗碗？
        default_save_name: 洗碗
        description: 用电脑决定谁来洗碗
        levels:
            3:
                story_text: |
                    你家里是不是总是争论让谁来洗碗或者换猫砂盆？
                    那么你可以让电脑来做出公平的决定。你在这一级可以写出这个程序！
                example_code: |
                    ```
                    人们 {is} 妈妈， 爸爸， 艾玛， 苏菲
                    {print} 人们 {at} {random}来收拾碗筷。
                    ```
                story_text_2: |
                    ### 练习
                    制作你自己版本的洗碗机程序。首先列出你的家庭成员名单。
                    然后想一个需要完成的任务，让计算机用`{at} {random}`命令决定谁来做这个任务。

                    **额外的**不想洗碗？用`{remove}` `{from}` 命令将你的名字从名单上删除，从而破解程序。
                start_code: '{print} 谁负责洗碗？'
            4:
                story_text: |
                    使用引号，可以使你的洗碗程序更加出色。

                    ### 练习
                    首先，在空白处填写正确的符号或命令，以使此示例程序正常工作。
                    你明白了吗？太好了！现在从上一个级别复制你自己的代码，并通过在正确的位置添加引号使其在此级别中正常工作。
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    {print} _ 洗碗的人是 _
                    {sleep}
                    {print} 人们 {at} _
                    ```
                start_code: '{print} ''谁负责洗碗？'''
            5:
                story_text: |
                    你可以用`{if}`给程序加入选项，来让它更有趣。你可以让你的程序对电脑做出的选择进行回应。

                    你能不能完成这段代码，让它在选中你的时候打印“太糟了”，其它情况下打印“好！”？
                    别忘了引号！
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 {is} 人们 {at} {random}
                    洗碗的 {is} 索菲 {print} _ 太糟了，轮到我洗碗 _
                    {print} '运气真好，' _ '把碗洗了'
                    ```
                start_code: '{print} ''谁负责洗碗？'''
            6:
                story_text: |
                    每个人洗了多少次碗？是否公平？在这一级你可以进行统计。
                example_code: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    艾玛洗碗 = 0
                    洗碗的 = 人们 {at} {random}
                    {print} '洗碗的人是' 洗碗的
                    {if} 洗碗的 {is} 艾玛 艾玛洗碗 = 艾玛洗碗 + 1
                    {print} '艾玛这周要洗' 艾玛洗碗 '次碗'
                    ```

                    现在你需要将第3到第5行复制几次（比如，复制7次表示一周）来计算一整周。
                    你能写出一整周用的代码吗？
                story_text_2: |
                    如果你运气特别差，上一个程序可能每天都选你去洗碗！这不公平！
                    为了创造一个更公平的系统，你可以用`{remove}`命令把选中的人从列表中移除。这样除非所有人都被轮到过一次，不然你不用再洗碗。

                    周一和周二已经帮你写好了！你能把这周剩下的加上吗？
                    另外……当列表里空了的时候，你有办法解决吗？
                example_code_2: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 = 人们 {at} {random}
                    {print} '周一洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    洗碗的 = 人们 {at} {random}
                    {print} '周二洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    洗碗的 = 人们 {at} {random}
                    ```
                start_code: '{print} ''谁负责洗碗？'''
            7:
                story_text: "你可以用`{repeat}`重复一段代码。你可以以此来计算一周里谁负责洗碗。\n\n### 练习 \n使用`{repeat}` 命令来决定谁需要洗整整一周的碗。每个空格都需要填上一个命令或数字!\n **（另外）**你能想到家里的其他任务吗？改编代码，让它决定三件家务活。不要忘记打印出它所涉及的任务!\n"
                example_code: |
                    ```
                    人 = 妈妈, 爸爸, 艾玛, 索菲
                    {repeat} _ _ {print} '洗碗工作将由' _ _ _完成
                    ```
                start_code: '{print} ''谁负责洗碗？'''
            10:
                story_text: |
                    在这一关中，你可以轻松地为整个星期制定时间表！

                    ### 练习
                    增加第二项家务，例如吸尘或整理，并确保这项家务被分配到整周的家庭事务安排表中。
                    <br> **(extra)** 如果程序不公平的话，你可能会倒霉到整个星期都在洗碗。 你怎样做才能使程序更公平？
                example_code: |
                    ```
                    日期们 = 周一, 周二, 周三, 周四, 周五, 周六, 周日
                    名字们 = 妈妈, 爸爸, 艾玛, 索菲
                    {for} 日期 {in} 日期们
                        {print} 名字们 {at} {random} '负责在' 日期 '洗碗'
                    ```
                start_code: '# 在这里写你的代码'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: 算命
        default_save_name: 算命
        description: 让海蒂帮你算命
        levels:
            1:
                story_text: |
                    你有没有在天桥下让算命的给你算过命？或者有没有抽过签？
                    那你想必也知道，它们并不能真正预言你的未来。但是它们玩起来仍然很有趣！

                    在接下来的几级中，你会学到如何制作你自己的算命机器！
                    在第1级，一开始可以简单一些，只让海蒂介绍自己会算命，然后用{echo}命令让它复述玩家的回答。
                    像这样：
                example_code: |
                    ```
                    _你好，我是海蒂半仙！
                    _你叫什么？
                    _让我掐指算一算
                    _ 赵钱孙李……
                    _你的名字叫
                    ```
                story_text_2: |
                    ### 练习
                    将示例代码复制到你的输入屏幕上，并填入空白处，使代码生效。
                    **另外**改变代码，让算命仙不仅能算出你的名字，还能算出你的年龄、你最喜欢的运动队或其他关于你的事情。
                start_code: '# 在这里写下你的代码'
            3:
                story_text: |
                    在上一级，你创造了你的第一台算命机器，但海蒂不会算任何东西，只会“{echo}”。
                    在这一级，你可以用变量和`{at} {random}`命令来真正让海蒂为你选择一个答案。比如看看这段代码：
                example_code: |
                    在这个例子里，玩家可以向海蒂{ask}一个是非题，然后海蒂会任意选择一个答案。
                    ```
                    {print} 我是海蒂半仙！
                    问题 {is} {ask} 你想算什么？
                    {print} 你想算：问题
                    回答 {is} 是, 否, 有可能
                    {print} 让我算一卦……
                    {sleep} 2
                    {print} 回答 {at} {random}
                    ```
                story_text_2: |
                    ### 练习
                    现在海蒂只能回答是、否和有可能。你能否给海蒂更多回答选项，比如“肯定”或者“换个问题”。
                start_code: '# 在这里写你的代码'
            4:
                story_text: |
                    这一级没有新的功能，但允许你练习使用引号。
                    你可以重新编写第3级的代码，并确保在正确的地方加上引号。

                    注意，在第3级中，我们不能把 "问题 "这个词既作为变量的名称，又作为一个可以打印的普通词。
                    第3级中引号让这成为可能！

                    重要的是！ 注意，现在我们使用了引号，当你在 I'm（我的） 或 What's（是什么）等缩略语中使用撇号时，海蒂会感到困惑。
                    一定要把这些撇号去掉，然后把拼写改为Im或Whats。

                    ### 练习
                    我们已经删除了这个例子代码中的所有引号，你能在所有正确的地方加上引号吗？
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} 我是海蒂算命仙!
                    问题 {is} {ask} 你想知道什么？
                    {print} 这是你的问题：问题
                    答案 {is} 是、不是、也许
                    {print} 让我掐指算一算...
                    {sleep} 2
                    {print} 答案 {at} {random}
                    ```
                start_code: '# 在这里写下你的代码'
            5:
                story_text: |
                    在本级中，你将学会在使用算命仙时，（秘密地）使结果对你有利！
                    通过使用`{if}` 和`{else}` ，你可以确保你总是能得到好运，而其他人可能得不到。
                    看看这个例子就知道了。
                example_code: "```\n{print} '我是海蒂算命仙!'\n{print} '我可以预测你明天是否会中彩票！'\n人 {is} {ask} '你是谁？'\n{if} 人 {is} 海蒂 {print} '你肯定会中奖！\U0001F929' {else} {print} '你运气不好！别人会中奖！\U0001F62D' \n```\n"
                start_code: '# 在这里写下你的代码'
            6:
                story_text: |
                    在本级中，作为一个算命仙你可以用数学帮你算命。这使你可以编造（傻傻的）公式来算命。
                    例如，你可以算出你将来会变得多么有钱，或者你以后会有多少个孩子。



                    ### 练习
                    你能自己设计一个（傻傻的）算命机器吗？
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '我可以算出你以后会有多少个孩子！'
                    年龄 ={ask} '你多大了？'
                    兄弟姐妹 ={ask} '你有多少个兄弟姐妹？'
                    长度 ={ask} '你的身高是多少厘米？'
                    孩子 = 长度 / 年龄
                    孩子 = 孩子 - 兄弟姐妹
                    {print} '你将会有......'
                    {sleep}
                    {print} 孩子 ' 孩子！'
                    ```

                    如果前面的例子对你来说还不够傻，那就看看这个吧!
                    ```
                    {print} '我是傻傻的海蒂算命仙!'
                    {print} '我将预测你有多聪明!'
                    足球 ={ask} '用1到10打分，你热爱足球的程度是多少？'
                    香蕉 ={ask} '你这周吃了多少根香蕉？'
                    卫生 ={ask} '你今天洗了多少次手？'
                    结果 = 香蕉 + 卫生
                    结果 = 结果 * 足球
                    {print} '你的聪明程度是百分之' 结果' 。'
                    ```
                start_code: '# 在这里写下你的代码'
            7:
                story_text: |
                    在这一级中，你可以使用`{repeat}` 命令，让你的机器同时算出多个结果。
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '你可以问3个问题！'
                    {repeat} 3 {times} 问题 ={ask} '你想知道什么？'
                    回答=是，否，有可能
                    {repeat} 3 {times} {print} '我掐指一算...' 回答 {at} {random}
                    ```
                start_code: '# 在这里写下你的代码'
            8:
                story_text: |
                    在前几级中，你已经学会了如何使用一行`{repeat}`命令 ，让算命仙连续回答3个问题，但我们在打印问题时遇到了问题。
                    现在这个问题已解决了，因为有了`{repeat}` 命令的新的使用方法。
                    在下一个例子中，你可以让你的算命仙问3个问题并且还可以打印出来!

                    ### 练习
                    你能在空白处填写正确的命令吗？
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '你可以问我三个问题。
                    答案=是、否、有可能
                    _ _ _
                       问题 ={ask} '你想知道什么？
                       {print} 问题
                       {sleep}
                       {print} '我掐指一算...' 答案 {at} {random}
                    ```
                start_code: '# 在这里写下你的代码'
            10:
                story_text: |
                    在此级中，你将学习如何为MASH（豪宅、公寓、棚屋、别墅）游戏编程。在这个游戏中，你可以一次为所有玩家预测他们的未来的住宅是什么样子的。

                    ### 练习1
                    在列表中添加两个名字，并观察当你运行这个程序时程序的输出的结果有什么变化。
                example_code: |
                    ```
                    房屋 = 豪宅、公寓、棚屋、别墅
                    喜欢 = 无人，皇室，邻居，真爱
                    宠物 = 狗、猫、大象
                    名字们 = 珍娜、瑞安、吉姆
                    {for} 名字 {in} 名字们
                        {print} 名字 ' 住在 ' 房屋 {at} {random}
                        {print} 名字 ' 将会和 ' 喜欢 {at} {random} '结婚'
                        {print} 名字 ' 将得到一个 ' 宠物 {at} {random} ' 作为他们的宠物。'
                        {sleep}
                    ```
                start_code: '# 在这里写下你的代码'
            12:
                story_text: |
                    在这个关卡中，你可以用多个字来算命。你可以将不同的命运加入列表中吗？
                example_code: |
                    ```
                    命运 = '你会在香蕉皮上滑倒', _
                    {print} '我将在我的水晶球里看一下你的未来。
                    {print}'我看到... 我看到了......'
                    {sleep}
                    {print} 命运 {at} {random}
                    ```
                start_code: '# 在这里写下你的代码'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: 鬼屋
        default_save_name: 鬼屋
        description: 逃离鬼屋
        levels:
            1:
                story_text: |
                    在这个冒险中，你正在努力制作一个游戏，你必须通过挑选正确的门来逃离鬼屋。
                    如果你选对了门，你就能活下来，但如果没有，一个可怕的怪物可能会...

                    在第一关中，我们通过编造一个可怕的故事来开始我们的鬼屋游戏，并问玩家在鬼屋中会看到什么怪物。
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将范例代码复制到你的输入屏。
                    现在通过添加至少5行代码来完成这个故事。
                    记住，每行代码都要以`{print}` 命令开始。
                start_code: '{print} 我如何到这的？'
            2:
                story_text: |
                    在这个鬼屋里，你既可以用表情符号也可以用文字选择你会遇到的怪物。
                example_code: |
                    ```
                    怪物_1 {is} 👻
                    怪物_2 {is} 🤡
                    怪物_3 {is} 👶
                    {print} 你进入了鬼屋。
                    {print} 突然你看到怪物_1
                    {print} 你跑进另一个房间，但怪物_2正在那里等着你！
                    {print} 哦，不! 赶紧到厨房去。
                    {print} 但当你进入厨房时，怪物_3攻击了你!
                    ```
                story_text_2: |
                    ### 练习
                    在上面的例子中，怪物是预先设定好的。所以每次运行你的代码时，输出都是一样的。
                    你能不能添加`{ask}`命令来使鬼屋变得互动，让玩家选择他们遇到的怪物？
                example_code_2: |
                    ```
                    怪物_1 {is} _
                    怪物_2 {is} _
                    怪物_3 {is} _
                    {print}你进入了鬼屋。
                    {print} 突然你看到了怪物_1
                    {print} 你跑进了另一个房间，但是怪物_2在那里等着你！
                    {print} 哦不！快往厨房跑。
                    {print} 但是当你进入厨房后怪物_3攻击了你！
                    ```
                start_code: 怪物1 {is} _
            3:
                story_text: |
                    在前面的级别中，你已经对你的鬼屋游戏做了介绍，但你可能已经注意到，故事总会有一个可怕的结局。
                    在这一级中，你可以通过改变游戏的结局来使你的故事更具互动性；有时你会被吃掉，有时你会逃脱！
                    让海蒂随机决定吧。
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# 将你的代码写在这里'
            4:
                story_text: |
                    ##鬼屋
                    在此级别中，你要学习如何在游戏中使用引号。
                    你能证明你玩 "鬼屋 "冒险活动的水平达到4级了吗？
                example_code: |
                    ```
                    _给这段代码加上引号_
                    {print} 逃离鬼屋！
                    {print} _在你面前有三扇门...
                    选项{is} {ask} 你选择那扇门？
                    {print} 你选择的门 ...选项
                    怪物们{is}僵尸，吸血鬼，什么都没有你已经逃出来了
                    {print} 你看见...
                    {sleep}
                    {print} 怪物们{at} {random}
                    ```
                start_code: '# 将你的代码写在这里'
            5:
                story_text: |
                    在这一关之前，鬼屋游戏总是要求玩家选择一扇门，但你可能已经注意到了，他们并不是真的要正确回答。
                    如果玩家填写了一个完全随机的答案，游戏仍然可以进行，玩家甚至可能会赢（尽管没有选到门）。
                    在这一关中，你只能通过选择海蒂随机挑选的那扇门来赢得游戏。

                    ### 练习
                    你能找到缺少的4个词来完成代码吗？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    {print} '在你面前有三扇门...'
                    门 {is} 1, 2, 3
                    怪物{is} 狼人，木乃伊，吸血鬼，僵尸
                    选择的门{is} {ask}‘你选择哪扇门？’
                    {print} ‘你选了门...'选择的门
                    {sleep}
                    正确的门{is} 门{at} {random}
                    _ _ _ _ {print} ‘干得漂亮！你成功逃出去了！’
                    {else} {print} ‘哦 不！你要被一个...'怪物 {at} {random}'吃掉了
                    ```
                start_code: '# 将你的代码写在这里'
            9:
                story_text: |
                    在这一关中，你可以使用嵌套，这可以让你的鬼屋变得更有互动性!

                    ### 练习
                    现在要赢得这个游戏非常困难，你能让它更容易赢得吗？
                    如何改变你的代码，使它只有一个错误的门和两个正确的门，而不是一个正确的门和两个错误的门？
                    提示：这意味着将变量 正确的门 改为 错误的门 ，并切换`{if}`和`{else}`代码。
                    当然，你也可以改变故事，使其成为你自己的故事。改变怪物，或者把它变成一个你在那里可以得到一份礼物的快乐游戏节目！
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ‘逃出鬼屋！’'
            11:
                story_text: |
                    在这个关卡中，我们改变了`{for}`命令，所以我们可以告诉玩家他们在哪里。

                    ### 练习1
                    完成这个程序，让玩家知道他们在哪个房间里。

                    ### 练习2
                    通过以下步骤使程序成为一个冒险。

                    1. 制定一个选择清单（比如：战斗或逃跑）。
                    2. 确保玩家可以用`{ask}`来选择一个选项
                    3. 答案是否正确？那么他们可以进入下一个怪物。他们给出了错误的答案吗？用`{print}`让玩家知道。

                    **（另外）**如果你做了一个错误的选择，一个怪物仍然会被显示出来！你怎么能改变这种情况？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    怪物 = 僵尸, 吸血鬼, 大蜘蛛
                    _
                        {print} '房间' i
                        怪物 = 怪物们 {at} {random}
                    ```
                start_code: '{print} ‘逃离鬼屋！’'
            14:
                story_text: |
                    在这一关你可以使用 `<` 和`>`符号去向你的游戏中引入生命。
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# 在这里写下你的代码'
            16:
                story_text: |
                    这个鬼屋游戏使用了你在此级别中可以使用的列表之间的关联。
                    例如：所有属于僵尸的道具在每个列表中都排在第一位，女巫的道具排在第二位，吸血鬼的道具排在第三位。
                    检查下代码吧！
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# 在这里写下你的代码'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    编写你自己的程序来练习新语言的词汇。
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# 在这里写下你的代码'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# 在这里写下你的代码'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: 鹦鹉
        default_save_name: 鹦鹉
        description: 创造属于你的在线宠物鹦鹉，它会学你说话！
        levels:
            1:
                story_text: |
                    创造属于你的在线宠物鹦鹉，它会学你说话！
                example_code: |
                    ```
                    {print} Im 海蒂 the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将代码范例复制到你的输入屏幕。
                    让鹦鹉问一个不同的问题。填入例子中的空白处!
                    **额外的**你也可以让鹦鹉问多个问题。在你自己的代码下面再键入几行代码。
                example_code_2: |
                    ```
                    {print} 我是鹦鹉海蒂
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print}我是鹦鹉海蒂
                    {ask}你的名字是什么？
                    {echo}
                    {echo}
            2:
                story_text: |
                    创造属于你的在线宠物鹦鹉，它会学你说话！
                example_code: |
                    ```
                    {print} 我是鹦鹉海蒂
                    名字 {is} {ask} 你的名字叫什么？
                    {print} 名字
                    {sleep}
                    {print} 叽叽喳喳
                    {sleep}
                    {print} 名字
                    ```
                story_text_2: |
                    ### 练习
                    你可以使用变量来使鹦鹉说的不仅仅是你的名字。你能完成这段代码吗？
                start_code: '{print} 我是鹦鹉海蒂！'
            3:
                story_text: "用`{add}`教你的鹦鹉一个新词。\n### 练习 \n你如何让你的鹦鹉说多个词？\n"
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} 训练你的鹦鹉！
                    新词 {is} {ask} 你想让他们学哪个词？
                    {add} 新词 {to_list} 词汇表
                    {print} 🧒 新词，说 新词！
                    {print} 🦜 词汇表 {at} {random}
                    ```
                start_code: '# 在这里写你的代码'
            4:
                story_text: "在这一级中，我们必须在`{ask}` 和`{print}` 的命令中使用引号。\n### 练习 \n在空白处填上引号，完成代码。\n"
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} _ 训练你的鹦鹉！ _
                    新词 {is} {ask} _ 你想让他们学哪个词？ _
                    {add} 新词 {to_list} 词汇表
                    {print} _ 🧒 Say _ 新词 _, 海蒂 _
                    {print} _ 🦜 _ 词汇表 {at} {random}
                    ```
                start_code: '# 在这里写下你的代码'
            5:
                story_text: |
                    如果你的鹦鹉说出了正确的词，给它一些奖励！
                    通过填写4个缺失的命令来完成代码。
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} '训练你的鹦鹉！'
                    新词 {is} {ask} '你想让他们学哪个词？'
                    {add} 新词 {to_list} 词汇表
                    说了的词 {is} 词汇表 {at} {random}
                    {print} '🧒 海蒂，说' 新词 '！'
                    {print} '🦜 ' 说了的词
                    _说了的词 {is} 新词 _ '🧒 干得好！海蒂！🍪'
                    _ _'🧒 不对，海蒂！说' 新词
                    ```
                start_code: '# 在这里写你的代码'
    piggybank:
        name: 小猪银行
        default_save_name: 小猪银行
        description: 数数你的零花钱吧！
        levels:
            12:
                story_text: |
                    在这个冒险活动中，你将学习如何制作一个电子版本的小猪银行。
                    完成代码来计算出你有多少钱，以及你需要存多久的钱才能买到你想要的东西！
                example_code: |
                    ```
                    {print} '数字存钱罐'
                    愿望 = {ask} '你想买什么？'
                    价格 = {ask} '这要花多少钱？'
                    存款 = {ask} '你已经存了多少钱？'
                    零花钱 = {ask} '你每周有多少零花钱？'
                    需要_再存 = 价格 - 存款
                    周数 = 需要_再存/ 零花钱
                    {print} '你可以在'周数'周内买一个'愿望'。'
                    ```
                start_code: '# 将你的代码写在这里'
            14:
                story_text: |
                    在这个关卡中你可以让海蒂告诉你是否你存了足够的钱！
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# 在这里写下你的代码'
    pressit:
        name: 按键
        default_save_name: 按下
        description: 试试把键盘键和命令联系起来吧！
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} '你想要好 (g) 还是坏 (b) 结局？'
                    {if} g {is} {pressed} {print} '从此以后，他们幸福地生活在一起了 ❤'
                    {else} {print} '王子被河马给吃了😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# 在此处键入代码'
            7:
                story_text: |
                    现在你已经了解了`{repeat}` ，我们可以多次按下按键!你可以用它来使海龟向前走和转弯。

                    ### 练习
                    这个例子的代码只检查一次按键。改变代码，使你可以多次按下按键，并使用使用代码画出美丽的图案。
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# 把你的代码放在这里'
            9:
                story_text: "现在你知道了如何组合不同的语句，你可以用`{pressed}`创建一个触摸式工具。 \n\n### 练习\n完成这段代码。每一次都随机选择一个字母，你必须按下对应的按键。按对了可以得一分，按错了扣两分。\n"
                example_code: "```\n积分们 = 0\n字母们 = a, b, c, d, e\n{repeat} 10{times}\n    字母 = _ _ _ \n    {print} '按下字母' 字母\n    {if} 字母{is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# 把你的代码放在这里'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: 测验人员
        default_save_name: 测验人员
        description: 制定专属于你自己的测验！
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# 在这里写下你的代码'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: 餐厅
        default_save_name: 餐厅
        description: 创建你自己的虚拟餐厅
        levels:
            1:
                story_text: |
                    在第一关中您可以编写一个你自己的虚拟餐厅并接受客人的点单。
                example_code: |
                    ```
                    {print} 欢迎来到海蒂餐厅 🍟
                    _ 你想点什么？
                    {echo} 你想点
                    {print} 谢谢你的点单！
                    {print} 已经在做了！
                    ```
                story_text_2: |
                    ### 练习
                    单击黄色按钮，将示例代码复制到输入框。
                    首先，在空白处填写正确的命令，使代码正常工作。
                    然后在餐厅程序中至少再添加 4 行代码。
                    询问顾客他们想喝什么，并询问他们是否愿意用现金或信用卡支付。
                    最后，想出一个与顾客说再见的好方法。
                start_code: '# 在这里写你的代码'
            2:
                story_text: |
                    在第 2 关你可以使用变量来扩展你的餐厅。在第 1 关 海蒂只能 {echo} 订单一次，并记住最后一个点的东西。
                    现在你可以使用变量来让海蒂同时记住食物和饮料！
                example_code: |
                    ```
                    {print} 欢迎来到海蒂餐厅！
                    {print} 今天我们提供披萨和千层面。
                    食物 {is} {ask} 您想吃什么？
                    {print} 选得好！这是我最爱的食物！
                    配料 {is} {ask} 您想要加肉的还是蔬菜的？
                    {print} 加了 配料 的 食物 已经在做了！
                    ```
                story_text_2: |
                    ### 练习
                    将你自己的餐厅程序从上一级复制到下面的输入框。
                    通过替换“{ask}”和“{echo}”命令并使用变量来修复代码，就像您在此级中学到的那样。

                    现在你的程序又可以运行了，是时候添加更多内容了。
                    请看代码范例的最后一行：“{print} 带有配料的食物正在路上！
                    在这一行中，2 个变量被用于创建订单概要。
                    现在让你的顾客添加食物和饮料的订单概要。

                    **另外** 现在你已经学会了如何使用变量，你可以根据需要在一行中使用任意数量的变量。你能在你的代码中添加更多变量，比如堂食或外卖，现金或银行卡支付，要或不要吸管等？
                start_code: '# 将代码写在这里'
            3:
                story_text: |
                    在选择晚饭吃什么时选择困难了吗？你可以让海蒂帮你选！
                    只要将你最喜欢（或者最不喜欢）的食物加入列表，海蒂就可以随机帮你选择晚饭。
                    你也可以让海蒂帮你选择晚饭的价格，来获得更多乐趣！你会得到什么？
                example_code: |
                    ```
                    套餐 {is} 意大利面, 抱子甘蓝, 汉堡包
                    {print} 今晚有 套餐 {at} {random} ！
                    价格 {is} 1 欧元、10 欧元、100 欧元
                    {print} 餐费是 价格 {at} {random} 。
                    ```
                story_text_2: "### 练习\n现在制作你自己版本的随机菜单。\n自己制作一份包含前菜、主菜、甜点、饮料和价格的菜单。 \n然后使用 `{print}` 和 `{at} {random}` 命令告诉顾客今晚菜单的内容。\n"
                example_code_2: |
                    ```
                    {print}欢迎来到你自己的随机餐厅！
                    前菜 {is} _
                    主菜 {is} _
                    甜点 {is} _
                    饮料 {is} _
                    价格 {is} _
                    _
                    ```
                start_code: '# 在这里写你的代码'
            4:
                story_text: |
                    在此级别中，使用 `{print}` 或 `{ask}` 命令时必须使用引号。

                    ### 练习
                    在此代码中添加引号以使其正常工作！请注意：变量不应用引号引起来。
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} '欢迎来到海蒂餐厅！'
                    {print} '今天我们提供披萨和千层面。'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '选得好！这是我最爱的食物！'
                    配料 {is} {ask} '您想要加肉的还是蔬菜的？'
                    {print} '加了' 配料 '的' 食物 '已经在做了！'
                    饮料 {is} {ask} '您想喝点什么？'
                    {print} '谢谢您的点单。'
                    {print} '您的' 食物 '和' 饮料 '马上就来！'
                    ```
                start_code: '# 在这里写你的代码'
            5:
                story_text: |
                    在这一级，你可以用`{if}`命令向顾客`{ask}`，并对其回答做出不同的回应。

                    在下面的例子里，你能看到你可以`{ask}`顾客`{if}`想让你介绍今天的特价菜，海蒂会根据回答做出相应的回应。
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    推荐 {is} {ask} '您想了解我们今天的特色菜吗？'
                    {if} 特色菜 {is} 好的 {print} '今天的特色菜是霹雳辣椒烤鸡' {else} {print} '没关系.'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '一份' 食物 '，马上就来！'
                    饮料 {is} {ask} '您想配点什么喝的？'
                    {if} 饮料 {is} 可乐 {print} '对不起，可乐卖完了！' {else} {print} '选得好！'
                    别的 {is} {ask} '您还想要别的吗？'
                    {print} '我复述一下您的点单'
                    {print} '一份' 食物
                    {if} 饮料 {is} 可乐 {print} '以及……' {else} {print} '一杯' 饮料
                    {if} 别的 {is} 不用 {print} '就是这些' {else} {print} '一份' 别的
                    {print} '谢谢您的点单。祝您用餐愉快！'
                    ```
                start_code: '# 在这里写你的代码'
            6:
                story_text: |
                    在这一关，你可以用数学计算客人的订单总价，这会让你的虚拟餐厅更真实。
                example_code: |
                    你可以写一段简单的餐厅代码，像这样：
                    ```
                    {print} '欢迎来到海蒂餐厅'
                    {print} '这是我们的菜单：'
                    {print} '我们的主菜有披萨、千层面、意面'
                    主菜 = {ask} '您想要哪道主菜？'
                    价格 = 0
                    {if} 主菜 {is} 披萨 价格 = 10
                    {if} 主菜 {is} 千层面 价格 = 12
                    {if} 主菜 {is} 意面 价格 = 8
                    {print} '您点了' 主菜
                    {print} '请付' 价格 '元'
                    {print} '谢谢，祝您用餐愉快！'
                    ```
                start_code: '# 在这里写你的代码'
            7:
                story_text: |
                    在本关中，你已经学会了如何使用`{repeat}`命令来重复一行代码一定的次数。
                    你可以在你的餐厅中使用这个命令来 `{ask}` 多人想吃什么。

                    ### 练习
                    你能完成这段代码吗？有多少人海蒂就需要重复这个问题多少次。因此，如果有5个人，这个问题需要问5次。
                    **(另外)**用更多的问题来扩展你的代码，例如和饮料或酱汁有关的。
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    ```
                start_code: '# 在这里写你的代码'
            8:
                story_text: |
                    在这一关，你可以通过重复多行代码，让你的虚拟餐厅更加细化。像这样：
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                    {print} '谢谢您的点单！'
                    {print} '祝您用餐愉快！'
                    ```
                story_text_2: |
                    ### 练习
                    这个代码可以用菜单上的更多项目来扩展，例如，提供饮料，和、或多道菜或甜点。至少增加一个项目。
                    **(另外)** 添加更多的项目，只要你喜欢，有多少选择都可以!
                start_code: '# 在这里写你的代码'
            9:
                story_text: "在这一级，你可以用嵌套让你的餐厅更真实更有趣！\n\n### 练习 \n范例代码中删除了缩进。 \n你能算出每行需要多少缩进才能使代码正常工作吗？ \n如果顾客点了披萨，海蒂不应该问顾客想要哪种蘸酱。 \n\n**（另外）** 餐厅不会准备所有的蘸酱。列出一个可用的蘸酱的清单，并在每个订单中回复是否有存货。 <br> \n**（另外）** 披萨有配料。询问顾客他们想要哪一种配料。<br>   \n**（另外）** 顾客想喝一杯饮料吗？也问问他们！ <br>                    \n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    价格 = 0
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                        {if} 食物 {is} 薯条
                            价格 = 价格 + 3
                            蘸酱= {ask} '您的薯条要配什么酱？'
                            {if} 蘸酱 {is} 不要
                                {print} '不要酱'
                            {else}
                                价格 = 价格 + 1
                                {print} '配' 蘸酱
                        {if} 食物 {is} 披萨
                            价格 = 价格 + 4
                    {print} '一共' 价格 '元'
                    {print} '祝您用餐愉快！'
                    ```
                start_code: '# 在这里写你的代码'
            10:
                story_text: |
                    在本级别中，你将学习如何轻松地询问不同课程的订单。

                    ### 练习1
                    完成代码，在空白处加一个`{ask}`，这样顾客就会被问到每道菜想吃什么。
                example_code: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    {for} 餐品 {in} 全餐
                        {print} '你的上菜顺序是 ' 餐品 '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### 练习
                    当然，你也可以帮多个人点单！
                    您能否在每一行之前添加正确数量的缩进以使代码正常工作？
                    提示：有些行根本不需要任何缩进。
                example_code_2: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    客人们 = 丁满, 彭彭
                    {for} 客人 {in} 客人们
                        {for} 餐品 {in} 全餐
                            食物 = {ask} 客人 '，你想要吃什么' 餐品 '？'
                            {print} 客人 '点了' 食物 '作为' 餐品
                    ```
                start_code: 全餐 = 前菜, 主菜, 甜点
            11:
                story_text: "我们可以用`{for}`和`{range}`来按顺序打印多个客人的订单。\n\n### 练习 \n完成餐厅的代码，这样就可以按顺序询问多个客人的订单了。每次都按顺序打印订单：'订单1'，'订单2'，等等。 \n你不确定如何去做吗？请看一下你的第8级代码吧。\n\n **（另外）**在第9级中，餐厅也使用了价格。你也可以在这里添加价格！\n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '你想为多少人点单？'
                    {print} '所以你想为'人数'人下单。'
                    {print} '我们走吧！'
                    ```
                start_code: '# 在这里写你的代码'
            12:
                story_text: |
                    从这一层开始，你可以使用小数点后的数字来使你的菜单更加真实。

                    ### 练习
                    你能构思出一个代码来给你的朋友和家人提供15%的折扣吗？
                example_code: |
                    ```
                    价格 = 0
                    食物 = {ask} '您要点什么？'
                    饮料 = {ask} '您想喝什么？'
                    {if} 食物 {is} '汉堡包'
                        价格 = 价格 + 6.50
                    {if} 食物 {is} '披萨'
                        价格 = 价格 + 5.75
                    {if} 饮料 {is} '水'
                        价格 = 价格 + 1.20
                    {if} 饮料 {is} '苏打水'
                        价格 = 价格 + 2.35
                    {print} '请付' 价格 '元'
                    ```
                start_code: '# 在这里写你的代码'
            13:
                story_text: "在这一级，我们可以用新的命令来升级我们的餐厅。\n我们用`{and}`来判断 {if} 命令中的两个条件是否同时成立。\n \n ### 练习 \n在右边的空白处填写`{and}`和`{or}` 。\n"
                example_code: "```\n价格 = 10\n食物 = {ask} '您想吃什么？'\n饮料们 = {ask} '您想喝什么？'\n{if}食物 {is} '三明治'_ 饮料们 {is} '果汁'\n          {print} '这是我们的优惠套餐'\n          价格 = 价格 - 3\n{if}饮料们{is} '果汁' _饮料们{is} '矿泉水'。 \n          {print} '你的选择真健康！\n {print} '一共' 价格 '元'\n```\n"
                start_code: '# 在这里写你的代码'
            15:
                story_text: |
                    通过`{while}`命令，你可以确保你的客人能不断追加点单，直到点完。
                example_code: |
                    ```
                    {print} '欢迎来到麦海蒂快餐店'
                    还有 = '是'
                    {while} 还有 == '是'
                        点单 = {ask} '您要点什么？'
                        {print} 点单
                        还有 = {ask} '您还要点别的吗？'
                    {print} '谢谢惠顾！'
                    ```
                start_code: '# 在这里写你的代码'
    rock:
        name: 石头剪刀布
        default_save_name: 石头
        description: 制作你自己的石头剪刀布游戏
        levels:
            1:
                story_text: |
                    在第1级，你可以开始一个石头剪刀布游戏。

                    你可以用`{ask}`做出选择，然后用`{echo}`复述这个选择。
                example_code: |
                    ```
                    {print} 你选哪一个？
                    {ask} 从石头、剪刀和布中选一个
                    {echo} 所以你选的是：
                    ```
                story_text_2: |
                    ### 挑战
                    你可以不使用文字，而是使用表情符号。✊✋✌
                    你能用表情符号创造一个代码吗？
                example_code_2: |
                    ```
                    {print} 你选择什么？
                    {ask} 从_中选择
                    {echo} 所以你的选择是：
                    ```
                start_code: |
                    {print} 欢迎来到属于你自己的石头剪刀布！
                    {ask}你会选择什么？
            2:
                story_text: |
                    在这一级，你可以练习使用变量，这样你就能在下一级中完成石头剪刀布游戏！
                example_code: |
                    ```
                    _ {is} {ask} 石头、剪刀还是布？
                    {print}我选择 _
                    ```
                start_code: '# 在这里写你的代码'
            3:
                story_text: |
                    在这一级，我们可以输入列表并从列表中选择。
                    你要先用`{is}`制作一个列表。然后你可以用`{at} {random}`让电脑从列表里选一个。
                    例如，你可以让电脑选择石头、剪刀或布。
                example_code: |
                    ```
                    选择 {is} 石头，剪刀，布
                    {print} 选择 {at} {random}
                    ```
                story_text_2: |
                    复制示例代码并填入空白处，在这个游戏中增加一个额外的玩家。

                    **另外**现在的玩家只被称为玩家1和玩家2。你能不能添加询问命令（当然要有变量）来询问玩家的名字？
                    这样你就可以创建这样的输出，例如：李华选......纸
                example_code_2: |
                    ```
                    选择 {is} 石头、布、剪子
                    {print} 玩家1选择...在选项中 {at} {random}
                    {print} 玩家2 _
                    ```
                start_code: '{print} 欢迎来到属于你自己的石头剪刀布！'
            4:
                story_text: |
                    在这一级，我们可以进一步对石头剪刀布游戏编程。但是如果你想要添加文字，你同样需要使用引号。
                    ### 练习
                    复制上一级的代码并在每个`{print}` 或`{ask}` 命令后使用引号使其正常工作。
                start_code: '{print} ''欢迎来到属于你自己的石头剪刀布！'''
            5:
                story_text: |
                    在这一级，我们可以判定谁赢了。
                    为此你需要使用新的`{if}`命令。

                    将你的选择保存下来，并把电脑的选择也保存下来。
                    然后你用`{if}`来判断他们是否相同。
                    你能完成这段代码吗？
                example_code: |
                    ```
                    选项 {is} 石头，剪刀，布
                    电脑选择 {is} _
                    你选择 {is} {ask} 你选什么？
                    {print} '你选了' _
                    {print} '电脑选了' _
                    {if} _ {is} _ {print} '平局！' {else} {print} '不是平局'
                    ```

                    在空白处填上正确的代码，来判断{if}这是平局。
                start_code: '{print} ''欢迎来到属于你自己的石头剪刀布！'''
            9:
                story_text: |
                    在这一级，你可以用嵌套的`{if}`命令来编程石头剪刀布。你能完成这段代码吗？

                    ### 练习
                    你能完成代码吗？程序必须能判断赢家以及对应的组合是什么。

                    **（另外）** 想玩多玩几个游戏吗？拓展代码，以便您可以多玩几个回合。您甚至可以使用 `{ask}` 询问用户他们想玩多少回合。
                example_code: |
                    ```
                    选项 {is} 石头，剪刀，布
                    你选择 {is} {ask} '你选择什么？'
                    {print} '你选择了' 你选择
                    计算机选择 {is} 选项 {at} {random}
                    {print} '计算机选择了' 计算机选择
                    {if} 计算机选择 {is} 你选择
                        {print} '平手'
                    {if} 计算机选择 {is} 石头
                        {if} 你选择 {is} 布
                            {print} '你赢了！'
                        {if} 你选择 {is} 剪刀
                            {print} '你输了！'
                    # 完成这段代码
                    ```
                start_code: '# 在这里写你的代码'
            10:
                story_text: |
                    你觉得自己太懒了，不想自己玩游戏？让海蒂帮你玩吧!
                    你只需要填上玩家的名字，他们就会得到一个随机的选择。

                    ### 练习1
                    完成程序，填上名字的清单。

                    ### 练习2
                    增加一个电脑玩家，与每个玩家一起选择。

                    **(另外)**回到你的代码中，决定每一轮谁赢：计算机或被点名的人。
                example_code: |
                    ```
                    选项 = 石头，剪刀，布
                    玩家们 =  _
                    {for} 玩家 {in} 玩家们
                         {print} 玩家 '选择' 选项 {at} {random}
                    ```
                start_code: '# 在这里写你的代码'
            13:
                story_text: |
                    你可以用`{and}`命令缩短你的石头剪刀布代码！阅读下面的示例代码，并尝试完成它。
                example_code: |
                    ```
                    选项 = '石头', '剪刀', '布'
                    你的_选择 = {ask} '你选什么？'
                    电脑_选择= 选项 {at} {random}
                    {print} '你选了' 你的_选择
                    {print} '电脑选了' 电脑_选择
                    {if} 电脑_选择 {is} 你的_选择
                        {print} '平局'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '布'
                        {print} '你赢了！'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '剪刀'
                        {print} '电脑赢了！'
                    _
                    ```
                start_code: '# 在这里写你的代码'
            15:
                story_text: |
                    玩到你打败电脑为止！但首先，你要补全示例代码……
                example_code: |
                    ```
                    赢 = '否'
                    选项 = '石头', '剪刀', '布'
                    {while} 赢 == '否'
                        你的_选择 = {ask} '你选择了什么？'
                        计算机_选择 = 选项 {at} {random}
                        {print} '你选择了 ' 你的_选择
                        {print} '计算机选择了' 计算机_选择
                        {if} 计算机_选择 == 你的_选择
                            {print} '平手！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '剪刀'
                            {print} '你输了！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '布'
                            {print} '你赢了！'
                            赢 = '是'
                    _
                    ```
                start_code: '# 在这里写你的代码'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: 超级间谍
        default_save_name: 超级间谍
        description: 编写你自己的间谍代码
        levels:
            12:
                story_text: |
                    在这个冒险活动中，你可以编写出你自己的超级间谍代码。编码一个只有合适的特工才能破译的信息。
                    如果敌人试图破解代码，他们会得到一些虚假的信息来浪费他们的时间。

                    ### 练习
                    为你的超级间谍编写你自己的秘密代码。你能让它由更多的变量组成吗？
                example_code: |
                    ```
                    名字 {is} {ask} '你的名字是什么？'
                    {if} 名字 {is} '特工007'
                        a {is} '去机场'
                    {else}
                        a {is} '去火车站'
                    密码 {is} {ask} '密码是什么？'
                    {if} 密码 {is} 'TOPSECRET'
                        b {is} '明天02.00'
                    {else}
                        b {is} '今天10.00'
                    {print} a + b
                    ```
                start_code: '# 在这里写下你的代码'
            13:
                story_text: |
                    你能在空白处填上正确的命令吗？注意：超级间谍必须同时回答正确两个问题，然后才能获取机密情报!
                example_code: |
                    ```
                    名字 {is} {ask} '你的名字是什么？
                    密码 {is} {ask} '你的密码是什么？'
                    {if} 名字 {is} '特工007' _密码{is} 'TOPSECRET'
                        {print} '02.00去机场'
                    {else}
                        {print} '10.00去火车站'
                    ```
                start_code: '# place your code here'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: 唱支歌！
        default_save_name: 歌
        description: 打印一首歌
        levels:
            6:
                story_text: "歌曲中通常包含大量重复。有时重复是基于计数的。\n比如那首著名的歌曲“啤酒瓶”中。你可以用一点数学知识来为这首歌编程。 \n \n提示：使用朗读功能，让海蒂把歌曲唱给你听! \n\n### 练习 \n现在你可以通过复制第2至第7行的内容来重复这几行歌词，你想要重复几次就可以重复几次。\n"
                example_code: |
                    ```
                    歌词 = 99
                    {print} 歌词 '瓶啤酒在墙上'
                    {print} 歌词 '瓶啤酒'
                    {print} '取下一瓶传下去'
                    歌词 = 歌词 - 1
                    {print} 歌词 '瓶啤酒在墙上'
                    {sleep}
                    ```
                story_text_2: |
                    这首儿童歌曲从5只小猴子倒数到1只猴子。
                    如果你复制第2-7行并粘贴在代码下面，你就可以唱出整首歌了！
                example_code_2: |
                    ```
                    数字 = 6
                    数字 = 数字 - 1
                    {print} 数字 ' 小猴子在床上跳来跳去'
                    {print} '有一只掉下来，撞到了头'
                    {print} '妈妈叫来了医生，医生说'
                    {print} '不能再有猴子在床上跳了！'
                    {sleep}
                    ```
                start_code: '{print} ''让我们唱歌吧！'''
            7:
                story_text: "歌曲经常包含大量的重复。例如...小鲨鱼!如果你唱这首歌，其实你就是一直在唱同一句歌词：\n\n小鲨鱼图图图杜杜 <br>\n 小鲨鱼图图图杜杜 <br>\n小鲨鱼图图图杜杜 <br>\n小鲨鱼\n\n### 练习 \n你可以用`{repeat}` 来打印歌曲《小鲨鱼》？ 完成代码，替换空白处？ \n**另外* 在《小鲨鱼》之后，你当然还可以为其他歌曲编程。很多歌曲都有重复的句子！你能想出更多的歌曲吗？ \n你能再想出一首歌曲并打印出来吗？\n"
                example_code: |
                    ```
                    {repeat} _ _{print} '小鲨鱼图图图杜杜'
                    {print} '小鲨鱼'
                    ```
                start_code: '{print} ''小鲨鱼'''
            8:
                story_text: |
                    在上一级中，你已经为歌曲 "啤酒瓶"编写了程序。但由于没有`{repeat}` ，你不得不多次复制一段歌词。
                    在这一级中，你只需要简单地增加一行代码，就能重复这首歌99次！

                    ### 练习
                    在空白处添加正确的命令，并正确缩进代码。
                example_code: |
                    ```
                    歌词 = 99
                    _ 99 {times}
                        {print} 歌词 '瓶啤酒在墙上'
                        {print} 歌词 '瓶啤酒'
                        {print} '取下一瓶传下去'
                        歌词 = 歌词 - 1
                        {print} 歌词 '瓶啤酒在墙上'
                    ```
                start_code: '# 在这里写你的代码'
            10:
                story_text: |
                    使用`{for}`，你只需6行即可打印整首小鲨鱼的歌曲（包括家庭中的所有其他鲨鱼）！

                    ### 练习 1
                    你能使用 `{for}` 命令使小鲨鱼这首歌的代码更简短吗？请完成代码范例。
                example_code: "```\n家庭成员 = 宝宝, 妈妈, 爸爸, 奶奶, 爷爷\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### 练习2
                    打印歌曲《5只小猴子们在床上跳来跳去》。如果你不记得了，就查查文本。

                    **（额外的）**打印歌曲《老麦当劳》，并确保所有的动物都发出不同的声音，使用`{if}`条件语句 。
                example_code_2: |
                    ```
                    猴子们 = 5, 4, 3, 2, 1
                    ```
                start_code: '# 在这里写你的代码'
            11:
                story_text: |
                    在这一级，你可以同时使用`{for}` 和`{range}`命令 ，做一些使用计数的歌曲，如5只小猴子们。

                    ### 练习1
                    填空使代码生效！如果你不记得歌曲的内容，可以自己去查。

                    ### 练习2
                    这首歌的最后一行与其他的不同。将这一行打印在`{for}`语句里面 ，并使用`{if}`命令使其正确工作。
                example_code: |
                    ```
                    猴子们 _ _ 5 _ 1
                        {print} 猴子们 ‘小猴子们在床上跳来跳去’
                        _
                    ```
                start_code: '# 把你的代码放在这里'
            12:
                story_text: "在这首歌中，我们可以使编程变得更加容易 '如果你很快乐，你意识到了，拍拍你的手'。因为我们可以把所有的动作放在一个变量中，看看吧。\n \n### 练习 \n你能在每一行中加入适量的缩进，使歌曲正确播放吗？ \n注意：不是所有的行都需要缩进\n"
                example_code: |
                    ```
                    _一组动作 = '拍拍手', '跺跺脚', '喊万岁!'
                    _ {for} 动作 {in} 一组动作
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} '如果你很高兴，你意识到它'
                    _ {print}动作
                    _ {print} '如果你很高兴，你意识到它，你真的想表现出来'
                    _ {print} '如果你快乐并意识到它'
                    _ {print} 动作
                    ```
                start_code: '# 把你的代码放在这里'
            16:
                story_text: |
                    在这一级中，你可以更快速地编排一首像《老麦当劳》这样的歌曲。你可以把正确的动物和正确的声音联系起来，只要把它们放在列表的同一位置。
                    《醉酒的水手》在这一级别也能很快制作完成。你只需要8行就可以完成整首歌，看看吧!
                example_code: |
                    ```
                    动物们 = ['猪', '狗', '牛']
                    声音们 = ['哼哼', '汪汪', '哞']
                    {for} i {in} {range} 1 {to} 3
                        动物 = 动物们[i]
                        声音 = 声音们[i]
                        {print} '老麦当劳有一个农场'
                        {print} '咦啊咦啊欧！'
                        {print} '在那个农场里，他有一个' 动物
                        {print} '咦啊咦啊欧！'
                        {print} '这里有一个'声音'的声音'
                        {print} '和一个'声音'的声音那里'
                        {print} '这里有一个'声音
                        {print} '那里有一个'声音
                        {print} '到处都是一个'声音 声音
                    ```

                    ```
                    句子们 = ['我们该如何对待醉酒的水手', '用生锈的剃须刀刮光他的胡子', '把他放在大船上直到他清醒']
                    {for} 句子 {in} 句子们
                        {for} i {in} {range} 1 {to} 3
                            {print} 句子
                        {print} '一大清早'
                        {for} i {in} {range} 1 {to} 3
                            {print} '头昏脑涨的睁开眼'
                        {print} '一大清早'
                    ```
                start_code: '# 把你的代码放在这里'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['我们应该如何处理醉酒的水手'，'用生锈的剃刀剃他的肚子'，'让他躺在船上醒酒']
                    {for} 行 {in} 行 _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ 行 _
                         {print} '凌晨'
                         {for} i {in} {range} 1 {to} 3
                             {print} 'way hay and up she rises'
                         {print} '凌晨'
                    ```
                start_code: '# 在此处键入代码'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    在这个探险活动中，你可以编写一个三连棋游戏的程序。你可以和两个人一起玩，两个人轮流在印有九格方盘上划“x”或“o”字。
                    谁先把三个同一记号排成横线、直线、或斜线, 谁就赢了！
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '#  在这里写下你的代码'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Taic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# place your code here'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let 海蒂 check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# place your code here'
    turtle:
        name: 海龟
        default_save_name: turtle
        description: 创作自己的绘画作品
        levels:
            1:
                story_text: |
                    你也可以用海蒂来画画。通过结合旋转和画线，你可以画出一个正方形或楼梯!

                    使用`{forward}`你可以向前画一条线。它后面的数字决定了海龟会走多远。`{turn} {right}`是顺时针转四分之一圈，`{turn} {left}`是逆时针转。

                    如果你想向后退，你可以使用`{forward}`命令，但要用一个负数。因此，比如说`{forward} -100`


                    ### 练习
                    让我们开始画一个小楼梯。你能使它有5个台阶吗？
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    在这一级，你可以使用变量来使海龟互动。例如，你可以问玩家海龟必须走多少步。
                example_code: |
                    ```
                    答案 {is} {ask} 海龟应该走多少步？
                    {forward}答案
                    ```
                story_text_2: |
                    此外，在第1级，海龟只能左转或右转。这有点无聊！
                    在第2级，它可以转向任何方向。

                    用90来转1/4圈。我们管这个叫角度。完整转一圈是360度。

                    ### 练习
                    你能用这段代码来画一个图形吗？比如三角形或者圆形？
                example_code_2: |
                    ```
                    {print} 正在画图
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                start_code: |-
                    {print} 海龟赛跑！
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
            3:
                story_text: |
                    在这个级别中，您可以将 `{at} {random}` 与海龟绘图一起使用。使用随机选择使乌龟每次走不同的路径。
                    使用 `{at} {random}` 从列表中选择一个值。
                    ### 练习
                    您可以复制并粘贴第 2 行和第 3 行以创建更长的随机路径。
                example_code: |
                    ```
                    角度 {is} 10, 50, 90, 150, 250
                    {turn} 角度 {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    角度 {is} 10, 50, 90, 150, 250
                    {turn} 角度 {at} {random}
                    {forward} 25
            4:
                story_text: |
                    在第4级，你必须在`{print}`和`{ask}`语句中使用引号。在画画时也一样！
                example_code: |
                    ```
                    {print} _ '正在画图'
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    你也可以用命令`{color}` ，改变线条的颜色。请看这个例子。
                    你还可以用命令`{color} {white}`来制作 "看不见的 "线条。你可以用这些白线在开始绘图前将乌龟移到屏幕的任何地方。
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} '绘图'
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
            5:
                story_text: |
                    在第5级，你可以用`{if}`来做出选择。比如选择不同类型的图案。
                example_code: |
                    ```
                    {print} '正在画图'
                    图形 {is} {ask} '你想要正方形还是三角形？'
                    {if} 图形 {is} 三角形 角度 {is} 120
                    {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    ### 练习
                    在此代码中输入正确的数字使其工作。
                    完成后，您可以尝试向后添加选项。

                    **额外** 请勿使用“左”和“右”，而是用北、东、南和西重新制作程序。
                    这样您就可以添加更多方向，例如东北和西南等。
                example_code_2: |
                    ```
                    方向 {is} {ask} '你想向左走、向右走还是一直向前走？'
                    {if} 方向 {is} 左 {turn} _
                    {if} 方向 {is} 右 {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} '绘图'
                    图形 {is} {ask} '你想要一个正方形还是三角形？'
                    {if} 图形 {is} 三角形 角度 {is} 120 {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
            6:
                story_text: |
                    在这一级，你可以使用算术来绘制不同的图形。
                    你可能在学校里学过，旋转一圈是360度。如果没学过，那你现在知道了！
                    这就是为什么你可以用90度来画方形。360除以4是90。
                    现在我们可以用海蒂做数学，我们就能画出所有想要的图形！
                example_code: |
                    ```
                    边 = {ask} '你想要画几边形？'
                    角度 = 360 / 边
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    ```
                start_code: '{print} ''绘图'''
            8:
                story_text: "现在我们能重复多行了，可以更容易地画图。\n我们只需要设置一下角度，然后在`{repeat}`中使用这个变量。\n\n### 练习1 \n用这个代码范例画了一个正方形。改变代码，使其画另一个图形，如一个三角形或一个六边形。 \n这需要对两行代码进行修改。\n 提示：一个完整的圆是360度。\n \n ### 练习2 \n现在画一个至少由两个多边形组成的图形。\n"
                example_code: |
                    ```
                    角度 = 90
                    {repeat} 4 {times}
                        {turn} 角度
                        {forward} 50
                    ```
                story_text_2: |
                    **（另外）**我们现在还可以改进之前的能画不同图案的程序。完成这段代码，你就能画出任何你想要的多边形！
                example_code_2: |
                    ```
                    边数 = {ask} '你想要几边形？'
                    角度 = 360 / 边数
                    {repeat} 边数 {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: 图形 = {ask} '我应该画几边形？'
            9:
                story_text: |
                    我们现在可以在 `{repeat}`中使用 `{repeat}`了，我们可以创建更复杂的图形了。

                    ### 练习1
                    这段代码能画三个黑色的三角形，把它改成能画出五个粉红色方块。

                    **（另外）** 你自己编码画出一个的至少由两种不同图形类型组成的图形。
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '#将你的代码放在这里'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: 新年
        default_save_name: 新年倒计时
        description: 新年倒计时!
        levels:
            11:
                story_text: |
                    在此级别中，您可以使用 `{for}` 数字 `{in}` `{range}` 命令倒计时到新年。

                    ### 练习
                    填空并使代码正常工作！
                example_code: |
                    ```
                    {for} 数字{in} {range} _{to} _
                        {print} 数字
                    {print} '新年快乐！'
                    ```
                start_code: '# 在这里写你的代码'
