adventures:
    story:
        name: Hikaye
        default_save_name: Hikaye
        description: Hikaye
        levels:
            1:
                story_text: |
                    Seviye 1'de, kendiniz girdiğiniz farklı bir ana karakterle bir hikaye oluşturabilirsiniz.

                    İlk satırda `{ask}` kullanın ve hikayenin ana karakterinin kim olacağını sorun.

                    Bu ilk satırdan sonra, cümlenin yazdırılması gerekiyorsa `{print}` ile başlayın.
                    Ana karakterinizin cümlenin sonunda olmasını istiyorsanız `{echo}` kullanırsınız.
                example_code: |
                    ```
                    {ask} Bu hikayenin ana karakteri kim?
                    {print} Ana karakter şimdi ormanda yürüyecek
                    {echo} Biraz korkmuş,
                    {print} Her yerde çılgın sesler duyuyor.
                    {print} Buranın perili bir orman olmasından korkuyor.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi en az 6 satır koddan oluşan kendi hikayenizi oluşturun.
                    Bu hikaye örnek kodumuzdaki ile aynı olmasın.
                    En az bir tane `{ask}` ve bir tane `{echo}` komutu kullanın.
                    İstediğiniz herhangi bir konu hakkında yapabilirsiniz.
                    Aklınıza bir konu gelmiyorsa, seçeneklerimizden birini kullanın: sinemaya gitmek, bir spor karşılaşması veya hayvanat bahçesinde bir gün.
                start_code: '{print} Hikayeniz burada başlıyor'
            2:
                story_text: |
                    2. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Ana karakterinizin adı artık cümle içinde herhangi bir yerde olabilir.

                    Bunun için birazcık daha fazla programlamanız gerekiyor. İlk önce ana karakterinize isim vermelisiniz.

                    Daha sonra bu ismi cümle içinde herhangi bir yere koyabilirsiniz.
                example_code: |-
                    ```
                    isim {is} {ask} Ana karakterin adı nedir?
                    {print} isim şimdi ormanda koşacak
                    {print} isim biraz korkuyor
                    {print} Aniden çılgın bir ses duydu....
                    {sleep}
                    {print} isim buranın perili bir orman olmasından korkuyor
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi sırada bir önceki seviyede oluşturduğunuz kendi hikayenize değişkenler ekleme zamanı.
                    'Programlarım'a gidin, 1. seviye hikaye maceranızı bulun ve kodunuzu kopyalayın. Kodu bu seviyedeki giriş ekranınıza yapıştırın.

                    Bu kod bu seviyede çalışmayacaktır, çünkü henüz değişkenleri kullanmadınız.
                    Kodunuzdaki `{ask}` komutlarını ve `{echo}` komutlarını bu seviyede öğrendiğiniz doğru şekilleriyle değiştirin.

                    **Ekleme** Hikayenizde gerilim oluşturmak için kodunuza bir `{sleep}` komutu ekleyin.
                start_code: '{print} Sizin hikayeniz'
            3:
                story_text: |
                    3. seviyede, hikayenizi daha eğlenceli hale getirebilirsiniz. Bunun gibi herhangi bir canavar, hayvan veya diğer engeller için rastgelelik kullanabilirsiniz:
                example_code: |
                    ```
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} Şimdi şunun sesini duyuyor: bir hayvanlar {at} {random}
                    ```
                story_text_2: |
                    Hikayenizde `{add}` komutu da kullanışlı olabilir.
                example_code_2: |
                    ```
                    {print} Bir ses duyuyor
                    hayvanlar {is} 🐿, 🦔, 🦇, 🦉
                    hayvan {is} {ask} Ne olduğunu düşünüyorsun?
                    {add} hayvan {to_list} hayvanlar
                    {print} bu bir hayvanlar {at} {random}
                    ```
                story_text_3: |
                    Bu, hikayenizdeki `{remove}` komutunun bir örneğidir

                    ### Alıştırma
                    Önceki seviyelerdeki hikayenizi bu seviyeye kopyalayın.
                    Bu seviyede, 3 yeni komut öğrendiniz `{at} {random}` , `{add} {to}` ve `{remove} {from}`.
                    Hikayenize yeni kod satırları ekleyin, böylece tüm yeni komutlar hikayenizde en az bir kez yer alsın.
                example_code_3: |
                    ```
                    {print} Sırt çantası çok ağırlaştı.
                    {print} İçinde bir şişe su, bir el feneri ve bir tuğla vardı.
                    çanta {is} şişe su, el feneri, tuğla
                    çıkar {is} {ask} Hangi eşyayı atmalı?
                    {remove} çıkar {from} çanta
                    ```
                start_code: '{print} Sizin hikayeniz'
            4:
                story_text: |
                    Önceki seviyelerde hala bir sorun olduğunu fark etmiş olabilirsiniz. İsim kelimesini içeren bir cümle yazdırmayı denediniz mi? Örneğin: `{print}` benim adım adım dır.
                    Bunu bu seviyede çözebilirsiniz. Yazdıracağınız her şey için tırnak işareti kullanmalısınız.

                    ### Alıştırma
                    Örnek kodu kopyalayın ve 1. ve 2. satırlardaki boşluklara tırnak işareti ekleyerek tamamlayın.
                    Satır 3 ve 4'teki boşluklar tırnak işaretleriyle değil, bir `{sleep}` ve bir `{clear}` komutuyla değiştirilmelidir. Bunu çalıştırabilir misin?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve hikaye kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                    Aklınızda bulunsun: Hikayenizdeki değişkenler tırnak işaretlerinin dışında olmalıdır; tıpkı örnek kodun ikinci satırında olduğu gibi. Bu satırda değişken adı tırnak işaretlerinin dışına yerleştirilmiştir.
                example_code: |
                    ```
                    isim {is} {ask} _ Adın nedir? _
                    {print}  _ Ana karakterin adı _ isim
                    _
                    _
                    {print} isim _ şimdi ormanda yürüyecek _
                    {print} isim _ biraz korkuyor _
                    hayvanlar {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Şunun sesini duyuyor _ hayvanlar {at} {random}
                    {print} isim _ buranın perili bir orman olmasından korkuyor _
                    ```
                start_code: '{print} ''Hikayeniz buraya yazılacak!'''
            5:
                story_text: |
                    Bu seviyede, hikayenizi daha da eğlenceli hale getirecek farklı sonlar programlayabilirsiniz.
                    Örnek kodda 2 farklı sonun nasıl yapıldığını görebilirsiniz.

                    ### Alıştırma 1
                    Seçtiğiniz bir konu hakkında en az 6 satırlık yeni bir kısa hikaye yazın.
                    İlham gelmedi mi? Şu konulardan birini seçin: bir süper kahraman, sıkıcı bir okul günü, ıssız bir adada mahsur kalmak.

                    Şimdi oyuncuya örnek kodda olduğu gibi mutlu veya kötü sonu seçmesi için bir şans verin.
                    Her iki sonu da programlayın.

                    ### Alıştırma 2
                    Önceki seviyelerde kendi hikaye maceranızda oluşturduğunuz hikayeyi kopyalayın.
                    Hikayenize en az 2 tane `{if}` ve `{else}` komutu eklemenin bir yolunu bulun.
                    Bu mutlu ya da kötü bir son için olabilir, ancak komutları dahil etmek için başka yollar da bulmaya çalışabilirsiniz.
                example_code: |
                    ```
                    isim {is} {ask} 'Ormanda yürüyen kim?'
                    {print} isim ' ormanda yürüyor'
                    {print} isim ' bir canavarla karşılaşır'
                    son {is} {ask} 'İyi bir son mu yoksa kötü bir son mu istersiniz?'
                    {if} son {is} iyi {print} isim ' kılıcını çıkarır ve canavar hızla kaçar'
                    {else} {print} isim ' canavar tarafından yendi'
                    ```
                start_code: '{print} ''Hikayeniz burada başlayacak!'''
            7:
                story_text: |
                    Bir hikayede, birileri kelimeleri birkaç kez söyler. Örneğin, birisi yardım istediğinde veya şarkı söylediğinde.
                    Bu seviyede, bu tür tekrarları hikayenize `{repeat}` ile koyabilirsiniz.

                    ### Alıştırma
                    Kendi hikayenize tekrarlama ekleyin. Kayıtlı programlarınıza geri dönün, 6. seviyedeki hikaye programınızı seçin ve
                    `{print}` içeren bir satır seçip onu tekrarlayın!
                example_code: |
                    ```
                    {print} 'Prens sürekli yardım istiyordu.'
                    {repeat} 5 {times} {print} 'Yardım edin!'
                    {print} 'Neden kimse bana yardım etmiyor?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Yardım edin!'''
            8:
                story_text: |
                    Bu seviyede `{if}` komutlarınızda birden fazla satır kullanabilirsiniz, bu şekilde mutlu veya üzücü sonunuzu güncellemiş olacaksınız!

                    ### Alıştırma 1
                    Örnek kodda iki farklı son gösterilmektedir; biri karakterlerin zaman makinesine atladığı, diğeri ise atlamadığı son.
                    Boşlukları her sonda en az bir cümle olacak şekilde tamamlayın.
                    **Ekleme** Hikayeyi daha uzun hale getirin. Hikayede ne oluyor? Farklı seçenekler içeren ikinci bir `{ask}` da ekleyebilirsiniz.

                    ### Alıştırma 2
                    Kayıtlı programlarınıza geri dönün, 5. seviyedeki hikaye programınızı seçin. Şimdi her biri en az üç satır uzunluğunda bir iyi ve bir kötü son yazın!
                example_code: |
                    ```
                    {print} 'OLAMAZ! T-rex yaklaşıyor!'
                    son = {ask} 'Mutlu bir son mu yoksa hüzünlü bir son mu istiyorsunuz?'
                    {if} son {is} mutlu
                        {print} 'Ali tam zamanında zaman makinesine geri atlıyor!'
                        {print} _
                    {else}
                        {print} 'Olamaz! Ali çok yavaştı ve....'
                        {print} _
                    ```
                start_code: '# kodunuzu buraya yazın'
            9:
                story_text: |
                    Bu seviyede artık `{if}` ve `{repeat}` komutlarını, diğer `{if}` ve `{repeat}` komutlarının içinde kullanabilirsiniz.
                    Bu size birçok seçenek sunar ve hikayenizi gerçekten etkileşimli hale getirmenize yardımcı olur.

                    ### Alıştırma 1
                    Kodu tamamlayın, böylece `{if}` doğru şekilde çalışsın.

                    ### Alıştırma 2
                    Hikayede, Ayşe'nin de eve gittiği kısmı için bir `{if}` ve `{else}` ekleyin.

                    ### Alıştırma 3
                    Seviye 8 'deki hikayenize geri dönün ve başka bir `{if}` içinde en az iki `{if}` kullanın.
                example_code: |
                    ```
                    {print} 'Ayşe şehir merkezinde yürüyor.'
                    yer = {ask} 'Ayşe bir dükkana mı giriyor, yoksa eve mi gidiyor?'
                    {if} yer {is} dükkan
                        {print} 'Dükkana girer.'
                        {print} 'Ayşe ilginç görünümlü bir kitap görür'
                        kitap = {ask} 'Ayşe kitabı satın aldı mı?'
                        {if} kitap {is} evet
                        _ {print} 'Ayşe kitabı satın alır ve eve gider.'
                        _ {else}
                        _ {print} 'Ayşe dükkânı terk eder ve eve gider.'
                    {else}
                        {print} 'Ayşe eve gider'
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    Bu seviyede {for} komutunu hikayenizde kullanabilirsiniz. Bu şekilde 'Brown bear, Brown bear, what do you see' adlı çocuk kitabını kolayca programlayabilirsiniz.

                    ### Alıştırma

                    Eğer bilmiyorsanız <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> hikayeye bir göz atın</a> , ve kitapta yazıldığı gibi yazdığınızdan emin olun. (Bunun gibi bir Türkçe kitap biliyorsanız onu da yazabilirsiniz)
                example_code: "```\nhayvanlar = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n {print} 'What do you see?'\n```\n"
                start_code: '# kodunuzu buraya yazın'
            12:
                story_text: |-
                    Bu seviyede, bir değişkene birden fazla kelimeyi kaydetmek için tırnak işaretlerine ihtiyaç duyulacaktır.

                    ### Alıştırma

                    Önceki seviyelerden bir hikaye bulun, herhangi bir seviye olabilir. Şimdi tırnak işaretlerinin doğru yerlere eklendiğinden emin olun.
                example_code: |
                    ```
                    isim = 'İngiltere Kraliçesi'
                    {print} isim ' bir parça kek yiyordu, sonra aniden...'
                    ```
                start_code: '# kodunuzu buraya yazın'
            13:
                story_text: |
                    `{and}` ve `{or}` komutlarını kullanarak hikayelerinizi çok yönlü hale getirebilirsiniz. İki soru sorabilir ve cevapların bir karışımına yanıt verebilirsiniz.

                    ### Alıştırma 1
                    Örnek koda bakın ve tamamlayın. Ardından `{and}` veya `{or}` ile en az 2 `{if}` kodu daha ekleyin.

                    ### Alıştırma 2
                    Önceki bir seviyeden bir hikaye bulun ve bir `{and}` veya `{or}` ekleyin.
                example_code: |
                    ```
                    {print} 'Kahramanımız ormanda yürüyor.'
                    {print} 'Yol ikiye ayrılıyor'
                    yol = {ask} 'Hangi yolu seçmeli?'
                    silah = {ask} 'Hangi silahı çekiyor?'
                    {if} yol {is} 'sol' {and} silah {is} 'kılıç'
                        _
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    `{while}` döngüsünü kullanmak hikayelerinizi daha ilginç hale getirebilir. Örneğin, oyun bitene kadar oynayabilmek için `{while} oyun {is} 'devam'` kullanabilirsiniz.
                    Ya da `{while} kılıç {is} 'kayıp'` kullanabilirsiniz, böylece oyuncu bir şey bulana kadar oyuna devam edemez.
                example_code: |
                    ```
                    anahtarlar = 'kayıp'
                    {print} 'Bahçenizde duruyorsunuz ve anahtarlarınızı kaybettiniz.'
                    {print} 'Onları nerede aramak istersiniz?'
                    {print} 'Seçebilirsiniz: ağaç, çiçeklik, kaya, posta kutusu'
                    {while} anahtarlar == 'kayıp'
                        yer = {ask} 'Nereye bakmak istiyorsun?'
                        {if} yer == 'çiçeklik'
                            {print} 'İşte buradalar!'
                            anahtarlar = 'bulundu'
                        {else}
                            {print} 'Hayır, burada değiller: ' yer
                    {print} 'Şimdi eve girebilirsiniz!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            18:
                story_text: |
                    Başka bir hikaye yazdıracağız, ancak şimdi `{print}` ile parantez kullanmak zorundayız.

                    ### Alıştırma 1
                    En az 5 cümlelik bir hikaye oluşturun. Henüz herhangi bir 'isim' kullanmak zorunda değilsiniz.
                example_code: |
                    ```
                    {print}('Bu hikayeye hoş geldiniz!')
                    ```
                story_text_2: |
                    ### Alıştırma 2
                    Sizin için zaten bir `{input}` hazırladık. Öncelikle hikayenizde `isim` değişkenini kullanın.
                    Ardından ikinci bir `{ask}` ekleyin ve bu değişkeni de kullanın.
                    İpucu: `{print}` içinde, metin ve değişkenler arasındaki virgülleri unutmayın!
                example_code_2: |
                    ```
                    isim = {input}("Senin adın ne?")
                    {print}('Bu hikayeye hoş geldin!')
                    ```
                start_code: '# kodunuzu buraya yazın'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: ekle_çıkar_komutu
        description: ekle şuraya ve çıkar şuradan komutlarına giriş
        levels:
            3:
                story_text: |
                    ## ekle şuraya
                    Listeye `{add} {to}` komutu ile yeni öğeler ekleyebilirsiniz. Listeye bir öğe eklemek için sadece şunu yazın: `{add} penguen {to} hayvanlar` , ya da örnek koddaki gibi `{ask}` komutunu kullanabilirsiniz.
                example_code: |
                    ```
                    hayvanlar {is} köpek, kedi, kanguru
                    sevilen {is} {ask} En sevdiğin hayvan hangisi?
                    {add} sevilen {to_list} hayvanlar
                    {print} Benim seçimim hayvanlar {at} {random}
                    ```
                story_text_2: |
                    ## kaldır şuradan
                    Bir listeye öğe ekleyebiliyorsanız, elbette bunları listeden çıkarabilirsiniz de. Bu işlem `{remove} {from}` komutu ile yapılır.
                example_code_2: |
                    ```
                    hayvanlar {is} köpek, kedi, kanguru
                    sevilmeyen {is} {ask} Hangi hayvanı sevmiyorsun?
                    {remove} sevilmeyen {from} hayvanlar
                    {print} Benim seçimim hayvanlar {at} {random}
                    ```
                story_text_3: |
                    ### Alıştırma
                    Bu yeni komutları sanal restoranımızda deneyin. Oyuncunun istediği lezzeti listeye ekleyin ve alerjisi olduğu lezzetleri listeden çıkarın.
                example_code_3: |
                    ```
                    {print} Gizemli milkshake
                    çeşitler {is} çilek, çikolata, vanilya
                    beklenti {is} {ask} Nasıl bir lezzet bekliyorsunuz?
                    _
                    alerjiler {is} {ask} Herhangi bir çeşide alerjiniz var mı?
                    _
                    {print} Size çeşitler {at} {random} milkshake hazırladık
                    ```
                start_code: |-
                    hayvanlar {is} köpek, kedi, kanguru
                    sevilen {is} {ask} En sevdiğin hayvan hangisi?
                    {add} sevilen {to_list} hayvanlar
                    sevilmeyen {is} {ask} Hangi hayvanı sevmiyorsun?
                    {remove} sevilmeyen {from} hayvanlar
                    {print} Benim seçtiğim bir hayvanlar {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: ve veya
        description: ve ile veya 'ya giriş
        levels:
            13:
                story_text: |-
                    Şimdi `{and}` ve `{or}`'yı öğreneceğiz! İki ifadeyi birden kontrol etmek istiyorsanız, iki tane `{if}` kullanmak zorunda değilsiniz, bunun yerine `{and}` ve `{or}` kullanabilirsiniz.

                    Eğer `{and}` kullanırsanız, `{and}` nin sağındaki ve solundaki her iki ifadenin de doğru olması gerekir. Ayrıca `{or}` da kullanabiliriz. O zaman sadece bir ifadenin doğru olması gerekir.
                example_code: |
                    ```
                    isim = {ask} 'adınız nedir?'
                    yaş = {ask} 'yaşınız kaç?'
                    {if} isim {is} 'Hedy' {and} yaş {is} 2
                        {print} "Sen gerçek Hedy'sin!"
                    ```
                start_code: |-
                    isim = {ask} 'Adınız nedir?'
                    yaş = {ask} 'Yaşınız kaç?'
                    {if} isim {is} 'Hedy' {and} yaş {is} 2
                        {print} "Sen gerçek Hedy'sin!"
    ask_command:
        name: '{ask}'
        default_save_name: sor_komutu
        description: sor komutuna giriş
        levels:
            1:
                story_text: |
                    ## sor komutu
                    Artık `{print}` komutunu kullanabildiğinize göre, bir sonraki komutu öğrenmeye hazırsınız: `{ask}`. `{ask}` komutunu kullanarak bir soru sorabilirsiniz. Şuna bir bakın:
                example_code: |
                    ```
                    {print} Merhaba!
                    {ask} Senin adın ne?
                    ```
                story_text_2: "## yankıla komutu \nEğer bilgisayarın cevabı size tekrar etmesini istiyorsanız, `{echo}` komutunu kullanabilirsiniz. Cevabın cümlenin sonunda yankılandığını unutmayın, yani bu örnek için merhaba'dan sonra.\n"
                example_code_2: |
                    ```
                    {print} Merhaba!
                    {ask} Senin adın ne?
                    {echo} merhaba
                    ```
                story_text_3: |
                    ### Alıştırma
                    `{ask}` ve `{echo}` komutlarını deneyin. İlk olarak, bu programı çalıştırmak için boşlukları doldurun.
                    Daha sonra `{ask}` komutunu kullanarak 2 soru daha sorun, her `{ask}` komutundan sonra cevabı ekrana yazdırmak için bir `{echo}` kullanın.
                example_code_3: |
                    ```
                    _ Nasılsın?
                    _
                    ```
                start_code: |
                    {print} Merhaba!
                    {ask} Senin adın ne?
                    {echo} merhaba
            2:
                story_text: |
                    ## sor komutu
                    Artık kodlarımızda **değişkenleri** kullanabildiğimize göre, `{echo}` komutuna artık ihtiyacımız yok.
                    Sorularımızın cevaplarını saklamak için değişkenler kullanabiliriz ve bu şekilde kodlarımızda birden fazla sorunun cevabını kullanabiliriz.
                    Şuna bir bakın:

                    Bu şekilde kodunuz etkileşimli hale geliyor!
                example_code: |
                    ```
                    isim {is} {ask} Senin adın ne?
                    {print} Merhaba isim
                    yaş {is} {ask} Kaç yaşındasın?
                    {print} isim yaş yaşındadır.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Önceki sekmede `{is}` komutu ile değişkenleri ayarlama alıştırması yaptınız.
                    En az 3 değişken oluşturdunuz ve bunları bir yazdır komutu ile kullandınız.
                    Şimdi, değişkenleri ayarlamak yerine, örneğimizde yaptığımız gibi değişkenleri etkileşimli hale getirmenizi istiyoruz.

                    Kodunuzu önceki sekmeden kopyalayın ve `{ask}` komutlarını kullanarak değişkenleri etkileşimli hale getirin.
                example_code_2: |
                    ```
                    favori_hayvan {is} {ask} En sevdiğin hayvan hangisi?
                    {print} En sevdiğim hayvan favori_hayvan
                    ```
                start_code: |-
                    isim {is} {ask} Senin adın ne?
                    {print} Merhaba isim
                    yaş {is} {ask} Kaç yaşındasın?
                    {print} name age yaşındadır.
    blackjack:
        name: Yirmibir
        default_save_name: Yirmibir
        description: 21'e olabildiğince yaklaşmaya çalışın
        levels:
            17:
                story_text: |
                    Yirmibir, 21 puana mümkün olduğunca yaklaşmanız gereken basit bir kart oyunudur. İki kart alırsınız. Her kart kendi rakam değerindedir ve surat kartları (Vale, Kız ve Papaz) 10 puan değerindedir.
                    As ya 1 ya da 11 puan değerindedir (seçebilirsiniz). Rakibiniz olan dağıtıcı da iki kart alır.
                    İsterseniz başka bir kart daha alabilirsiniz ve onun puanı toplamınıza eklenir. Dağıtıcı da başka bir kart almayı seçebilir.
                    Ancak 21 puandan fazla almamaya dikkat edin, çünkü alırsanız kaybedersiniz!
                    21'i aşmadan 21'e en çok yaklaşan oyuncu kazanır!

                    İyi eğlenceler!
                example_code: |
                    ```
                    {print} 'YİRMİBİR'
                    kartlar = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Vale', 'Kız', 'Papaz', 'As']
                    puanlar = 0
                    dağıtıcı_puanları = 0
                    kart_1 = kartlar[{random}]
                    kart_2 = kartlar[{random}]
                    kart_3 = kartlar[{random}]
                    dağıtıcı_kartı_1 = kartlar[{random}]
                    dağıtıcı_kartı_2 = kartlar[{random}]
                    dağıtıcı_kartı_3 = kartlar[{random}]
                    # Kart 1 için puanlar
                    {if} kart_1 == 'Vale' {or} kart_1 == 'Kız' {or} kart_1 == 'Papaz':
                        puanlar = puanlar + 10
                    {elif} kart_1 == 'As':
                        puanlar = puanlar + 11
                    {else}:
                        puanlar = puanlar + kart_1
                    # Kart 2 için puanlar
                    {if} kart_2 == 'Vale' {or} kart_2 == 'Kız' {or} kart_2 == 'Papaz':
                        puanlar = puanlar + 10
                    {elif} kart_2 == 'As':
                        puanlar = puanlar + 11
                    {else}:
                        puanlar = puanlar + kart_2
                    # Dağıtıcı kartı 1 için puanlar
                    {if} dağıtıcı_kartı_1 == 'Vale' {or} dağıtıcı_kartı_1 == 'Kız' {or} dağıtıcı_kartı_1 == 'Papaz':
                        dağıtıcı_puanları = dağıtıcı_puanları + 10
                    {elif} dağıtıcı_kartı_1 == 'As':
                        dağıtıcı_puanları = dağıtıcı_puanları + 11
                    {else}:
                        dağıtıcı_puanları = dağıtıcı_puanları + dağıtıcı_kartı_1
                    # Dağıtıcı kartı 2 için puanlar
                    {if} dağıtıcı_kartı_2 == 'Vale' {or} dağıtıcı_kartı_2 == 'Kız' {or} dağıtıcı_kartı_2 == 'Papaz':
                        dağıtıcı_puanları = dağıtıcı_puanları + 10
                    {elif} dağıtıcı_kartı_2 == 'As':
                        dağıtıcı_puanları = dağıtıcı_puanları + 11
                    {else}:
                        dağıtıcı_puanları = dağıtıcı_puanları + dağıtıcı_kartı_2
                    # İki As
                    {if} kart_1 == 'As' {and} kart_2 == 'As':
                        puanlar = 12
                    {if} dağıtıcı_kartı_1 == 'As' {and} dağıtıcı_kartı_2 == 'As':
                        dağıtıcı_puanları = 12
                    # Sayı Tabelası
                    {print} 'Elinizde bir ' kart_1 ' ve bir ' kart_2 ' var (' puanlar ' puan)'
                    {print} 'Dağıtıcının elinde bir ' dağıtıcı_kartı_1 ' ve bir ' dağıtıcı_kartı_2 ' var (' dağıtıcı_puanları ' puan)'
                    # Oyuncu için ek kart
                    ekkart = {ask} 'Ek bir kart ister misin?'
                    {if} ekkart == 'evet':
                        {if} kart_3 == 'Vale' {or} kart_3 == 'Kız' {or} kart_3 == 'Papaz':
                            puanlar = puanlar + 10
                        {elif} kart_3 == 'As':
                            {if} puanlar < 11:
                                puanlar = puanlar + 11
                            {else}:
                                puanlar = puanlar + 1
                        {else}:
                            puanlar = puanlar + kart_3
                        {print} 'Çektiğin ek kart bir ' kart_3 ' (' puanlar ' puan)'
                    {else}:
                        {print} 'Ek kart yok'
                    # Kazanan
                    {if} puanlar > 21 {or} dağıtıcı_puanları > puanlar {or} dağıtıcı_puanları == 21:
                        {print} 'Sen kaybettin'
                    {elif} dağıtıcı_puanları < 17:
                        {print} 'Dağıtıcı ek kart istiyor. Aldığı bir... ' dağıtıcı_kartı_3
                        {if} dağıtıcı_kartı_3 == 'Vale' {or} dağıtıcı_kartı_3 == 'Kız' {or} dağıtıcı_kartı_3 == 'Papaz':
                            dağıtıcı_puanları = dağıtıcı_puanları + 10
                        {elif} dağıtıcı_kartı_3 == 'As':
                            {if} dağıtıcı_puanları < 11:
                                dağıtıcı_puanları = dağıtıcı_puanları + 11
                            {else}:
                                dağıtıcı_puanları = dağıtıcı_puanları + 1
                        {else}:
                            dağıtıcı_puanları = dağıtıcı_puanları + dağıtıcı_kartı_3
                        {print} 'Dağıtıcının şimdi ' dağıtıcı_puanları ' puanı var'
                        {if} dağıtıcı_puanları < 21 {and} dağıtıcı_puanları > puanlar:
                            {print} 'Sen kaybettin'
                        {else}:
                            {print} 'Sen kazandın'
                    {elif} puanlar > dağıtıcı_puanları {and} puanlar < 21:
                        {print} 'Sen kazandın!'
                    ```
                start_code: '# kodunuzu buraya yazın'
    calculator:
        name: Hesap Makinesi
        default_save_name: Hesap Makinesi
        description: Bir hesap makinesi oluşturun
        levels:
            6:
                story_text: |
                    Artık matematik yapabildiğinize göre, kendi başınıza bir hesap makinesi yapabilirsiniz!
                example_code: |
                    ```
                    sayı_1 = {ask} 'İlk sayıyı girin:'
                    sayı_2 = {ask} 'İkinci sayıyı girin:'
                    doğru_cevap = sayı_1 * sayı_2
                    {print} sayı_1 ' kere ' sayı_2 ' eder ' doğru_cevap
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki hesap makinesi, cevabı sizin için hesaplayacaktır, ancak bunun gibi bir programı kendi matematik becerilerinizi test etmek için de yapabilirsiniz:
                    Tamamlamak için boşlukları doldurun!
                example_code_2: |
                    ```
                    doğru_cevap = 11 * 27
                    cevap = {ask} '11 kere 27 kaç eder?'
                    {if} cevap {is} _ {print} 'Aferin, iyi işti!'
                    {else} {print} 'Yanlış! doğru cevap ' _
                    ```
                story_text_3: |
                    **Ekleme** rastgele komutunu kullanarak bilgisayarın kendi başına rastgele toplamalar yapmasını da sağlayabilirsiniz.

                    Bu şekilde, pratik yapmak için bir sayı tablosu seçersiniz ve bundan her zaman farklı bir toplama elde edersiniz:
                start_code: |
                    sayı_1 = {ask} 'İlk numarayı girin:'
                    sayı_2 = {ask} 'İkinci numarayı girin:'
                    doğru_cevap = sayı_1 * sayı_2
                    {print} sayı_1 ' kere ' sayı_2 ' eder ' doğru_cevap
            9:
                story_text: |
                    Seviye 6'da bir hesap makinesi oluşturmuştunuz, bu seviyede bu kodu birden fazla soru soracak şekilde genişletebilirsiniz.

                    ### Alıştırma 1
                    Programın çalışması için 10. satırı tamamlayabilir misiniz?

                    ### Alıştırma 2
                    Oyuncu doğru veya yanlış bir cevap girdiğinde ona geri bildirim verin. Bunu başarmak için programınızı bir `{else}` ile genişletin.
                example_code: |
                    ```
                    puan = 0
                    {repeat} 10 {times}
                        sayılar = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        sayı1 = sayılar {at} {random}
                        sayı2 = sayılar {at} {random}
                        cevap_correct = sayı1 * sayı2
                        {print} 'Söyle bakalım ' sayı1 ' kere ' sayı2 ' kaç eder?'
                        cevap = {ask} 'Cevabını buraya yaz...'
                        {print} 'Cevabın ' cevap
                        {if} _ {is} _
                            puan = puan + 1
                    {print} 'Aferin, iyi işti! Toplam puanın... 10 üzerinden ' puan
                    ```
                start_code: '{print} ''Hesap makinesine hoş geldiniz!'''
            10:
                story_text: |
                    Bu hesap makinesi oyunu, çarpım tablosu alıştırması yapmanıza yardımcı olur!
                    ### Alıştırma
                    Listeye daha fazla sayı ekleyebilir misiniz, böylece 10'a kadar sayıların çarpım tablosunu çalışabilirsiniz?
                example_code: |
                    ```
                    sayılar = 1, 2, 3
                    {for} sayı1 {in} sayılar
                        {for} sayı2 {in} sayılar
                            cevap = {ask} 'Söyle bakalım, ' sayı2 ' kere ' sayı1 ' kaç eder?'
                            doğrucevap = sayı1 * sayı2
                            {if} cevap {is} doğrucevap
                                {print} 'Aferin!'
                            {else}
                                {print} 'Bu yanlış. Doğru cevap ' doğrucevap
                    ```
                start_code: '# kodunuzu buraya yazın'
            11:
                story_text: |
                    Bir `{for}` ile çarpım tablosu alıştırma programını basitleştirebilirsiniz.

                    ### Alıştırma 1
                    Örnek kodu güzel bir çarpım tablosu yazdıracak şekilde geliştirin: <br> "1 kere 10 eder 10", "2 kere 10 eder 20" gibi.

                    ### Alıştırma 2
                    Seviye 10'daki çarpma kodunuza geri dönün ve kodu `{for}` ve `{range}` kullanacak şekilde değiştirin.
                example_code: |
                    ```
                    sayı = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * sayı
                    ```
                start_code: |
                    sayı = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * sayı
            12:
                story_text: |
                    Bu seviyede, ondalık sayılar ile çalışan bir hesap makinesi yapabilirsiniz.

                    ### Alıştırma 1
                    Hesap makinesini tamamlamak için boşlukları doldurun. Ondalık sayılar için virgül değil nokta kullanmayı unutmayın.

                    ### Alıştırma 2
                    Yeni bir matematik alıştırma programı oluşturun, ama şimdi ondalık sayıları kullanın.
                    Bir sayı listesi oluşturun, çarpma için iki tanesini seçin ve oyuncunun cevaplamasını sağlayın.
                    Ve tabii ki cevabı doğrulamanız gerekiyor! **Ekleme** Can ekleyerek zorluğu artırın: Bir oyuncu yanlış cevap için bir can kaybetsin ve üç yanlış cevaptan sonra oyun sona ersin.
                example_code: |
                    ```
                    sayı1 = {ask} 'İlk sayı nedir?'
                    sayı2 = {ask} 'İkinci sayı nedir?'
                    cevap = _
                    {print} sayı1 ' artı ' sayı2 ' eşittir ' _
                    ```
                start_code: '# kodunuzu buraya yazın'
            13:
                story_text: |
                    ### Alıştırma 1
                    Alıştırma programını biraz daha zorlaştıralım. Oyuncu şimdi iki soruya doğru cevap vermek zorunda. Programı tamamlamak için boşlukları doldurun.

                    ### Alıştırma 2 Ekleme
                    Bazen hesaplamaların birden fazla doğru cevabı vardır. Örneğin, 10 hem 5'e hem de 2'ye bölünebilir. Dolayısıyla, "Hangi sayı 10'u böler?" sorusunu hem 2 hem de 5 cevaplanabilir.
                    Birden fazla doğru cevabı olan bir hesaplama sorun, oyuncudan cevaplamasını isteyin ve `{or}` kullanarak doğru olup olmadığını belirleyin.
                    Programlama alanını temizleyin ve kendi çözümünüzü oluşturun.
                example_code: |
                    ```
                    cevap1 = {ask} '10 kere 7 kaç eder?'
                    cevap2 = {ask} '6 kere 7 kaç eder?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Kodunuzu buraya yazın'
            14:
                story_text: |
                    Bu seviyede 'Bil bakalım hangi sayı' oyununu programlayabilirsiniz
                example_code: |
                    ```
                    {print} 'Bil bakalım hangi sayı'
                    sayılar = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    sayı = sayılar {at} {random}
                    oyun = 'devam'
                    {for} i {in} {range} 1 {to} 10
                        {if} oyun == 'devam'
                            tahmin = {ask} 'Sence hangi sayıyı tuttum?'
                            {if} tahmin > sayı
                                {print} 'Aşağı!'
                            {if} tahmin < sayı
                                {print} 'Yukarı!'
                            {if} tahmin == sayı
                                {print} 'Sen kazandın!'
                                oyun = 'bitti'
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    Önceki bir seviyede yapmayı öğrendiğiniz hesap makinesi oyununa `{while}` döngüsünü ekleyebilirsiniz.
                    Bu, oyuncunun yanlış cevap vermesi durumunda bir sonraki soruya devam edememesini sağlar.
                example_code: |
                    ```
                    puan = 0
                    {for} i {in} {range} 0 {to} 9
                        sayılar = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        sayı1 = sayılar {at} {random}
                        sayı2 = sayılar {at} {random}
                        doğrucevap = sayı1 * sayı2
                        cevap = 0
                        {while} cevap != doğrucevap
                            {print} 'Söyle hadi, ' sayı1 ' kere ' sayı2 ' kaç eder?'
                            cevap = {ask} 'Cevabın nedir?:'
                            {print} 'Cevabın ' cevap
                        {print} 'Aferin, iyi işti!'
                    {print} 'Sen kazandın!'
                    ```
                start_code: '# kodunuzu buraya yazın'
    clear_command:
        name: '{clear}'
        default_save_name: temizle_komutu
        description: temizle komutu
        levels:
            4:
                story_text: |
                    Yeni bir komut zamanı! `{clear}` ile çıktı ekranınızdaki tüm metni temizleyebilirsiniz. Bu şekilde ekranınızın çok fazla metinle dolmasını önleyebilirsiniz.
                    Dikkat! Eğer bir `{clear}` komutu kullanıyorsanız, bunun yanında bir `{sleep}` kullanmayı unutmayın. Aksi takdirde Hedy size okumaya zaman bırakmadan ekranınızı temizleyecektir!
                example_code: |
                    ```
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} 'SÜRPRİZ!'
                    ```
                start_code: |
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} 'SÜRPRİZ!'
    default:
        name: Giriş
        default_save_name: giriş
        description: Seviye açıklaması
        levels:
            1:
                story_text: |
                    Hedy'ye hoş geldiniz! Seviye 1'de, bir hikaye yazdırarak başlayabilirsiniz.

                    Programlama alanının altındaki yeşil 'Kodu çalıştır' düğmesini kullanarak kodu kendiniz deneyin.

                    Hazır mısınız? O zaman ilk komutunuzu öğrenmek için bir sonraki sekmeye gidin!
                start_code: '{print} Merhaba Dünya!'
            2:
                story_text: |
                    Tebrikler! Seviye 2'ye ulaştınız. Umarım şimdiden bazı harika kodlar yapmışsınızdır!
                    İlk seviyede `{echo}` komutunun bir seferde sadece bir bilgi kaydedebildiğini fark etmiş olabilirsiniz.
                    Örneğin restoran macerasında, müşterinin ne yemek istediğini veya ne içmek istediğini yankılayabilirsiniz, ancak her ikisi tek bir cümlede olmaz.
                example_code: |
                    **Uyarı! Bu kod çalışmaz!**
                    Hedy'de komutlar arada değişecektir. Örneğin `{echo}` sadece 1. seviyede çalışır. Bu seviyede cevapları geri yankılamanın daha iyi bir yolunu öğreneceksiniz.
                    ```
                    {print} Hedy's 'e Hoş Geldiniz
                    {ask} Ne yemek istersiniz?
                    {echo} Demek isteğiniz
                    {ask} Ne içmek istersiniz?
                    {echo} Demek isteğiniz
                    ```
                story_text_2: |
                    Oyuncu hamburger ve kola yazarsa, "yani hamburger ve kola istiyorsunuz" diyemezsiniz, ancak iki ayrı satır oluşturmanız gerekir.
                    Ayrıca, `{echo}` komutu sadece cümlenin sonundaki kelimeyi yankılar. Yani "hamburgeriniz hemen geliyor!" diyemezsiniz.

                    Seviye 2'de bu durum değişiyor. Seviye 2'de, birden fazla bilgi parçasını kaydetmenize ve bunları istediğiniz yere yazdırmanıza olanak tanıyan değişkenlerle çalışmayı öğreneceksiniz.
                    O halde hadi bir sonraki sekmeye geçelim!
                start_code: '{print} Merhaba Dünya!'
            3:
                story_text: |
                    Bir önceki seviyede değişkenin ne olduğunu ve maceralarınızı daha etkileşimli hale getirmek için nasıl kullanabileceğinizi öğrendiniz.
                    Ancak... değişkenlerle yapabileceğiniz tek şey bu değil! Değişkenleri liste yapmak için de kullanabilirsiniz.
                    Ve hatta Hedy'nin bir listeden rastgele bir kelime seçmesini sağlayabilirsiniz, bu da gerçek oyunlar yapmanıza olanak tanır!
                    Bir sonraki sekmeye hızlıca göz atın!
                start_code: '{print} Merhaba Dünya!'
            4:
                story_text: |
                    Önceki seviyelerde değişkenlerle pratik yaptınız, ancak bu problemle karşılaşmış olabilirsiniz.
                    Bunun gibi bir kodu çalıştırmayı denemiş olabilirsiniz:

                    Aslında şunu yazdırmak istedin

                    `My name is Sophie`

                    ama Hedy bunu yazdı

                    `My Sophie is Sophie`.

                    Bu seviyede tırnak işaretleri kullanılarak bu sorun giderilir.
                example_code: |
                    ```
                    isim {is} Sophie
                    {print} Benim adım isim
                    ```
                start_code: |
                    adım {is} Sophie
                    {print} Benim adım adım
            5:
                story_text: |
                    Önceki seviyelerde, kodu her çalıştırdığınızda oyunlarınızı farklı kılan `{at} {random}` kullanmayı zaten öğrenmiştiniz.
                    Ancak bu gerçekten etkileşimli değil, oyuncunun oyunda neler olacağı üzerinde herhangi bir etkisi yok.

                    Bu seviyede, programınızda farklı yanıtlar vermenizi sağlayan `{if}` komutunu öğreneceksiniz. Bu şekilde örneğin bilgisayarınız için gizli bir şifre programlayabilirsiniz.
                    Yeni komut için bir sonraki sekmeye geçelim!
                example_code: |
                    ```
                    şifre {is} {ask} 'Doğru şifre nedir?'
                    ```
                start_code: |-
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy {print} 'havalıymış!' {else} {print} 'eh işte'
            6:
                story_text: |
                    Önceki seviyede `{ask}` ve `{if}` ile pratik yaptınız. Örneğin artık konuklara ne yemek istediklerini sorabilirsiniz.
                    Ancak henüz yapamadığınız şey, herkesin akşam yemeğinin fiyatını hesaplamak.

                    Bir sonraki seviye, programlarınızda toplama, çıkarma ve çarpma işlemlerini kullanmanızı sağlayacak. Bu şekilde restoranınızdaki fiyatları hesaplayabilir, ama aynı zamanda arkadaşlarınıza ve ailenize indirim yapmak için gizli bir kod ekleyebilirsiniz.
                    Bir sonraki seviyedeki bir başka seçenek de küçük kardeşinizin çarpma işlemlerinde pratik yapması için kendi matematik oyununuzu programlamaktır.
                    Gidip kendiniz görün!
                example_code: |
                    ```
                    yemek_ücreti {is} 0
                    içecek_ücreti {is} 0
                    toplam_ücret {is} 0
                    {print} 'McHedy'e Hoş Geldiniz'
                    sipariş {is} {ask} 'Ne yemek istersiniz?'
                    {if} sipariş {is} hamburger yemek_ücreti {is} 5
                    {if} sipariş {is} kızartma yemek_ücreti {is} 2
                    içecek {is} {ask} 'Ne içmek istersiniz?'
                    {if} içecek {is} su içecek_ücreti {is} 0
                    {else} içecek_ücreti {is} 3
                    toplam_ücret {is} yemek_ücreti + içecek_ücreti
                    {print} 'Toplamda 'toplam_ücret ' lira ödeyin, lütfen'
                    ```
                start_code: '# kodunuzu buraya yazın'
            7:
                story_text: |
                    Harika bir iş çıkardınız! Bir sonraki seviyeye ulaştınız, bu da `{if}` ve `{else}` ile pratik yaptığınız anlamına geliyor. Muhtemelen kodlarınızın gittikçe uzadığını fark etmişsinizdir.
                    Örneğin 'Doğum Günün Kutlu Olsun' şarkısını programlamak isterseniz.

                    Bu, çoğunlukla aynı kelimeleri tekrar ve tekrar yazmak için çok fazla kod demek. Neyse ki bir sonraki sekmede `{repeat}` komutu ile bir kod satırını birden çok kez tekrarlamanıza olanak tanıyan bir çözüm öğreneceksiniz.
                example_code: |
                    ```
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sana'
                    {print} 'Mutlu yıllar sevgili Hedy'
                    {print} 'mutlu yıllar sana'
                    ```
                start_code: |
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sevgili Hedy'
                    {print} 'mutlu yıllar sana'
            8:
                story_text: |
                    Artık tek bir kod satırını nasıl tekrarlayacağınızı öğrendiniz. Bu kullanışlı olabilir, ancak her zaman yeterli değildir. Bazen aynı anda birden fazla satırı tekrarlamak istersiniz.
                    Bu seviye, birkaç kod satırını gruplandırmanıza ve bu küçük satır grubunu bir kerede tekrarlamanıza yardım edecek!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Bir sonraki sekmede birden fazla kod satırını aynı anda tekrarlayabilirsiniz!'
                    ```
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            9:
                story_text: |
                    Harika bir iş! Yeni bir seviyeye daha ulaştınız! Bir önceki seviyede {if} veya {repeat} komutunda birden fazla kod satırı kullanmayı öğrendiniz. Ancak henüz ikisini birleştiremiyorsunuz...
                    İyi haberim var! Bu seviyede, bir {if} içine {if} veya bir {repeat} komutu koymanıza izin verilecektir.
                example_code: |
                    ```
                    cevap = {ask} 'Yeni bir şeyler öğrenmeye hazır mısınız?'
                    {if} cevap {is} evet
                        {print} 'Harika! eğer komutunda tekrarla komutunu kullanmayı öğrenebilirsiniz!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                        {print} 'Yaşasın!'
                    {else}
                        {print} 'Belki de bir önceki seviyede biraz daha pratik yapmalısınız'
                start_code: '{print} Bir sonraki sekmeye geçelim!'
            10:
                story_text: |
                    Harika gidiyorsunuz! Önceki seviyelerde hep küçük bir sorunla karşılaştık. Satırları tekrarlamayı öğrendiniz, ama ya satırı biraz değiştirmek isterseniz?
                    Örneğin 'eğer mutluysan ve bunu biliyorsan.' şarkısını söylemek istiyorsunuz. Şöyle görünecektir:

                    Eğer bir sonraki mısranın 'ayaklarını yere vur', ve bir sonrakinin, ve bir sonrakinin de aynı olmasını istiyorsanız, kodu tamamen değiştirmeniz gerekir.
                    Bu seviyede, bir eylem listesi oluşturmanıza ve kodu her seferinde başka bir eylemle tekrarlamanıza olanak tanıyan `{for}` komutunu öğreneceksiniz!
                    Lütfen bir göz atın!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'Mutluysanız ve bunu biliyorsanız ellerinizi çırpın.'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ve gerçekten göstermek istiyorsanız'
                    {print} 'eğer mutluysanız ve bunu biliyorsanız ellerinizi çırpın'
                    ```
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            11:
                story_text: |
                    Seviye 10'a ulaştınız, harika gidiyorsunuz! Daha yüksek seviyelerde, Hedy size Python programlama dilini öğretmeye daha fazla odaklanıyor.
                    Python'da `{repeat}` komutu yoktur, ancak {repeat} gibi çalışan bir komut vardır. Python dilinde `{repeat}` komutunun nasıl söylendiğini merak ediyor musunuz? Öğrenmek için hemen devam edin!
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            12:
                story_text: |
                    Belki restoran maceranızda ondalık sayıları kullanmayı denemişsinizdir. Eğer denediyseniz, muhtemelen Hedy'nin bunları henüz anlamadığını ve her zaman yuvarladığını fark etmişsinizdir.
                    Bu seviyeden itibaren ondalık sayıları kullanabilirsiniz.
                example_code: |
                    ```
                    burger = 5
                    içecek = 2
                    toplam = burger + içecek
                    print 'Bir hamburger ve içecek sipariş ettiniz'
                    print 'Toplam ' toplam ' lira ödeyin lütfen'
                    ```
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            13:
                story_text: |
                    Önceki seviyelerde iki `{if}` komutunu birbirinin içine nasıl yerleştireceğinizi öğrendiniz. Bu sorunsuz çalışır, ancak size bunun gibi çok uzun ve kullanışsız kodlar verir:

                    Bu sistemde hem doğru kullanıcı adını hem de doğru şifreyi vermeniz gerekmektedir.
                    Bu seviyede, bu kodu çok daha kısa ve anlaşılır hale getirecek `{and}` komutunu öğreneceksiniz!
                    Şuna bir bakın!
                example_code: |
                    ```
                    kullanıcı = {ask} 'Kullanıcı adınız nedir?'
                    şifre = {ask} 'Şifreniz nedir?'
                    {if} kullanıcı {is} 'Hedy'
                        {if} şifre {is} 'gizli'
                            {print} 'Hoş geldin Hedy!'
                        {else}
                            {print} 'Erişim reddedildi'
                    {else}
                        {print} 'Erişim reddedildi!'
                    ```
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            14:
                story_text: |
                    Aşağıdaki program ile okulda bir dersi geçip geçmediğinizi hesaplayabilirsiniz (yani, altı yada daha yüksek bir not).
                    Bu kodun, 5. satırdaki çok uzun kod nedeniyle son derece verimsiz olduğunu görebilirsiniz.
                    1'den 5'e kadar tüm farklı notların ayrı ayrı programlanması gerekiyordu. Şanslısınız ki, bu seviyede bu son derece uzun kod olmadan bunu nasıl yapacağınızı öğreneceksiniz!
                example_code: |
                    ```
                    birinci_not = {ask} 'İlk sınavınızda kaç puan aldınız?'
                    ikinci_not = {ask} 'İkinci sınavınızda kaç puan aldınız?'
                    toplam = birinci_not + ikinci_not
                    ortalama_not = toplam / 2
                    {if} ortalama_not = 1 {or} ortalama_not = 2 {or} ortalama_not = 3 {or} ortalama_not = 4 {or} ortalama_not = 5
                        {print} 'Olamaz! Bu dersi geçemediniz.'
                    {else}
                        {print} 'Harika! Bu dersi geçtiniz!'
                    ```
                start_code: |
                    cevap = {ask} 'Daha fazlasını öğrenmek ister misiniz?'
                    {if} cevap == 'evet.'
                        {print} 'Bir sonraki maceraya gidin!'
                    {if} cevap != 'evet.'
                        {print} 'Burada biraz daha pratik yapın'
            15:
                story_text: |
                    Aşağıdaki bu oyunda, oyuncunun istediği kadar oynayabilmesini sağlamak için bir kod yapılmıştır...
                    Ancak kod etkisiz ve çok uzun. Ayrıca, oyuncu 100 yerine 101 oyun oynamak isterse ne olacak?
                    Sonsuza kadar da oynayamaz mısın?
                    Bu seviyede tüm bunları çok daha kolay hale getiren bir komut öğreneceksiniz!
                example_code: |
                    ```
                    oyun {is} 'devam'
                    {for} i {in} {range} 1 {to} 100
                        {if} oyun {is} 'devam'
                            cevap = {ask} 'Devam etmek istiyor musun?'
                            {if} cevap {is} 'hayır'
                                oyun {is} 'bitti'
                            {if} cevap {is} 'evet'
                                {print} 'Tamamdır, devam ediyoruz.'
                    ```
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            16:
                story_text: |
                    Bu seviyede gerçek Python koduna doğru biraz daha yakınlaşacağız. Ayrıca iki listeyi nasıl eşleştireceğinizi de öğreneceksiniz.
                    Bu şekilde, doğru hayvanın doğru sesle eşleştirildiği bir kod programlayabilirsiniz.
                    Çünkü aşağıdaki iki kod... açıkça saçmalıyorlar!
                example_code: |-
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak', 'havhav', 'möö'
                    {for} hayvan {in} hayvanlar
                        {print} 'Bir ' hayvan ' ses çıkarıyor ' sesler {at} {random}
                    ```
                    Bu şu şekilde de deneyebilirdiniz, ama...
                    ```
                    hayvanlar = 'tavuk', 'köpek', 'inek'
                    sesler = 'gıtgıdak', 'havhav', 'möö'
                    {for} hayvan {in} hayvanlar
                        {for} ses {in} sesler
                            {print} 'Bir ' hayvan ' ses çıkarıyor ' ses
                    ```
                    Not: Bu kodlar, bu bölümde bu haldeyken çalışmaz. Neresini düzelteceğinizi görmek için sonraki sekmeye gidin.
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            17:
                story_text: |
                    Şimdi girintilemeyi biraz değiştireceğiz. Her girintiye ihtiyaç duyduğumuzda, girintiden önceki satırda `:` işaretine ihtiyacımız var.

                    Bu seviyede yeni bir komut da kullanabilirsiniz: `{ elif }`. `{elif}` {else} {if}'in kısaltmasıdır ve 3 (veya daha fazla!) seçenek arasından seçim yapmak istediğinizde buna ihtiyacınız vardır.
                    Şuna bir bakın!
                start_code: '{print} ''Hadi bir sonraki sekmeye geçelim!'''
            18:
                story_text: |
                    Tebrikler! Hedy'nin son seviyesine ulaştınız! Burada oluşturduğunuz kodu replit veya PyCharm gibi gerçek Python ortamlarına kopyalayabilir ve orada öğrenmeye devam edebilirsiniz!
                    Ancak Python'un yalnızca İngilizce komutları okuyabildiğini unutmayın. Şimdiye kadar gördüğünüz komutları İngilizce olanları ile değiştirmeniz gerekecek. Komutları yazarken cümledeki yerlerinin biraz Tarzan'ca olduğunu farketmişsinizdir. Bunun sebebi, komut kelimelerinin aynı oldukları yerlere İngilizcelerini yazınca, kodunuzun gerçek bir Python programına dönüşebilmesiydi (tabi biraz da Türkçemizin bazı harflerini değiştirmek gerekecek ama bu pek bir sorun değil).
                start_code: '{print} (''Harika iş çıkardınız!!!'')'
    dice:
        name: Zar
        default_save_name: Zar
        description: Kendi zarınızı yapın
        levels:
            3:
                story_text: |
                    Bu seviyede bir listeden seçim yapabiliriz. Bununla bilgisayarın zarın bir tarafını seçmesini sağlayabiliriz.
                    Evinizde dolabınızda bulunan oyunlara bir göz atın.
                    (Özel) bir zarı olan oyunlar var mı? Onları da bu kodla da kopyalayabilirsiniz.
                    Örneğin, üzerinde 1'den 5'e kadar sayılar ve bir solucan bulunan Solucan oyunu zarı.

                    ![üzerinde 1'den 5'e kadar sayılar ve solucan olan bir solucan zarı](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    {print} Attığın zar _ {at} {random} !
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki örnekteki zarlar belirli bir oyun için zarlardır. Normal bir zar yapabilir misiniz?
                    Ya da farklı bir oyundaki diğer özel zarları?
                example_code_2: |
                    ```
                    seçimler {is} _
                    ```
                start_code: |
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    {print} Attığın zar _ {at} {random} !
            4:
                story_text: |
                    Bu seviyede, ayrıca zar da oluşturabilirsiniz. Ancak bu sefer örnek bir kod olmadan kendiniz deneyebilirsiniz!

                    ### Alıştırma
                    Bu seviyede kendi zarınızı yapın.
                    İpucu: Nasıl zar atılacağı hakkında hiçbir fikriniz yoksa. Bir önceki seviyedeki zarlarınıza bir göz atın, ancak tırnak işareti eklemeyi unutmayın.
                start_code: '{print} ''Bu sefer zar kaçı gösterecek?'''
            5:
                story_text: |
                    Zarımıza `{if}` ve `{else}` komutlarını ekleyeceğiz!

                    ### Alıştırma
                    Örnek kodu, bir solucan attığınız zaman "Atmayı durdurabilirsiniz" yazacak şekilde tamamlayın. Başka bir şey attığınızda ise "Tekrar atmanız gerekiyor" demelidir.
                    **Ekleme** Belki de tamamen farklı bir oyundaki bir kalıbı yeniden yaratmak istiyorsunuz. Bu da güzel! O zaman kendi tepkinizi oluşturun, örneğin 6 için 'evet' ve başka bir şey için 'yazık' gibi.
                example_code: |
                    ```
                    seçimler {is} 1, 2, 3, 4, 5, solucan
                    atılan {is} seçimler {at} {random}
                    {print} 'Attığın zar ' atılan
                    _ atılan {is} solucan {print} 'Atmayı bırakabilirsin.'
                    _ {print} 'Tekrar atmalısın!'
                    ```
                start_code: '{print} ''Bu sefer zar kaçı gösterecek?'''
            6:
                story_text: |
                    Burada da yine bir Solucan zarı yapabilirsiniz, ancak şimdi kaç puan atıldığını da hesaplayabilirsiniz.
                    Solucanlar oyununda solucanın 5 puan saydığını biliyor olabilirsiniz. Şimdi bir zar attıktan sonra kaç puan attığınızı hemen hesaplayabilirsiniz.
                    Bu, bir zar için puanları hesaplayan koddur:

                    ### Alıştırma
                    Kodu 8 zar için toplam puanı alacak şekilde yapabilir misiniz? Bunu yapmak için kodun bazı satırlarını kesip yapıştırmanız gerekiyor.
                example_code: |
                    ```
                    seçimler = 1, 2, 3, 4, 5, solucan
                    puan = 0
                    atılan = seçimler {at} {random}
                    {print} 'Attığın zar ' atılan
                    {if} atılan {is} solucan puan = puan + 5 {else} puan = puan + atılan
                    {print} 'toplam puan ' puan ' oldu'
                    ```
                example_code_2: |
                    Sekiz zar için puan hesaplamayı başardınız mı? Bu çok fazla kesme ve yapıştırma gerektiriyordu, değil mi? Seviye 7'de bunu daha kolay hale getireceğiz!
                start_code: '{print} ''Bu sefer zar kaçı gösterecek?'''
            7:
                story_text: |
                    Bu seviyede de yine zar atabilirsiniz. `{repeat}` kodu ile kolayca bir el dolusu zar atabilirsiniz.

                    ### Alıştırma
                    Örnek kodu bitirmeye çalışın! **Ekleme** Bildiğiniz bir zar oyunu düşünün ve bunu bir `{repeat}` kullanarak programlayın.
                example_code: |
                    ```
                    seçimler = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''Bu sefer zar kaçı gösterecek?'''
            10:
                story_text: |
                    ### Alıştırma
                    Herkesin zar atması çok mu uzun sürüyor? Bu seviyede Hedy'nin tüm zarları tek seferde atmasını sağlayabilirsiniz!
                    İsimleri arkadaşlarınızın veya ailenizin isimleriyle değiştirin ve her biri zarları yuvarlayacak şekilde kodu tamamlayın.
                example_code: |
                    ```
                    oyuncular = Ali, Betül, Ceyda
                    seçimler = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} oyuncu ' atıyor ve gelen ' seçimler {at} {random}
                        {sleep}
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    Bu oyunda, mümkün olduğunca az deneme yaparak 6 atmanız gerekiyor.
                example_code: |
                    ```
                    seçenekler = 1, 2, 3, 4, 5, 6
                    {print} 'Atabildiğin kadar hızlı şekilde 6 at!'
                    atılan = 0
                    denemeler = 0
                    {while} atılan != 6
                        atılan = seçenekler {at} {random}
                        {print} 'Atılan zar ' atılan
                        denemeler = denemeler + 1
                    {print} 'Oldu be sonunda! 6 atmak için ' denemeler ' kere zar attın'
                    ```
                start_code: '# kodunuzu buraya yazın'
    dishes:
        name: Bulaşıklar mı?
        default_save_name: Bulaşıklar
        description: Bulaşıkları kimin yıkayacağını seçmek için bilgisayarı kullanın
        levels:
            3:
                story_text: |
                    Bugün bulaşıkları kimin yıkayacağı ya da kedinin kum kabını kimin değiştireceği konusunda evde hep anlaşmazlığa mı düşüyorsunuz?
                    O zaman bilgisayarın çok adil bir şekilde seçim yapmasını sağlayabilirsiniz. Bunu bu seviyede programlayabilirsiniz!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} kişiler {at} {random} bulaşığı yıkayacak
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bulaşık makinesi programının kendi çeşidinizi yapın. Öncelikle aile üyelerinizin bir listesini yapın.
                    Ardından yapılması gereken bir görev düşünün ve bilgisayarın `{at} {random}` komutuyla görevi kimin yapması gerektiğine karar vermesini sağlayın.

                    **Ekleme** Bulaşıkları kendiniz yıkamak istemiyor musunuz? Adınızı `{remove}` `{from}` komutuyla listeden kaldırarak programda hile yapın.
                start_code: '{print} Bulaşıkları kim yıkıyor?'
            4:
                story_text: |
                    Tırnak işaretleri ile bulaşık yıkama programınızı daha da iyi hale getirebilirsiniz.

                    ### Alıştırma
                    Öncelikle, bu örnek programı çalıştırmak için boşluklara doğru sembolleri veya komutları doldurun.
                    Anladınız mı? Harika! Şimdi, önceki seviyeden kendi kodunuzu kopyalayın ve doğru noktalara tırnak işaretleri ekleyerek bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    {print} _ bulaşıkları yıkayacak olan _
                    {sleep}
                    {print} kişiler {at} _
                    ```
                start_code: '{print} ''Bulaşıkları kim yıkıyor?'''
            5:
                story_text: |
                    `{if}` ile artık programda seçim yaparak daha fazla eğlenebilirsiniz. Programınızın bilgisayarın yaptığı seçime yanıt vermesini sağlayabilirsiniz.
                    ### Alıştırma
                    Kodu, sıra size geldiğinde "çok kötü", aksi halde "evet!" yazdıracak şekilde tamamlayabilir misiniz?
                    Tırnakları unutmayın!
                example_code: |
                    ```
                    kişiler {is} anne, baba, Ali, Ayşe
                    bulaşıkçı {is} kişiler {at} {random}
                    _ bulaşıkçı {is} Ayşe {print} _ Bulaşıkları yıkamak zorunda olmam çok kötü. _
                    _ {print} 'Neyse ki bulaşık yok çünkü ' _ ' zaten yıkıyor'
                    ```
                start_code: '{print} ''Bulaşıkları kim yıkıyor?'''
            6:
                story_text: |
                    Herkes bulaşıkları ne sıklıkla yıkayacak? Bu adil mi? Bunu bu seviyede sayabilirsiniz.
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    ali_yıkadı = 0
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Bulaşıkçımız bugün ' bulaşıkçı
                    {if} bulaşıkçı {is} Ali ali_yıkadı = ali_yıkadı + 1
                    {print} 'Ali bu hafta bulaşıkları ' ali_yıkadı ' kere yıkadı'
                    ```

                    Şimdi 3'ten 5'e kadar olan satırları birkaç kez (örneğin tüm hafta için 7 kez) kopyalayarak tekrar tüm hafta için hesaplama yapabilirsiniz.
                    Bütün hafta için kod yazabilir misiniz?
                story_text_2: |
                    Eğer çok şanssızsanız, bir önceki program sizi tüm hafta boyunca bulaşıkları yıkamanız için seçebilir! Bu hiç adil değil!
                    Daha adil bir sistem oluşturmak için `{remove}` komutunu kullanarak seçilen kişiyi listeden çıkarabilirsiniz. Bu şekilde, herkes sırasını alana kadar bulaşıkları tekrar yıkamak zorunda kalmazsınız.

                    Pazartesi ve salı günleri sizin için hazır! Haftanın geri kalanını da ekleyebilir misiniz?
                    Ve... listenizin boşaldığı durum için bir çözüm bulabilir misiniz?
                example_code_2: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Pazartesi günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    bulaşıkçı = kişiler {at} {random}
                    {print} 'Salı günü bulaşıkçımız: ' bulaşıkçı
                    {remove} bulaşıkçı {from} kişiler
                    ```
                start_code: '{print} ''Bulaşıkları kim yıkıyor?'''
            7:
                story_text: |
                    `{repeat}` ile kod parçalarını tekrarlayabilirsiniz. Bunu, birden fazla gün boyunca bulaşıkları kimin yıkayacağını hesaplamak için kullanabilirsiniz!
                    ### Alıştırma
                    Bütün bir hafta boyunca bulaşıkları kimin yıkaması gerektiğine karar vermek için `{repeat}` komutunu kullanın. Her boşluğun bir komut veya sayı ile doldurulması gerekiyor!
                    **Ekleme** Evdeki diğer görevleri düşünebiliyor musunuz? Kodu üç ev işine karar verecek şekilde uyarlayın. Hangi görevlerle ilgili olduğunu yazdırmayı unutmayın!
                example_code: |
                    ```
                    kişiler = anne, baba, Ali, Ayşe
                    {repeat} _ _ {print} 'Bugün bulaşıkçımız ' _ _ _
                    ```
                start_code: '{print} ''Bulaşıkları kim yıkıyor?'''
            10:
                story_text: |
                    Bu seviyede, kolay bir şekilde tüm hafta için bir program yapabilirsiniz!

                    ### Alıştırma
                    Süpürmek veya ortalığı toplamak gibi ikinci bir angarya iş ekleyin ve bunun da tüm haftaya bölündüğünden emin olun.
                    <br> **Ekleme** Program adil değil, şanssız olabilir ve tüm hafta boyunca temizlikçi olabilirsiniz. Programı nasıl daha adil hale getirebilirsiniz?
                example_code: |
                    ```
                    günler = Pazartesi, Salı, Çarşamba, Perşembe, Cuma, Cumartesi, Pazar
                    isimler = anne, baba, Ali, Ayşe
                    {for} gün {in} günler
                        {print} isimler {at} {random} ' bulaşıkları ' gün ' günü yıkayacak'
                    ```
                start_code: |
                    günler = Pazartesi, Salı, Çarşamba, Perşembe, Cuma, Cumartesi, Pazar
                    isimler = anne, baba., Emma, Sophie
                    {for} gün {in} günler
                        {print} isimler {at} {random} ' bulaşıkları ' gün ' günü yıkayacak'
    elif_command:
        name: '{elif}'
        default_save_name: değileğer
        description: değileğer
        levels:
            17:
                story_text: |
                    Bu seviyede yeni bir komutu daha kullanabilirsiniz: `{elif}`. `{elif}`, `{else}` `{if}` komutunun kısaltmasıdır ve 3 (veya daha fazla!) seçenek yapmak istediğinizde buna ihtiyaç duyarsınız.
                    Şuna bir bakın!
                example_code: |
                    ```
                    ödüller = ['1 milyon lira', 'bir elmalı turta', 'hiçbir şey']
                    senin_ödülün = ödüller[{random}]
                    {print} 'Kazandığın ödül ' senin_ödülün
                    {if} senin_ödülün == '1 milyon lira' :
                        {print} 'Evet! Sen artık zenginsin!'
                    {elif} senin_ödülün == 'bir elmalı turta' :
                        {print} 'Çok güzel, bir elmalı turta!'
                    {else}:
                        {print} 'Bir dahaki sefere iyi şanslar...'
                    ```
                start_code: |-
                    ödüller = ['1 milyon lira', 'bir elmalı turta', 'hiçbir şey']
                    senin_ödülün = ödüller[{random}]
                    {print} 'Kazandığın ödül ' senin_ödülün
                    {if} senin_ödülün == '1 milyon lira' :
                        {print} 'Evet! Sen artık zenginsin!'
                    {elif} senin_ödülün == 'bir elmalı turta' :
                        {print} 'Çok güzel, bir elmalı turta!'
                    {else}:
                        {print} 'Bir dahaki sefere iyi şanslar...'
    for_command:
        name: '{for}'
        default_save_name: for
        description: için komutu
        levels:
            10:
                story_text: |-
                    ## için
                    Bu seviyede `{for}` adında yeni bir kod öğreniyoruz. `{for}` ile bir liste oluşturabilir ve onun tüm öğelerini kullanabilirsiniz.
                    `{for}`, `{repeat}` ve `{if}` gibi bir blok oluşturur, bu nedenle bloktaki tüm satırların 4 boşlukla başlaması gerekir.
                example_code: |
                    ```
                    hayvanlar {is} köpek, kedi, balık
                    {for} hayvan {in} hayvanlar
                        {print} 'Benim sevdiğim ' hayvan
                    ```
                start_code: |-
                    hayvanlar {is} köpek, kedi, balık
                    {for} hayvan {in} hayvanlar
                        {print} 'Benim sevdiğim ' hayvan
            11:
                story_text: |-
                    Bu seviyede, `{for}` in yeni bir şeklini ekliyoruz. Daha önceki seviyelerde `{for}` i bir liste ile kullanmıştık, ancak `{for}` ni sayılarla da kullanabiliriz.
                    Bunu bir değişken adı ve ardından `{in}` `{range}` ekleyerek yaparız. Daha sonra ilk başlanacak sayıyı, ardından `{to}`, ve sonra bitecek sayıyı yazıyoruz.

                    Ne olduğunu görmek için örneği deneyin! Bu seviyede de yine, `{for}` ifadelerinin altındaki satırlarda girintiler kullanmanız gerekecektir.
                example_code: |
                    ```
                    {for} sayaç {in} {range} 1 {to} 10
                        {print} sayaç
                    {print} 'önüm arkam sağım solum sobe!'
                    ```
                start_code: |-
                    {for} sayaç {in} {range} 1 {to} 10
                        {print} sayaç
                    {print} 'önüm arkam sağım solum sobe!'
            17:
                story_text: |
                    Şimdi girintilemeyi biraz değiştireceğiz. Girintiye her ihtiyaç duyduğumuzda, girintiden önceki satırda `:` işaretine ihtiyacımız var.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Önüm arkam sağım solum sobe, saklanmayan ebe!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Önüm arkam sağım solum sobe, saklanmayan ebe!'
    fortune:
        name: Falcı
        default_save_name: Falcı
        description: Hedy'nin geleceği tahmin etmesini sağlayın
        levels:
            1:
                story_text: |
                    Hiç bir karnavala gittiniz ve bir falcı tarafından geleceğinizin tahmin edildiğini gördünüz mü? Ya da hiç sihirli sekiz topla oynadınız mı? Ya da bunları bir filmde gördünüz mü?
                    O zaman muhtemelen geleceğinizi gerçekten tahmin edemeyeceklerini biliyorsunuzdur, ama yine de oynamak eğlenceli!

                    İlerleyen seviyelerde kendi fal makinenizi nasıl yaratacağınızı öğrenebilirsiniz!
                    1. seviyede, Hedy'nin kendini falcı olarak tanıtmasını ve oyuncuların cevaplarını `{echo}` ile yankılamasını sağlayarak kolay bir başlangıç yapabilirsiniz.
                    Bunun gibi:
                example_code: |
                    ```
                    _ Merhaba, ben falcı Hedy!
                    _ Peki sen kimsin?
                    _ Kristal küreme bir göz atayım
                    _ Görüyorum... Evet görüyorum...
                    _ Senin adın
                    ```
                story_text_2: |
                    ### Alıştırma
                    Örnek kodu girdi ekranınıza kopyalayın ve kodun çalışması için boşlukları doldurun.
                    **Ekleme** Kodu değiştirin ve falcının yalnızca adınızı değil, yaşınızı, tuttuğunuz spor takımını veya kendinizle ilgili başka bir şeyi de tahmin etmesini sağlayın.
                start_code: '# kodunuzu buraya yazın'
            3:
                story_text: |
                    Önceki seviyelerde ilk fal makinenizi yapmıştınız, ancak Hedy gerçekten hiçbir şey tahmin edemedi, sadece `{echo}` kullandı.
                    Bu seviyede, Hedy'nin sizin için bir cevap seçmesini gerçekten sağlamak için bir değişken ve `{at} {random}` komutunu kullanabilirsiniz. Örneğin bu koda göz atın:
                example_code: |
                    ```
                    {print} Ben falcı Hedy'im!
                    soru {is} {ask} Ne bilmek istiyorsun?
                    {print} Demek bilmek istediğin şey: soru
                    cevaplar {is} evet, hayır, belki
                    {print} Kristal kürem diyor ki...
                    {sleep} 2
                    {print} cevaplar {at} {random}
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdilik, Hedy sadece evet, hayır veya belki cevaplarını verebiliyor. Hedy'ye 'kesinlikle' veya 'tekrar sor' gibi daha fazla cevap seçeneği verebilir misiniz?
                start_code: '# kodunuzu buraya yazın'
            4:
                story_text: |
                    Bu seviyede yeni bir işlev yok, ancak tırnak işaretlerini kullanarak pratik yapmanızı sağlar.
                    Seviye 3 kodunuzu yeniden oluşturabilir ve tırnak işaretlerini doğru yerlere eklediğinizden emin olabilirsiniz!

                    Seviye 3'te 'soru' kelimesini hem değişken adı hem de yazdırılabilecek normal bir kelime olarak kullanamadığımızı unutmayın.
                    Seviye 4'teki tırnak işaretleri bunu mümkün kılmaktadır!

                    ### Alıştırma
                    Bu örnek koddan tüm tırnak işaretlerini kaldırdık, bunları doğru yerlere ekleyebilir misiniz?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve falcı kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretlerini ekleyin _
                    {print} Ben falcı Hedy!
                    soru {is} {ask} Ne bilmek istiyorsun?
                    {print} Sorduğun soru: soru
                    cevaplar {is} evet, hayır, belki
                    {print} Kristal kürem diyor ki...
                    {sleep} 2
                    {print} cevaplar {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            5:
                story_text: |
                    ### Alıştırma
                    Örnek kodda, olasılıkları kendi lehinize çevirmenizi sağlayan bir falcı programının nasıl yapıldığını göreceksiniz. Bu hile programı size her zaman piyangoyu kazanacağınızı söyler, ancak arkadaşlarınız asla kazanamaz.

                    Bunu kendi programınızı yapmak için kullanın, yaratıcı olun! Örneğin şunu tahmin eden bir kod oluşturabilirsiniz:
                    * tuttuğunuz spor takımı tüm rakiplerini yenecek!
                    * film gecesi için en sevdiğiniz film seçilecek!
                    * en sevdiğiniz gösteriye bilet kazanın!
                    * Pamuk Prenses'in sihirli aynası gibi, hepsinin içinde en güzeli sensin.
                    Bırakın işi hayal gücünüz yapsın!

                    Programınız en az 10 satır koddan oluşmalı ve en az bir `{if}` ve `{else}` komutuna sahip olmalıdır.
                example_code: |
                    ```
                    arkadaşlar {is} Leyla, Orhan, Nergis
                    {print} 'Yarın piyangoyu kazanıp kazanmayacağınızı tahmin edebilirim!'
                    kişi {is} {ask} 'Sen kimsin?'
                    iyi_cevap {is} Yaşasın! Sen kazandın!, Kesinlikle sen kazanacaksın!, Bir kazananımız var!
                    kötü_cevap {is} Kötü şans! Tekrar dene!, Başka biri kazanacak, Sen kaybedeceksin!
                    {if} kişi {in} arkadaşlar {print} iyi_cevap {at} {random}
                    {else} {print} kötü_cevap {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            6:
                story_text: |
                    Bu seviyede artık bir falcı olarak tahminlerinizde matematiği kullanabilirsiniz. Bu, geleceği hesaplamak için (aptalca) formüller oluşturmanıza olanak tanır.
                    Örneğin, ne kadar zengin olacağınızı veya büyüdüğünüzde kaç çocuğunuz olacağını hesaplayabilirsiniz.



                    ### Alıştırma
                    Kendinize ait (aptalca) bir fal makinenizi hayal edebiliyor musunuz?
                example_code: |
                    ```
                    {print} "Ben falcı Hedy'im!"
                    {print} 'Büyüdüğünde kaç çocuğun olacağını tahmin edebiliyorum!'
                    yaş = {ask} 'Kaç yaşındasın?'
                    kardeşler = {ask} 'Kaç kardeşin var?'
                    boy = {ask} 'Santimetre cinsinden boyun kaç?'
                    çocuklar = boy / yaş
                    çocuklar = çocuklar - kardeşler
                    {print} 'Büyüdüğünde...'
                    {sleep}
                    {print} çocuklar ' çocuğun olacak!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            7:
                story_text: |
                    ### Alıştırma
                    Aşık olduğunuz kişinin sizi sevip sevmediğini söyleyen bu programı bitirin.
                example_code: |
                    ```
                    {print} 'Sihirli yaprakları olan bir çiçeğim var'
                    {print} 'Eğer taç yapraklarını koparırsanız, çiçek size aşkınızın sizi sevip sevmediğini söyleyecektir.'
                    miktar = {ask} 'Kaç tane taç yaprağı koparmak istiyorsun?'
                    seçenekler = seni seviyor, seni sevmiyor
                    _ _ _ _ seçenekler {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            8:
                story_text: |
                    Bir sonraki örnekte, falcınızın birden fazla soru sormasını ve bunları yazdırmasını sağlayabilirsiniz!

                    ### Alıştırma
                    Boşlukları doğru komutla doldurabilir misiniz?
                example_code: |
                    ```
                    {print} "Ben falcı Hedy'im!"
                    {print} 'Bana 3 soru sorabilirsin.'
                    cevaplar = evet, hayır, belki
                    _ _ _
                       soru = {ask} 'Ne bilmek istiyorsun?'
                       {print} soru
                       {sleep}
                       {print} 'Kristal kürem diyor ki... ' cevaplar {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    Bu seviyede MASH (konak, apartman, kulübe, ev) oyununu nasıl programlayacağınızı öğreneceksiniz. Bu oyunda tüm oyuncular için aynı anda geleceklerinin neye benzeyeceğini tahmin edebilirsiniz.

                    ### Alıştırma
                    Bu seviyede öğrendiğiniz yeni komutu kullanarak boşlukları doldurun.
                example_code: |
                    ```
                    evler = konak, apartman, baraka, ev
                    aşklar = hiç kimse, bir soylu, bir komşu, gerçek aşkı
                    hayvanlar = köpek, kedi, fil
                    isimler = Bulut, Sema, Deniz
                    _
                        {print} isim ' şu evde yaşayacak: ' houses {at} {random}
                        {print} isim ' şununla evlenecek: ' loves {at} {random}
                        {print} isim ' evcil hayvan olarak ' pets {at} {random} ' besleyecek.'
                        {sleep}
                    ```
                start_code: '# kodunuzu buraya yazın'
            12:
                story_text: |-
                    12. seviyeden itibaren artık, listelerde her öğeden önce ve sonra tırnak işareti kullanmanız gerekecektir.

                    ### Alıştırma
                    Listeye iki tane tahmin ekleyin
                example_code: |
                    ```
                    fallar = 'muz kabuğuna basıp kayacaksın', _
                    {print} 'Geleceğin için kristal küreme bir göz atacağım.'
                    {print} 'Görüyorum... Görüyorum...'
                    {sleep}
                    {print} fallar {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter maceraları
        levels:
            10:
                story_text: |
                    ### Alıştırma
                    Harry Potter temalı bir falcı da yapabiliriz. Boşlukları 9 satır yazdıracak şekilde doldurun.
                    **Ekleme** Falcının temasını en sevdiğiniz kitap, film veya televizyon programı gibi başka bir şeye dönüştürün.
                example_code: |
                    ```
                    evler = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    konular = iksirler, karanlık sanatlara karşı savunma, tılsımlar, başkalaşım
                    korkular = Voldemort, örümcekler, OWL sınavında başarısız olmak
                    isimler = Harry, Ron, Hermione
                    _
                    _ {print} isim ' şu okula gidiyor: ' evler {at} {random}
                    _ {print} isim ' şu konuda çok iyi: ' konular {at} {random}
                    _ {print} isim ' en çok şundan korkuyor: ' korkular {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
    haunted:
        name: Perili Ev
        default_save_name: Perili Ev
        description: Perili evden kaçış
        levels:
            1:
                story_text: |
                    Bu macerada, doğru kapıyı seçerek perili bir evden kaçmanız gereken bir oyun yapmak için çalışıyorsunuz.
                    Eğer doğru kapıyı seçerseniz hayatta kalırsınız, ama seçmezseniz korkunç bir canavar sizi...

                    1. seviyede, perili ev oyunumuza korkutucu bir hikaye uydurarak başlıyoruz ve oyuncuya perili evde hangi canavarı göreceklerini soruyoruz.
                example_code: |
                    ```
                    {print} Buraya nasıl geldim?
                    {print} Arkadaşımın bana eski malikaneye gitmemi söylediğini hatırlıyorum...
                    {print} sonra her şey aniden karardı.
                    {print} Ama nasıl oldu da kendimi yerde buldum?
                    {print} Başım beyzbol sopasıyla vurulmuş gibi ağrıyor!
                    {print} Bu ses de ne?
                    {print} Oh hayır! Bu evde yalnız değilmişim gibi hissediyorum!
                    {print} Buradan çıkmam lazım!
                    {print} Önümde 3 kapı var...
                    {ask} Hangi kapıyı seçmeliyim?
                    {echo} Seçtiğim kapı
                    {print} ...?
                    ```
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu girdi ekranınıza kopyalayın.
                    Şimdi en az 5 satır kod ekleyerek hikayeyi bitirin.
                    Her kod satırına `{print}` komutuyla başlamayı unutmayın.
                start_code: '{print} Buraya nasıl geldim?'
            2:
                story_text: |
                    Bu perili evde canavarlarınızı emojilerle seçebilirsiniz. Tabii ki yine kelimeleri de kullanabilirsiniz.
                example_code: |
                    ```
                    canavar_1 {is} 👻
                    canavar_2 {is} 🤡
                    canavar_3 {is} 👶
                    {print} Perili eve giriyorsunuz.
                    {print} Aniden bir canavar_1 görüyorsunuz
                    {print} Diğer odaya koşuyorsunuz...
                    {print} Ama canavar_2 sizi orada bekliyor!
                    {print} Olamaz! Çabuk mutfağa gidin.
                    {print} Ama siz içeri girerken canavar_3 size saldırıyor!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Yukarıdaki örnekte canavarlar önceden belirlenmiştir. Yani kodunuzu her çalıştırdığınızda çıktı aynı olacaktır.
                    Perili evi etkileşimli hale getirmek ve oyuncuların karşılaştıkları canavarları seçmelerini sağlamak için `{ask}` komutları ekleyebilir misiniz?
                example_code_2: |
                    ```
                    canavar_1 {is} _
                    canavar_2 {is} _
                    canavar_3 {is} _
                    {print} Perili eve giriyorsunuz.
                    {print} Aniden bir canavar_1 görüyorsunuz
                    {print} Diğer odaya koşuyorsunuz...
                    {print} Ama canavar_2 sizi orada bekliyor!
                    {print} Olamaz! Çabuk mutfağa gidin.
                    {print} Ama siz içeri girerken canavar_3 size saldırıyor!
                    ```
                start_code: canavar_1 {is} _
            3:
                story_text: |
                    Önceki seviyelerde, perili ev oyununuza bir giriş yaptınız, ancak fark etmiş olabileceğiniz gibi hikaye her zaman korkunç bir sona sahip oluyordu.
                    Bu seviyede oyunun sonucunu değiştirerek hikayenizi daha etkileşimli hale getirebilirsiniz; bazen yenileceksiniz, bazen kaçmayı başaracaksınız!
                    Bırakın Hedy rastgele karar versin!

                    ### Alıştırma
                    Örnek kodları kopyalayın ve çalışmasını sağlamak için boşlukları doldurun!

                    **Ekleme** Bu hikaye oldukça basit, belki daha heyecanlı bir hikaye ekleyerek biraz canlandırabilirsiniz.
                    Ayrıca şu anda çok sınırlı sonuçlarınız var, kapıların arkasında ne olduğuna dair sadece 3 seçenek var. Belki listeye eklemek için daha fazla canavar düşünebilirsiniz!
                example_code: |
                    ```
                    _ Perili evden kaçış!
                    _ Önünüzde 3 kapı var...
                    _ _ _ Hangi kapıyı seçiyorsunuz?
                    _ Seçtiğiniz kapı ... choice
                    canavarlar _ bir zombi, bir vampir, KAÇAMAYACAĞINIZ BİR ŞEY
                    _ Karşınıza çıkan...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# kodunuzu buraya yazın'
            4:
                story_text: |
                    Bu seviyede oyunlarınızda tırnak işaretlerini nasıl kullanacağınızı öğreneceksiniz.

                    ### Alıştırma
                    Perili Evinizi 4. seviyeye dayanıklı yapabilir misiniz?

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve perili ev kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek kodun bu seviyede çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretleri ekleyin _
                    {print} Perili evden kaçış!
                    {print} Önünüzde 3 kapı var...
                    seçim {is} {ask} Hangi kapıyı seçiyorsunuz?
                    {print} Seçtiğiniz kapı ... choice
                    canavarlar {is} bir zombi, bir vampir, KAÇAMAYACAĞINIZ BİR ŞEY
                    {print} Karşınıza çıkan...
                    {sleep}
                    {print} canavarlar {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            5:
                story_text: |
                    Bu seviyeye kadar perili ev oyunu her zaman oyuncudan bir kapı seçmesini istedi, ancak fark etmiş olabileceğiniz gibi, gerçekten doğru cevap vermek zorunda değillerdi.
                    Oyuncu tamamen rastgele bir cevap girerse, oyun yine de çalışır ve hatta oyuncu kazanabilirdi (bir kapı seçmemesine rağmen).
                    Bu seviyede oyunu sadece Hedy'nin rastgele seçtiği kapıyı seçerek kazanabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlamak için eksik 4 kelimeyi bulabilir misiniz?
                example_code: |
                    ```
                    {print} 'Perili evden kaçış!'
                    {print} 'Önünüzde 3 kapı var...'
                    kapılar {is} 1, 2, 3
                    canavarlar {is} kurt adam, mumya, vampir, zombi
                    seçilen_kapı {is} {ask} 'Hangi kapıyı seçiyorsunuz?'
                    {print} 'Seçtiğini kapı...' seçilen_kapı
                    {sleep}
                    doğru_kapı {is} kapılar {at} {random}
                    _ _ _ _ {print} 'Harika! Kaçmayı başardınız!'
                    {else} {print} 'Olamaz! Bir ' canavarlar {at} {random} ' sizi yedi!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            9:
                story_text: |
                    Bu seviyede, perili evi daha da etkileşimli hale getirmenize olanak tanıyan iç içe geçirme özelliğini kullanabilirsiniz!

                    ### Alıştırma
                    Şu anda bu oyunu kazanmak çok zor, kazanmayı daha kolay hale getirebilir misiniz?
                    Kodunuzu bir doğru kapı ve iki yanlış kapı yerine sadece bir yanlış kapı ve iki doğru kapı olacak şekilde değiştirebilir misiniz?
                    İpucu: Bu, doğru_kapı değişkenini yanlış_kapı olarak değiştirmek ve sonra `{if}` ve `{else}` kodlarını değiştirmek anlamına gelir.
                    Ve tabii ki hikayeyi değiştirebilir ve kendinize ait hale getirebilirsiniz. Canavarları değiştirin ya da hediye aldığınız mutlu bir oyun gösterisine çevirin!
                example_code: |
                    ```
                    {print} 'Perili Evden Kaçış!'
                    oyuncu = canlı
                    kapılar = 1, 2, 3
                    canavarlar = zombi, vampir, dev örümcek
                    {repeat} 3 {times}
                        {if} oyuncu {is} canlı
                            doğru_kapı {is} kapılar {at} {random}
                            {print} 'Önünüzde 3 kapı var...'
                            seçilen_kapı = {ask} 'Hangi kapıyı seçiyorsunuz?'
                            {if} seçilen_kapı {is} doğru_kapı
                                {print} 'Burada hiç canavar yok!'
                            {else}
                                {print} 'Bir ' canavarlar {at} {random} ' sizi yakaladı ve yedi'
                                oyuncu = ölü
                        {else}
                            {print} 'OYUN BİTTİ'
                    {if} oyuncu {is} canlı
                        {print} 'Harika! Hayatta kaldınız!'
                    ```
                start_code: '{print} ''Perili evden kaçış!'''
            11:
                story_text: |
                    Bu seviyede, `{for}` komutunu değiştirdik, böylece oyuncuya nerede olduklarını söyleyebiliyoruz.

                    ### Alıştırma 1
                    Oyuncunun hangi odada olduğunu bilmesi için programı tamamlayın.

                    ### Alıştırma 2
                    Bu adımları takip ederek programı bir maceraya dönüştürün:

                    1. Seçeneklerin bir listesini yapın (savaş ya da kaç gibi)
                    2. Oyuncunun `{ask}` ile bir seçenek seçebildiğinden emin olun
                    3. Cevap doğru mu? O zaman bir sonraki canavara geçebilirler. Yanlış bir cevap mı verdiler? Oyuncuya bir `{print}` ile bildirin.

                    **Ekleme** Şu anda, yanlış bir seçim yaparsanız, yine de bir canavar gösteriliyor! Bunu nasıl değiştirebilirsiniz?
                example_code: |
                    ```
                    {print} 'Perili Evden Kaçış!'
                    canavarlar = zombi, vampir, dev örümcek
                    _
                        {print} 'Oda ' i
                        canavar = canavarlar {at} {random}
                    ```
                start_code: '{print} ''Perili evden kaçış!'''
            14:
                story_text: |
                    Bu seviyede, `<` ve `>` sembollerini kullanarak oyununuza canlar ekleyebilirsiniz.
                example_code: |
                    ```
                    {print} 'Perili evden kaçış'
                    canlar = 3
                    kapılar = 1, 2, 3
                    canavarlar = 'kötü cadı', 'zombi', 'uyuyan üç başlı bir köpek'
                    {for} i {in} {range} 1 {to} 10
                        {if} canlar > 0
                            iyi_kapı = kapılar {at} {random}
                            canavar = canavarlar {at} {random}
                            seçilen_kapı = {ask} 'Hangi kapıyı seçiyorsunuz?'
                            {if} iyi_kapı == seçilen_kapı
                                {print} 'Doğru kapıyı seçtiniz'
                            {else}
                                {print} 'Karşınıza bir...' canavar ' çıktı'
                                {if} canavar == 'uyuyan üç başlı bir köpek'
                                    {print} 'Pffieuw.... Neyseki uyuyor'
                                {else}
                                    {print} 'Bir can kaybettiniz'
                                    canlar = canlar -1
                        {else}
                            {print} 'OYUN BİTTİ'
                    ```
                start_code: '# kodunuzu buraya yazın'
            16:
                story_text: |
                    Bu perili ev oyunu, bu seviyede kullanabileceğiniz listeler ile arasında bir bağlantı kullanır.
                    Örneğin: zombiye ait tüm özellikler tüm listelerde ilk sırada, cadı ikinci sırada ve vampir üçüncü sırada yer alır.
                    Kodu kontrol edin!
                example_code: |
                    ```
                    sayılar = [1, 2, 3]
                    i = sayılar[{random}]
                    ipucu = ['hırlama', 'gıdaklayan bir kahkaha', 'çırpınan yarasa kanatları']
                    canavarlar = ['zombi', 'cadı', 'vampir']
                    kötü_son = ['Beynini yediler', 'Sonsuza kadar lanetlendin', 'Isırıldın']
                    iyi_son = ['Bir et parçası fırlatırsın. Zombinin dikkati dağılır ve onu yemeye başlar', 'Perdeleri ateşe verirsin. Cadı yangın korkusuyla kaçar', 'Vampir sarımsaktan nefret eder ve kaçar']
                    silahlar = ['et', 'çakmak', 'sarımsak']
                    {print} 'Eski bir konağın önünde duruyorsunuz.'
                    {print} 'Burada doğru olmayan bir şeyler var.'
                    {print} 'Bir ' ipucu[i] ' sesi duyuyorsunuz... '
                    {print} 'Onu aramaya gidiyorsunuz'
                    {print} 'Mutfağa giriyorsunuz ve bir çakmak, çiğ bir et ve sarımsak görüyorsunuz.'
                    senin_silahın = {ask} 'Yanına hangisini alıyorsun? (çakmak, et, sarımsak)'
                    {print} 'Elinde ' senin_silahın ' ile oturma odasına giriyorsun'
                    {print} 'Orada karşına bir ' canavarlar[i] ' çıkıyor'
                    gereken_silah = silahlar[i]
                    {if} senin_silahın == gereken_silah
                        {print} 'Elindeki ' senin_silahın ' ile saldırıyorsun'
                        {print} iyi_son[i]
                        {print} 'SEN KAZANDIN!'
                    {else}
                        {print} 'Yanlış silahı seçmişsin....'
                        {print} kötü_son[i]
                        {print} 'OYUN BİTTİ'
                    ```
                start_code: '# kodunuzu buraya yazın'
    if_command:
        name: '{if} & {else}'
        default_save_name: eğer_komutu
        description: eğer komutuna giriş
        levels:
            5:
                story_text: |
                    ## eğer... değilse....
                    5. seviyede sizin için yeni bir şey var, `{if}`! `{if}` ile iki farklı seçenek arasında seçim yapabilirsiniz.
                    Bu kod, isim olarak Hedy girerseniz güzel, başka bir şey girerseniz böö! yazdırır.
                    `{ask}` ve `{print}` hala 4. seviyede olduğu gibi çalışmaya devam ediyorlar.
                example_code: |
                    ```
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy {print} 'güzel' {else} {print} 'böö!'
                    ```
                story_text_2: |
                    Bazen `{if}` içeren kod gerçekten uzun olur ve satıra iyi sığmaz. <br> Ayrıca kodu iki satıra bölebilir, ikinci satırı `{else}` ile şu şekilde başlatabilirsiniz:
                example_code_2: |
                    ```
                    isim {is} {ask} 'senin adın ne?'
                    {if} isim {is} Hedy {print} 'güzel'
                    {else} {print} 'böö!'
                    ```
                story_text_3: |
                    ### Alıştırma
                    `{if}` ve `{else}` ile kendi kodunuzu oluşturmaya çalışın. İsterseniz örnek kodu kullanabilirsiniz.
                example_code_3: |
                    ```
                    cevap {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Harikasın!'
                    _ _ 'Hayır, 2 + 2 = 4'
                    ```
                start_code: |-
                    isim {is} {ask} 'senin adın ne?'
                    {if} isim {is} Hedy {print} 'güzel'
                    {else} {print} 'böö!'
            8:
                story_text: |
                    ## eğer... değilse...
                    Bir `{repeat}` komutundan sonra bir kod satır bloğunu tekrarlamayı öğrendiniz.
                    Şimdi artık bir {if} veya {else} komutundan sonra bloklar oluşturmak için girinti de kullanabilirsiniz.
                    Örnek koda göz atın.

                    ### Alıştırma
                    Örnek koda bir {else} komutu ekleyin. Girinti kullanarak bir satır bloğu oluşturun. Bunu her satırı 4 boşlukla başlatarak yaparsınız.
                example_code: |
                    ```
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy
                        {print} 'Hoşgeldin Hedy'
                        {print} 'Bilgisayarında oynayabilirsin!'
                    ```
                start_code: |
                    isim {is} {ask} 'Senin adın ne?'
                    {if} isim {is} Hedy
                        {print} 'Hoşgeldin Hedy'
                        {print} 'Bilgisayarında oynayabilirsin!'
            9:
                story_text: |
                    Bu seviyede bir {if} komutunu başka bir {if} komutunun içine de koyabilirsiniz.
                example_code: |
                    devam = {ask} 'Devam etmek istiyor musun?'
                    {if} devam = evet
                        emin = {ask} 'Emin misin?'
                        {if} emin {is} evet
                            {print} 'Devam edeceğiz'
                        {else}
                            {print} 'Emin değilsin'
                    {else}
                        {print} 'Devam etmek istemiyorsun'
                start_code: |
                    devam = {ask} 'Devam etmek istiyor musun?'
                    {if} devam = evet
                        emin = {ask} 'Emin misin?'
                        {if} emin {is} evet
                            {print} 'Devam edeceğiz'
                        {else}
                            {print} 'Emin değilsin'
                    {else}
                        {print} 'Devam etmek istemiyorsun'
    in_command:
        name: '{in}'
        default_save_name: içinde_komutu
        description: içinde komutuna giriş
        levels:
            5:
                story_text: |
                    ## Listeler
                    Bir şeyin bir listede olup olmadığını kontrol etmek istediğimizde, artık `{in}` komutunu kullanabiliriz.
                    Bu kod, yeşili veya sarıyı seçerseniz güzel, aksi takdirde eh işte yazdırır.
                example_code: |
                    ```
                    güzel_renkler {is} yeşil, sarı
                    favori_renk {is} {ask} 'En sevdiğin renk nedir?'
                    {if} favori_renk {in} güzel_renkler {print} 'güzel!'
                    {else} {print} 'eh işte'
                    ```
                story_text_2: |
                    ### Alıştırma
                    Boşlukları öğrendiğiniz komutlarla doldurarak örnek kodu tamamlayın.
                    Kodu bitirdiğinizde, kendinize ait bir kod oluşturmaya çalışın ve kendi düşündüğünüz bir soruyu kullanın.
                example_code_2: |
                    ```
                    hayvanlar eşit köpek, inek, koyun
                    cevap eşit sor 'En sevdiğin hayvan hangisi?'
                    _ cevap _ hayvanlar _ 'Benimki de öyle!'
                    _ _ 'En sevdiğim hayvanlar köpekler, inekler ve koyunlar'
                    ```
                start_code: |-
                    güzel_renkler {is} yeşil, sarı
                    favori_renk {is} {ask} 'En sevdiğin renk nedir?'
                    {if} favori_renk {in} güzel_renkler {print} 'güzel!'
                    {else} {print} 'eh işte'
    is_command:
        name: '{is}'
        default_save_name: eşit_komutu
        description: eşit komutuna giriş
        levels:
            2:
                story_text: |
                    ## Değişkenler
                    Bir kelimeyi `{is}` ile isimlendirebilirsiniz. Buna bir **değişken** denir. Bu örnekte isim adında bir değişken ile yaş adında bir değişken oluşturduk. Kodunuzun herhangi bir yerinde isim kelimesini kullanabilirsiniz ve Hedy bu kelimeyi değiştirilecektir, bunun gibi:
                example_code: |
                    ```
                    isim {is} Hedy
                    yaş {is} 15
                    {print} isim yaş yaşındadır
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kendi değişkenlerinizi oluşturma zamanı!
                    Örnek kodda `favori_hayvan` değişkeni ile bir örnek yaptık. Satır 1'de değişken ayarlandı ve satır 2'de değişkeni bir `{print}` komutunda kullandık.
                    Öncelikle, boşluklara en sevdiğiniz hayvanı doldurarak örneğimizi tamamlayın. Daha sonra bu kodlardan en az 3 tane daha kendiniz ekleyin. Bir değişken seçin ve bu değişkeni `{is}` komutu ile ayarlayın. Daha sonra tıpkı bizim yaptığımız gibi `{print}` komutu ile kullanın.
                example_code_2: |
                    ```
                    favori_hayvan {is} _
                    {print} En sevdiğim havyan favori_hayvan
                    ```
                start_code: |-
                    isim {is} Hedy
                    yaş {is} 15
                    {print} name age yaşındadır
            6:
                story_text: |
                    Bir kelimeyi bir değişkende saklama konusunda da bir değişiklik yapıyoruz! Artık bir değişkende bir isim veya sayı sakladığımızda `{is}` yerine `=` kullanabilirsiniz, bunun gibi:
                example_code: |
                    ```
                    isim = Hedy
                    cevap = 20 + 4
                    ```
                start_code: |
                    isim = Hedy
                    cevap = 20 + 4
            14:
                story_text: |
                    Daha fazla yeni öğe öğrenmeye devam ediyoruz. Bunları matematikten zaten biliyor olabilirsiniz, `<` ve `>`.
                    `<`, ilk sayının ikinciden küçük olup olmadığını kontrol eder, örneğin yaş `<` 12, yaşın 12'den küçük olup olmadığını kontrol eder.
                    İlk sayının ikinciden küçük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `<=` kullanabilirsiniz, örneğin yaş `<=` 11.
                    `>`, İlk sayının ikinciden büyük olup olmadığını kontrol eder, örneğin puan `>` 10, puan'ın 10'dan büyük olup olmadığını kontrol eder.
                    İlk sayının ikinciden büyük veya ona eşit olup olmadığını kontrol etmek istiyorsanız, `>=` kullanabilirsiniz, örneğin puan `>=` 11.
                    Bu karşılaştırmaları aşağıdaki gibi bir `{if}` içinde kullanırsınız:
                example_code: |
                    ```
                    yaş = {ask} 'Kaç yaşındasın?'
                    {if} yaş > 12
                        {print} 'Sen benden daha yaşlısın!'
                    ```
                story_text_2: |
                    Bu seviyeden itibaren, tam değer karşılaştırması istiyorsanız, iki eşit işareti kullanabilirsiniz. Çoğu programlama dili bunu yapar:
                example_code_2: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim == 'Hedy'
                        {print} 'Çok havalısın!'
                    ```
                story_text_3: |
                    Bir şeyin başka bir şeye eşit *olmadığını* `!=` kullanarak karşılaştırabilirsiniz:
                example_code_3: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim != 'Hedy'
                        {print} 'Sen Hedy değilsin.'
                    ```
                start_code: |-
                    yaş = {ask} 'Kaç yaşındasın?'
                    {if} yaş < 13
                        {print} 'Sen benden daha gençsin!'
                    {else}
                        {print} 'Sen benden daha yaşlısın!'
    language:
        name: Dil
        default_save_name: Dil
        description: Yabancı dilde kelime pratiği yapın
        levels:
            5:
                story_text: |
                    Yeni bir dilde kelime bilginizi geliştirmek için kendi programınızı yapın.

                    ### Alıştırma
                    Oyuncunun öğrenmesi için en az 3 kelime daha ekleyerek kodu daha uzun hale getirin.
                    **Ekleme** Elbette Fransızca'dan farklı bir dil kullanmayı seçebilirsiniz. Kodu öğrenmek istediğiniz herhangi bir dile değiştirebilirsiniz.
                example_code: |
                    ```
                    {print} 'Fransızca öğrenin!'
                    kedi {is} {ask} '🐱'
                    {if} kedi {is} chat {print} 'Müthiş!'
                    {else} {print} 'Hayır, kedinin karşılığı chat'
                    kurbağa {is} {ask} '🐸'
                    {if} kurbağa {is} grenouille {print} 'Süper!'
                    {else} {print} 'Hayır, kurbağanın karşılığı grenouille'
                    ```
                start_code: '# kodunuzu buraya yazın'
            16:
                story_text: |
                    Yeni bir dilde kelime bilginizi geliştirmek için kendi programınızı yapın.
                example_code: |
                    ```
                    fransızca_kelimeler = ['bonjour', 'ordinateur', 'pomme de terre']
                    çevirisi = ['merhaba', 'bilgisayar', 'patates']
                    puan = 0
                    {for} i {in} {range} 1 {to} 3
                        cevap = {ask} fransızca_kelimeler[i] ' kelimesinin anlamı nedir?'
                        doğrusu = çevirisi[i]
                        {if} cevap == doğrusu
                            {print} 'Doğru bildin!'
                            puan = puan + 1
                        {else}
                            {print} 'Yanlış, ' fransızca_kelimeler[i] ' kelimesi ' çevirisi[i] ' anlamına geliyor'
                    {print} 'Toplam ' puan ' doğru cevap verdin.'
                    ```
                start_code: '# kodunuzu buraya yazın'
    maths:
        name: matematik
        default_save_name: matematik
        description: matematiğe giriş
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    Bu seviyede yeni bir şey öğreniyorsunuz: artık hesaplama da yapabileceksiniz.

                    Toplama kolaydır, matematikte olduğu gibi yazarsınız: Örneğin `5 + 5`. Çıkarma da iyi çalışır, `5 - 5` şeklindedir.

                    Çarpma biraz farklıdır, çünkü klavyenizde çarpma simgesi yoktur. Arayın bakın, özel klavye değilse gerçekten yoktur!
                    Bu yüzden çarpmayı sayıların yanındaki yıldız işaretiyle yapıyoruz: `5 * 5`. Bunu "5 çarpı 5" olarak okuyun, en iyi şekilde böyle hatırlamanıza yardımcı olur.
                example_code: |
                    ```
                    {print} '5 artı 5 eder ' 5 + 5
                    {print} '5 eksi 5 eder ' 5 - 5
                    {print} '5 çarpı 5 eder ' 5 * 5
                    {print} '5 bölü 5 eder ' 5 / 5
                    ```
                start_code: |
                    {print} '5 artı 5 eder ' 5 + 5
                    {print} '5 eksi 5 eder ' 5 - 5
                    {print} '5 çarpı 5 eder ' 5 * 5
                    {print} '5 bölü 5 eder ' 5 / 5
            12:
                story_text: |-
                    **Ondalık sayılar**
                    Şimdiye kadar Hedy, 1.5 gibi ondalık sayılara izin vermiyordu, ancak şimdi buna izin veriyoruz. Bilgisayarların ondalık sayılar için `.` (nokta) kullandığını unutmayın.
                example_code: |
                    ```
                    {print} 'İki buçuk artı iki buçuk eder...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'ondalık sayıların artık bir nokta kullanması gerekiyor'
                    {print} 2.5 + 2.5
    parrot:
        name: Papağan
        default_save_name: Papağan
        description: Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!
        levels:
            1:
                story_text: |
                    Sizi taklit edecek kendi çevrimiçi evcil papağanınızı yaratın!
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    {ask} Adın ne senin?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu girdi ekranınıza kopyalayın.
                    Papağanın farklı bir soru sormasını sağlayın. Örnekteki boşlukları doldurun!
                    **Ekleme** Papağanın birden fazla soru sormasını da sağlayabilirsiniz. Kendi kodunuzun altına birkaç satır daha kod yazın.
                example_code_2: |
                    ```
                    {print} Ben papağan Hedy.
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Ben papağan Hedy.
                    {ask} Adın ne senin?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Bir önceki seviyede, sizden sonra tekrar eden bir papağan yapmıştınız. Bu seviyede papağanı bir değişken ve `{ask}` komutu kullanarak etkileşimli hale getireceğiz.
                    Ayrıca bir şey söylendikten sonra `{sleep}` komutları ekleyerek papağanı daha gerçekçi hale getireceğiz.
                example_code: |
                    ```
                    {print} Ben papağan Hedy.
                    isim _ _ Adın ne senin?
                    {print} isim
                    _
                    {print} gaak
                    _
                    {print} isim
                    ```
                story_text_2: |
                    ### Alıştırma
                    İlk olarak, 2. satırı bir `{is}` ve bir `{ask}` komutuyla bitirin.
                    Ardından papağanın bir süre sessiz kalmasını sağlamak için 4. ve 6. satırlara `{sleep}` komutunu girin.

                    **Ekleme** Daha fazla kod satırı ekleyerek papağanın sadece adınızdan daha fazlasını sormasını sağlayabilir misiniz?
                start_code: '{print} Ben papağan Hedy!'
            3:
                story_text: |
                    Papağanınıza `{add}` ile yeni bir kelime öğretin.
                    ### Alıştırma
                    Kodun çalışması için `{add} {to}` komutunu ekleyebilir misiniz?
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} Papağanınızı eğitin!
                    yeni_kelime {is} {ask} Ona hangi kelimeyi öğretmek istiyorsunuz?
                    _ yeni_kelime _ kelimeler
                    {print} 🧒 hadi yeni_kelime de, Hedy!
                    {print} 🦜 kelimeler {at} {random}
                    ```
                start_code: '# kodunuzu buraya yazın'
            4:
                story_text: |
                    Bu seviyede `{ask}` ve `{print}` komutları ile tırnak işaretlerini kullanmamız gerekiyor.
                    ### Alıştırma
                    Boşluklardaki tırnak işaretlerini doldurarak kodu tamamlayın.
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} _ Papağanınızı eğitin! _
                    yeni_kelime {is} {ask} _ Ona hangi kelimeyi öğretmek istiyorsunuz? _
                    {add} yeni_kelime {to_list} kelimeler
                    {print} _ 🧒 Hadi _ new_word _ de, Hedy!_
                    {print} _ 🦜 _ kelimeler {at} {random}
                    ```
                start_code: '# Kodunuzu buraya yazın'
            5:
                story_text: |
                    Doğru kelimeyi söylerse papağanınızı ödüllendirin!

                    ### Alıştırma
                    Eksik olan 4 komutu doldurarak kodu tamamlayın.
                example_code: |
                    ```
                    kelimeler {is} gaak, Hedy
                    {print} 'Papağanınızı eğitin!'
                    yeni_kelime {is} {ask} 'Ona hangi kelimeyi öğretmek istiyorsunuz?'
                    {add} yeni_kelime {to_list} kelimeler
                    dediği_kelime {is} kelimeler {at} {random}
                    {print} '🧒 Hadi ' new_word ' de, Hedy!'
                    {print} '🦜 ' dediği_kelime
                    _ dediği_kelime {is} yeni_kelime _ '🧒 Aferin, Hedy! 🍪'
                    _ _ '🧒 Hayır, Hedy! ' yeni_kelime ' de!'
                    ```
                start_code: '# kodunuzu buraya yazın'
    piggybank:
        name: Kumbara
        default_save_name: Kumbara
        description: Cebindeki parayı say!
        levels:
            12:
                story_text: |
                    Bu macerada, dijital bir kumbaranın nasıl yapılacağını öğreneceksiniz.

                    ### Alıştırma
                    Ne kadar paranız olduğunu ve istediğinizi satın almak için ne kadar süre biriktirmeniz gerektiğini hesaplamak için kodu tamamlayın!
                    **Ekleme** Belki de zaten biraz para biriktirmişsinizdir? Bunu biriktirmeniz gereken miktardan düşebilirsiniz.
                example_code: |
                    ```
                    {print} 'Dijital kumbara'
                    istek = {ask} 'Ne satın almak isterdiniz?'
                    fiyat = {ask} 'Bu fiyatı ne kadar?'
                    biriken = {ask} 'Şimdiye kadar ne kadar para biriktirdiniz?'
                    haftalık = {ask} 'Haftada ne kadar cep harçlığı alıyorsunuz?'
                    birikmesi_gereken = fiyat - biriken
                    haftalar = birikmesi_gereken / haftalık
                    {print} 'Yeni bir ' _ ' almak için ' _ ' hafta biriktirmek gerekiyor.'
                    ```
                start_code: '# kodunuzu buraya yazın'
            14:
                story_text: |
                    Bu seviyede, Hedy'nin size yeterince para biriktirip biriktirmediğinizi söylemesini sağlayabilirsiniz!
                example_code: |
                    ```
                    biriken = {ask} 'Ne kadar para biriktirdiniz?'
                    istek = {ask} 'Ne kadar paraya ihtiyacınız var?'
                    haftalık = {ask} 'Her hafta ne kadar cep harçlığı alıyorsunuz?'
                    birikmesi_gereken = istek - biriken
                    haftalat = birikmesi_gereken / haftalık
                    {if} istek > biriken
                        {print} 'Biraz daha para biriktirmelisiniz!'
                        {print} 'Size ' haftalat ' hafta daha gerekiyor'
                    {else}
                        {print} 'Harika! Yeterince paranız var'
                        {print} 'Hadi alışverişe gidelim!'
                    ```
                start_code: '# kodunuzu buraya yazın'
    pressit:
        name: Tuşa basma
        default_save_name: Basılı
        description: Bir klavye tuşu ile bir komutu birbirine bağlamayı deneyin!
        levels:
            5:
                story_text: |
                    Bu seviyede yeni bir anahtar kelimemiz daha var: `{pressed}`!
                    `{pressed}` ile, klavyenizdeki tuşları kullanarak hangi satırların kullanılacağını kontrol edebilirsiniz.

                    ### Alıştırma
                    Örneğe bir bakın, ve bir tuşa basıldığında tepki veren bir kod satırı daha ekleyin.
                example_code: |
                    ```
                    {print} 'İyi (i) mi yoksa kötü (k) bir son mu istiyorsunuz?'
                    {if} i {is} {pressed} {print} 'Sonsuza kadar mutlu yaşadılar. ❤'
                    {else} {print} 'Prens bir su aygırı tarafından yenmiş. 😭'
                    ```
                story_text_2: |
                    Kaplumbağa komutlarını da tuşlara bağlayabilirsiniz.

                    ### Alıştırma
                    Satırları birkaç kez kopyalayın, böylece daha büyük bir çizim yapabilirsiniz.
                example_code_2: |
                    ```
                    {if} i {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# kodunuzu buraya yazın'
            7:
                story_text: |
                    Artık `{repeat}` hakkında bilgi sahibi olduğunuza göre, tuşlara birden çok kez basabiliriz.
                    Kaplumbağanın ileri doğru yürümesini ve dönmesini sağlamak için kullanabilirsiniz.

                    ### Alıştırma
                    Seviye 5'te gördüğünüz kod, tuşu yalnızca bir kez kontrol ediyor. Örnek kodu kopyalayın ve tuşlara birçok kez basabilmeniz için ona bir `{repeat}` ekleyin.
                    Güzel bir şey çizmek için bu kodu kullanın.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# kodunuzu buraya yazın'
            9:
                story_text: |
                    Artık ifadeleri nasıl birleştireceğinizi bildiğinize göre, `{pressed}` ile dokunma-türü bir araç oluşturabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayın. Her seferinde basmanız gereken rastgele bir harf seçilmelidir. Doğru basınca bir puan ödül, yanlış basarsanız iki puan kesinti alırsınız.
                    **Ekleme** Her harften sonra ekranı temizleyin ve kullanıcıya kaç puan aldığını gösterin.
                example_code: |
                    ```
                    puan = 0
                    harfler = a, b, c, d, e
                    {repeat} 10 {times}
                        harf = _ _ _
                        {print} 'Hemen şu tuşa bas: ' harf
                        {if} harf {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# kodunuzu buraya yazın'
    print_command:
        name: '{print}'
        default_save_name: yazdır
        description: yazdır komutuna giriş
        levels:
            1:
                story_text: |
                    ## yazdır komutu
                    `{print}` komutunu kullanarak ekrana metin yazdırabilirsiniz.
                example_code: |
                    ```
                    {print} Merhaba, programcı!
                    {print} Hedy'ye hoş geldin!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Hedy'de, her macerada alıştırmalar bulacaksınız. Bir alıştırma, yeni komutları ve kavramları uygulamanıza ve örnek kodlara kendi yorumunuzu katmanıza olanak tanır.
                    Bu alıştırmada pembe bir boşluk göreceksiniz. Kodun çalıştırılabilmesi için boş alanın yerine bir şey yazıp doldurmanız gerekiyor.

                    Boş alana `{print}` komutunu girin ve ardından beş tane daha kod satırı ekleyin. Her satır bir `{print}` komutu ile başlamalıdır.
                    İyi eğlenceler!
                example_code_2: |
                    ```
                    _ Merhaba!
                    ```
                start_code: |
                    {print} Hedy'ye hoş geldin!
            18:
                story_text: |-
                    Gerçek Python koduna ulaştık! Yani bu, bundan sonra `{print}` ve `{range}` ile beraber artık bir de parantez kullanmamız gerektiği anlamına geliyor.
                    Bu aynı zamanda İngilizce komutları kullandığınız sürece bu seviyedeki Hedy kodunu herhangi bir Python ortamında kullanabileceğiniz anlamına gelir. Şimdiye kadar kullanmadıysanız, bunu yapmak için komutlar menüsünden geçişi değiştirebilirsiniz.
                example_code: |
                    ```
                    {print}('Merhaba!')
                    {for} i {in} {range}(1, 10):
                        {print}('Bu, satır ', i)
                    ```
                story_text_2: Birden fazla öğe yazdırmak istiyorsanız, bunları virgülle ayırmanız gerekir.
                example_code_2: |
                    ```
                    sıcaklık = 25
                    {print}('Hava dışarıda ', sıcaklık, ' derece')
                    ```
                story_text_3: Python kodunu elde etmek için yapmamız gereken son değişiklik `{ask}` ifadesini `{input}` olarak değiştirmektir.
                example_code_3: |
                    ```
                    {print}('Benim adım Hedy!')
                    isim = {input}('Senin adın ne?')
                    {print}('Demek senin ismin ', isim)
                    ```
                start_code: |-
                    isim = 'Hedy'
                    {print}('Benim adım ', isim)
    quizmaster:
        name: Kısa sınav ustası
        default_save_name: Kısa sınav ustası
        description: Kendi kısa sınavınızı yapın!
        levels:
            14:
                story_text: |
                    Bu macerada kendi kısa sınavınızı yapabilirsiniz! Boşlukları doldurun, daha fazla soru ekleyin ve kendi kısa sınavınızın tadını çıkarın!
                    İstediğiniz herhangi bir şey hakkında bir kısa sınav yapabilirsiniz: hobiniz, en sevdiğiniz hayvan, en sevdiğiniz kitap veya herhangi bir şey!
                example_code: |
                    ```
                    {print} 'Kendi kısa sınavınızı yapın'
                    puanlar_a = 0
                    puanlar_b = 0
                    {print} 'Soru'
                    {print} 'Cevap seçeneği A'
                    {print} 'Cevap seçeneği B'
                    cevap = {ask} 'Cevap hangisi?'
                    {if} cevap == 'A'
                        puanlar_a = puanlar_a + 1
                    {if} cevap == 'B'
                        puanlar_b = puanlar_b + 1
                    {print} 'Kısa sınav bitti!'
                    {print} 'Sonuçları görelim!'
                    {if} puanlar_a > puanlar_b
                        {print} 'Sen A kulübüne aitsin.'
                    {if} puanlar_b > puanlar_a
                        {print} 'Sen B kulübüne aitsin.'
                    ```
                start_code: '# kodunuzu buraya yazın'
    quotation_marks:
        name: '''tırnak işaretleri'''
        default_save_name: quotation_marks
        description: Tırnak işaretlerine giriş
        levels:
            4:
                story_text: |
                    ## 'Tırnak işaretleri'
                    4. seviyede `{ask}` ve `{print}` artık biraz değişti.
                    Yazdırmak istediğiniz metni tırnak işaretleri arasına almalısınız.
                    Bu yararlıdır, çünkü artık istediğiniz tüm kelimeleri yazdırabilirsiniz. Ayrıca `{is}` ile bir şeyi saklamak için kullandığınız kelimeler de buna dahil.
                    Çoğu programlama dilinde de yazdırırken tırnak işareti kullanılır, böylece gerçek programlamaya bir adım daha yaklaşmış oluruz!
                example_code: |
                    ```
                    {print} 'Şu andan itibaren tırnak işareti kullanmanız gerekiyor!'
                    cevap {is} {ask} 'Bundan sonra ne kullanmamız gerekiyor?'
                    {print} 'Kullanmamız gereken ' cevap
                    ```
                story_text_2: |
                    ## Kısaltmalar
                    Önemli! Artık tırnak işareti kullandığımıza göre, Hedy'nin veya TC'de gibi kısaltmalar için kesme işareti kullandığınızda Hedy'nin kafasının karışacağını unutmayın.
                    Bu kesme işaretlerini kaldırdığınızdan ve yazım şeklini "Hedy nin" veya "TC de" olarak değiştirdiğinizden emin olun. (Tek tırnak için şimdilik başka çözümümüz yok).
                    Kesme işaretlerinin yanlış kullanım şeklini görmek için örnek koda göz atın.
                example_code_2: |
                    ```
                    _ Kesme işaretlerini kullanmanın yanlış yolu budur _
                    {print} 'Ayşe'nin çocuklarına bakıyorum.'
                    {print} 'Çocuklarla oyun'dan daha eğlenceli ne olabilir ki?'
                    ```
                start_code: |-
                    {print} 'Şu andan itibaren tırnak işareti kullanmanız gerekiyor!'
                    cevap {is} {ask} 'Bundan sonra ne kullanmamız gerekiyor?'
                    {print} 'Bundan sonra ' cevap ' kullanmamız gerekiyor'
            12:
                story_text: |
                    **Tüm metinlerin tırnak içinde olması gerekir**
                    Bu seviyeden itibaren bir metni `=` ile kaydederken tırnak işaretlerini de kullanmanız gerekecektir:
                example_code: |
                    ```
                    isim = 'Robot Hedy'
                    {print} 'Merhaba ' isim
                    ```
                story_text_2: |
                    **Listelerdeki tüm öğelerin de tırnak işaretine ihtiyacı vardır**
                    Listeler metindir, bu nedenle onlarında tırnak işaretlerine ihtiyaçları vardır. Listedeki her bir öğenin tırnak işaretine sahip olduğuna dikkat edin.
                    Bu, örneğin 'Iron Man' gibi iki kelimeyi listeye 1 öğe olarak kaydetmenizi sağlar.
                example_code_2: |
                    ```
                    süperkahramanlar = 'Spiderman', 'Batman', 'Iron Man'
                    {print} süperkahramanlar {at} {random}
                    ```
                story_text_3: |
                    **`{if}` karşılaştırmalarından sonraki tüm metinler de tırnak işaretine ihtiyaç duyar**
                example_code_3: |
                    ```
                    isim = {ask} 'Senin adın ne?'
                    {if} isim = 'Robot Hedy'
                        {print} 'Merhaba!'
                    ```
                story_text_4: |
                    **Sayıların tırnak işaretine ihtiyacı yoktur**
                    Sayılar için `=` içinde tırnak işareti kullanmazsınız:
                example_code_4: |
                    ```
                    puan = 25
                    {print} 'Puanın ' puan
                    ```
                start_code: |-
                    isim = {ask} 'Senin adın ne?'
                    {if} isim = 'Robot Hedy'
                        {print} 'Merhaba!'
    random_command:
        name: '{random}'
        default_save_name: restgele_komutu
        description: şurada rastgele komutuna giriş
        levels:
            3:
                story_text: |
                    ## şurada rastgele
                    Bu seviyede `{is}` komutunu kullanarak bir liste oluşturabileceksiniz. Bilgisayarın bu listeden rastgele bir öğe seçmesini sağlayabilirsiniz. Bunu `{at} {random}` ile yaparsınız.
                example_code: |
                    ```
                    hayvanlar {is} köpekler, kediler, kangurular
                    {print} hayvanlar {at} {random}
                    ```
                story_text_2: |
                    `{at} {random}` komutunu cümle içinde de kullanabilirsiniz.
                example_code_2: |
                    ```
                    yemek {is} sandviç, bir dilim pizza, salata, dürüm
                    {print} Öğle yemeğinde bir yemek {at} {random} yiyeceğim.
                    ```
                story_text_3: |
                    ### Alıştırma
                    Bir kapı veya bir bavul seçtiğiniz ve içinde büyük bir ödül bulunan kendi oyun programınızı (televizyondakiler gibi) yapmak için `{at} {random}` komutunu deneyin!
                    Bunu yapabilir misiniz? İlk satırları sizin için örnek koda zaten koyduk.
                example_code_3: |
                    ```
                    {print} Büyük oyun gösterisi!
                    {print} Önünüzde 3 bavul var...
                    seçim {is} {ask} Hangi bavulu seçiyorsunuz?
                    ödüller {is} _
                    _
                    ```
                start_code: |
                    hayvanlar {is} köpek, kedi, kanguru
                    {print} hayvanlar {at} {random}
            16:
                story_text: |-
                    Şimdi Python yöntemiyle listeler yapacağız, bu listelerin etrafında köşeli parantezler olacak! Ayrıca önceki seviyelerde öğrendiğimiz gibi her öğenin etrafında tırnak işaretlerini koyuyoruz.
                    Köşeli parantezleri listedeki bir yeri belirtmek için kullanırız. {at} {random} komutu bu bölümde artık kullanılamaz.
                example_code: "```\narkadaşlar = ['Ahmet', 'Betül', 'Ceyda']\nşanslı_sayılar = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} arkadaşlar[i] ' için şanslı sayı'\n    {print} şanslı_sayılar[i] ' sayısıdır' \n```\n"
                start_code: |-
                    arkadaşlar = ['Ahmet', 'Beren', 'Ceyda']
                    şanslı_sayılar = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} arkadaşlar[i] ' için şanslı sayı'
                        {print} şanslı_sayılar[i]
    repeat_command:
        name: '{repeat}'
        default_save_name: tekrarla_komutu
        description: tekrarla komutu
        levels:
            7:
                story_text: |
                    ## Tekrarla! Tekrarla! Tekrarla!
                    Seviye 7 de `{repeat}` komutunu ekliyoruz. `{repeat}` bir kod satırını birden çok kez çalıştırmak için kullanılabilir. Bunun gibi:

                    ### Alıştırma
                    Tekrarla komutu ile oynayın. Mutlu yıllar şarkısını şimdi 4 yerine sadece 3 satır kodla yapabilir misiniz?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy çok eğlenceli!'
                    ```
                start_code: |
                    {print} 'mutlu yıllar sana'
                    {print} 'mutlu yıllar sana'
                    {print} 'Mutlu yıllar sevgili Hedy'
                    {print} 'mutlu yıllar sana'
            8:
                story_text: |
                    ### Tekrarla komutları ve girinti
                    Bu seviyede sadece 1 tekrar komutu ile birden fazla kod satırını tekrarlayabilirsiniz.
                    Bunu, tekrarlamak istediğiniz satırlardan bir blok oluşturarak yaparsınız.
                    Bu bloktaki satırların **girintiye** ihtiyacı olacaktır.
                    Bu, her satırın başına dört boşluk koymak anlamına geliyor. Sadece tek satırlık bir blok oluşturmak istediğinizde de girinti yapmanız gerekecektir.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Herkese merhaba'
                        {print} 'Bunların hepsi 5 kez tekrarlanır'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Herkese merhaba'
                        {print} 'Bu 5 kez yazdırılacaktır'
            9:
                story_text: |
                    Bu seviyede sadece `{if}` ve `{repeat}` ile birden fazla satır kullanmakla kalmaz, aynı zamanda bunları bir araya da getirebilirsiniz!
                    Bu örnekte, bir `{repeat}` komutu içinde bir `{if}` komutu görüyorsunuz. Bunun tersine de izin verilir ve ayrıca bir `{if}` içinde bir `{if}` ve bir `{repeat}` içinde bir `{repeat}` komutu da kullanılabilir.
                    Bir deneyin bakalım!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        yemek = {ask} 'Ne yemek istiyorsun?'
                        {if} yemek {is} pizza
                            {print} 'güzel!'
                        {else}
                            {print} 'pizza daha iyi olur'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        yemek = {ask} 'Ne yemek istiyorsun?'
                        {if} yemek {is} pizza
                            {print} 'güzel!'
                        {else}
                            {print} 'pizza daha iyi olur'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: tekrarla_komutu_2
        description: tekrarla komutu 2
        levels:
            7:
                story_text: |
                    ## tekrarla ile diğer komutlar ve değişkenler
                    `{print}` komutu ile birlikte `{repeat}` komutunu yeterince uyguladınız, ancak `{repeat}` ile başka komutlar da kullanabileceğinizi biliyor muydunuz?
                    Bu örnek kodda `{repeat}` komutunun bir `{ask}`, `{if}` veya `{else}` komutuyla da kullanılabileceğini görebilirsiniz.
                example_code: |
                    ```
                    {repeat} 2 {times} cevap = {ask} 'Bir soruyu birden fazla kez sorabileceğinizi biliyor muydunuz?'
                    {if} cevap {is} evet {repeat} 2 {times} {print} 'Demek bunu zaten biliyordunuz!'
                    {else} {repeat} 3 {times} {print} 'Yeni bir şey daha öğrendiniz!'
                    ```
                story_text_2: |
                    `{repeat}` komutuyla yapabileceğiniz bir başka ilginç şey de, bir şeyin kaç kez tekrarlanacağını ayarlamak için, değişkenler kullanmaktır. Örnek kodda ilk olarak kişiye kaç yaşında olduğunu sorduğumuzu görebilirsiniz.
                    Ardından, 3. satırda, bu soru 'yaş' kez tekrarlanır. Yani `{repeat}` komutu ile 'yaş' değişkenini kullandık.
                example_code_2: |
                    ```
                    {print} 'Yaşasın! Bugün senin doğum günün!'
                    yaş = {ask} 'Şimdi kaç yaşındasın?'
                    {repeat} yaş {times} {print} 'Hey Çok Yaşa!'
                    ```
                start_code: |-
                    {repeat} 2 {times} cevap = {ask} 'Bir soruyu birden fazla kez sorabileceğinizi biliyor muydunuz?'
                    {if} cevap {is} evet {repeat} 2 {times} {print} 'Demek bunu zaten biliyordunuz'
                    {else} {repeat} 3 {times} {print} 'Artık yeni bir şey öğrendiniz!'
            8:
                story_text: |
                    ### blok mu değil mi?
                    Bu seviyede, hangi kod satırlarının blokta yer alması ve hangilerinin yer almaması gerektiğini dikkatlice düşünmeniz gerekir.
                    Örneğin: Eğer *çörek adam* şarkısını söylemek isterseniz, sadece 'çörek adam' satırının iki kez tekrarlanmasını istersiniz.
                    Bu, son satırın bloğa ait olmadığı için girintiyle başlamaması gerektiği anlamına gelir.
                    Son satıra girinti ile başlarsanız şarkı yanlış olur.

                    ## Alıştırma
                    Örnek koddaki her satır bir boşlukla başlar. Boşlukları kaldırın ve çörek adam şarkısını yapmak için hangi satırın girintiye ihtiyacı olduğunu ve hangisinin olmadığını bulmaya çalışın.
                example_code: |
                    ```
                    _ {print} 'Kim tanır çörek adamı?'
                    _ {repeat} 2 {times}
                    _ {print} 'çörek adamı'
                    _ {print} 'kim tanır çörek adamı, nerede yaşıyor?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'Bu satır tekrarlanacaktır...'
                        {print} 'Bu da öyle...'
                    {print} 'ama bu değil!'
    restaurant:
        name: Restoran
        default_save_name: Restoran
        description: Kendi sanal restoranınızı oluşturun
        levels:
            1:
                story_text: |
                    Seviye 1'de, kendi sanal restoranınızı oluşturabilir ve konuklarınızın siparişlerini alabilirsiniz.
                example_code: |
                    ```
                    {print} Hedy'nin restoranına hoş geldiniz 🍟
                    _ Ne sipariş etmek istersiniz?
                    {echo} Yani siparişiniz
                    {print} Siparişiniz için teşekkür ederiz!
                    {print} Şimdi hazırlıyoruz!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Sarı düğmeye tıklayarak örnek kodu giriş ekranınıza kopyalayın.
                    Öncelikle, kodun düzgün çalışması için boşluklara doğru komutu girin.
                    Ardından restoran programına en az 4 satır kod daha ekleyin.
                    Müşteriye ne içmek istediklerini sorun ve nakit mi yoksa kartla mı ödeme yapmak istediklerini sorun.
                    Son olarak, müşterinize veda etmek için güzel bir yol düşünün.
                start_code: '# kodunuzu buraya yazın'
            2:
                story_text: |
                    Seviye 2'de, değişkenler kullanarak restoranınızı genişletebilirsiniz. Seviye 1'de Hedy siparişi sadece bir kez `{echo}` yapabiliyordu ve sadece en son sipariş edilen şeyi hatırlayabiliyordu.
                    Artık değişkenleri kullanabilirsiniz ve Hedy'nin hem yemeği hem de sosları hatırlamasını sağlayayabilirsiniz!
                example_code: |
                    ```
                    {print} Hedy'nin restoranına hoş geldiniz!
                    {print} Bugün pizza ya da lazanya servis edeceğiz.
                    yemek {is} {ask} Ne yemek istersiniz?
                    {print} Harika bir seçim! yemek benim de favorim!
                    sos {is} {ask} Et mi yoksa sebze mi istersiniz?
                    {print} sos içeren yemek hemen geliyor!
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kendi restoran kodunuzu bir önceki seviyeden kopyalayıp aşağıdaki girdi ekranına yapıştırın.
                    Bu seviyede öğrendiğiniz gibi, `{ask}` ve `{echo}` komutlarını değiştirerek ve değişkenleri kullanarak kodu düzeltin.

                    Artık kodunuz tekrar çalıştığına göre, bir şeyler daha eklemenin zamanı geldi.
                    Örnek kodun son satırına bakın: `{print} sos içeren yemek hemen geliyor!`
                    Bu tek satırda, siparişin bir özetini oluşturmak için 2 değişken kullanılmıştır.
                    Şimdi müşteriniz tarafından sipariş edilen yiyecek ve içeceklerin özetini kendiniz ekleyin.

                    **Ekleme** Artık değişkenleri nasıl kullanacağınızı öğrendiğinize göre, bir satırda istediğiniz kadar değişken kullanabilirsiniz. Kodunuza daha fazla değişken ekleyebilir misiniz, örneğin masada yemek ya da paket servis, nakit ya da kart, pipetli ya da pipetsiz gibi.
                start_code: '# kodunuzu buraya yazın'
            3:
                story_text: |
                    Akşam yemeğinde ne yemek istediğinize karar vermekte zorlanıyor musunuz? Hedy'nin sizin için seçmesini sağlayabilirsiniz!
                    En çok sevdiğiniz (veya en az sevdiğiniz) yemeklerin listesini ekleyin ve Hedy rastgele akşam yemeğinizi seçsin.
                    Ayrıca Hedy'nin akşam yemeğinizin fiyatını seçmesini de sağlayarak biraz eğlenebilirsiniz! Ne alacaksınız?
                example_code: |
                    ```
                    anayemek {is} spagetti, brüksel lahanası, hamburger
                    {print} Bu akşam yemekte anayemek {at} {random} var!
                    fiyatlar {is} 1 lira, 10 lira, 100 lira
                    {print} Ödemeniz toplam fiyatlar {at} {random} lütfen.
                    ```
                story_text_2: |
                    ### Alıştırma
                    Şimdi rastgelelik restoranının kendi versiyonunuzu yapın.
                    Başlangıçlar, ana yemekler, tatlılar, içecekler ve fiyatların bir listesini kendiniz yapın.
                    Ardından müşteriye bu akşamın menüsünde ne olacağını söylemek için `{print}` ve `{at} {random}` komutlarını kullanın.
                example_code_2: |
                    ```
                    {print} Kendi rastgele restoranınıza hoş geldiniz!
                    mezeler {is} _
                    yemekler {is} _
                    tatlılar {is} _
                    içecekler {is} _
                    fiyatlar {is} _
                    _
                    ```
                start_code: '# kodunuzu buraya yazın'
            4:
                story_text: |
                    Bu seviyede, `{print}` veya `{ask}` komutunu kullanırken artık tırnak işareti kullanmanız gerekiyor.

                    ### Alıştırma
                    Çalışması için bu koda tırnak işaretlerini ekleyin! Dikkatli olun: değişkenler tırnak işareti içinde olmamalıdır.
                    Ardından, çıktı ekranınızda her seferinde yalnızca bir satır göstermek için `{clear}` komutunu kullanın.

                    ### Alıştırma 2
                    Önceki seviyeye geri dönün ve restoran kodunuzu kopyalayın. Doğru noktalara tırnak işaretleri ekleyerek ve bazı yerlerde `{clear}` komutları ekleyerek kodun bu seviye için de çalışmasını sağlayın.
                example_code: |
                    ```
                    _ Bu koda tırnak işaretlerini ekleyin _
                    {print} Restaurant Chez Hedy'ye hoş geldiniz!
                    {print} Bugün pizza ya da lazanya servis edeceğiz.
                    yemek {is} {ask} Ne yemeyi istersiniz?
                    {print} Harika bir seçim! yemek benim de favorim!
                    sos {is} {ask} Et mi yoksa sebze mi istersiniz?
                    {print} sos içeren yemek hemen geliyor!
                    içecek {is} {ask} Yanında ne içmek istersiniz?
                    {print} Siparişiniz için teşekkür ederiz.
                    {print} yemek ve içecek hemen hazır olacak!
                    ```
                start_code: '# kodunuzu buraya yazın'
            5:
                story_text: |
                    ### Alıştırma
                    Örnek kod, restoranınızda bir menü öğesinin tükenmesini nasıl programlayabileceğinizi gösterir.
                    Önceki seviyelerden kendi restoran kodunuzu kopyalayın. Restoranınızda bir sorun çıkarın ve bunu örnek kodda olduğu gibi kodlayın.
                    Örneğin, bir menü öğesi tükenmiş olabilir veya kredi kartı kabul etmiyor olabilirsiniz ya da dondurma makinesi bozuk olabilir.

                    **Ekleme** Sorunu programlayıp, buna uygun yanıtları da programladınız mı? O zaman şimdi kodunuza daha fazla `{if}` ve `{else}` komutları eklemeyi deneyin.
                    Kodu olabildiğince etkileşimli hale getirmek için kodunuzdaki her `{ask}` komutundan sonra bir `{if}` eklemeye çalışın!
                example_code: |
                    ```
                    depodaki_içecekler {is} su, limonata, kola, portakal suyu
                    içecek {is} {ask} 'Ne içmek istersiniz?'
                    {if} içecek {in} depodaki_içecekler {print} 'Bir ' içecek ' hemen geliyor!'
                    {else} {print} 'Üzgünüm, ondan satmıyoruz'
                    ```
                start_code: '# kodunuzu buraya yazın'
            6:
                story_text: |
                    Bu seviyede, müşterinizin siparişinin toplam fiyatını hesaplamak için matematiği kullanabilirsiniz, bu da sanal restoranınızı daha gerçekçi hale getirecektir.
                    Ancak sanal restoranınıza daha birçok şey, örneğin daha fazla çeşitler de ekleyebilirsiniz.

                    ### Alıştırma
                    Sanal restoranınıza daha birçok şey ekleyebilirsiniz. Örneğin...
                    - kaç kişinin geleceğini sorup fiyatı bu miktarla çarpmak?
                    - başka bir çeşit eklemek?
                    - insanlara (gizli) bir kupon kodu girdiklerinde indirim vermek?
                    - bir çocuk menüsü eklemek?
                    - eklemek için başka eğlenceli şeyler aklınıza geliyor mu?
                example_code: |
                    Bunun gibi basit bir restoran kodu oluşturabilirsiniz:
                    ```
                    {print} "Restaurant Chez Hedy'ye Hoş Geldiniz"
                    {print} 'İşte menümüz:'
                    {print} 'Ana yemeklerimiz pizza, lazanya veya spagetti'
                    ana = {ask} 'Hangi ana yemeği istersiniz?'
                    fiyat = 0
                    {if} ana {is} pizza fiyat = 10
                    {if} ana {is} lazanya fiyat = 12
                    {if} ana {is} spagetti fiyat = 8
                    {print} 'Siparişiniz ' ana
                    {print} 'Ücret toplamı ' fiyat ' lira, lütfen'
                    {print} 'Teşekkürler, afiyet olsun!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            7:
                story_text: |
                    Bu seviyede, bir kod satırını belirli sayıda tekrarlamak için `{repeat}` komutunu nasıl kullanacağınızı öğrendiniz.
                    Bunu restoranınızda birden fazla kişiye `{ask}` ile ne yemek istediklerini sormak için kullanabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayabilir misiniz? Hedy'nin bu soruyu kişi sayısı kadar tekrarlaması gerekiyor. Yani 5 kişi varsa, sorunun 5 kez sorulması gerekir.
                    **Ekleme** Kodunuzu daha fazla soru ile genişletin, örneğin içecekler veya sos hakkında.
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye Hoş Geldiniz"
                    kişiler = {ask} 'Bugün bize kaç kişi katılıyor?'
                    ```
                start_code: '# kodunuzu buraya yazın'
            8:
                story_text: |
                    Bu seviyede, birden fazla kod satırını tekrarlayarak sanal restoranınızı daha ayrıntılı hale getirebilirsiniz. Bunun gibi:
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Bugün bize kaç kişi katılacak?'
                    {print} 'Harika!'
                    {repeat} kişiler {times}
                        yemek = {ask} 'Ne sipariş etmek istersiniz?'
                        {print} yemek
                    {print} 'Siparişiniz için teşekkür ederiz!'
                    {print} 'Afiyet olsun!'
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bu kod, menüde daha fazla öğe eklenerek genişletilebilir, örneğin içecekler ve/veya birden fazla yemek veya tatlı sunulabilir. En az bir öğe daha ekleyin.
                    **Ekleme** Daha da fazla ürün ekleyin, istediğiniz kadar seçenek olsun!
                start_code: '# kodunuzu buraya yazın'
            9:
                story_text: |
                    Bu seviyede restoranınızı daha gerçekçi ve daha eğlenceli hale getirmek için iç içe geçmeyi kullanabilirsiniz!

                    ### Alıştırma
                    Örnek kodda girintiler kaldırılmıştır.
                    Kodun düzgün çalışması için her satırın ne kadar girintiye ihtiyacı olduğunu bulabilir misiniz?
                    Eğer müşteri pizza sipariş ederse, Hedy müşterinin hangi sosu istediğini sormamalıdır.

                    **Extra** Bir restoranın deposunda tüm soslar bulunmaz. Mevcut sosların bir listesini yapın ve her siparişte satıp satmadığınıza dair bir yanıt verin. <br>
                    **Extra** Pizzalarda sos vardır. Müşterilere ne istediklerini sorun.<br>
                    **Extra** Müşteriler içecek mi istiyor? Onları da sorun! <br>
                example_code: |
                    ```
                    {print} "Restaurant Chez Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Bugün bize kaç kişi katılacak?'
                    {print} 'Harika!'
                    fiyat = 0
                    {repeat} kişiler {times}
                    _ yemek = {ask} 'Ne sipariş etmek istersiniz?'
                    _ {print} yemek
                    _ {if} yemek {is} kızartma
                    _ fiyat = fiyat + 3
                    _ sos = {ask} 'Patates kızartmanızın yanında ne tür bir sos istersiniz?'
                    _ {if} sos {is} 'hayır'
                    _ {print} 'sos olmayacak'
                    _ {else}
                    _ fiyat = fiyat + 1
                    _ {print} sos ' sosu olacak '
                    _ {if} yemek {is} pizza
                    _ fiyat = fiyat + 4
                    {print} 'Toplam ücret ' price ' lira'
                    {print} 'Afiyet olsun!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    Bu seviyede, farklı çeşitler için nasıl kolayca sipariş vereceğinizi öğreneceksiniz.

                    ### Alıştırma 1
                    Kodu boşluklara bir `{ask}` koyarak tamamlayın, böylece müşteriye her yemek için ne yemek istediği sorulur.
                example_code: "```\nçeşitler = meze, ana yemek, tatlı\n{for} çeşit {in} çeşitler\n    {print} 'Siparişiniz için ' course ' ne olacak?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Alıştırma
                    Tabii ki, birden fazla kişi için de sipariş verebilirsiniz!
                    Kodun düzgün çalışması için her satırdan önce doğru miktarda girinti ekleyebilir misiniz?
                    İpucu: Bazı satırlarda hiç girintiye gerek yoktur.
                example_code_2: |
                    ```
                    _ çeşitler = meze, ana yemek, tatlı
                    _ isimler = Ali, Ayşe
                    _ {for} isim {in} isimler
                    _ {for} çeşit {in} çeşitler
                    _ yemek = {ask} isim ', yemekte ' course ' olarak ne yemek istersin?'
                    _ {print} isim ' yemekte ' çeşit ' olarak ' yemek ' sipariş ediyor'
                    ```
                start_code: çeşitler = meze, ana yemek, tatlı
            11:
                story_text: |
                    Birden fazla müşteriden gelen siparişleri düzenli bir şekilde yazdırmak için `{for}` ile `{range}` kullanabiliriz.

                    ### Alıştırma
                    Restoran kodunu tamamlayın, böylece birden fazla kişinin siparişini alabilirsiniz. Her seferinde sipariş numarasını yazdırın: 'Sipariş 1', 'Sipariş 2', gibi.
                    Bunu nasıl yapacağınızdan emin değil misiniz? Seviye 8 kodunuza bir göz atın.

                    **Ekleme** 9. seviyede, restoran fiyatlarını da kullanmıştınız. Bunu da buraya ekleyebilirsiniz!
                example_code: |
                    ```
                    {print} "Restaurant Hedy'ye hoş geldiniz!"
                    kişiler = {ask} 'Kaç kişi için sipariş vermek istersiniz?'
                    {print} 'Demek ' kişiler ' kişi için sipariş vermek istiyorsunuz'
                    {print} 'Tamam, başlayalım!'
                    ```
                start_code: '# kodunuzu buraya yazın'
            12:
                story_text: |
                    Bu seviyeden itibaren menünüzü daha gerçekçi hale getirmek için ondalık sayıları kullanabilirsiniz.

                    ### Alıştırma
                    Arkadaşlarınıza ve ailenize %15 indirim sağlayacak bir kod düşünebiliyor musunuz?
                example_code: |
                    ```
                    fiyat = 0.0
                    yemek = {ask} 'Ne sipariş etmek istersiniz?'
                    içecek = {ask} 'Ne içmek istersiniz?'
                    {if} yemek {is} 'hamburger'
                        fiyat = fiyat + 6.50
                    {if} yemek {is} 'pizza'
                        fiyat = fiyat + 5.75
                    {if} içecek {is} 'su'
                        fiyat = fiyat + 1.20
                    {if} içecek {is} 'soda'
                        fiyat = fiyat + 2.35
                    {print} 'Toplam ' fiyat ' lira, lütfen'
                    ```
                start_code: '# kodunuzu buraya yazın'
            13:
                story_text: |
                    Bu seviyede kodunuzu daha da genişletmek için yeni komutlar öğreneceksiniz.

                    ### Alıştırma 1
                    Programdaki mantıklı olan yerlere bir `{and}` ve bir `{or}` yerleştirin.

                    ### Alıştırma 2
                    Restoranınızı en az bir tane daha `{and}` ve bir tane `{or}` ile genişletin.
                    Örneğin, yalnızca pizza için geçerli olan özel bir indirim kuponu oluşturun veya müşterinize patates kızartması ve krep ile birlikte ücretsiz bir içecek verin.
                    Ya da tabii ki tamamen farklı bir şey de olabilir!
                example_code: |
                    ```
                    ücret = 10
                    yemek = {ask} 'Ne yemek istersiniz?'
                    içecek = {ask} 'Ne içmek istersiniz?'
                    {if} yemek {is} 'sandviç' _ içecek {is} 'meyve suyu'
                        {print} 'Bu bizim indirim menümüz'
                        ücret = ücret - 3
                    {if} içecek {is} 'su' _ içecek {is} 'meyve suyu'
                        {print} 'Bu sağlıklı bir seçim'
                    {print} 'Toplam ' ücret ' lira ediyor'
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    `{while}` ile müşterilerinizin istekleri bitene kadar sipariş eklemeye devam edebilmelerini sağlayabilirsiniz.
                example_code: |
                    ```
                    {print} "McHedy'ye Hoş Geldiniz"
                    dahafazla = 'evet'
                    {while} dahafazla == 'evet'
                        sipariş = {ask} 'Ne sipariş etmek istersiniz?'
                        {print} sipariş
                        dahafazla = {ask} 'Başka bir şey sipariş etmek ister misiniz?'
                    {print} 'Teşekkür ederiz!'
                    ```
                start_code: '# kodunuzu buraya yazın'
    rock:
        name: Taş, kağıt, makas
        default_save_name: Rock_2
        description: Kendi taş, kağıt, makas oyununuzu yapın
        levels:
            1:
                story_text: |
                    Seviye 1'de, taş, kağıt, makas oyunu yazmaya başlayabilirsiniz.

                    `{ask}` ile bir seçim yapabilir ve `{echo}` ile bu seçimi tekrarlayabilirsiniz.
                example_code: |
                    ```
                    {print} Neyi seçiyorsun?
                    {ask} taş, kağıt veya makas arasından seçim yap
                    {echo} Demek senin seçimin:
                    ```
                story_text_2: |
                    ### Alıştırma
                    Kelimeleri kullanmak yerine emojileri de kullanabilirsiniz: ✊✋✌
                    Emojileri kullanarak bir kod oluşturabilir misiniz? (kopyala-yapıştır deneyin)
                example_code_2: |
                    ```
                    {print} Neyi seçiyorsun?
                    {ask} Bunlardan birini seçin _
                    {echo} Demek senin seçimin:
                    ```
                start_code: |
                    {print} Kendi taş kağıt makasınıza hoş geldiniz!
                    {ask} Neyi seçeceksiniz?
            2:
                story_text: |
                    Bu seviyede değişkenleri kullanarak pratik yapabilir, böylece taş, kağıt, makas oyununuzu yeni bir seviyeye taşımız olursunuz!
                    ### Alıştırma
                    Boşluklardaki **değişkeni** doldurarak kodu tamamlayın.
                    Bu oyun çok etkileşimli değil, ama endişelenmeyin! Bir sonraki sekmede oyununuzu etkileşimli hale getirmek için değişkenleri `{ask}` komutu ile birlikte nasıl kullanacağınızı öğreneceksiniz!
                example_code: |-
                    ```
                    seçim {is} taş
                    {print} Benim seçimim _
                    ```
                start_code: '# kodunuzu buraya yazın'
            3:
                story_text: |
                    Bilgisayarın taş, kağıt veya makas seçmesini sağlamak için `{at} {random}` komutunu kullanabilirsiniz!

                    ### Alıştırma
                    `{at} {random}` komutunu kullanarak kodu tamamlayın.
                example_code: |
                    ```
                    seçimler {is} taş, kağıt, makas
                    {print} seçimler _
                    ```
                story_text_2: |
                    **Ekleme** İki oyunculu bir oyun hazırlayın. İlk olarak iki oyuncudan isimlerini yazmalarını isteyin. Ardından bilgisayarın rastgele seçim yapmasını sağlayın.
                example_code_2: |
                    ```
                    seçimler {is} taş, kağıt, makas
                    oyuncu_1 {is} {ask} 1 numaralı oyuncunun adı:
                    _
                    ```
                start_code: '{print} Kendi taş kağıt makasınıza hoş geldiniz!'
            4:
                story_text: |
                    Bu seviyede, taş, kağıt, makas programını daha da geliştirebiliriz. Ancak metin eklemek istiyorsanız, burada da tırnak işareti kullanmanız gerekir.
                    ### Alıştırma
                    Kodunuzu önceki seviyeden kopyalayın ve her `{print}` veya `{ask}` komutundan sonra tırnak işareti kullanarak çalışmasını sağlayın.
                start_code: '{print} ''Kendi taş kağıt makasınıza hoş geldiniz!'''
            5:
                story_text: |
                    Bu seviyede beraberlik olup olmadığını belirleyebiliriz. Bunun için yeni `{if}` koduna ihtiyacınız var.

                    ### Alıştırma
                    Boşlukları doldurarak kodu tamamlayın:
                    * Bilgisayarın rastgele bir seçeneği seçmesini sağlayın
                    * Oyuncuya ne seçmek istediğini sorun
                    * Satır 4 ve 5 için doğru değişkenleri yerlerine doldurun
                    * Hedy'nin beraberlik olup olmadığını kontrol edebilmesi için 6. satırı tamamlayın.
                example_code: |
                    ```
                    seçenekler {is} taş, kağıt, makas
                    bilgisayar_seçimi {is} _
                    seçim {is} _
                    {print} 'senin seçimin ' _
                    {print} 'bilgisayarın seçimi ' _
                    {if} _ {is} _ {print} 'berabere kaldınız!' {else} {print} 'berabere değil'
                    ```

                    Beraberlik olup olmadığını görmek için boşluklara doğru kodu girin.
                start_code: '{print} ''Kendi taş kağıt makasınıza hoş geldiniz!'''
            9:
                story_text: |
                    Bu seviyede `{if}` komutlarını iç içe geçirerek tüm taş, kağıt, makas oyununu programlayabilirsiniz.

                    ### Alıştırma
                    Kodu tamamlayabilir misiniz? Program her kombinasyon için kimin kazandığını söylemelidir.

                    **Ekleme** Birden fazla oyun mu oynamak istiyorsunuz? Birden fazla tur oynayabilmek için kodu genişletin. Kullanıcıya kaç tur oynamak istediğini sormak için bir `{ask}` bile kullanabilirsiniz.
                example_code: |
                    ```
                    seçimler {is} taş, kağıt, makas
                    senin_seçimin {is} {ask} 'Sen neyi seçiyorsun?'
                    {print} 'Senin seçimin ' senin_seçimin
                    bilgisayarın_seçimi {is} seçimler {at} {random}
                    {print} 'Bilgisayarın seçimi ' bilgisayarın_seçimi
                    {if} bilgisayarın_seçimi {is} senin_seçimin
                        {print} 'Berabere'
                    {if} bilgisayarın_seçimi {is} taş
                        {if} senin_seçimin {is} kağıt
                            {print} 'Sen kazandın!'
                        {if} senin_seçimin {is} makas
                            {print} 'Kaybettin!'
                    # bu kodu tamamlayın
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    ### Alıştırma
                    Önceki seviyelerde, kendi taş kağıt makas oyununuzu bolca yaptınız. Bu kodu tamamlayıp oyunun çalışmasını sağlamak için {for} komutunu düzgün bir şekilde kullanabilir misiniz?
                example_code: |
                    ```
                    seçimler = _
                    oyuncular = _
                    {for} _
                    ```
                start_code: '# kodunuzu buraya yazın'
            13:
                story_text: |
                    `{and}` komutu ile taş, kağıt, makas kodunuzu kısaltabilirsiniz! Örnek koda göz atın.

                    ### Alıştırma
                    Kodu, her zaman bir kazanan olacak şekilde tamamlayın. Her zaman bir kazananın yazdırıldığını doğrulamak için kodunuzu birkaç kez çalıştırın.
                example_code: |
                    ```
                    seçenekler = 'rock', 'paper', 'scissors'
                    senin_seçimin = {ask} 'Sen neyi seçiyorsun?'
                    bilgisayarın_seçimi = seçenekler {at} {random}
                    {print} 'Senin seçimin ' senin_seçimin
                    {print} 'Bilgisayarın seçimi ' bilgisayarın_seçimi
                    {if} bilgisayarın_seçimi {is} senin_seçimin
                        {print} 'Berabere'
                    {if} bilgisayarın_seçimi {is} 'taş' {and} senin_seçimin {is} 'kağıt'
                        {print} 'Sen kazandın!'
                    {if} bilgisayarın_seçimi {is} 'taş' {and} senin_seçimin {is} 'makas'
                        {print} 'Bilgisayar kazandı!'
                    _
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    Bilgisayarı yenene kadar oynayın! Ama önce örnek kodu bitirin...
                example_code: |
                    ```
                    kazandı = 'hayır'
                    seçenekler = 'taş', 'kağıt', 'makas'
                    {while} kazandı == 'hayır'
                        senin_seçimin = {ask} 'Sen neyi seçiyorsun?'
                        bilgisayarın_seçimi = seçenekler {at} {random}
                        {print} 'Senin seçimin ' senin_seçimin
                        {print} 'Bilgisayarın seçimi' bilgisayarın_seçimi
                        {if} bilgisayarın_seçimi == senin_seçimin
                            {print} 'Berabere!'
                        {if} bilgisayarın_seçimi == 'taş' {and} senin_seçimin == 'makas'
                            {print} 'Kaybettin!'
                        {if} bilgisayarın_seçimi == 'taş' {and} senin_seçimin == 'kağıt'
                            {print} 'Sen kazandın!'
                            kazandı = 'evet'
                    _
                    ```
                start_code: '# kodunuzu buraya yazın'
    rock_2:
        name: Taş, kağıt, makas 2
        default_save_name: rock_2
        description: Taş, kağıt, makasın 2. bölümü
        levels:
            2:
                story_text: |
                    Artık `{ask}` komutunu nasıl kullanacağınızı öğrendiğinize göre, taş, kağıt, makas kodunuzu da etkileşimli hale getirebilirsiniz!

                    ### Alıştırma
                    Taş, kağıt, makas kodunuza `{ask}` komutu ile bir soru ekleyerek kodu etkileşimli hale getirin.
                example_code: |
                    ```
                    seçim {is} _
                    {print} Benim seçimim seçim
                    ```
                start_code: '# kodunuzu buraya yazın'
    secret:
        name: SüperCasus
        default_save_name: SüperCasus
        description: Kendi casus kodunuzu oluşturun
        levels:
            12:
                story_text: |
                    Bu macerada kendi süper casus kodunuzu oluşturabilirsiniz. Sadece doğru ajanın deşifre edebileceği bir mesaj kodlayın.
                    Düşman kodu kırmaya çalışırsa, zamanlarını boşa harcayarak bazı yanlış bilgiler elde edeceklerdir.

                    ### Alıştırma 1
                    Süper casusunuz için kendi gizli kodunuzu oluşturun ve her iki parçayı da yalnızca gerçek casusa iade edin.

                    ### Alıştırma 2
                    Koda üçüncü bir bileşen ekleyin, bir giysi parçası veya bir nesne gibi.
                example_code: |
                    ```
                    isim {is} {ask} 'Senin adın ne?'
                    eğer isim {is} '_'
                        a {is} 'Havaalanına git '
                    {else}
                        a {is} 'Tren istasyonuna git '
                    şifre {is} {ask} 'Şifre nedir?'
                    {if} şifre {is} _
                        b {is} 'yarın gece saat 02.00'de'
                    {else}
                        b {is} 'bugün sabah saat 10.00'da'
                    {print} _ _ _
                    ```
                start_code: '# kodunuzu buraya yazın'
            13:
                story_text: |
                    Süpercasus kodunu `{and}` ile basitleştirebiliriz, böylece bize sadece bir `{if}` gerekir.

                    ### Alıştırma 1
                    Boşluklara doğru komutu doldurarak kodu tamamlayın. İpucu: Süper casus gizli bilgileri almadan önce HER İKİ soruya da doğru cevap vermelidir!

                    ### Alıştırma 2
                    Düşmanın kafasını daha da karıştırmak istiyoruz! Sahte cevaplardan oluşan bir liste oluşturun ve yanlış cevap verildiğinde rastgele birini seçin.
                example_code: |
                    ```
                    isim {is} {ask} 'Senin adın ne?'
                    şifre {is} {ask} 'Şifre nedir?'
                    {if} isim {is} 'Ajan007' _ şifre {is} 'ÇOKGİZLİ'
                        {print} 'Gece 02.00'de havaalanına git.'
                    {else}
                        {print} 'Sabah 10.00'da tren istasyonuna git.'
                    ```
                start_code: '# kodunuzu buraya yazın'
    sleep_command:
        name: '{sleep}'
        default_save_name: uyu_komutu
        description: uyku komutuna giriş
        levels:
            2:
                story_text: |
                    Bu seviyede kullanabileceğiniz bir diğer yeni komut, programınızı bir saniyeliğine duraklatan `{sleep}` komutudur. Eğer {sleep} komutunun arkasına bir sayı yazarsanız, program o kadar saniye duraklar.

                    ### Alıştırma
                    Bu yeni komutu, {sleep} komutunu en az 3 kez kullandığınız kendi kodunuzu oluşturarak uygulayın. Her {sleep} komutunda duraklama süresi farklı olsun.
                example_code: |
                    ```
                    {print} En sevdiğim renk...
                    {sleep} 2
                    {print} yeşil!
                    ```
                start_code: |-
                    {print} En sevdiğim renk...
                    {sleep} 2
                    {print} yeşil!
    songs:
        name: Bir şarkı söyle!
        default_save_name: Şarkı
        description: Şarkı yazdır
        levels:
            6:
                story_text: |
                    Şarkılar genellikle çok sayıda tekrarlama içerir. Bazen bu tekrarlar saymaya da dayanır.
                    Örneğin, meşhur 'Bira şişeleri' şarkısı gibi. Bu şarkıyı biraz matematikle programlayabilirsiniz.

                    İpucu: Hedy'nin şarkıyı size söylemesini sağlamak için sesli okuma işlevini kullanın!

                    ### Alıştırma
                    Şimdi 2'den 7'ye kadar olan satırları kopyalayarak istediğiniz kadar tekrarlayabilirsiniz.
                example_code: |
                    ```
                    mısra = 99
                    {print} mısra ' şişe duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirip, kenara koyun'
                    mısra = mısra - 1
                    {print} mısra ' şişe duvarda dizili'
                    {sleep}
                    ```
                story_text_2: |
                    Bu çocuk şarkısı 5 küçük maymundan 1 maymuna doğru geri sayar.
                    Eğer 2 - 7. satırları kopyalar ve kodun altına yapıştırırsanız, tüm şarkıyı söyleyebilirsiniz!
                example_code_2: |
                    ```
                    sayı = 6
                    sayı = sayı - 1
                    {print} sayı ' küçük maymun yatağın üzerinde zıplıyor'
                    {print} 'Biri düştü ve kafasını çarptı.'
                    {print} 'Annem doktoru aradı ve doktor dedi ki'
                    {print} 'ARTIK YATAKTA ZIPLAYAN MAYMUN OLMASIN!'
                    {sleep}
                    ```
                start_code: '{print} ''Şarkı söyleyelim!'''
            7:
                story_text: |
                    Şarkılar genellikle çok fazla tekrarlama içerir. Örneğin. Bebek Köpekbalığı! Eğer söylerseniz, aynı şeyi söylemeye devam edersiniz:

                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı tututudutudu <br>
                    Bebek Köpekbalığı

                    ### Alıştırma
                    Bebek Köpekbalığı şarkısını bir `{repeat}` ile yazdırabilir misiniz? Boşlukları değiştirerek kodu tamamlayın?
                    **Ekleme** Bebek Köpekbalığı'ndan sonra elbette başka şarkılar da programlayabilirsiniz. Tekrarı olan birçok şarkı var!
                    Aklınıza bir şarkı daha geliyorsa yazdırabilir misiniz?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Bebek Köpekbalığı tututudutudu'
                    {print} 'Bebek Köpekbalığı'
                    ```
                start_code: '{print} ''Bebek Köpekbalığı'''
            8:
                story_text: |
                    Önceki bir seviyede, 'Bira şişeleri' şarkısını programladınız. Ancak `{repeat}` komutu olmadan, dizeleri birçok kez kopyalamak zorunda kaldınız.
                    Bu seviyede, sadece basit bir satır ekleyerek şarkıyı 99 kez tekrarlayabilirsiniz!

                    ### Alıştırma
                    Boşluklara doğru komutu ekleyin ve kodu doğru şekilde girintileyin.
                example_code: |
                    ```
                    mısra = 99
                    _ 99 {times}
                    {print} mısra ' bira şişesi duvarda dizili'
                    {print} mısra ' bira şişesi'
                    {print} 'Bir tane indirin, kenara koyun.'
                    mısra = mısra - 1
                    {print} mısra ' bira şişesi duvarda dizili'
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    `{for}` ile tüm yavru köpekbalığı şarkısını (ailedeki diğer tüm köpekbalıkları da dahil olmak üzere) sadece 6 satırda yazdırabilirsiniz!

                    ### Alıştırma 1
                    Bir `{for}` komutu kullanarak yavru köpekbalığı kodunu daha da kısaltabilir misiniz? Örnek kodu tamamlayın.
                example_code: "```\naile = bebek, anne, baba, büyükanne, büyükbaba\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Alıştırma 2
                    Beş küçük maymun yatakta zıplıyor şarkısını yazdırın. Eğer hatırlamıyorsanız metne bakın.

                    **Ekleme** Ali babanın bir çiftliği var şarkısını yazdırın ve `{if}` kullanarak tüm hayvanların farklı bir ses çıkardığından emin olun.
                example_code_2: |
                    ```
                    maymunlar = 5, 4, 3, 2, 1
                    ```
                start_code: '# kodunuzu buraya yazın'
            11:
                story_text: |
                    Bu seviyede `{for}` ile `{range}` kullanarak, 5 küçük maymun gibi, saymayı kullanan şarkılar yapabilirsiniz.

                    ### Alıştırma 1
                    Boşlukları doldurun ve kodu çalışır hale getirin! Şarkı metnini hatırlamıyorsanız, kendiniz arayın.

                    ### Alıştırma 2
                    Şarkının son satırı diğerlerinden farklıdır. Bu satırı `{for}` içine yazdırın ve doğru çalışması için bir `{if}` kullanın.
                example_code: |
                    ```
                    _ maymunlar _ _ 5 _ 1
                        {print} maymunlar ' küçük maymun yatağın üzerinde zıplıyor'
                        _
                    ```
                start_code: '# kodunuzu buraya yazın'
            12:
                story_text: |
                    Bu şarkıda 'eğer mutluysan ve bunu biliyorsan, ellerini çırp' cümlesini programlamayı daha da kolaylaştırabiliriz. Çünkü tüm eylemleri bir değişkene koyabiliriz, bir göz atın:

                    ### Alıştırma
                    Şarkının doğru çalınması için her satıra doğru miktarda girinti ekleyebilir misiniz?
                    İpucu: Tüm satırların girintiye ihtiyacı yoktur
                example_code: |
                    ```
                    _ eylemler = 'ellerini çırp', 'ayaklarını yere vur', 'Yaşasın diye bağırın!'
                    _ {for} eylem {in} eylemler
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    _ {print} 'eğer mutluysan ve bunu biliyorsan ve gerçekten göstermek istiyorsan'
                    _ {print} 'eğer mutluysan ve bunu biliyorsan'
                    _ {print} eylem
                    ```
                start_code: '# kodunuzu buraya yazın'
            16:
                story_text: |
                    Bu seviyede Ali Babanın çiftliği gibi bir şarkıyı daha da hızlı bir şekilde programlayabilirsiniz. Sadece listede aynı yere koyarak doğru hayvanı doğru sese bağlayabilirsiniz.
                    Sarhoş Denizci de bu seviyede hızlı bir şekilde yapılır. Tüm şarkı için sadece 8 satıra ihtiyacınız var, bir göz atın!
                example_code: |
                    ```
                    hayvanlar = ['eşekleri', 'köpekleri', 'inekleri']
                    sesler = ['ai', 'hav', 'möö']
                    {for} i {in} {range} 1 {to} 3
                        hayvan = hayvanlar[i]
                        ses = sesler[i]
                        {print} 'Ali Babanın bir çiftliği var'
                        {print} '...'
                        {print} 'çiftliğinde ' hayvan ' var'
                        {print} '...'
                        {print} ses ses ' diye bağırır'
                        {print} '...'
                        {print} '...'
                        {print} 'çiftliğinde Ali Babanın'
                        {print} '...'
                    ```

                    ```
                    satırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']
                    {for} satır {in} satırlar
                        {for} i {in} {range} 1 {to} 3
                            {print} satır
                        {print} 'sabah erkenden'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'hey heyy ve işte doğuyor'
                        {print} 'sabah erkenden'
                    ```
                start_code: '# kodunuzu buraya yazın'
            18:
                story_text: |
                    Seviye 16'da listeleri kullanarak şarkılar yaptık. Ancak bu programlar bu seviyede artık düzgün çalışmazlar. Seviye 17'deki iki nokta üst üste ve seviye 18'deki parantezlerin hala eklenmesi gerekiyor.

                    ### Alıştırma 1
                    Sarhoş denizci şarkısı örnek kod olarak verilmiştir, ancak henüz çalışmamaktadır.
                    Her şeyin tekrar çalıştığından emin olabilir misiniz? Size yardımcı olmak için _bazı_ hataların yerlerine _ koyduk.

                    ### Alıştırma 2
                    Şimdi de 16. seviyedeki Ali Baba şarkınıza bakın ve düzeltin.
                example_code: |
                    ```
                    satırlar = ['sarhoş bir denizciye ne yapmalı', 'paslı usturayla karnını traş etmeli', 'ayılana kadar uzun kayığa koymalı']
                    {for} satır {in} satırlaar _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ satır _
                        {print} 'sabah erkenden'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'hey heyy ve işte doğuyor'
                        {print} 'sabah erkenden'
                    ```
                start_code: '# kodunuzu buraya yazın'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Tic Tac Toe oyunu oynayın!
        levels:
            13:
                story_text: |
                    Bu macerada bir Tic Tac Toe oyunu programlayabilirsiniz. İki kişi ile oynayabilirsiniz. Sırayla, işaretinizi (x veya o) koymak istediğiniz yerin numarasını (1 - 9) seçersiniz.
                    Arka arkaya 3 tane (yatay, dikey veya çapraz) koyan ilk oyuncu kazanır!

                    ### Alıştırma 1
                    Oyun çalışıyor, ancak bazı sorunları var. Örneğin, herhangi bir oyuncu herhangi bir alanı seçebilir, zaten alınmış bir alanı bile! Yerin alınıp alınmadığını `{if}` ile kontrol edin ve eğer öyleyse oyuncuyu uyarın.

                    ### Alıştırma 2
                    Oyun ayrıca kimin kazandığına karar vermiyor. Bunu, arka arkaya 3 noktanın aynı sembole sahip olup olmadığını kontrol ederek eklemeniz gerekir.

                    ### Alıştırma 3 Ekleme
                    Her zaman birlikte oynayabileceğiniz bir arkadaşınız olmayabilir. Bir bilgisayar rakibi oluşturabilir misin?
                example_code: |
                    ```
                    oyuncu = 'x'
                    oyun_alanı = '.', '.', '.', '.', '.', '.', '.', '.', '.'

                    {for} i {in} {range} 1 {to} 9
                        seçim = {ask} 'Oyuncu ' oyuncu ' , hangi yeri seçiyorsun?'
                        oyun_alanı {at} seçim = oyuncu
                        {clear}
                        {print} oyun_alanı {at} 1 oyun_alanı {at} 2 oyun_alanı {at} 3
                        {print} oyun_alanı {at} 4 oyun_alanı {at} 5 oyun_alanı {at} 6
                        {print} oyun_alanı {at} 7 oyun_alanı {at} 8 oyun_alanı {at} 9
                        {if} oyuncu = 'x'
                            oyuncu = 'o'
                        {else}
                            oyuncu = 'x'
                    ```
                start_code: '# Kodunuzu buraya yazın'
            14:
                story_text: |
                    Önceki seviyelerde bir tic tac toe oyunu yaptınız. Şimdi de = işaretini, == işaretini ve != işaretini nasıl kullanacağınızı öğrendiniz.
                    Bu bilgiyi yeni Tic Tac Toe oyununuzda şu şekilde kullanabilirsiniz:
                example_code: |
                    ```
                    işaret = 'x'
                    açık_yerler = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    oyun = 'devam'
                    yer_1 = '.'
                    yer_2 = '.'
                    yer_3 = '.'
                    yer_4 = '.'
                    yer_5 = '.'
                    yer_6 = '.'
                    yer_7 = '.'
                    yer_8 = '.'
                    yer_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} yer_1 yer_2 yer_3
                    {print} yer_4 yer_5 yer_6
                    {print} yer_7 yer_8 yer_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} oyun != 'bitti'
                            seçim = {ask} 'Oyuncu ' işaret ', hangi yer?'
                            {if} seçim {in} açık_yerler
                                {remove} seçim {from} açık_yerler
                                {if} seçim == 1
                                    yer_1 = işaret
                                {if} seçim == 2
                                    yer_2 = işaret
                                {if} seçim == 3
                                    yer_3 = işaret
                                {if} seçim == 4
                                    yer_4 = işaret
                                {if} seçim == 5
                                    yer_5 = işaret
                                {if} seçim == 6
                                    yer_6 = işaret
                                {if} seçim == 7
                                    yer_7 = işaret
                                {if} seçim == 8
                                    yer_8 = işaret
                                {if} seçim == 9
                                    yer_9 = işaret
                            {else}
                                {print} 'Bu yer zaten doldu'
                            {print} yer_1 yer_2 yer_3
                            {print} yer_4 yer_5 yer_6
                            {print} yer_7 yer_8 yer_9
                            {print} ' '
                            kazanan = {ask} 'Kazandın mı?'
                            {if} kazanan == 'yes'
                                {print} 'Aferin, oyuncu ' işaret '!'
                                oyun = 'bitti'
                            {else}
                                {if} işaret == 'x'
                                    işaret = 'o'
                                {else}
                                    işaret = 'x'
                    ```
                start_code: '# kodunuzu buraya yazın'
            15:
                story_text: |
                    Bu seviyede, Tic Tac Toe oyununuzu {while} döngüsü ile geliştirebilirsiniz. Bu döngü ile `{if} oyun != 'bitti'` ve `{for} i {in} {range} 1 {to} 9` satırları basit tek bir satıra dönüştürülür.
                    Şuna bir bak:
                example_code: |
                    ```
                    işaret = 'x'
                    açık_yerler = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    oyun = 'devam'
                    yer_1 = '.'
                    yer_2 = '.'
                    yer_3 = '.'
                    yer_4 = '.'
                    yer_5 = '.'
                    yer_6 = '.'
                    yer_7 = '.'
                    yer_8 = '.'
                    yer_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} yer_1 yer_2 yer_3
                    {print} yer_4 yer_5 yer_6
                    {print} yer_7 yer_8 yer_9
                    {print} ' '
                    {while} oyun != 'bitti'
                        seçim = {ask} 'Oyuncu ' işaret ', hangi yer?'
                        {if} seçim {in} açık_yerler
                            {remove} seçim {from} açık_yerler
                            {if} seçim == 1
                                yer_1 = işaret
                            {if} seçim == 2
                                yer_2 = işaret
                            {if} seçim == 3
                                yer_3 = işaret
                            {if} seçim == 4
                                yer_4 = işaret
                            {if} seçim == 5
                                yer_5 = işaret
                            {if} seçim == 6
                                yer_6 = işaret
                            {if} seçim == 7
                                yer_7 = işaret
                            {if} seçim == 8
                                yer_8 = işaret
                            {if} seçim == 9
                                yer_9 = işaret
                        {else}
                            {print} 'Burası zaten dolu'
                        {print} yer_1 yer_2 yer_3
                        {print} yer_4 yer_5 yer_6
                        {print} yer_7 yer_8 yer_9
                        {print} ' '
                        kazanan = {ask} 'Kazandın mı?'
                        {if} kazanan == 'evet'
                            {print} 'Aferin, oyuncu ' işaret '!'
                            oyun = 'bitti'
                        {else}
                            {if} işaret == 'x'
                                işaret = 'o'
                            {else}
                                işaret = 'x'
                    ```
                start_code: '# kodunuzu buraya yazın'
            17:
                story_text: |
                    Önceki seviyelerde, tic tac toe oyununun can sıkıcı bir özelliği vardı. Her hamleden sonra, kazanıp kazanmadığınızı kendiniz doldurmanız gerekiyordu.
                    Bu da oyunu oynanabilir ama aynı zamanda oldukça yavaş hale getiriyordu. Bu seviyede, bu sorunu çözebilecek `{elif}` komutunu öğrendik.
                    Hedy'nin bir oyuncunun kazanıp kazanmadığını kontrol etmesini sağlamak için `{elif}` kullanmak eğlencelidir, ancak aynı zamanda oldukça fazla miktarda ek satır gerektirir.

                    Örnek kodda kazanmak için gerekenleri eklediğimizi görüyorsunuz (yatay, dikey veya çapraz olarak arka arkaya 3 nokta).
                    Bunları 46'dan 69'a kadar olan satırlarda bulabilirsiniz. Gereksinim her karşılandığında (yani bir oyuncu kazandığında) oyun değişkeninin 'bitti' olarak ayarlandığını görebilirsiniz.
                    Bu, `{while}` döngüsünün durdurulacağı ve oyunun sona ereceği anlamına gelir.
                example_code: |
                    ```
                    işaret = 'x'
                    açık_yerler = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    oyun = 'devam'
                    yer_1 = '.'
                    yer_2 = '.'
                    yer_3 = '.'
                    yer_4 = '.'
                    yer_5 = '.'
                    yer_6 = '.'
                    yer_7 = '.'
                    yer_8 = '.'
                    yer_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} yer_1 yer_2 yer_3
                    {print} yer_4 yer_5 yer_6
                    {print} yer_7 yer_8 yer_9
                    {print} ' '
                    {while} oyun != 'bitti':
                        seçim = {ask} 'Oyuncu ' işaret ', hangi yer?'
                        {if} seçim {in} açık_yerler:
                            {remove} seçim {from} açık_yerler
                            {if} seçim == 1:
                                yer_1 = işaret
                            {if} seçim == 2:
                                yer_2 = işaret
                            {if} seçim == 3:
                                yer_3 = işaret
                            {if} seçim == 4:
                                yer_4 = işaret
                            {if} seçim == 5:
                                yer_5 = işaret
                            {if} seçim == 6:
                                yer_6 = işaret
                            {if} seçim == 7:
                                yer_7 = işaret
                            {if} seçim == 8:
                                yer_8 = işaret
                            {if} seçim == 9:
                                yer_9 = işaret
                        {else}:
                            {print} 'Bu yer doldu'
                        {print} yer_1 yer_2 yer_3
                        {print} yer_4 yer_5 yer_6
                        {print} yer_7 yer_8 yer_9
                        {print} ' '
                        {if} yer_1 == yer_2 {and} yer_2 == yer_3 {and} yer_1 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_4 == yer_5 {and} yer_5 == yer_6 {and} yer_4 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_7 == yer_8 {and} yer_8 == yer_9 {and} yer_7 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_1 == yer_4 {and} yer_4 == yer_7 {and} yer_1 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_2 == yer_5 {and} yer_5 == yer_8 {and} yer_2 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_3 == yer_6 {and} yer_6 == yer_9 {and} yer_3 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_1 == yer_5 {and} yer_5 == yer_9 {and} yer_1 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {elif} yer_3 == yer_5 {and} yer_5 == yer_7 {and} yer_3 != '.':
                            {print} 'Oyuncu ' işaret ' kazandı!'
                            oyun = 'bitti'
                        {else}:
                            {if} işaret == 'x':
                                işaret = 'o'
                            {else}:
                                işaret = 'x'
                    ```
                start_code: '# kodunuzu buraya yazın'
    turtle:
        name: Kaplumbağa
        default_save_name: Kaplumbağa
        description: Kendi çiziminizi yapın
        levels:
            1:
                story_text: |
                    Hedy'yi çizim yapmak için de kullanabilirsiniz. Dönüşleri ve çizgileri birleştirerek bir kare veya merdiven yapabilirsiniz!

                    `{forward}` kullanarak ileriye doğru bir çizgi çizersiniz. Ardındaki sayı kaplumbağanın ne kadar yürüyeceğini belirler. `{turn} {right}` saat yönünde çeyrek tur döner, `{turn} {left}` saat yönünün tersine döner.

                    Geriye doğru gitmek istiyorsanız, `{forward}` komutunu eksili bir sayı ile kullanırsınız. Yani örneğin `{forward} -100`

                    ### Alıştırma
                    Bu küçük bir merdivenin başlangıcı. Bunu beş basamaklı yapabilir misin?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    Bu seviyede, kaplumbağayı etkileşimli hale getirmek için değişkenler kullanabilirsiniz. Örneğin oyuncuya kaplumbağanın kaç adım atması gerektiğini sorabilirsiniz.
                example_code: |
                    ```
                    cevap {is} {ask} Kaplumbağa kaç adım atsın?
                    {forward} cevap
                    ```
                story_text_2: |
                    Ayrıca, 1. seviyede kaplumbağa sadece sola veya sağa dönebiliyordu. Bu biraz sıkıcı!
                    2. seviyede burnunu her yöne çevirebilir.

                    Bir çeyrek tur döndürmek için 90 kullanın. Buna derece diyoruz. Tam dönüş 360 derecedir.

                    ### Alıştırma
                    Bu kodla bir şekil oluşturabilir misiniz? Belki bir üçgen ya da daire?
                example_code_2: |
                    ```
                    {print} Şekiller çizdirmek
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                start_code: |-
                    {print} Kaplumbağa yarışı!
                    açı {is} 90
                    {turn} açı
                    {forward} 25
            3:
                story_text: |
                    Bu seviyede, çizim kaplumbağamız ile `{at} {random}` kullanabilirsiniz. Rastgele bir seçim, kaplumbağanın her seferinde farklı bir yolda yürümesini sağlar.
                    Listeden bir değer seçmek için `{at} {random}` kullanın.
                    ### Alıştırma
                    Daha uzun rastgele bir yol oluşturmak için 2. ve 3. satırları kopyalayıp yapıştırabilir misiniz?
                example_code: |
                    ```
                    açılar {is} 10, 50, 90, 150, 250
                    {turn} açılar {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    açılar {is} 10, 50, 90, 150, 250
                    {turn} açılar {at} {random}
                    {forward} 25
            4:
                story_text: |
                    4. seviyede, `{print}` ve `{ask}` ile tırnak işareti kullanmanız gerekecek. Ayrıca çizim yaparken de!
                example_code: |
                    ```
                    {print} _ Çizim yapılıyor _
                    açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                story_text_2: |
                    Ayrıca `{color}` komutu ile çizgilerin rengini de değiştirebilirsiniz. Örneğe göz atın.
                    Ayrıca bunun yanında çizim alanımız beyaz olduğundan `{color} {white}` komutunu kullanarak 'görünmez' çizgiler çizebilirsiniz. Çizime başlamadan önce kaplumbağayı ekranda herhangi bir yere taşımak için bu beyaz çizgileri kullanabilirsiniz.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Çizim yapılıyor'
                    açı {is} 90
                    {turn} açı
                    {forward} 25
            5:
                story_text: |
                    5. seviyede, `{if}` ile bir seçim yapabilirsiniz. Örneğin farklı şekil türleri arasında.
                example_code: |
                    ```
                    {print} 'Çizim yapılıyor'
                    şekil {is} {ask} 'Kare mi yoksa üçgen mi istiyorsunuz?'
                    {if} şekil {is} üçgen açı {is} 120
                    {else} açı {is} 90
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    {turn} açı
                    {forward} 25
                    ```
                story_text_2: |
                    ### Alıştırma
                    Bu kodun çalışmasını sağlamak için kodun içine doğru sayıları doldurun.
                    Bunu yaptıktan sonra, geriye doğru seçeneğini eklemeyi deneyebilirsiniz.

                    **Ekleme** 'Sol' ve 'sağ' kullanmak yerine, programı Kuzey, Doğu, Güney ve Batı ile yeniden oluşturun.
                    Bu şekilde Kuzeydoğu ve Güneybatı gibi daha fazla yön ekleyebilirsiniz.
                example_code_2: |
                    ```
                    yön {is} {ask} 'Sola mı, sağa mı, yoksa düz mü gitmek istiyorsunuz?'
                    {if} yön {is} sol {turn} _
                    {if} yön {is} sağ {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} 'Çizim yapılıyor'
                    şekil {is} {ask} 'Kare mi yoksa üçgen mi istiyorsunuz?'
                    {if} şekil {is} üçgen açı {is} 120 {else} açı {is} 90
                    {turn} açı
                    {forward} 25
            6:
                story_text: |
                    Bu seviyede, farklı şekiller çizmek için hesaplamaları kullanabilirsiniz.
                    Okulda tam bir daire çizmenin 360 derece olduğunu öğrenmiş olabilirsiniz. Eğer öğrenmediyseniz, artık biliyorsunuz!
                    Bu yüzden bir kare için 90 derece kullanırsınız. 360'ın 4'e bölümü 90'dır.
                    Artık Hedy ile matematik yapabildiğimize göre, istediğimiz tüm şekilleri çizebiliriz!
                example_code: |
                    ```
                    açılar = {ask} 'Kaç tane açı istiyorsun?'
                    açı = 360 / açılar
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    {forward} 50
                    {turn} açı
                    ```
                start_code: '{print} ''Şekiller çizmek'''
            8:
                story_text: |
                    Artık birkaç satırı tekrarlayabildiğimize göre, şekilleri daha kolay oluşturabiliriz.
                    Açıyı yalnızca bir kez ayarlamamız ve ardından bu değişkeni `{repeat}` içinde kullanmamız gerekir.

                    ### Alıştırma 1
                    Örnek kod bir kare oluşturur. Kodu, üçgen veya altıgen gibi başka bir şekil oluşturacak şekilde değiştirin.
                    Bu, iki kod satırında değişiklik yapılmasını gerektirir.
                    İpucu: Bir dairenin tamamı 360 derecedir.

                    ### Alıştırma 2
                    Şimdi en az iki çokgenden oluşan bir çizim oluşturun.
                example_code: |
                    ```
                    açı = 90
                    {repeat} 4 {times}
                        {turn} açı
                        {forward} 50
                    ```
                story_text_2: |
                    **Ekleme** Artık farklı şekiller çizen programımızı geliştirebiliriz. Kodu tamamlayınca istediğiniz herhangi bir çokgeni çizebilirsiniz!
                example_code_2: |
                    ```
                    şekil = {ask} 'Kaç tane açı çizmeliyim?'
                    açı = 360 / şekil
                    {repeat} şekil {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: şekil = {ask} 'Kaç tane açı çizmeliyim?'
            9:
                story_text: |
                    Artık bir `{repeat}` içinde bir `{repeat}` kullanabildiğimize göre, daha karmaşık şekiller oluşturabiliriz.

                    ### Alıştırma 1
                    Bu kod üç tane siyah üçgen oluşturur, bunu beş pembe kareye dönüştürün.

                    **Ekleme** En az iki farklı şekil türünden oluşan kendi seçtiğiniz bir şekil oluşturun.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# kodunuzu buraya yazın'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: iken_komutu
        description: iken
        levels:
            15:
                story_text: |-
                    Yeni bir döngü çeşidi öğreneceğiz, `{while}` döngüsü! Deyim doğru olduğu sürece döngüye devam ediyoruz.
                    Bu yüzden döngü içinde değeri değiştirmeyi unutmayın.

                    Örnek kodda, doğru bir cevap verilene kadar devam ediyoruz.
                    Doğru cevap hiç verilmezse, döngü asla sona ermez!
                example_code: |
                    ```
                    cevap = 0
                    {while} cevap != 25
                        cevap = {ask} '5 kere 5 kaç eder?'
                    {print} 'Doğru cevap verilmiştir'
                    ```
                start_code: |-
                    cevap = 0
                    {while} cevap != 25
                        cevap = {ask} '5 kere 5 kaç eder?'
                    {print} 'Doğru cevap verilmiştir'
    years:
        name: Yeni Yıl
        default_save_name: Yeni Yıl Geri Sayımı
        description: Yeni Yıl için Geri Sayım!
        levels:
            11:
                story_text: |
                    Bu seviyede Yeni Yıl'a geri sayım yapmak için `{for}` sayı `{in}` `{range}` komutunu kullanabilirsiniz.

                    ### Alıştırma
                    Boşlukları doldurun ve kodu çalışır hale getirin!
                example_code: |
                    ```
                    {for} sayı {in} {range} _ {to} _
                        {print} sayı
                    {print} 'Yeni yılınız kutlu olsun!'
                    ```
                start_code: '# kodunuzu buraya yazın'
