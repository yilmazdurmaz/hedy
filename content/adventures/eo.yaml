adventures:
    story:
        name: Rakonto
        default_save_name: Rakonto
        description: Rakonto
        levels:
            1:
                story_text: |
                    En la 1-a nivelo vi povas krei rakonton kun malsama ĉeffiguro, kiun vi mem enigas.

                    En la unua linio, uzu `{ask}` kaj demandu, kiu estos la ĉeffiguro de la rakonto.

                    Post tiu unua linio, komencu per `{print}` se la frazo bezonas esti presita.
                    Vi uzas `{echo}` se vi volas, ke via ĉeffiguro estu ĉe la fino de la frazo.
                example_code: |
                    ```
                    {ask} La ĉefrolulo de ĉi tiu rakonto estas
                    {print} La ĉefrolulo nun promenas en la arbaro
                    {echo} Li timetas
                    {print} Li aŭdas ĉie frenezajn bruojn
                    {print} Li timas, ke ĉi tie estas hantata arbaro
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?
                start_code: '{print} Jen la komenco de via rakonto'
            2:
                story_text: |
                    En nivelo 2 vi povas fari vian rakonton pli amuza. La nomo de via ĉeffiguro nun povas esti ie ajn en la frazo.

                    Vi ja devas programi iom krome por tio. Vi devas nun nomi vian ĉeffiguron unue.

                    Vi tiam povas meti tiun nomon ie ajn en frazon.
                example_code: |-
                    ```
                    nomo {is} {ask} Kio estas la nomo de la ĉefrolulo?
                    {print} nomo nun kuras en la arbaro
                    {print} nomo timetas
                    {print} Subite li aŭdas frenezan bruon…
                    {sleep}
                    {print} nomo timas, ke ĉi tie estas hantata arbaro
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
                start_code: '{print} Via rakonto'
            3:
                story_text: |
                    En Nivelo 3, oni povas igi sian rakonton pli amuza. Oni povas uzi hazardecon por iu ajn monstro, besto aŭ alia obstaklo, jene:
                example_code: |
                    ```
                    bestoj {is} 🦔, 🐿, 🦉, 🦇
                    {print} Li nun aŭdas la sonon de bestoj {at} {random}
                    ```
                story_text_2: |
                    La komando `{add}` ankaŭ povas esti utila en via rakonto.
                example_code_2: |
                    ```
                    {print} Li aŭdas sonon
                    bestoj {is} 🐿, 🦔, 🦇, 🦉
                    besto {is} {ask} Kio estas ĝi laŭ via opinio?
                    {add} besto {to_list} bestoj
                    {print} ĝi estis bestoj {at} {random}
                    ```
                story_text_3: |
                    Jen ekzemplo de la komando `{remove}` en via rakonto
                example_code_3: |
                    ```
                    {print} Lia tornistro fariĝis tro peza.
                    {print} Ene estis botelo da akvo, lanterno kaj briko.
                    sako {is} akvo, lanterno, briko
                    forĵetoto {is} {ask} Kiun li forĵetu?
                    {remove} forĵetoto {from} sako
                    ```
                start_code: '{print} Via rakonto'
            4:
                story_text: |
                    Vi eble rimarkis, ke ankoraŭ ekzistas problemo en la antaŭaj niveloj. Ĉu vi provis presi frazon, kiu enhavis la vorton nomon?
                    Vi povas solvi tion en ĉi tiu nivelo. Vi devas uzi citilojn por ĉio, kion vi presigos.
                example_code: |
                    ```
                    nomo {is} Hanso
                    {print} 'La nomo de la ĉefrolulo estas' nomo
                    {print} nomo 'nun promenas en la arbaro'
                    {print} nomo 'estas iom timigita'
                    bestoj {is} 🦔, 🐿, 🦉, 🦇
                    {print} 'Li aŭdas la sonon de' bestoj {at} {random}
                    {print} nomo 'timas, ke ĉi tiu arbaro estas hantita'
                    ```
                start_code: '{print} ''Via rakonto ĉi tie!'''
            5:
                story_text: |
                    En ĉi tiu nivelo vi povas programi malsamajn finaĵojn, kiuj faros vian rakonton eĉ pli amuza.

                    Pensu pri du finaĵoj por via rakonto, ekzemple:

                    - La princino promenas tra la arbaro
                    - Ŝi renkontas monstron

                    - Feliĉa fino: Ŝi prenas sian glavon kaj la monstro rapide forkuras
                    - Malbona Fino: La monstro manĝas la princinon

                    Vi ankaŭ povas certigi, ke nomo povas esti enigita denove. Tio funkcias same kiel en la antaŭaj niveloj. Vi povas kombini tion per `{if}`, kaj tiam vi jam faris tutan programon!
                example_code: |
                    ```
                    nomo {is} {ask} 'Who is walking in the forest?'
                    {print} nomo 'walks through the forest'
                    {print} nomo 'renkontas monstron'
                    fino {is} {ask} 'Would you like a good or a bad ending?'
                    {if} fino {is} bona {print} nomo 'takes the sword and the monster quickly runs away'
                    {else} {print} nomo 'estis manĝita de monstro'
                    ```
                start_code: '{print} ''Jen la komenco de via rakonto!'''
            7:
                story_text: |
                    En rakonto, iu diras vortojn plurajn fojojn. Ekzemple, kiam iu vokas helpon aŭ kantas kanton.
                    Vi povas meti tiajn ripetojn en vian rakonton, en ĉi tiu nivelo per `{repeat}`.
                example_code: |
                    ```
                    {print} 'La princo petadis por helpo.'
                    {repeat} 5 {times} {print} 'Helpon!'
                    {print} 'Kial neniu helpas min?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Helpon!'''
            8:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi plurajn liniojn en viaj `{if}`-komandoj; tiel, vi povas plibonigi vian ĝojan aŭ malĝojan finon!
                example_code: |
                    ```
                    {print} 'HO NE! La tiranosaŭro alproksimiĝas!'
                    fino = {ask} 'Ĉu vi volas ĝojan aŭ malĝojan finon?'
                    {if} fino {is} ĝoja
                        {print} 'Ĝustatempe Rikardo resaltas en la tempomaŝinon!'
                        {print} 'Miĥaelo tajpas la kodon kaj…'
                        {print} '💥ZAP!💥'
                        {print} 'Ili estas reen en sia garaĝo'
                    {else}
                        {print} 'Miĥaelo krias: «VENU RIKARDO! KURU PLI RAPIDE!»'
                        {print} 'Sed Rikardo estas tro malrapida…'
                        {print} 'La tiranosaŭro proksimiĝas kaj manĝas lin per unu mordego!🦖'
                    ```
                start_code: '# via kodo ĉi tie'
            9:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi nestadon por meti {if}, {repeat} aŭ {for} komandojn en aliajn {if}, {repeat} aŭ {for}. Ĉi tio donas al vi multajn eblojn kaj vere helpas vin fari vian rakonton interaga.
                example_code: |
                    ```
                    {print} 'Robertino promenas urbocentre'
                    loko = {ask} 'Ĉu Robertino iras en butikon, aŭ ĉu ŝi iras hejmen?'
                    {if} loko {is} butiko
                        {print} 'Ŝi eniras la butikon.'
                        {print} 'Robertino vidas interesan libron'
                        libro = {ask} 'Ĉu Robertino aĉetas la libron?'
                        {if} libro {is} jes
                            {print} 'Robertino aĉetas la libron kaj iras hejmen'
                        {else}
                            {print} 'Robertino eliras la butikon kaj iras hejmen'
                    {else}
                        {print} 'Robertino iras hejmen'
                    ```
                start_code: '# via kodo ĉi tie'
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi la komandon `{for}` en via rakonto. Tiel vi povas facile programi la infanlibron «Bruna urso, bruna urso, kion vi vidas?».
                example_code: |
                    ```
                    bestoj = birdo, ŝafo, rano, anaso, infaneto
                    {print} 'bruna urso'
                    {print} 'bruna urso'
                    {print} 'Kion vi vidas?'
                    {for} besto {in} bestoj
                        {print} 'Mi vidas ' besto 'n rigardantan min'
                        {print} besto
                        {print} besto
                        {print} 'Kion vi vidas?'
                    {print} 'Mi vidas ĉiujn bestojn, kiuj rigardas min!'
                    ```
                start_code: '# via kodo ĉi tie'
            12:
                story_text: En ĉi tiu nivelo, oni povas uzi la citilojn por konservi plurajn vortojn en variablo.
                example_code: |
                    ```
                    nomo = 'La Reĝino de Anglio'
                    {print} nomo ' estis manĝanta pecon da kuko, kiam subite…'
                    ```
                start_code: '# via kodo ĉi tie'
            13:
                story_text: |
                    Uzante la komandojn `{and}` kaj `{or}`, oni povas mallongigi siajn rakontojn. Ekzemple, rigardu la jenan rakonton pri drakoj.
                example_code: |
                    ```
                    glavo = 'perdita'
                    ludo = 'daŭranta'
                    {print} 'Nia heroo promenas tra la arbaro'
                    {print} 'La vojo forkiĝas en du vojojn'
                    {for} i {in} {range} 0 {to} 2
                        {if} ludo {is} 'daŭranta'
                            vojo = {ask} 'Kiun vojon ŝi elektu?'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'trovita'
                                {print} 'Nia heroo renkontas drakon!'
                                {print} 'Feliĉe nia heroo havas glavon por venki la beston!'
                                ludo = 'finita'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas drakon, sed ŝi ne havas armilojn!'
                                {print} 'Nian heroon venkas la drako…'
                                {print} 'Provu denove'
                                ludo = 'finita'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'trovita'
                                {print} 'Vi jam trovis la glavon. Ĉi tie restas nenio.'
                                {print} 'Ŝi reiras'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas glavon'
                                {print} 'Ĉi tio povus esti tre oportuna'
                                glavo = 'trovita'
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    Uzante la buklon `{while}`, oni povas igi siajn rakontojn pli interesaj. Ekzemple, oni povas uzi `{while} ludo {is} 'daŭranta'` por ke oni povu ludi ĝis la ludo finiĝos.
                    Aŭ oni povas uzi `{while} glavo {is} 'perdita'` por ke la ludanto ne povu daŭrigi sen trovi ion.
                example_code: |
                    ```
                    ŝlosilo = 'perdita'
                    {print} 'Vi staras en via ĝardeno, kaj vi perdis vian ŝlosilon.'
                    {print} 'Kie vi volas serĉi ĝin?'
                    {print} 'Vi povas elekti unu el: arbo, florbedo, roko, poŝtkesto'
                    {while} ŝlosilo == 'perdita'
                        loko = {ask} 'Kie vi volas serĉi ĝin?'
                        {if} loko == 'florbedo'
                            {print} 'Jen ĝi troviĝas!'
                            ŝlosilo = 'trovita'
                        {else}
                            {print} 'Ne, ĝi ne estas ĉe la ' loko
                    {print} 'Nun vi povas eniri la domon!'
                    ```
                start_code: '# via kodo ĉi tie'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
                start_code: '# Schrijf jouw code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Nigra fanto
        default_save_name: Nigra fanto
        description: Provu alproksimiĝi al 21 laŭeble
        levels:
            17:
                story_text: |
                    Nigra fanto estas simpla kartludo, dum kiu oni provas alproksimiĝi laŭeble al 21 poentoj. Vi ricevas du kartojn. Ĉiu karto valoras sian numeran valoron, kaj la vizaĝkartoj (fanto, damo kaj reĝo) valoras 10 poentojn.
                    La aso valoras aŭ 1 aŭ 11 poentojn (vi povas elekti). La kazinisto, via kontraŭulo, ankaŭ ricevas du kartojn.
                    Se vi volas, vi povas akiri alian karton, kaj ĝiaj poentoj estos aldonitaj al via totalo. La kazinisto ankaŭ povas preni alian karton.
                    Sed atentu ne akiri pli ol 21 poentojn, ĉar se vi tion faros, vi perdos!
                    La ludanto, kiu plej alproksimiĝos al 21, ne superante 21, gajnos!

                    Amuziĝu!
                example_code: |
                    ```
                    {print} 'NIGRA FANTO'
                    kartoj = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Fanto', 'Damo', 'Reĝo', 'Aso']
                    poentoj = 0
                    kazinistaj_poentoj = 0
                    karto_1 = kartoj[{random}]
                    karto_2 = kartoj[{random}]
                    karto_3 = kartoj [{random}]
                    kazinista_karto_1 = kartoj[{random}]
                    kazinista_karto_2 = kartoj[{random}]
                    kazinista_karto_3 = kartoj[{random}]
                    # Poentoj de la unua karto
                    {if} karto_1 == 'Fanto' {or} karto_1 == 'Damo' {or} karto_1 == 'Reĝo':
                        poentoj = poentoj + 10
                    {elif} karto_1 == 'Aso':
                        poentoj = poentoj + 11
                    {else}:
                        poentoj = poentoj + karto_1
                    # Poentoj de la dua karto
                    {if} karto_2 == 'Fanto' {or} karto_2 == 'Damo' {or} karto_2 == 'Reĝo':
                        poentoj = poentoj + 10
                    {elif} card_2 == 'Aso':
                        poentoj = poentoj + 11
                    {else}:
                        poentoj = poentoj + karto_2
                    # Poentoj de la unua karto de la kazinisto
                    {if} kazinista_karto_1 == 'Fanto' {or} kazinista_karto_1 == 'Damo' {or} kazinista_karto_1 == 'Reĝo':
                        kazinistaj_poentoj = kazinistaj_poentoj + 10
                    {elif} kazinista_karto_1 == 'Aso':
                        kazinistaj_poentoj = kazinistaj_poentoj + 11
                    {else}:
                        kazinistaj_poentoj = kazinistaj_poentoj + kazinista_karto_1
                    # Poentoj de la dua karto de la kazinisto
                    {if} kazinista_karto_2 == 'Fanto' {or} kazinista_karto_2 == 'Damo' {or} kazinista_karto_2 == 'Reĝo':
                        kazinistaj_poentoj = kazinistaj_poentoj + 10
                    {elif} kazinista_karto_2 == 'Aso':
                        kazinistaj_poentoj = kazinistaj_poentoj + 11
                    {else}:
                        kazinistaj_poentoj = kazinistaj_poentoj + kazinista_karto_2
                    # Du asoj
                    {if} karto_1 == 'Aso' {and} karto_2 == 'Aso':
                        poentoj = 12
                    {if} kazinista_karto_1 == 'Aso' {and} kazinista_karto_2 == 'Aso':
                        kazinistaj_poentoj = 12
                    # Montri poentojn
                    {print} 'Jen viaj kartoj: ' karto_1 ' kaj ' karto_2 ' (' poentoj ' poentoj)'
                    {print} 'Jen la kartoj de la kazinisto: ' kazinista_karto_1 ' kaj ' kazinista_karto_2 ' (' kazinistaj_poentoj ' poentoj)'
                    # Kromkarto de la ludanto
                    kromkarto = {ask} 'Ĉu vi deziras kroman karton?'
                    {if} kromkarto == 'jes':
                        {if} karto_3 == 'Fanto' {or} karto_3 == 'Damo' {or} karto_3 == 'Reĝo':
                            poentoj = poentoj + 10
                        {elif} karto_3 == 'Aso':
                            {if} poentoj > 11:
                                poentoj = poentoj + 11
                            {else}:
                                poentoj = poentoj + 1
                        {else}:
                            poentoj = poentoj + karto_3
                        print 'Vi akiris kroman karton: ' karto_3 ' (' poentoj ' poentoj)'
                    {else}:
                        print 'Neniu kroma karto'
                    # Gajninto
                    {if} poentoj > 21 {or} kazinistaj_poentoj > poentoj {or} kazinistaj_poentoj == 21:
                        {print} 'Vi malgajnas!'
                    {elif} kazinistaj_poentoj < 17:
                        {print} 'La kazinisto prenas kroman karton. Ĝi estas... ' kazinista_karto_3
                        {if} kazinista_karto_3 == 'Fanto' {or} kazinista_karto_3 == 'Damo' {or} kazinista_karto_3 == 'Reĝo':
                            kazinistaj_poentoj = kazinistaj_poentoj + 10
                        {elif} kazinista_karto_3 == 'Aso':
                            {if} kazinistaj_poentoj < 11:
                                kazinistaj_poentoj = kazinistaj_poentoj + 11
                            {else}:
                                kazinistaj_poentoj = kazinistaj_poentoj + 1
                        {else}:
                            kazinistaj_poentoj = kazinistaj_poentoj + kazinista_karto_3
                        {print} 'La kazinisto havas ' kazinistaj_poentoj ' poentojn nun'
                        {if} kazinistaj_poentoj < 21 {and} kazinistaj_poentoj > poentoj:
                            {print} 'Vi malgajnas!'
                        {else}:
                            {print} 'Vi gajnas!'
                    {elif} poentoj > kazinistaj_poentoj {and} poentoj < 21:
                        {print} 'Vi gajnas!'
                    ```
                start_code: '# via kodo ĉi tie'
    calculator:
        name: Kalkulilo
        default_save_name: Kalkulilo
        description: Krei kalkulilon
        levels:
            6:
                story_text: |
                    Nun, ĉar vi povas kalkuli, vi ankaŭ povas verki programon por ekzerci vin al matematikaj kalkuloj. Vi povas mem fari la kalkulojn, ekzemple:
                example_code: |
                    ```
                    ĝusta_respondo = 11 * 27
                    respondo = {ask} 'Kiom estas 11 multiplikite per 27?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! Jen la ĝusta respondo: ' ĝusta_respondo
                    ```
                story_text_2: |
                    Vi ankaŭ povas lasi la komputilon fari hazardajn sumojn memstare uzante hazardajn.
                    Jen kiel vi elektas kelkajn tabelojn por ekzerciĝi, kaj el tio vi ĉiam ricevas malsaman sumon:
                example_code_2: |
                    ```
                    tabeloj = 4, 5, 6, 8
                    nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabelo = tabeloj {at} {random}
                    nombro = nombroj {at} {random}
                    ĝusta_respondo = tabelo * nombro
                    respondo = {ask} 'Kiom estas ' tabelo ' multiplikite per ' nombro '?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! La ĝusta respondo estas ' ĝusta_respondo
                    ```
                story_text_3: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                start_code: '{print} ''Bonvenon al kalkulilo!'''
            9:
                story_text: |
                    En antaŭaj niveloj, vi lernis kiel verki kalkulilon. En ĉi tiu nivelo, vi povas apliki tiun kodon por verki matematikan ludeton jene…
                example_code: |
                    ```
                    poentaro = 0
                    {repeat} 10 {times}
                        nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombro1 = nombroj {at} {random}
                        nombro2 = nombroj {at} {random}
                        ĝusta_respondo = nombro1 * nombro2
                        {print} 'Kiom estas ' nombro1 ' multiplikite per ' nombro2 '?'
                        respondo = {ask} 'Tajpu vian respondon ĉi tie…'
                        {print} 'Jen via respondo:' respondo
                        {if} respondo {is} ĝusta_respondo
                            poentaro = poentaro + 1
                    {print} 'Bonege! Jen via poentaro: ' poentaro '/10!'
                    ```
                start_code: '{print} ''Bonvenon al kalkulilo!'''
            10:
                story_text: |
                    Ĉi tiu kalkulilo-ludo helpas vin praktiki tabelojn de multipliko!
                    Se vi aldonus pliajn nombrojn al la listo, vi povus ekzerci vin pri pliaj multiplikoj.
                example_code: |
                    ```
                    nombroj = 1, 2, 3
                    {for} nombro1 {in} nombroj
                        {for} nombro2 {in} nombroj
                            respondo = {ask} 'Kiom estas ' nombro2 ' multiplikite per ' nombro1 '?'
                            ĝusta = nombro1 * nombro2
                            {if} respondo {is} ĝusta
                                {print} 'Bonege!'
                            {else}
                                {print} 'Via respondo ne estas ĝusta. Jen la ĝusta respondo: ' ĝusta
                    ```
                start_code: '# via kodo ĉi tie'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    Nun oni povas verki kalkulilon, kiu funkcias por decimalaj frakcioj.
                example_code: |
                    ```
                    nombro1 = {ask} 'Kio estas la unua nombro?'
                    nombro2 = {ask} 'Kio estas la dua nombro?'
                    respondo = nombro1 + nombro2
                    {print} nombro1 ' plus ' nombro2 ' estas ' respondo
                    ```
                start_code: '# via kodo ĉi tie'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi la ludon «Divenu la nombron»
                example_code: |
                    ```
                    {print} 'Divenu la nombron'
                    nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nombro = nombroj {at} {random}
                    ludo = 'daŭranta'
                    {for} i {in} {range} 1 {to} 10
                        {if} ludo == 'daŭranta'
                            diveno = {ask} 'Kiun nombron viaopinie ĝi estas?'
                            {if} diveno > nombro
                                {print} 'Pli malgrande!'
                            {if} diveno < nombro
                                {print} 'Pli grande!'
                            {if} diveno == nombro
                                {print} 'Vi gajnas!'
                                ludo = 'finita'
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    Vi povas aldoni la iteracion `{while}` al la kalkulilo, kiun vi verkis en antaŭa nivelo.
                    Tio certigas, ke la ludanto ne povas daŭrigi al la sekva demando, se ili respondas malĝuste.<!--{if}-->
                example_code: |
                    ```
                    poentaro = 0
                    {for} i {in} {range} 0 {to} 9
                        nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombro1 = nombroj {at} {random}
                        nombro2 = nombroj {at} {random}
                        ĝusta = nombro1 * nombro2
                        respondo = 0
                        {while} respondo != ĝusta
                            {print} 'Kiom estas ' nombro1 ' multiplikite per ' nombro2 '?'
                            respondo = {ask} 'Tajpu vian respondon:'
                            {print} 'Via respondo estas ' respondo
                        {print} 'Bonege!'
                    {print} 'Vi gajnas!'
                    ```
                start_code: '# via kodo ĉi tie'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Enkonduko
        default_save_name: enkonduko
        description: Klarigo pri nivelo
        levels:
            1:
                story_text: |
                    En Nivelo 1 vi povas uzi la komandojn `{print}`, `{ask}` kaj `{echo}`.
                    Tajpu vian kodon en la programan kampon. Aŭ premu la verdan butonon en la ekzempla kodbloko, kaj la kodo tajpiĝos por vi!
                    Provu mem la kodon per la verda butono «Ruli kodon» sub la programa kampo.

                    Vi povas presi tekston al la ekrano per la komando `{print}`.
                start_code: '{print} saluton mondo!'
            2:
                story_text: |
                    En Nivelo 2, ni lernas du novajn komandojn: `{is}` kaj `{sleep}`.
                    Vi povas nomi vorton per `{is}`. Tia nomo nomiĝas variablo. En ĉi tiu ekzemplo, ni faris variablon nomitan `nomo` kaj variablon nomitan `aĝo`. Vi povas uzi la vorton `nomo` ie ajn en via kodo, kaj ĝi estos anstataŭigita per Hedy, jene:

                    Tiel vi ne plu bezonas la komandon `{echo}`!
                example_code: |
                    ```
                    nomo {is} Hedy
                    aĝo {is} 15
                    {print} nomo estas aĝo jarojn aĝa
                    ```
                story_text_2: |
                    `{print}` ankoraŭ funkcias same, sed la komando `{ask}` ŝanĝiĝis. Vi devas uzi variablon ankaŭ en la komando `{ask}`. Ĝi aspektas jene:
                start_code: '{print} saluton mondo!'
            3:
                story_text: |
                    En Nivelo 3, oni povas fari liston. Oni povas lasi la komputilon elekti hazardaĵon el la listo. Oni faras tion per `{at} {random}`.
                start_code: '{print} saluton mondo!'
            4:
                story_text: |
                    En Nivelo 4, `{ask}` kaj `{print}` ŝanĝiĝis.

                    Oni devas meti presotan tekston inter citiloj.

                    Tio utilas, ĉar nun oni povas presi ĉiajn ajn vortojn. Kaj simile pri tiuj vortoj, kiujn oni konservas per `{is}`.

                    Preskaŭ ĉiuj programlingvoj ankaŭ uzas citilojn por presado; tiel ni proksimiĝas al vera programado!
                example_code: |
                    ```
                    {print} 'Oni devas uzi citilojn ekde nun!'
                    respondo {is} {ask} 'Kion oni bezonas uzi ekde nun?'
                    {print} 'Oni devas uzi ' respondo 'n'
                    ```
                start_code: '{print} ''Saluton, mondo'''
            5:
                story_text: |
                    En Nivelo 5 estas io nova, la `{if}`! Per la `{if}`, oni povas elekti inter du malsamaj opcioj.
                    La jena kodo presos «bone», se vi tajpos «Hedy» kiel nomon, kaj «ba!», se vi tajpos ion alian.
                    `{ask}` kaj `{print}` daŭre funkcias kiel en Nivelo 4.
                example_code: |
                    ```
                    nomo {is} {ask} 'kio estas via nomo?'
                    {if} nomo {is} Hedy {print} 'bone' {else} {print} 'ba!'
                    ```
                start_code: |-
                    nomo {is} {ask} 'Kio estas via nomo?'
                    {if} nomo {is} Hedy {print} 'bone!' {else} {print} 'ba!'
            6:
                story_text: |
                     En ĉi tiu nivelo, vi lernas ion novan: vi povas nun ankaŭ kalkuli.

                     La pluso estas facila; vi skribas ĝin simile al matematiko: `5 + 5` ekzemple. La minuso ankaŭ funkcias bone, jen `5 - 5`.

                     La multipliko estas iom malsamaj, ĉar ne ekzistas la multipliko-signo en via klavaro. Nu, serĉu; ĝi vere ne ekzistas!
                     Tial oni multiplikas per la asterisko (ofte la klavo 8 kun la majuskliga klavo): `5 * 5`. Legu tion kiel «5 multiplikite per 5», por helpi la memoradon.
                example_code: |
                    ```
                    {print} '5 plus 5 estas ' 5 + 5
                    {print} '5 minus 5 estas ' 5 - 5
                    {print} '5 multiplikite per 5 estas ' 5 * 5
                    ```
                start_code: '{print} ''5 multiplikite per 5 estas '' 5 * 5'
            7:
                story_text: |
                    Nivelo 7 enkondukas la komandon `{repeat}`. `{repeat}` povas esti uzata por ruli unu linion da kodo plurfoje.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy estas amuza!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy estas amuza!'''
            8:
                story_text: |
                    `{ask}` kaj `{print}` ankoraŭ funkcias kiel vi konas ilin. Sed `{if}`, `{else}` kaj `{repeat}` ŝanĝiĝis!
                    Vi nun povas ekzekuti grupojn de kodo kune, sed vi devos *deŝovi* la kodon.
                    Tio signifas meti kvar spacojn ĉe la komenco de la linio. Vi ankaŭ devos deŝovi kiam vi nur volas krei blokon de unu linio.
                example_code: |
                    Jen kiel la komando `{repeat}` funkcias nun:
                    ```
                    {repeat} 5 {times}
                        {print} 'Saluton ĉiuj'
                        {print} 'Jen ĉio ripetota 5 fojojn'
                    ```
                    Jen kiel la komandoj `{if}` kaj `{else}` funkcias nun:

                    ```
                    nomo {is} {ask} 'Kio estas via nomo?'
                    {if} nomo {is} Hedy
                        {print} 'Bonvenon Hedy'
                        {print} 'Vi povas ludi per via komputilo!'
                    {else}
                        {print} 'ENTRUDULO!'
                        {print} 'Vi ne rajtas uzi ĉi tiun komputilon!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Saluton ĉiuj'
                        {print} 'Jen linio represota 5 fojojn'
            9:
                story_text: |
                    En ĉi tiu nivelo, oni povas ne nur uzi plurajn liniojn kun `{if}` kaj `{repeat}`, sed oni ankaŭ povas kunmeti ilin!
                    La jena ekzemplo enhavas `{if}`-blokon ene de `{repeat}`-bloko. La mala ordo estas ankaŭ permesata, kaj ankaŭ `{if}` ene de `{if}` kaj `{repeat}` ene de `{repeat}`.
                    Provu tion!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        manĝaĵo = {ask} 'Kion vi volas manĝi?'
                        {if} manĝaĵo {is} pico
                            {print} 'bone!'
                        {else}
                            {print} 'vi preferu picon'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        manĝaĵo = {ask} 'Kion vi volas manĝi?'
                        {if} manĝaĵo {is} pico
                            {print} 'Bonege!'
                        {else}
                            {print} 'Pico estas preferinda.'
            10:
                story_text: |-
                    En ĉi tiu nivelo, ni lernas novan kodon nomitan `{for}`. Per `{for}` oni povas fari liston kaj uzi ĉiujn elementojn.
                    `{for}` kreas blokon simile al `{repeat}` kaj `{if}`; do ĉiuj linioj en la bloko devas komenci per spacetoj.
                example_code: |
                    ```
                    bestoj {is} hundo, kato, fiŝo
                    {for} besto {in} bestoj
                      {print} 'Mi amas ' besto 'n'
                    ```
                start_code: |-
                    bestoj {is} hundo, kato, fiŝo
                    {for} besto {in} bestoj
                      {print} 'Mi amas ' besto 'n'
            11:
                story_text: |-
                    `{print}` funkcias same, sed ni ebligis novan formon de `{for}`. Oni nun povas uzi `{for} numero {in} {range} 1 {to} 5` kaj uzi `numero` en via programo.
                    Provu ĝin por vidi kio okazos! Ne forgesu deŝovon post la deklaroj `{for}` kaj `{if}`. (Tio signifas komenci linion per kvar spacoj.)
                start_code: |-
                    {for} nombro {in} {range} 1 {to} 5
                        {print} nombro
            12:
                story_text: |-
                    **Decimalaj frakcioj**
                    Ĝis nun, Hedy ne permesis decimalajn frakciojn kiel «1.5», sed nun ĝi ja permesas tiujn. Notu, ke komputiloj uzas la punkton `.` (ne la komon `,`) por decimalaj frakcioj.
                example_code: |
                    ```
                    {print} 'Du kaj duono plus du kaj duono estas…'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'Decimalaj nombroj nun postulas punkton (ne komon)'
                    {print} 2.5 + 2.5
            13:
                story_text: Ni nun lernos `{and}` kaj `{or}`! Se oni volas kontroli du kondiĉojn, oni ne devas uzi du `{if}`-ojn sed povas uzi `{and}` kaj `{or}`. Se oni uzas `{and}`, ambaŭ kondiĉoj, maldekstra kaj dekstra de la `{and}`, devas esti veraj. Oni ankaŭ povas uzi `{or}`. Tiam nur unu kondiĉo
                    devas esti vera.
                example_code: |
                    ```
                    nomo = {ask} 'kio estas via nomo?'
                    aĝo = {ask} 'kia estas via aĝo?'
                    {if} nomo {is} 'Hedy' {and} aĝo {is} 2
                        {print} 'Vi estas la vera Hedy!'
                    ```
                start_code: |-
                    nomo = {ask} 'Kio estas via nomo?'
                    aĝo = {ask} 'Kio estas via aĝo?'
                    {if} nomo {is} 'Hedy' {and} aĝo {is} 2
                        {print} 'Vi estas la vera Hedy!'
            14:
                story_text: |
                    Ni lernos pli da novaj sintaksaĵoj. Vi eble jam konas ilin pro matematiko: la `<` kaj `>`.
                    La `<` kontrolas, ĉu la unua nombro estas pli malgranda ol la dua: ekzemple `aĝo < 12` kontrolas, ĉu `aĝo` estas pli malgranda ol `12`.
                    Se vi volas kontroli, ĉu la unua nombro estas pli malgranda aŭ egala al la dua, vi povas uzi `<=`: ekzemple, `aĝo <= 11`.
                    La `>` kontrolas, ĉu la unua nombro estas pli granda ol la dua: ekzemple, `poentaro > 10` kontrolas, ĉu `poentaro` estas pli granda ol `10`.
                    Se oni volas kontroli, ĉu la unua nombro estas pli granda aŭ egala al la dua, oni povas uzi `>=`: ekzemple, `poentaro >= 11`.
                    Oni uzas tiujn komparojn en `{if}` jene:
                example_code: |
                    ```
                    aĝo = {ask} 'Kian aĝon vi havas?'
                    {if} aĝo > 12
                        {print} 'Vi estas pli aĝa ol mi!'
                    ```
                start_code: |-
                    aĝo = {ask} 'Kia estas via aĝo?'
                    {if} aĝo < 13
                        {print} 'Vi estas malpli aĝa ol mi!'
                    {else}
                        {print} 'Vi estas pli aĝa ol mi!'
            15:
                story_text: |-
                    Ni lernas novan iteracion, `{while}`! Tio daŭrigas la iteracion tiel longe, kiel la aserto estas vera.
                    Do ne forgesu ŝanĝi la valoron en la iteracio.

                    La ekzempla kodo daŭre ruliĝas ĝis ĝusta respondo estos donita.
                    Se la ĝusta respondo neniam estos donita, la iteracio neniam finiĝos!
                example_code: |
                    ```
                    respondo = 0
                    {while} respondo != 25
                        respondo = {ask} 'Kio estas 5 multiplikite per 5?'
                    {print} 'Jen la ĝusta respondo'
                    ```
                start_code: |-
                    respondo = 0
                    {while} respondo != 25
                        respondo = {ask} 'Kio estas 5 multiplikite per 5?'
                    {print} 'Jen ĝusta respondo'
            16:
                story_text: |-
                    Ni faros listojn laŭ la maniero de Python, kun rektaj krampoj ĉirkaŭ la listoj! Ni ankaŭ konservas la citilojn ĉirkaŭ ĉiu ero, kiel ni lernis en antaŭaj niveloj.
                    Vi povas ankaŭ uzi la rektajn krampojn por indiki lokon en la listoj.
                example_code: |
                    ```
                    amikoj = ['Amano', 'Benjameno', 'Cecilio']
                    bonŝancaj_numeroj = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'la bonŝanca numero de ' amikoj[i]
                        {print} 'estas ' bonŝancaj_numeroj[i]
                    ```
                start_code: |-
                    fruktoj = ['pomo', 'banano', 'ĉerizo']
                    {print} fruktoj
            17:
                story_text: |-
                    Nun ni iom ŝanĝos la regulojn pri la deŝovo. Ĉiufoje kiam oni bezonas deŝovon, oni uzu dupunkton `:` ĉe la fino de la linio antaŭ la deŝovo.

                    En ĉi tiu nivelo, oni povas ankaŭ uzi novan komandon: `{elif}`. `{elif}` estas mallongigo de `{else} {if}`, kaj oni bezonas ĝin kiam oni volas havi 3 (aŭ pli da) opciojn.
                    Jen:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Jen mi venas!'
            18:
                story_text: Ni alvenis al vera Python-kodo! Tio signifas, ke ni devas uzi rondajn krampojn kun {print} kaj {range} de nun.
                start_code: |-
                    nomo = 'Hedy'
                    {print}('Mia nomo estas ', nomo)
    dice:
        name: Ĵetkuboj
        default_save_name: Ĵetkuboj
        description: Fari viajn proprajn ĵetkubojn
        levels:
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas elekti el listo. Per tio, oni povas igi la komputilon elekti unu flankon de ĵetkubo.
                    Rigardu tiujn ludojn, kiujn vi havas en via ŝranko hejme.
                    Ĉu ekzistas ludoj uzantaj (specialajn) ĵetkubojn? Vi ankaŭ povas kopii ĝin per ĉi tiu kodo.
                    Ekzemple, la ĵetkubo de la ludo Lumbrikoj kun la numeroj 1 ĝis 5 kaj lumbriko sur ĝi.

                    ![Ĵetkubo de Lumbrikoj montrante la numerojn 1 ĝis 5 kaj lumbrikon](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    {print} elektoj {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: '{print} Kion indikos la ĵetkubo ĉi foje?'
            4:
                story_text: |
                    En ĉi tiu nivelo ni povas fari frazojn kun la die valoro en la frazo, kun citaĵoj kompreneble.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta. Ĉu vi povas fini la kodon?
                start_code: '{print} ''Kion indikos la ĵetkubo ĉi-foje?'''
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    ĵeto {is} _
                    {print} 'la rezulto de via ĵeto estas' _
                    {if} _ {is} lumbriko {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: '{print} ''Kion indikos la ĵetkubo ĉi-foje?'''
            6:
                story_text: |
                    Vi ankaŭ povas igi Lumbrikon morti denove en ĉi tio, sed nun vi ankaŭ povas kalkuli kiom da poentoj estis rulitaj.
                    Vi eble scias, ke la vermo nombras 5 poentojn por Earthworms. Nun post ruliĝo vi povas tuj kalkuli kiom da poentoj vi ĵetis.
                    Jen la kodo por kalkuli poentojn por unu ĵetkubo:
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    poentaro = 0
                    ĵeto = elektoj {at} {random}
                    {print} 'la rezulto de via ĵeto estas' ĵeto
                    {if} ĵeto {is} lumbriko poentaro = poentaro + 5 {else} poentaro = poentaro + ĵeto
                    {print} 'those are' poentaro ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Ĉu vi sukcesis kalkuli la poentaron por 8 ĵetkuboj? Tio postulis multe da tranĉado kaj algluado, ĉu ne? Ni faciligos tion en la nivelo 7!
                start_code: '{print} ''Kion indikos la ĵetkubo ĉi-foje?'''
            7:
                story_text: |
                    Vi ankaŭ povas fari ĵetkubon denove en la nivelo 5. Per la kodo `{repeat}` vi povas facile ruliĝi tutan manon da ĵetkuboj.
                    Provu fini la ekzemplan kodon! La strekoj devus enhavi plurajn komandojn kaj signojn.

                    Sed eble vi volas fari tute alian ĵetkubon. Kompreneble vi povas!
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: '{print} ''Kion indikos la ĵetkubo ĉi-foje?'''
            10:
                story_text: |
                    Ĉu la ĵetado de la ĵetkuboj daŭras tro longe? En ĉi tiu nivelo, vi povas lasi Hedy ĵeti ĉiujn ĵetkubojn samtempe!
                example_code: |
                    ```
                    ludantoj = Anno, Johano, Jiŝajo
                    elektoj = 1, 2, 3, 4, 5, 6
                    {for} ludanto {in} ludantoj
                        {print} 'La rezulto de la ĵeto de ' ludanto ' estas ' elektoj {at} {random}
                        {sleep}
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    En ĉi tiu ludo, vi ĵetadas ĵetkubon, provante ricevi seson per malmultaj provoj laŭeble.
                example_code: |
                    ```
                    opcioj = 1, 2, 3, 4, 5, 6
                    {print} 'Provu ricevi seson per malmultaj provoj laŭeble!'
                    rezulto = 0
                    provoj = 0
                    {while} rezulto != 6
                        rezulto = opcioj {at} {random}
                        {print} 'Via ĵeto montras ' rezulto
                        provoj = provoj + 1
                    {print} 'Jes! Vi ricevis seson per ' provoj ' provoj.'
                    ```
                start_code: '# via kodo ĉi tie'
    dishes:
        name: Lavi telerojn?
        default_save_name: Telerlavado
        description: Komputile elektu la lavonton de la teleroj (Komencu je Nivelo 2)
        levels:
            3:
                story_text: |
                    Ĉu vi ĉiam malkonsentas hejme pri kiu hodiaŭ devos lavi la telerojn aŭ malplenigi la rubujon?
                    Do vi povas lasi la komputilon elekti tre juste. Vi povas programi tion en ĉi tiu nivelo!
                    Vi unue faru liston de la familianoj. Poste elektu el la listo per `{at} {random}`.
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} homoj {at} {random}
                    ```
                story_text_2: |
                    Ĉu vi ne emas prepari la telerojn mem? Haki la programon por forigi vian nomon de la listo.
                start_code: '{print} Kiu lavos la telerojn?'
            4:
                story_text: |
                    Per citiloj vi povas fari vian vazlavadon planadon pli bela.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta.

                    Ĉu vi povas kompletigi la kodon plenigante la vakojn? Ĉiu malplena devas esti anstataŭigita per unu vorto de simbolo.

                    Konsilo: Ne forgesu la citilojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} _ la telerojn lavu _
                    {sleep}
                    {print} homoj {at} _
                    ```
                start_code: '{print} ''Kiu lavos la telerojn?'''
            5:
                story_text: |
                    Per la `{if}` vi nun povas amuziĝi pli kun elekto en la programo. Vi povas havi vian programon respondi al la elekto kiun la komputilo faris.

                    Ĉu vi povas fini la kodon por ke ĝi presiĝu «domaĝe» kiam estas via vico kaj alie «jes!»?
                    Ne forgesu la citaĵojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    lavonto {is} homoj {at} {random}
                    {if} lavonto {is} Sofio {print} _ domaĝe ke mi devas lavadi _ {else} {print} 'feliĉe neniuj teleroj ĉar' _ 'jam lavas'
                    ```
                start_code: '{print} ''Kiu lavos la telerojn?'''
            6:
                story_text: |
                    Kiom ofte ĉiuj lavos la telerojn? Ĉu tio estas justa? Vi povas kalkuli tion en ĉi tiu nivelo.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    emilio_lavoj = 0
                    lavonto = homoj {at} {random}
                    {print} 'La lavonto estas' lavonto
                    {if} lavonto {is} Emilio emilio_lavoj = emilio_lavoj + 1
                    {print} 'Emilio lavos la telerojn ĉi-semajne' emilio_lavoj 'fojojn'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    Se vi estas ege malbonŝanca, la antaŭa programo eble elektos vin al la pladoj por la tuta semajno! Tio ne estas justa!
                    Por krei pli justan sistemon vi povas uzi la komandon `{remove}` por forigi la elektitan personon el la listo. Tiel vi ne devas refari la pladojn ĝis ĉiuj havas turnon.

                    Lundo kaj mardo estas pretaj por vi! Ĉu vi povas aldoni la reston de la semajno?
                    Kaj... ĉu vi povas elpensi solvon por kiam via listo estas malplena?
                example_code_2: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    lavonto = homoj {at} {random}
                    {print} 'Lunde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    {print} 'Marde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    ```
                start_code: '{print} ''Kiu lavos la telerojn?'''
            7:
                story_text: |
                    Per `{repeat}` oni povas ripeti pecojn da kodo. Vi povas uzi tion por determini la telerlavontojn por tuta semajno.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    {repeat} _ _ {print} 'la lavonto estas' _
                    ```
                start_code: '{print} ''Kiu lavos la telerojn?'''
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas fari eĉ pli bonan lavadhoraron.
                example_code: |
                    ```
                    tagoj = Lundo, Mardo, Merkolo, Ĵaŭdo, Vendredo, Sabato, Dimanĉo
                    nomoj = panjo, paĉjo, Emilio, Sofio
                    {for} tago {in} tagoj
                        {print} nomoj {at} {random} ' lavas telerojn je ' tago
                    ```
                start_code: '# via kodo ĉi tie'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Aŭguristo
        default_save_name: Aŭguristo
        description: Igu Hedy aŭguri la estontecon
        levels:
            1:
                story_text: |
                    Ĉu vi iam estis en karnavalo kaj antaŭdiris vian estontecon de aŭguristo? Aŭ ĉu vi iam ludis kun magia ok pilko?
                    Tiam vi verŝajne scias, ke ili vere ne povas antaŭdiri vian estontecon, sed estas tamen amuze ludi!

                    En la venontaj niveloj vi povas lerni kiel krei vian propran aŭguran maŝinon!
                    En nivelo 1 vi povas komenci facile lasante Hedy prezenti sin kiel aŭguristo kaj lasi ŝin {echo} la respondojn de la ludantoj.
                    Jene:
                example_code: |
                    ```
                    {print} Saluton, mi estas Hedy la aŭguristo!
                    {ask} Kiu vi estas?
                    {print} Mi rigardu mian kristalan globon
                    {print} Mi vidas… mi vidas…
                    {echo} Via nomo estas
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# via kodo ĉi tie'
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    En ĉi tiu ekzemplo, la ludanto povas demandi Hedy ĉu-demandon, kaj Hedy elektos hazardan respondon por vi.
                    ```
                    {print} Mi estas Hedy la aŭguristo!
                    demando {is} {ask} Kion vi volas ekscii?
                    {print} Jen tio, kion vi volas ekscii: demando
                    respondoj {is} jes, ne, eble
                    {print} Laŭ mia kristala globo…
                    {sleep} 2
                    {print} respondoj {at} {random}
                    ```
                story_text_2: |
                    Nun, Hedy povas respondi nur «jes», «ne» aŭ «eble». Ĉu vi povas doni al Hedy pliajn eblajn respondojn, kiel «certe» aŭ «demandu denove»? <!--{ask}-->
                start_code: '# via kodo ĉi tie'
            4:
                story_text: |
                    Ĉi tiu nivelo ne havas novajn funkciojn, sed permesas al vi ekzerci vin al uzado de la citiloj.
                    Vi povas refari vian kodon de Nivelo 3; nepre aldonu la citilojn en la ĝustaj lokoj!

                    Atentu, ke en Nivelo 3 oni ne povis uzi la vorton «demando» kiel kaj la nomo de la variablo kaj ordinara presebla vorto.
                    La citiloj en Nivelo 4 ebligas tion!

                    Ankaŭ atentu, ke nun, pro la devigo de citiloj, Hedy konfuziĝas, kiam oni uzas la apostrofon por mallongigoj kiel «l' espero» aŭ «dank' al».
                    Nepre forigu tiajn apostrofojn kaj ŝanĝu la literumadon al «lespero» aŭ «dankal».
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    demando {is} {ask} 'Kion vi volas ekscii?'
                    {print} 'Jen via demando: ' demando
                    respondoj {is} jes, ne, eble
                    {print} 'Laŭ mia kristala globo…'
                    {sleep} 2
                    {print} respondoj {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Mi povas aŭguri, ĉu vi gajnos la loterion morgaŭ!'
                    homo {is} {ask} 'Kiu vi estas?'
                    {if} homo {is} Hedy {print} 'Vi certe gajnos!🤩' {else} {print} 'Misfortune, aliulo gajnos!😭'
                    ```
                start_code: '# via kodo ĉi tie'
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    aĝo = {ask} 'Kia estas via aĝo?'
                    gefratoj = {ask} 'Kiom da gefratoj vi havas?'
                    alto = {ask} 'Kiom alta vi estas centimetre?'
                    infanoj = alto / aĝo
                    infanoj = infanoj - gefratoj
                    {print} 'Vi havos…'
                    {sleep}
                    {print} infanoj ' infanojn!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I will predict how smart you are!'
                    futbalo = {ask} 'On a scale 1-10 how much do you love football?'
                    bananoj = {ask} 'How many bananas did you eat this week?'
                    higieno = {ask} 'How many times did you wash your hands today?'
                    rezulto = bananoj + higieno
                    rezulto = rezulto * futbalo
                    {print} 'You are ' rezulto ' percent smart.'
                    ```
                start_code: '# via kodo ĉi tie'
            7:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{repeat}` por igi vian komputilon aŭguri plurfoje.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Vi povas demandi tri fojojn!'
                    {repeat} 3 {times} demando = {ask} 'Kion vi volas ekscii?'
                    respondo = jes, ne, eble
                    {repeat} 3 {times} {print} 'Laŭ mia kristala globo… ' respondo {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'You can {ask} me 3 questions.'
                    respondoj = jes, ne, eble
                    {repeat} 3 {times}
                       demando = {ask} 'What do you want to know?'
                       {print} demando
                       {sleep}
                       {print} 'Laŭ mia kristala globo…' respondoj {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel programi la ludon MASH (domego, apartamento, barako, domo). En ĉi tiu ludo vi povas aŭguri por ĉiuj ludantoj samtempe, kiel aspektos iliaj estontecoj.
                example_code: |
                    ```
                    domoj = domego, apartamento, barako, domo
                    amoj = neniu, reĝo, najbaro, vera amanto
                    dorlotbestoj = hundo, kato, elefanto
                    nomoj = Johanino, Rikardo, Jakobo
                    {for} nomo {in} nomoj
                        {print} nomo ' loĝos en ' domoj {at} {random}
                        {print} nomo ' edz(in)iĝos kun ' amoj {at} {random}
                        {print} nomo ' ricevos ' dorlotbestoj {at} {random} 'n kiel sian dorlotbeston.'
                        {sleep}
                    ```
                start_code: '# via kodo ĉi tie'
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas montri plurvortajn aŭguraĵojn jene:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Hantata domo
        default_save_name: Hantata domo
        description: Eskapu el la hantata domo
        levels:
            1:
                story_text: |
                    En ĉi tiu aventuro vi laboras por krei ludon, en kiu vi devas eskapi el hantita domo elektante la ĝustan pordon.
                    Se vi elektas la ĝustan pordon vi pluvivos, sed se ne terura monstro povus...

                    En Nivelo 1, ni komencas nian fantomludon inventante timigan rakonton kaj demandas al la ludanto kiun monstron ili vidos en la hantita domo.
                example_code: |
                    ```
                    {print} Kiel mi alvenis ĉi tien?
                    {print} Mi memoras, ke mia amiko diris al mi iri en la malnovan domegon...
                    {print} kaj subite ĉio nigriĝis.
                    {print} Sed kiel mi finiĝis sur la planko...?
                    {print} Mia kapo doloras kiel mi estis trafita de basbalbatilo!
                    {print} Kio estas tiu sono?
                    {print} Ho ne! Mi sentas, ke mi ne estas sola en ĉi tiu domo!
                    {print} Mi devas eliri de ĉi tie!
                    {print} Estas 3 pordoj antaŭ mi..
                    {ask} Kiun pordon mi elektu?
                    {echo} Mi elektas pordon
                    {print} ...?
                    ```
                story_text_2: |
                    Ĉu vi povas fini la timigan rakonton? Aŭ elpensu vian propran fantomdoman rakonton?
                start_code: '{print} Kiel mi alvenis ĉi tien?'
            2:
                story_text: |
                    En ĉi tiu hantata domo, vi povas montri viajn monstrojn per vinjetosignoj. Kompreneble vi ankaŭ povas uzi vortojn.
                example_code: |
                    ```
                    monstro_1 {is} 👻
                    monstro_2 {is} 🤡
                    monstro_3 {is} 👶
                    {print} Vi eniras la hantatan domon.
                    {print} Subite vi vidas monstro_1
                    {print} Vi kuras en la alian ĉambron, sed monstro_2 atendas vin tie!
                    {print} Ho ne! Rapidu al la kuirejo.
                    {print} Sed dum vi eniras monstro_3 atakas vin!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: monstro1 {is} _
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# via kodo ĉi tie'
            4:
                story_text: |
                    En ĉi tiu nivelo vi lernas kiel uzi citilojn en viaj ludoj.
                    Ĉu vi povas igi vian Hantatan Domon rulebla en Nivelo 4?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
                start_code: '# via kodo ĉi tie'
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    ludanto = vivanta
                    pordoj = 1, 2, 3
                    monstroj = kadavromonstro, vampiro, araneego
                    {repeat} 3 {times}
                        {if} ludanto {is} vivanta
                            ĝusta_pordo {is} pordoj {at} {random}
                            {print} 'Jen tri pordoj antaŭ vi…'
                            elektita_pordo = {ask} 'Kiun pordon elekti?'
                            {if} elektita_pordo {is} ĝusta_pordo
                                {print} 'Neniu monstro ĉi tie!'
                            {else}
                                {print} 'Vin manĝas ' monstroj {at} {random}
                                ludanto = mortinta
                        {else}
                            {print} 'FINO'
                    {if} ludanto {is} vivanta
                        {print} 'Bonege! Vi pretervivis!'
                    ```
                start_code: '{print} ''Eskapu el la hantata domo!'''
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Eskapu el la Hantata Domo!'
                    ludanto {is} vivanta
                    pordoj = 1, 2, 3
                    monstroj = kadavromonstro, vampiro, araneego
                    {for} i {in} {range} 1 {to} 3
                        {if} ludanto {is} vivanta
                            ĝusta_pordo = pordoj {at} {random}
                            {print} 'Ĉambro ' i
                            {print} 'Jen tri pordoj antaŭ vi…'
                            elektita_pordo = {ask} 'Kiun pordon vi elektos?'
                            {if} elektita_pordo {is} ĝusta_pordo
                                {print} 'Neniu monstro ĉi tie!'
                            {else}
                                {print} 'Vin formanĝas ' monstroj {at} {random}
                                ludanto = mortinta
                        {else}
                            {print} 'FINO'
                    {if} ludanto {is} vivanta
                        {print} 'Bonege! Vi pretervivis!'
                    ```
                start_code: '{print} ''Eskapu el la hantata domo!'''
            14:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi la simbolojn `<` kaj `>` por kalkuli vivojn en via ludo.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    pordoj = 1, 2, 3
                    monstroj = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            bona_pordo = pordoj {at} {random}
                            monstro = monstroj {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} bona_pordo == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monstro
                                {if} monstro == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Ĝi dormas'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'FINO'
                    ```
                start_code: '# via kodo ĉi tie'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    nombroj = [1, 2, 3]
                    i = nombroj[{random}]
                    sono = ['gruntadon', 'rikanon', 'susurantajn vespertflugilojn']
                    monstroj = ['kadavromonstro', 'sorĉistino', 'vampiro']
                    malbona_rezulto = ['Via cerbo estas formanĝita', 'Vi estas eterne malbenita', 'Vi estas mordita']
                    bona_rezulto = ['Vi ĵetas la ŝinkon. La kadavromonstro, distrita, ekmanĝas ĝin.', 'Vi ekbruligas la kurtenojn. La sorĉistino fuĝas pro timo de la fajro.', 'La vampiro malamas la ajlon kaj fuĝas.']
                    armiloj = ['ŝinko', 'fajrilo', 'ajlo']
                    {print} 'Vi staras antaŭ malnova domego'
                    {print} 'Io estas fia ĉi tie'
                    {print} 'Vi aŭdas ' sono[i]
                    {print} 'Vi esploros ĝin'
                    {print} 'Vi eniras la kuirejon kaj vidas fajrilon, krudan ŝinkon kaj ajlon.'
                    via_armilo = {ask} 'Kion vi prenas?'
                    {print} 'Portante vian ' via_armilo 'n, vi eniras la ĉefĉambron'
                    {print} 'Tie troviĝas ' monstroj[i]
                    bezonata_armilo = armiloj[i]
                    {if} via_armilo == bezonata_armilo
                        {print} 'Vi uzas vian ' via_armilo 'n'
                        {print} bona_rezulto[i]
                        {print} 'VI GAJNAS!'
                    {else}
                        {print} 'Vi elektis maltaŭgan armilon…'
                        {print} malbona_rezulto[i]
                        {print} 'FINO'
                    ```
                start_code: '# via kodo ĉi tie'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Lingvo
        default_save_name: Lingvo
        description: Praktiku vortojn de fremda lingvo
        levels:
            5:
                story_text: |
                    Faru vian propran programon por ekzerci vian vortprovizon en nova lingvo.
                example_code: |
                    ```
                    {print} 'Lernu la francan!'
                    kato {is} {ask} '🐱'
                    {if} kato {is} chat {print} 'Bonege!'
                    {else} {print} 'Ne, kato estas chat'
                    rano {is} {ask} '🐸'
                    {if} rano {is} grenouille {print} 'Bonege!'
                    {else} {print} 'Ne, rano estas grenouille'
                    ```
                start_code: '# via kodo ĉi tie'
            16:
                story_text: |
                    Faru vian propran programon por ekzerci vian vortprovizon en nova lingvo.
                example_code: |
                    ```
                    francaj_vortoj = ['bonjour', 'ordinateur', 'pomme de terre']
                    traduko = ['saluton', 'komputilo', 'terpomo']
                    poentaro = 0
                    {for} i {in} {range} 1 {to} 3
                        respondo = {ask} 'Kion signifas ' francaj_vortoj[i] '?'
                        ĝusta = traduko[i]
                        {if} respondo == ĝusta
                            {print} 'Ĝuste!'
                            poentaro = poentaro + 1
                        {else}
                            {print} 'Malĝuste, ' francaj_vortoj[i] ' signifas la jenon: ' traduko[i]
                    {print} 'Vi respondis ' poentaro ' fojojn ĝuste.'
                    ```
                start_code: '# via kodo ĉi tie'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Papago
        default_save_name: Papago
        description: Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
        levels:
            1:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    {ask} kio estas via nomo?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
                start_code: '{print} Mi estas Hedy la papago'
            2:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    nomo {is} {ask} kio estas via nomo?
                    {print} nomo
                    {sleep}
                    {print} grak
                    {sleep}
                    {print} nomo
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                start_code: '{print} Mi estas Hedy la papago!'
            3:
                story_text: |
                    Instruu al via papago novan vorton per `{add}`.
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} Trejnu vian papagon!
                    nova_vorto {is} {ask} Kiun vorton instrui?
                    {add} nova_vorto {to_list} vortoj
                    {print} 🧒 Diru nova_vorto , Hedy!
                    {print} 🦜 vortoj {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
                start_code: '# Write your code here'
            5:
                story_text: |
                    Rekompencu vian papagon, se ĝi diras la ĝustan vorton!
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} 'Trejnu vian papagon!'
                    nova_vorto {is} {ask} 'Kiun vorton instrui?'
                    {add} nova_vorto {to_list} vortoj
                    dirita_vorto {is} vortoj {at} {random}
                    {print} '🧒 Diru «' nova_vorto '», Hedy!'
                    {print} '🦜 ' dirita_vorto
                    {if} dirita_vorto {is} nova_vorto {print} '🧒 Bonege, Hedy! 🍪'
                    {else} {print} '🧒 Ne, Hedy! Diru «' nova_vorto '»'
                    ```
                start_code: '# via kodo ĉi tie'
    piggybank:
        name: Ŝparujo
        default_save_name: Ŝparujo
        description: Kalkulu vian poŝmonon!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
                start_code: '# via kodo ĉi tie'
            14:
                story_text: |
                    En ĉi tiu nivelo, per la komando `{if}` de Hedy, vi povas kontroli, ĉu vi ŝparis sufiĉe da mono!
                example_code: |
                    ```
                    mono = {ask} 'Kiom da mono vi ŝparis?'
                    bezono = {ask} 'Kiom da mono vi bezonas?'
                    poŝmono = {ask} 'Kiom da poŝmono vi ricevas ĉiusemajne?'
                    ŝparenda = bezono - mono
                    semajnoj = ŝparenda / poŝmono
                    {if} bezono > mono
                        {print} 'Vi devas ŝpari iom pli!'
                        {print} 'Vi bezonos ' semajnoj ' pliajn semajnojn.'
                    {else}
                        {print} 'Bonege! Vi havas sufiĉe'
                        {print} 'Ni ekbutikumu!'
                    ```
                start_code: '# via kodo ĉi tie'
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# place your code here'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Kvizmajstro
        default_save_name: Kvizmajstro
        description: Faru vian propran kvizon!
        levels:
            14:
                story_text: |
                    En ĉi tiu aventuro vi povas fari vian propran kvizon! Plenigu la vakojn, aldonu pliajn demandojn kaj ĝuu vian propran kvizon!
                    Vi povas fari kvizon pri ĉio, kion vi ŝatas: via ŝatokupo, via plej ŝatata besto, via plej ŝatata libro aŭ io ajn!
                example_code: |
                    ```
                    {print} 'Faru vian propran kvizon'
                    poentoj_a = 0
                    poentoj_b = 0
                    {print} 'Demando'
                    {print} 'Respondopcio A'
                    {print} 'Respondopcio B'
                    respondo = {ask} 'Kiu respondo?'
                    {if} respondo == 'A'
                        poentoj_a = poentoj_a + 1
                    {if} respondo == 'B'
                        poentoj_b = poentoj_b + 1
                    {print} 'Fino de la kvizo!'
                    {print} 'Ni vidu la rezultojn!'
                    {if} poentoj_a > poentoj_b
                        {print} 'Vi apartenas al la A-klubo'
                    {if} poentoj_b > poentoj_a
                        {print} 'Vi apartenas al la B-klubo'
                    ```
                start_code: '# via kodo ĉi tie'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restoracio
        default_save_name: Restoracio
        description: Kreu vian propran virtualan restoracion
        levels:
            1:
                story_text: |
                     En Nivelo 1, vi povas krei vian propran virtualan restoracion kaj preni la mendojn de viaj gastoj.
                example_code: |
                    ```
                    {print} Bonvenon al Restoracio Hedy 🍟
                    {ask} Kion vi volas mendi?
                    {echo} Do vi volas mendi
                    {print} Dankon pro via mendo!
                    {print} Ĝi estas kuirata!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: '# via kodo ĉi tie'
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Bonvenon al Restoracio Hedy!
                    {print} Hodiaŭ ni servas picon aŭ lasanjojn.
                    manĝaĵo {is} {ask} Kion vi ŝatus manĝi?
                    {print} Bonega elekto! La manĝaĵo estas mia plej ŝatata!
                    topping {is} {ask} Ĉu vi ŝatus viandon aŭ legomojn sur tio?
                    {print} manĝaĵo kun topping estas survoje!
                    trinkas {is} {ask} Kion vi ŝatus trinki per tio?
                    {print} Dankon pro via mendo.
                    {print} Viaj manĝaĵoj kaj trinkaĵoj estos ĝuste tie!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
                start_code: '# via kodo ĉi tie'
            3:
                story_text: |
                    Ĉu vi havas problemon decidante, kion vi volas manĝi por vespermanĝo? Vi povas lasi Hedy elekti por vi!
                    Simple tajpu listojn de viaj plej ŝatataj (aŭ malplej ŝatataj) manĝoj, kaj Hedy povas hazarde elekti vian vespermanĝon.
                    Vi ankaŭ povas iomete amuziĝi, lasante Hedy ankaŭ elekti la prezon de via vespermanĝo! Kion vi ricevos?
                example_code: |
                    ```
                    {print} Bonvenon al la Hazarda Restoracio de Hedy!
                    {print} La ununura restoracio, kiu hazarde elektos vian manĝon kaj ĝian prezon por vi!
                    antaŭmanĝaĵoj {is} salato, supo, krudaĵo
                    ĉefpladoj {is} pico, brussels sprouts, spagetoj
                    desertoj {is} kuketoj, glaciaĵo, francaj fromaĝoj
                    trinkaĵoj {is} kolao, biero, akvo
                    prezoj {is} 1 spesmilo, 10 spesmiloj, 100 spesmiloj
                    {print} Vi komencos per: antaŭmanĝaĵoj {at} {random}
                    {print} Then we'll serve: ĉefpladoj {at} {random}
                    {print} Kaj kiel deserto: desertoj {at} {random}
                    {print} You will get a trinkaĵoj {at} {random} por trinki
                    {print} Jen la totalo: prezoj {at} {random}
                    {print} Dankon kaj ĝuu vian manĝon!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mistera laktotrinkaĵo
                    ingrediencoj {is} frago, ĉokolado, vanilo
                    alergio {is} {ask} Ĉu vi estas alergia al iu ingredienco?
                    {remove} alergio {from} ingrediencoj
                    {print} Vi ricevas laktotrinkaĵon kun ingrediencoj {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            4:
                story_text: |
                    En ĉi tiu nivelo, oni devas uzi citilojn kiam oni uzas la komandon `{print}`.
                    Ĉu vi povas igi vian kodon de la antaŭaj niveloj funkcii ankaŭ en ĉi tiu nivelo aldonante la citilojn?

                    Atentu! En la antaŭaj niveloj apostrofoj estis permesitaj en la teksto, sed en ĉi tiu nivelo Hedy konfuzos ilin por citiloj kaj la kodo ne funkcios!
                    Do anstataŭ tajpi `{print} Today we're serving pizza` , oni tajpu `{print} 'Today we are serving pizza'`
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    {print} 'Hodiaŭ ni havas picon kaj lasanjojn.'
                    manĝaĵo {is} {ask} 'Kion vi volas manĝi?'
                    {print} 'Great choice! The ' manĝaĵo ' is my favorite!'
                    topping {is} {ask} 'Would you like meat or veggies on that?'
                    {print} manĝaĵo ' with ' topping ' is on its way!'
                    trinkaĵo {is} {ask} 'Kion vi volas trinki por via manĝo?'
                    {print} 'Dankon pro via mendo.'
                    {print} 'Your ' manĝaĵo ' and ' trinkaĵo ' will be right there!'
                    ```
                start_code: '# via kodo ĉi tie'
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} jes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    manĝaĵo {is} {ask} 'What would you like to eat?'
                    {print} 'Unu ' manĝaĵo ', coming right up!'
                    trinkaĵo {is} {ask} 'What would you like to drink with that?'
                    {if} trinkaĵo {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Mi ripetos vian mendon…'
                    {print} 'Unu ' manĝaĵo
                    {if} trinkaĵo {is} cola {print} 'kaj…' {else} {print} 'Unu ' trinkaĵo
                    {if} anything {is} ne {print} 'Thats it!' {else} {print} 'Unu ' anything
                    {print} 'Dankon pro via mendo. Ĝuu vian manĝon!'
                    ```
                start_code: '# via kodo ĉi tie'
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    Vi povas verki simplan kodon por restoracio, jene:
                    ```
                    {print} 'Bonvenon al restoracio Hedy'
                    {print} 'Jen nia menuo:'
                    {print} 'Jen niaj ĉefpladoj: pico, lasanjoj aŭ spagetoj'
                    ĉefplado = {ask} 'Kiun ĉefpladon vi deziras?'
                    prezo = 0
                    {if} ĉefplado {is} pico prezo = 10
                    {if} ĉefplado {is} lasanjoj prezo = 12
                    {if} ĉefplado {is} spagetoj prezo = 8
                    {print} 'Vi mendis ' ĉefplado 'n'
                    {print} 'La prezo estas ' prezo ' spesmiloj'
                    {print} 'Dankon, ĝuu vian manĝon!'
                    ```
                start_code: '# via kodo ĉi tie'
            7:
                story_text: |
                    En ĉi tiu nivelo, vi lernis kiel uzi la komandon `{repeat}` por ripeti linion da kodo iomfoje.
                    Vi povas uzi tion en via restoracio por demandi (per la komando `{ask}`) plurajn homojn pri iliaj mendoj jene:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'Kiom da homoj manĝas ĉe ni hodiaŭ?'
                    {repeat} homoj {times} manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    {print} 'Dankon pro via mendo! La manĝaĵo baldaŭ venos!'
                    ```
                start_code: '# via kodo ĉi tie'
            8:
                story_text: |
                    En ĉi tiu nivelo, vi povas plu ellabori vian virtualan restoracion ripetante plurajn liniojn da kodo. Jen:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'Kiom da gastoj hodiaŭ?'
                    {print} 'Bonege!'
                    {repeat} homoj {times}
                        mendo = {ask} 'Kion vi volas mendi?'
                        {print} mendo
                    {print} 'Dankon pro via mendo!'
                    {print} 'Ĝuu vian manĝon!'
                    ```
                story_text_2: |
                    Kompreneble, ĉi tiu kodo povas esti vastigita kun pli da eroj en la menuo, proponante trinkaĵojn, kaj/aŭ plurajn kursojn, do bonvolu aldoni tiom da ebloj kiel vi volas!
                start_code: '# via kodo ĉi tie'
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'How many people will be joining us today?'
                    {print} 'Bonege!'
                    prezo = 0
                    {repeat} homoj {times}
                        manĝaĵo = {ask} 'What would you like to order?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            prezo = prezo + 3
                            saŭco = {ask} 'What kind of sauce would you like with your fries?'
                            {if} saŭco {is} sen
                                {print} 'sen saŭco'
                            {else}
                                prezo = prezo + 1
                                {print} 'kun ' saŭco
                        {if} manĝaĵo {is} pico
                            prezo = prezo + 4
                    {print} 'That will be ' prezo ' dollar'
                    {print} 'Ĝuu vian manĝon!'
                    ```
                start_code: '# via kodo ĉi tie'
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel facile peti (per `{ask}`) la mendojn de viaj gastoj en mallonga kodo.
                example_code: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    {for} plado {in} pladoj
                        manĝaĵo = {ask} 'Kion vi volas manĝi por via ' plado '?'
                        {print} manĝaĵo ' estos via ' plado
                    ```
                story_text_2: |
                    Kompreneble, vi ankaŭ povus mendi por pluraj homoj!
                example_code_2: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    nomoj = Timoteo, Omaro
                    {for} nomo {in} nomoj
                        {for} plado {in} pladoj
                            manĝaĵo = {ask} nomo ', kion vi volas manĝi por via ' plado '?'
                            {print} nomo ' mendas ' manĝaĵo 'n por sia ' plado
                    ```
                start_code: pladoj = entreo, ĉefplado, deserto
            11:
                story_text: |
                    Oni povas uzi `{for} i {in} {range} 1 {to} 5` por orde presi (kune kun `{print}`) la mendojn de pluraj klientoj.
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} homoj
                        {print} 'Mendo n-ro ' i
                        manĝaĵo = {ask} 'What would you like to eat?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            saŭco = {ask} 'What kind of sauce would you like with that?'
                            {print} saŭco
                        trinkaĵo = {ask} 'What would you like to drink?'
                        {print} trinkaĵo
                    prezo = 4 * homoj
                    {print} 'Jen ' prezo ' spesmiloj totale!'
                    ```
                start_code: '# via kodo ĉi tie'
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi decimalajn frakciojn por igi vian menuon pli realeca.
                example_code: |
                    ```
                    prezo = 0
                    manĝaĵo = {ask} 'Kion vi volas mendi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'hamburgero'
                        prezo = prezo + 6.50
                    {if} manĝaĵo {is} 'pico'
                        prezo = prezo + 5.75
                    {if} trinkaĵo {is} 'akvo'
                        prezo = prezo + 1.20
                    {if} trinkaĵo {is} 'sodakvo'
                        prezo = prezo + 2.35
                    {print} 'Bonvolu pagi ' prezo ' spesmilojn'
                    ```
                start_code: '# via kodo ĉi tie'
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    prezo = 10
                    manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'sandviĉo' {and} trinkaĵo {is} 'suko'
                        {print} 'Jen nia rabatmenuaĵo'
                        prezo = prezo - 3
                    {print} 'La totalo estas ' prezo ' spesmiloj'
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    Per la `{while}` vi povas certigi, ke viaj klientoj povas mendadi ĝis ili finiĝos.
                example_code: |
                    ```
                    {print} 'Bonvenon al McHedy'
                    pli = 'jes'
                    {while} pli == 'jes'
                        mendo = {ask} 'Kion vi volas mendi?'
                        {print} mendo
                        pli = {ask} 'Ĉu vi volas mendi ion pli?'
                    {print} 'Dankon!'
                    ```
                    <!--{else}-->
                start_code: '# via kodo ĉi tie'
    rock:
        name: Roko, papero, tondilo
        default_save_name: Roko
        description: Faru vian propran ludon de roko, papero kaj tondilo
        levels:
            1:
                story_text: |
                    En Nivelo 1, vi komencu per la ludo «roko, papero, tondilo».

                    Per `{ask}` oni povas fari elekton, kaj per `{echo}` oni povas ripeti tiun elekton.
                example_code: |
                    ```
                    {print} kion vi elektas?
                    {ask} elektu el roko, papero aŭ tondilo
                    {echo} do via elekto estis:
                    ```
                    Anstataŭ vortoj, vi ankaŭ povus uzi vinjetosignojn kompreneble: ✊✋✌
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: '{print} Bonvenon al ludo de roko, papero kaj tondilo!'
            2:
                story_text: |
                    En ĉi tiu nivelo, vi povas praktiki uzi la variablojn, por ke vi povu fari la ludon de roko, papero kaj tondilo en la sekva nivelo!
                example_code: |
                    ```
                    elekto {is} _
                    {print} Mi elektas elekto
                    ```
                start_code: '# via kodo ĉi tie'
            3:
                story_text: |
                    En ĉi tiu nivelo ni povas eniri listojn kaj elekti aferojn el ili.
                    Vi unue faru liston per `{is}`. Tiam vi povas lasi la komputilon elekti ion el la listo per `{at} {random}`.
                    Ekzemple, vi povas lasi la komputilon elekti el roko, papero kaj tondilo.
                example_code: |
                    ```
                    elektoj {is} roko, papero, tondilo
                    {print} elektoj {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: '{print} Bonvenon al ludo de roko, papero kaj tondilo!'
            4:
                story_text: |
                    En ĉi tiu nivelo ni povas plu programi rokon, paperon, tondilon. Sed se vi volas aldoni tekston, vi devas uzi citilojn ankaŭ ĉi tie.
                    Ĉu vi kompletigas la kodon enmetante la ĝustajn komandojn aŭ signojn sur la substrekoj?<!--{if}-->
                start_code: '{print} ''Bonvenon al ludo de roko, papero kaj tondilo!'''
            5:
                story_text: |
                    En ĉi tiu nivelo ni povas determini kiu venkis.
                    Por tio vi bezonas la novan kodon `{if}`.

                    Konservu vian elekton kun la elektonomo kaj la elekto de komputilo kiel komputila elekto.
                    Tiam vi povas uzi `{if}` por vidi {if} ili estas samaj aŭ malsamaj.
                    Ĉu vi finos la kodon?
                example_code: |
                    ```
                    opcioj {is} roko, papero, tondilo
                    komputila_elekto {is} _
                    elekto {is} {ask} 'Kion vi elektas?'
                    {print} 'vi elektis' _
                    {print} 'komputilo elektis' _
                    {if} _ {is} _ {print} 'vana partio!' {else} {print} 'nevana partio'
                    ```

                    Plenigu la ĝustan kodon en la spacoj por kontroli, ĉu la partio estas vana.
                start_code: '{print} ''Bonvenon al ludo de roko, papero kaj tondilo!'''
            9:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi la tutan ludon de roko, papero kaj tondilo ingante la {if}-komandojn. Ĉu vi povas fini la kodon?
                example_code: |
                    ```
                    elektoj {is} roko, papero, tondilo
                    via_elekto {is} {ask} 'Kion vi elektas?'
                    {print} 'Vi elektas ' via_elekto 'n'
                    komputila_elekto {is} elektoj {at} {random}
                    {print} 'La komputilo elektas ' komputila_elekto 'n'
                    {if} komputila_elekto {is} via_elekto
                        {print} 'Vana partio'
                    {if} komputila_elekto {is} roko
                        {if} via_elekto {is} papero
                            {print} 'Vi gajnas!'
                        {if} via_elekto {is} tondilo
                            {print} 'Vi malgajnas!'
                    # finu ĉi tiun kodon
                    ```
                start_code: '# via kodo ĉi tie'
            10:
                story_text: |
                    Ĉu vi estas tro maldiligenta por ludi la ludon mem? Lasu Hedy ludi ĝin por vi!
                example_code: |
                    ```
                    elektoj = roko, papero, tondilo
                    ludantoj = Margareto, Miĥaelo
                    {for} ludanto {in} ludantoj
                         {print} ludanto ' elektas la jenon: ' elektoj {at} {random}
                    ```
                start_code: '# via kodo ĉi tie'
            13:
                story_text: |
                    Per la komando `{and}`, vi povas mallongigi vian kodon por la ludo! Rigardu la jenan ekzemplokodon kaj provu kompletigi ĝin.
                example_code: |
                    ```
                    opcioj = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = opcioj {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'Vi gajnas!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'La komputilo gajnas!'
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    Ludu ĝis vi gajnos! Sed unue, kompletigu la ekzemplan kodon…
                example_code: |
                    ```
                    gajnis = 'ne'
                    opcioj = 'roko', 'papero', 'tondilo'
                    {while} gajnis == 'ne'
                        via_elekto = {ask} 'Kion vi elektas?'
                        komputila_elekto = opcioj {at} {random}
                        {print} 'vi elektis ' via_elekto 'n'
                        {print} 'la komputilo elektis ' komputila_elekto 'n'
                        {if} komputila_elekto == via_elekto
                            {print} 'Vana partio!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'tondilo'
                            {print} 'Vi perdas la partion!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'papero'
                            {print} 'Vi gajnas la partion!'
                            gajnis = 'jes'
                    ```
                start_code: '# via kodo ĉi tie'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: Superspiono
        default_save_name: Superspiono
        description: Faru vian propran spionkodon
        levels:
            12:
                story_text: |
                    En ĉi tiu aventuro, vi povas krei vian propran superspionkodon. Kodu mesaĝon, kiun nur la ĝusta agento povas deĉifri.
                    Se la malamiko provos solvi la kodon, ili ricevos falsajn informojn por malŝpari sian tempon.
                example_code: |
                    ```
                    nomo {is} {ask} 'Kio estas via nomo?'
                    {if} nomo {is} 'Agento007'
                        a {is} 'Iru al la flughaveno '
                    {else}
                        a {is} 'Iru al la stacidomo '
                    pasvorto {is} {ask} 'Kio estas la pasvorto?'
                    {if} pasvorto {is} 'SEKRETO'
                        b {is} 'morgaŭ je la 2a horo'
                    else
                        b {is} 'hodiaŭ je la 10a horo'
                    {print} a + b
                    ```
                start_code: '# via kodo ĉi tie'
            13:
                story_text: |
                    La kodo, kiun vi faris en la antaŭa nivelo, estas simpligebla en ĉi tiu nivelo per la komando `{and}`.
                example_code: |
                    ```
                    nomo {is} {ask} 'Kio estas via nomo?'
                    pasvorto {is} {ask} 'Kio estas via pasvorto?'
                    {if} nomo {is} 'Agento007' {and} pasvorto {is} 'SEKRETO'
                        {print} 'Iru al la flughaveno je la 2a horo'
                    {else}
                        {print} 'Iru al la stacidomo je la 10a horo'
                     ```
                start_code: '# via kodo ĉi tie'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Kantu!
        default_save_name: Kanto
        description: Presi kanton
        levels:
            6:
                story_text: |
                    Kantoj ofte enhavas multe da ripetado. Foje la ripeto ankaŭ baziĝas sur kalkulado.
                    Ekzemple, en la konata kanto 'Boteloj da biero'. Vi povas programi tiun kanton per iom da matematiko.
                example_code: |
                    ```
                    nombro = 99
                    {print} nombro ' boteloj da biero sur la muro'
                    {print} nombro ' boteloj da biero'
                    {print} 'Prenu unu, ĝuu ĝin kune'
                    nombro = nombro - 1
                    {print} nombro ' boteloj da biero sur la muro'
                    ```

                    Vi nun povas ripeti liniojn 2 ĝis 6 tiom da fojoj, kiom vi volas, kopiante la liniojn.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
                start_code: '{print} ''Ŝarkido'''
            7:
                story_text: |
                    Kantoj ofte enhavas multe da ripetaĵojn. Ekzemple… Ŝarkido! Se vi kantas ĝin, vi ripete kantas la samajn vortojn:

                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido

                    Vi povas malplilongigi la kanton per `{repeat}`! Ĉu vi povas kompletigi la kodon?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Ŝarkido tututudutudu'
                    {print} 'Ŝarkido'
                    ```

                    Post Ŝarkido, vi povas programi aliajn kantojn. Ekzistas multaj kantoj enhavantaj ripetaĵojn.
                start_code: '{print} ''Ŝarkido'''
            8:
                story_text: |
                    En antaŭa nivelo vi programis la kanton 'Boteloj da biero'. Vi faris unu verson kaj tiam devis kopii la versojn 99 fojojn. En la nivelo 7 vi povas ripeti la kanton 99 fojojn, nur aldonante unu simplan linion!
                example_code: |
                    ```
                    nombro = 99
                    {repeat} 99 {times}
                        {print} nombro ' boteloj da biero sur la muro'
                        {print} nombro ' boteloj da biero'
                        {print} 'Prenu unu, ĝuu ĝin kune'
                        nombro = nombro - 1
                        {print} nombro ' boteloj da biero sur la muro'
                    ```
                start_code: '# via kodo ĉi tie'
            10:
                story_text: |
                    En ĉi tiu nivelo vi povas facile fari la infanan kanton "Kvin simietoj". Ĉu vi povas fari la lastan koruson?
                    Vi ankaŭ povas fari la tutan beban ŝarkan kanton (inkluzive de ĉiuj aliaj ŝarkoj en la familio) en nur 6 linioj!
                    Aŭ vi povas fari Old McDonald kun ĉiuj malsamaj bestoj.
                example_code: |
                    ```
                    simioj = 5, 4, 3, 2
                    {for} simio {in} simioj
                        {print} simio ' simietoj saltantaj sur la lito'
                        {print} 'Oni defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris:'
                        {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```

                    ```
                    ŝarkoj = ŝarkido, panjo, paĉjo, avinjo, avĉjo
                    {for} ŝarko {in} ŝarkoj
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko
                    ```
                    ```
                    bestoj = porko, hundo, bovo
                    {for} besto {in} bestoj
                        {if} besto {is} porko
                            sono = grunt
                        {if} besto {is} hundo
                            sono = boj
                        {if} besto {is} bovo
                            sono = muĝ
                        {print} 'Maljuna McDonald havis bienon'
                        {print} 'I Aj I Aj O!'
                        {print} 'kaj en la bieno estis ' besto
                        {print} 'I Aj I Aj O!'
                        {print} 'kun ' sono sono ' ĉi tie'
                        {print} 'kaj ' sono sono ' tie'
                        {print} 'jen ' sono
                        {print} 'aliloke ' sono
                        {print} 'ĉie ' sono sono
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# via kodo ĉi tie'
            11:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{for} i {in} {range}` por fari kantojn, kiuj uzas kalkuladon.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i 'simietoj saltantaj sur la lito'
                        {print} 'Iu defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris'
                        {if} i {is} 1
                            {print} 'ENLITIGU TIUJN SIMIOJN!'
                        {else}
                            {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```
                start_code: '# via kodo ĉi tie'
            12:
                story_text: |
                    En ĉi tiu kanto, oni povas eĉ pli facile programi «se vi estas feliĉa kaj vi scias ĝin, frapu la manojn», ĉar oni povas meti ĉiujn agojn en unu variablon jene:<!--{if}-->
                example_code: |
                    ```
                    agoj = 'frapu manojn', 'frapu piedojn', 'kriu «hura!»'
                    {for} ago {in} agoj
                        {for} mi {in} {range} 1 {to} 2
                            {print} 'se vi feliĉas kaj scias tion'
                            {print} ago
                        {print} 'se vi feliĉas kaj scias tion kaj vi volas montri tion'
                        {print} 'se vi feliĉas kaj scias tion'
                        {print} ago
                    ```
                start_code: '# via kodo ĉi tie'
            16:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi kanton kiel OldMacDonald eĉ pli rapide. Vi povas konekti la ĝustan beston al la ĝusta sono simple metante ilin en la sama loko en la listo.
                    La Ebria Maristo ankaŭ estas rapide farita en ĉi tiu nivelo. Vi nur bezonas 8 liniojn por la tuta kanto, kontrolu ĝin!
                example_code: |
                    ```
                    bestoj = ['porko', 'hundo', 'bovo']
                    sonoj = ['oink', 'woof', 'muĝ']
                    {for} i {in} {range} 1 {to} 3
                        besto = bestoj[i]
                        sono = sonoj[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' besto
                        {print} 'E I E I O!'
                        {print} 'with a ' sono sono ' here'
                        {print} 'and a ' sono sono ' there'
                        {print} 'here a ' sono
                        {print} 'there a ' sono
                        {print} 'everywhere a ' sono sono
                    ```

                    ```
                    linioj = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} linio {in} linioj
                        {for} i {in} {range} 1 {to} 3
                            {print} linio
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# via kodo ĉi tie'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Tri en Vico
        default_save_name: Trienvico
        description: Ludu «Tri en vico»!
        levels:
            13:
                story_text: |
                    En ĉi tiu aventuro, vi povas programi la ludon «Tri en Vico», kiu estas por du ludantoj. Laŭvice, oni elektas numeron de la punkto (1–9), sur kiun oni metos sian signon (X aŭ O).
                    Gajnas la unua ludanto, kiu metas 3 signojn en vico (horizontale, vertikale aŭ diagonale)!
                example_code: |
                    ```
                    signo = 'x'
                    neokupataj = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    ludo = 'nefinita'
                    kvadrato1 = '.'
                    kvadrato2 = '.'
                    kvadrato3 = '.'
                    kvadrato4 = '.'
                    kvadrato5 = '.'
                    kvadrato6 = '.'
                    kvadrato7 = '.'
                    kvadrato8 = '.'
                    kvadrato9 = '.'
                    {print} 'TRI EN VICO!'
                    {print} kvadrato1 kvadrato2 kvadrato3
                    {print} kvadrato4 kvadrato5 kvadrato6
                    {print} kvadrato7 kvadrato8 kvadrato9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} ludo {is} 'nefinita'
                            elekto = {ask} 'Ludanto ' signo ' metos signon sur kiun kvadraton?'
                            {if} elekto {in} neokupataj
                                {remove} elekto {from} neokupataj
                                {if} elekto {is} 1
                                    kvadrato1 = signo
                                {if} elekto {is} 2
                                    kvadrato2 = signo
                                {if} elekto {is} 3
                                    kvadrato3 = signo
                                {if} elekto {is} 4
                                    kvadrato4 = signo
                                {if} elekto {is} 5
                                    kvadrato5 = signo
                                {if} elekto {is} 6
                                    kvadrato6 = signo
                                {if} elekto {is} 7
                                    kvadrato7 = signo
                                {if} elekto {is} 8
                                    kvadrato8 = signo
                                {if} elekto {is} 9
                                    kvadrato9 = signo
                            {else}
                                {print} 'Tiu kvadrato estas jam okupata'
                            {print} kvadrato1 kvadrato2 kvadrato3
                            {print} kvadrato4 kvadrato5 kvadrato6
                            {print} kvadrato7 kvadrato8 kvadrato9
                            {print} ' '
                            gajninto = {ask} 'Ĉu vi gajnis?'
                            {if} gajninto {is} 'jes'
                                {print} 'Gratulon, ludanto ' signo '!'
                                ludo = 'finita'
                            {else}
                                {if} signo {is} 'x'
                                    signo = 'o'
                                {else}
                                    signo = 'x'
                    ```
                start_code: '# via kodo ĉi tie'
            14:
                story_text: |
                    En la antaŭaj niveloj, vi faris la ludon «Tri en Vico». Nun vi lernis kiel uzi la signon `=`, la signon `==` kaj la signon `!=`.
                    Vi povas uzi ĉi tiun scion en via nova ludo «Tri en Vico», jene:
                example_code: |
                    ```
                    signo = 'x'
                    neokupataj = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    ludo = 'nefinita'
                    kvadrato1 = '.'
                    kvadrato2 = '.'
                    kvadrato3 = '.'
                    kvadrato4 = '.'
                    kvadrato5 = '.'
                    kvadrato6 = '.'
                    kvadrato7 = '.'
                    kvadrato8 = '.'
                    kvadrato9 = '.'
                    {print} 'TRI EN VICO!'
                    {print} kvadrato1 kvadrato2 kvadrato3
                    {print} kvadrato4 kvadrato5 kvadrato6
                    {print} kvadrato7 kvadrato8 kvadrato9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} ludo != 'finita'
                            elekto = {ask} 'Ludanto ' signo ' metos signon sur kiun kvadraton?'
                            {if} elekto {in} neokupataj
                                {remove} elekto {from} neokupataj
                                {if} elekto == 1
                                    kvadrato1 = signo
                                {if} elekto == 2
                                    kvadrato2 = signo
                                {if} elekto == 3
                                    kvadrato3 = signo
                                {if} elekto == 4
                                    kvadrato4 = signo
                                {if} elekto == 5
                                    kvadrato5 = signo
                                {if} elekto == 6
                                    kvadrato6 = signo
                                {if} elekto == 7
                                    kvadrato7 = signo
                                {if} elekto == 8
                                    kvadrato8 = signo
                                {if} elekto == 9
                                    kvadrato9 = signo
                            {else}
                                {print} 'Tiu kvadrato estas jam okupata'
                            {print} kvadrato1 kvadrato2 kvadrato3
                            {print} kvadrato4 kvadrato5 kvadrato6
                            {print} kvadrato7 kvadrato8 kvadrato9
                            {print} ' '
                            gajninto = {ask} 'Ĉu vi gajnis?'
                            {if} gajninto == 'jes'
                                {print} 'Gratulon, ludanto ' signo '!'
                                ludo = 'finita'
                            {else}
                                {if} signo == 'x'
                                    signo = 'o'
                                {else}
                                    signo = 'x'
                    ```
                start_code: '# via kodo ĉi tie'
            15:
                story_text: |
                    En ĉi tiu nivelo, vi povas plibonigi vian ludon «Tri en Vico» per la iteracio `{while}`. Per ĉi tiu iteracio, vi povas kombini la `{if} ludo != 'finita'` kaj la `{for} i {in} {range} 1 ĝis 9` en unu simplan linion.
                    Jen:
                example_code: |
                    ```
                    signo = 'x'
                    neokupataj = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    ludo = 'nefinita'
                    kvadrato1 = '.'
                    kvadrato2 = '.'
                    kvadrato3 = '.'
                    kvadrato4 = '.'
                    kvadrato5 = '.'
                    kvadrato6 = '.'
                    kvadrato7 = '.'
                    kvadrato8 = '.'
                    kvadrato9 = '.'
                    {print} 'TRI EN VICO!'
                    {print} kvadrato1 kvadrato2 kvadrato3
                    {print} kvadrato4 kvadrato5 kvadrato6
                    {print} kvadrato7 kvadrato8 kvadrato9
                    {print} ' '
                    {while} ludo != 'finita'
                        elekto = {ask} 'Ludanto ' signo ' metos signon sur kiun kvadraton?'
                        {if} elekto {in} neokupataj
                            {remove} elekto {from} neokupataj
                            {if} elekto == 1
                                kvadrato1 = signo
                            {if} elekto == 2
                                kvadrato2 = signo
                            {if} elekto == 3
                                kvadrato3 = signo
                            {if} elekto == 4
                                kvadrato4 = signo
                            {if} elekto == 5
                                kvadrato5 = signo
                            {if} elekto == 6
                                kvadrato6 = signo
                            {if} elekto == 7
                                kvadrato7 = signo
                            {if} elekto == 8
                                kvadrato8 = signo
                            {if} elekto == 9
                                kvadrato9 = signo
                        {else}
                            {print} 'Tiu kvadrato estas jam okupata'
                        {print} kvadrato1 kvadrato2 kvadrato3
                        {print} kvadrato4 kvadrato5 kvadrato6
                        {print} kvadrato7 kvadrato8 kvadrato9
                        {print} ' '
                        gajninto = {ask} 'Ĉu vi gajnis?'
                        {if} gajninto == 'jes'
                            {print} 'Gratulon, ludanto ' signo '!'
                            ludo = 'finita'
                        {else}
                            {if} signo == 'x'
                                signo = 'o'
                            {else}
                                signo = 'x'
                    ```
                start_code: '# via kodo ĉi tie'
            17:
                story_text: |
                    En la antaŭaj niveloj, la ludo «Tri en Vico» havis ĝenan trajton. Post ĉiu movo, oni devis respondi, ĉu oni gajnis aŭ ne.
                    Ĉi tio igis la ludon ludebla, sed ankaŭ malrapidega. En ĉi tiu nivelo, ni lernis la komandon `{elif}`, kiu povas solvi ĉi tiun problemon.
                    Estas amuze uzi la `{elif}` por kontroli ĉu ludanto gajnis, sed tio ankaŭ postulas sufiĉe da ekstraj linioj.

                    En la jena ekzempla kodo, ni aldonis la kondiĉojn por gajnado (3 signoj en vico horizontala, vertikala aŭ diagonala).
                    Ili troviĝas en linioj 46 ĝis 69. Notu, ke ĉiufoje kiam la kondiĉo estas vera (alivorte, se ludanto gajnis), la variablo `ludo` estas agordita al `'finita'`.
                    Tio signifas, ke la iteracio `{while}` kaj la ludo finiĝas.
                example_code: |
                    ```
                    signo = 'x'
                    neokupataj = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    ludo = 'nefinita'
                    kvadrato1 = '.'
                    kvadrato2 = '.'
                    kvadrato3 = '.'
                    kvadrato4 = '.'
                    kvadrato5 = '.'
                    kvadrato6 = '.'
                    kvadrato7 = '.'
                    kvadrato8 = '.'
                    kvadrato9 = '.'
                    {print} 'TRI EN VICO!'
                    {print} kvadrato1 kvadrato2 kvadrato3
                    {print} kvadrato4 kvadrato5 kvadrato6
                    {print} kvadrato7 kvadrato8 kvadrato9
                    {print} ' '
                    {while} ludo != 'finita':
                        elekto = {ask} 'Ludanto ' signo ' metos signon sur kiun kvadraton?'
                        {if} elekto {in} neokupataj:
                            {remove} elekto {from} neokupataj
                            {if} elekto == 1:
                                kvadrato1 = signo
                            {if} elekto == 2:
                                kvadrato2 = signo
                            {if} elekto == 3:
                                kvadrato3 = signo
                            {if} elekto == 4:
                                kvadrato4 = signo
                            {if} elekto == 5:
                                kvadrato5 = signo
                            {if} elekto == 6:
                                kvadrato6 = signo
                            {if} elekto == 7:
                                kvadrato7 = signo
                            {if} elekto == 8:
                                kvadrato8 = signo
                            {if} elekto == 9:
                                kvadrato9 = signo
                        {else}:
                            {print} 'Tiu kvadrato estas jam okupata'
                        {print} kvadrato1 kvadrato2 kvadrato3
                        {print} kvadrato4 kvadrato5 kvadrato6
                        {print} kvadrato7 kvadrato8 kvadrato9
                        {print} ' '
                        {if} kvadrato1 == kvadrato2 {and} kvadrato2 == kvadrato3 {and} kvadrato1 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato4 == kvadrato5 {and} kvadrato5 == kvadrato6 {and} kvadrato4 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato7 == kvadrato8 {and} kvadrato8 == kvadrato9 {and} kvadrato7 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato1 == kvadrato4 {and} kvadrato4 == kvadrato7 {and} kvadrato1 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato2 == kvadrato5 {and} kvadrato5 == kvadrato8 {and} kvadrato2 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato3 == kvadrato6 {and} kvadrato6 == spot_9 {and} kvadrato3 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato1 == kvadrato5 {and} kvadrato5 == spot_9 {and} kvadrato1 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {elif} kvadrato3 == kvadrato5 {and} kvadrato5 == kvadrato7 {and} kvadrato3 != '.':
                            {print} 'Ludanto ' signo ' gajnis!'
                            ludo = 'finita'
                        {else}:
                            {if} signo == 'x':
                                signo = 'o'
                            {else}:
                                signo = 'x'
                    ```
                start_code: '# via kodo ĉi tie'
    turtle:
        name: Testudo
        default_save_name: Testudo
        description: Faru vian propran desegnaĵon
        levels:
            1:
                story_text: |
                    Vi ankaŭ povas uzi Hedy por desegni. Kombinante turnojn kaj liniojn, vi povas fari kvadraton aŭ ŝtuparon!

                    Per `{forward}` oni desegnas linion antaŭen. La nombro malantaŭ ĝi determinas kiom longe la testudo marŝos. `{turn} {right}` turnas la testudon kvaronturnon horloĝdirekte; `{turn} {left}`{left}` turnas la testudon kontraŭhorloĝe.
                    Se vi volas iri malantaŭen, uzu la komandon `{forward}` kun negativa nombro. Do ekzemple, `{forward} -100`

                    Jen la komenco de eta ŝtuparo. Ĉu vi povas igi ĝin havi 5 ŝtupojn?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi variablojn por fari la testudon interaga. Ekzemple vi povas demandi al la ludanto kiom da paŝoj devas fari la testudo.
                example_code: |
                    ```
                    respondo {is} {ask} Kiom da paŝoj faru la testudo?
                    {forward} respondo
                    ```
                story_text_2: |
                    Ankaŭ, en nivelo 1 la testudo povis nur turni maldekstren aŭ dekstren. Tio estas iom enuiga!
                    En nivelo 2 li povas direkti sian nazon en ĉiuj direktoj.

                    Uzu 90 por turni kvaronon. Ni nomas ĉi tion gradoj. Plena turniĝo estas 360 gradoj.
                    Ĉu vi povas fari figuron kun ĉi tiu kodo? Eble triangulo aŭ cirklo?
                example_code_2: |
                    ```
                    {print} Desegnante figurojn
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                start_code: |-
                    {print} Testuda vetkuro!
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi `{at} {random}` kun la desegnanta testudo. Hazarda elekto igas la testudon marŝi laŭ malsamaj vojoj ĉiufoje.
                    Uzu `{at} {random}` por elekti valoron el listo. Vi povas kopii kaj alglui liniojn 2 kaj 3 por krei pli longan hazardan vojon.
                example_code: |
                    ```
                    anguloj {is} 10, 50, 90, 150, 250
                    {turn} anguloj {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    anguloj {is} 10, 50, 90, 150, 250
                    {turn} anguloj {at} {random}
                    {forward} 25
            4:
                story_text: |
                    En Nivelo 4, oni devas uzi citilojn kun `{print}` kaj `{ask}`. Ankaŭ dum desegnado!
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Desegnante figurojn'
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
            5:
                story_text: |
                    En Nivelo 5, oni povas fari elekton per `{if}`. Ekzemple, inter diversaj specoj de figuroj.
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    figuro {is} {ask} 'Ĉu vi deziras kvadraton aŭ triangulon?'
                    {if} figuro {is} triangulo angulo {is} 120
                    {else} angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |-
                    {print} 'Desegnante figurojn'
                    figuro {is} {ask} 'Ĉu vi deziras kvadraton aŭ triangulon?'
                    {if} figuro {is} triangulo angulo {is} 120 {else} angulo {is} 90
                    {turn} angulo
                    {forward} 25
            6:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi kalkulojn por desegni malsamajn figurojn.
                    Vi eble lernis en la lernejo, ke turni plenan cirklon estas 360 gradoj. Se ne, nun vi scias!
                    Tial vi ankaŭ uzas 90 gradojn por kvadrato. 360 dividita per 4 estas 90.
                    Nun kiam ni povas fari matematikon kun Hedy, ni povas desegni ĉiujn figurojn, kiujn ni volas!
                example_code: |
                    ```
                    anguloj = {ask} 'Kiom da anguloj vi deziras?'
                    angulo = 360 / anguloj
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    ```
                start_code: '{print} ''Desegnante figurojn'''
            8:
                story_text: |
                    Nun ni povas ripeti plurajn liniojn; tial ni povas fari figurojn pli facile.
                    Ni devas nur unufoje agordi la angulon kaj poste uzi tiun variablon en la `{repeat}`.
                example_code: |
                    ```
                    angulo = 90
                    {repeat} 10 {times}
                        {turn} angulo
                        {forward} 50
                    ```
                story_text_2: |
                    Ankaŭ ni nun povas plibonigi la programon, kiu desegnas malsamajn figurojn.
                    Ĉu vi povas eltrovi kiom malproksimen la testudo devas turni ĉi tien? Finu la kodon kaj vi povas desegni ajnan plurangulon, kiun vi ŝatus!
                example_code_2: |
                    ```
                    anguloj = {ask} 'Kiom da anguloj mi desegnu?'
                    angulo = 360 / anguloj
                    {repeat} angulo {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: anguloj = {ask} 'Kiom da anguloj desegni?'
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: '# place your code here'
