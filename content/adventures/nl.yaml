adventures:
    story:
        name: Verhaal
        default_save_name: Verhaal
        description: Maak een interactief verhaal
        levels:
            1:
                story_text: |
                    In level 1 kun je een verhaal maken met steeds een andere hoofdpersoon die je zelf invoert.

                    Gebruik als eerste regel `{ask}` en vraag wie de hoofdpersoon van jouw verhaal wordt.

                    Na die eerste regel begin je met `{print}` als de zin moet worden geprint.
                    Je gebruikt `{echo}` als je wilt dat jouw hoofdpersoon op het einde van de zin komt.
                example_code: |
                    ```
                    {ask} De hoofdpersoon van dit verhaal is
                    {print} De hoofdpersoon gaat nu in het bos lopen
                    {echo} Hij is wel een beetje bang, die
                    {print} Overal hoort hij gekke geluiden
                    {print} Hij is bang dat dit een spookbos is
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak nu je eigen verhaal van minstens 6 regels code.
                    Dit verhaaltje mag niet hetzelfde zijn als de voorbeeldcode.
                    Gebruik minstens een `{ask}` en een `{echo}` commando.
                    Je mag zelf een onderwerp kiezen.
                    Geen inspiratie? Kies dan een van onze onderwerpen: Naar de bioscoop, een sportwedstrijd of een dagje naar de dierentuin
                start_code: '{print} Hier begint jouw verhaal'
            2:
                story_text: |
                    In level 2 kun je je verhaal leuker maken. De naam van je hoofdpersoon kan nu overal in de zin staan.

                    Je moet daar wel een klein beetje extra voor programmeren. Je moet je hoofdpersoon nu eerst een naam geven.

                    Die naam kun je dan overal in een zin neerzetten.
                example_code: |-
                    ```
                    naam {is} {ask} Hoe heet de hoofdpersoon?
                    {print} naam gaat nu in het bos lopen
                    {print} naam is wel een beetje bang
                    {print} ineens hoort hij een vreemd geluid
                    {sleep} 2
                    {print} naam is bang dat dit een spookbos is
                    ```
                story_text_2: |
                    ### Opdracht
                    Het is tijd om variabelen toe te voegen aan jouw eigen verhaal, dat je in level 1 hebt geschreven.
                    Ga naar 'Mijn programma's', zoek jouw level 1 verhaal avontuur op en kopieer de code. Plak de code daarna in het invoerscherm hier in dit level.

                    Deze code werkt nog niet, omdat je nog geen variabelen gebruikt hebt.
                    Verander de `{ask}` en `{echo}` commando's in jouw code naar de juiste vorm, die je in dit level geleerd hebt.

                    **Extra** Voeg een {sleep} commando toe aan jouw code om spanning in het verhaal op te bouwen.
                start_code: '{print} Hier komt straks jouw verhaal!'
            3:
                story_text: |
                    In dit level kun je iets willekeurigs aan je verhaal toevoegen. Een willekeurig monster, dier of ander obstakel. Dat gaat zo:
                example_code: |
                    ```
                    dieren {is} ü¶á, üêø, ü¶â, ü¶î
                    {print} Hij hoort nu het geluid van een dieren {at} {random}
                    ```
                story_text_2: |
                    Het `{add}`commando kun je misschien ook in je verhaal gebruiken.
                example_code_2: |
                    ```
                    {print} Hij hoort een geluid...
                    dieren {is} üêø, ü¶î, ü¶á, ü¶â
                    dier {is} {ask} Wat denk jij dat het is?
                    {add} dier {to_list} dieren
                    {print} het was een dieren {at} {random}
                    ```
                story_text_3: |
                    Hiernaast zie je een voorbeeld van het `{remove}` commando in een verhaal

                    ### Opdracht
                    Kopieer jouw verhaal uit het vorige level in dit level.
                    In dit level leerde je 3 nieuwe commando's: `{at} {random}` , `{add} {to}` en `{remove} {from}`.
                    Voeg nieuwe regels code toe aan jouw verhaal, zodat deze 3 nieuwe commando's allemaal minstens 1x gebruikt worden.
                example_code_3: |
                    ```
                    {print} Zijn rugzak is veel te zwaar...
                    {print} In de rugzak zitten een fles water, een zaklamp en een baksteen.
                    tas {is} water, zaklamp, baksteen
                    weggooien {is} {ask} Welk ding zal onze held weggooien?
                    {remove} weggooien {from} tas
                    ```
                start_code: '{print} Hier komt straks jouw verhaal!'
            4:
                story_text: |
                    Misschien heb je gezien dat in het vorige level nog wel een foutje zit. Heb je toevallig geprobeerd om een zin te maken waarin het woord naam zat? Bijv. `{print}` mijn naam is naam.
                    Dat werkte niet goed! Dan krijg je: mijn Henk is Henk. Dat kun je in dit level oplossen. Daarvoor moet je wel aanhalingstekens gebruiken bij alles dat je gaat printen.

                    ### Opdracht
                    Kopieer de voorbeeldcode en maak hem kloppend door aanhalingstekens in te vullen op de lijntjes.
                    Op de lijntjes van regel 3 en 4 moeten geen aanhalingstekens komen, maar een `{sleep}` en een `{clear}` commando. Lukt het jou om het programma te laten werken?

                    ### Opdracht 2
                    Ga terug naar het vorige level en kopieer je eigen verhaalcode. Maak de code nu kloppend voor dit level door er aanhalingstekens aan toe te voegen op de goede plekken.
                    Let op: De variabelen die je in jouw eigen verhaal gebruikt moeten buiten de aanhalingstekens. Net als bij de tweede regel van de voorbeeldcode. Daar staat de variabele naam ook buiten de aanhalingstekens.
                example_code: |
                    ```
                    naam {is} {ask} _Hoe heet de hoofdpersoon_
                    {print} _De hoofdpersoon heet _ naam
                    _
                    _
                    {print} naam _ gaat nu in het bos lopen_
                    {print} naam _ is wel een beetje bang_
                    dieren {is} ü¶î, ü¶â, üêø, ü¶á
                    {print} _Hij hoort het geluid van een _ dieren {at} {random}
                    {print} naam _ is bang dat dit een spookbos is_
                    ```
                start_code: '{print} ''Hier komt straks jouw verhaal!'''
            5:
                story_text: |
                    In dit level kun je je verhaal nog leuker maken door verschillende eindes te programmeren.
                    In de voorbeeldcode zie je dat er twee verschillende eindes zijn geprogrammeerd.

                    ### Opdracht 1
                    Schrijf een kort verhaaltje van minstens 6 regels over een zelfgekozen onderwerp.
                    Geen inspiratie? Kies dan een van onze onderwerpen: een superheld, een saaie dag op school, gestrand op een onbewoond eiland.

                    Geef de speler nu de kans om te kiezen uit een goed of een slecht einde, net als in de voorbeeldcode.
                    Programmeer beide eindes.

                    ### Opdracht 2
                    Kopieer jouw verhaal van de vorige levels.
                    Voeg minstens 2 `{if}` en `{else}` commando's toe aan het verhaal.
                    Je kunt dit doen door een goed en een slecht einde te programmeren, zoals bij opdracht 1, maar je kunt ook andere manieren zoeken om deze commando's toe te voegen.
                example_code: |
                    ```
                    naam {is} {ask} 'Wie loopt er in het bos?'
                    {print} naam ' loopt door het bos'
                    {print} naam ' komt een monster tegen'
                    einde {is} {ask} 'Wil je een goed of slecht einde?'
                    {if} einde {is} goed {print} naam ' pakt het zwaard en het monster rent snel weg'
                    {else} {print} 'Het monster eet ' naam ' op'
                    ```
                start_code: '{print} ''Hier komt straks jouw verhaal!'''
            7:
                story_text: |
                    Soms zegt iemand in een verhaal iets meerdere keren. Bijvoorbeeld als iemand om hulp roept, of een liedje zingt.
                    Dat kun je nu in je verhaal zetten met `{repeat}`.

                    ### Opdracht
                    Kun jij ook herhaling in jouw verhaal gebruiken? Ga terug naar level 6, zoek je verhaalprogramma op en kies minstens
                    √©√©n `{print}` regel om te herhalen.
                example_code: |
                    ```
                    {print} 'De prins riep steeds om hulp'
                    {repeat} 5 {times} {print} 'Help!'
                    {print} 'Waarom helpt niemand me nou toch?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Help!'''
            8:
                story_text: "In dit level kun je je verhaal √©cht interactief maken! In dit level is het `{if}` commando namelijk veranderd, waardoor je meerdere regels kan printen na een `{if}`. Zo kun je de lezer van je verhaal een keuze laten maken. Na de keuze gaat het verhaal verder op basis van die\
                    \ keuze. Kijk maar naar het voorbeeld.\n\n### Opdracht 1\nIn de voorbeeldcode zie je hoe je twee verschillende verhalen kunt maken; eentje waarbij je op het geluid afgaat en eentje waarbij je je verstopt. Vul zelf lege plekken in! \n**Extra** Maak het verhaal nog langer. Wat gebeurt\
                    \ er verder? Je kan ook een tweede `{ask}` toevoegen met een tweede keuze.\n\n### Opdracht 2\nOefen met het inspringen. Ga terug naar level 5, zoek je verhaalprogramma op. Maak dan je goede √©n slechte einde ieder minstens drie regels.\n"
                example_code: |
                    ```
                    hoofdpersoon = {ask} 'Hoe heet de hoofdpersoon in dit verhaal?'
                    {print} hoofdpersoon ' loopt door het bos'
                    {print} hoofdpersoon ' hoort plotseling een geluid!'
                    dapper = {ask} 'Gaat 'hoofdpersoon ' op het geluid af?'
                    {if} dapper {is} ja
                        {print} 'Dapper stapt ' hoofdpersoon ' op het geluid af'
                        {print} _
                    {else}
                        {print} 'Snel zoekt ' hoofdpersoon ' een verstopplek'
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            9:
                story_text: "In dit level kun je `{if}` and `{repeat}` commando's in andere `{if}` en `{repeat}` commando's stoppen. \nHierdoor krijg je nog meer mogelijkheden om je verhaal echt interactief te maken!\n\n### Opdracht 1\nMaak de code af op de streepjes zodat de `{if}` het doet.\n\n### Opdracht\
                    \ 2\nVoeg een `{if}` en een `{else}` toe aan het gedeelte van het verhaal waar Robin naar huis gaat.\n\n### Opdracht 3\nGa terug naar je verhaal van level 8 en gebruik ook minstens twee keer een `{if}` in een `{if}`.\n"
                example_code: |
                    ```
                    {print} 'Robin loopt door de stad'
                    locatie = {ask} 'Gaat Robin een winkel in of gaat ze naar huis?'
                    {if} locatie {is} winkel
                        {print} 'Ze stapt de winkel binnen'
                        {print} 'Robin ziet een interessant boek.'
                        boek = {ask} 'Koopt Robin het boek?'
                        {if} boek {is} ja
                            {print} 'Robin koopt het boek en gaat naar huis'
                        {else}
                            {print} 'Robin verlaat de winkel en gaat naar huis'
                    {else}
                        {print} 'Robin gaat naar huis'
                    ```
                start_code: '# Schrijf jouw code hier'
            10:
                story_text: "In dit level kun je het commando `{for}` in je verhaal gebruiken. Op deze manier kun je gemakkelijk het kinderboek 'Beertje bruin, wat zie jij daar?' programmeren.\n\n### Opdracht \nKijk naar <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"\
                    > het verhaal</a>, als je het niet kent, en zorg dat dit hele verhaal wordt uitgeprint.\n"
                example_code: |
                    ```
                    dieren = _ , _ , _
                    {print} 'Brown Bear, Brown Bear'
                    _

                    ```
                start_code: '# Schrijf jouw code hier'
            12:
                story_text: |-
                    Aanhalingstekens zijn nu nodig om woorden op te slaan in een variabele, voor en achter ieder element in de lijst.

                    ### Opdracht
                    Zoek een verhaal op uit een eerder level, je mag zelf kiezen welk level.
                    Zorg dan dat alles weer in orde is door op de juiste plekken aanhalingstekens toe te voegen.
                example_code: |
                    ```
                    naam = 'De Koningin van Engeland'
                    {print} naam ' zat te genieten van een lekker taartje, toen plotseling...'
                    ```
                start_code: '# Schrijf jouw code hier'
            13:
                story_text: |
                    Met `{and}` en `{or}` kun je een verhaal nog veelzijdiger maken! Je kan een speler twee vragen stellen en reageren op beide antwoorden.

                    ### Opdracht 1
                    Bekijk het voorbeeld en maak het af door de _ in te vullen. Voeg daarna nog minstens twee {if} codes met `{and}` of `{or}` toe.

                    ### Opdracht 2
                    Zoek een verhaal op uit een vorig level, en voeg er een `{and}` of `{or}` aan toe.
                example_code: |
                    ```
                    {print} 'Onze held loopt door het bos'
                    {print} 'Ineens komt ze bij een splitsing...'
                    pad = {ask} 'Welk pad moet onze held kiezen?'
                    wapen = {ask} 'Wat voor wapen zal ze trekken?'
                    {if} pad {is} 'links' {and} wapen is 'zwaard'
                        _

                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    In dit level kun je de `{while}` loop gebruiken om je verhaaltjes nog interessanter te maken. Zo kun je `{while} spelletje {is} 'aan'` gebruiken om het spel te laten werken totdat je game over bent.
                    Of je kunt `{while} zwaard {is} 'kwijt'` gebruiken, zodat de speler niet verder kan totdat hij/zij het zwaard gevonden heeft.
                example_code: |
                    ```
                    sleutels = 'kwijt'
                    {print} 'Je staat in de voortuin en bent je sleutels kwijt.'
                    {print} 'Waar ga je zoeken?'
                    {print} 'kies uit: boom, steen, bloembed, brievenbus'
                    {while} sleutels == 'kwijt'
                        locatie = {ask} 'Waar wil je zoeken?'
                        {if} locatie == 'bloembed'
                            {print} 'Hier zijn ze!'
                            sleutels = 'gevonden'
                        {else}
                            {print} 'Helaas, ze liggen niet bij de ' locatie
                    {print} 'Nu kun je het huis in!'
                    ```
                start_code: '# Schrijf jouw code hier'
            18:
                story_text: |
                    We gaan weer een verhaal printen, maar we moeten daarbij steeds haakjes gebruiken bij de `{print}`.

                    ### Opdracht 1
                    Maak een verhaal van minstens 5 zinnen. Je hoeft `naam` nog niet te gebruiken.
                example_code: |
                    ```
                    {print}('Welkom bij dit verhaal!')
                    ```
                story_text_2: |
                    ### Opdracht 2
                    We hebben al een `{input}` voor jou klaargezet. Gebruik eerst de variabele `naam` in je verhaal.
                    Voeg daarna een tweede `{ask}` toe en gebruik die variabele ook.
                    Tip: Denk aan de komma's in een `{print}` tussen tekst en variabelen!
                example_code_2: |
                    ```
                    naam = {input}('Hoe heet jij?')
                    {print}('Welkom bij dit verhaal!')
                    ```
                start_code: '# Schrijf jouw code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ### Toevoegen
                    Je kunt items aan een lijst toevoegen met het `{add} {to}` commando. Om iets aan een lijst toe te voegen typ je bijvoorbeeld: `{add} pingu√Øn {to} dieren`. Je kunt het ook gebruiken in combinatie met `{ask}` zoals in het voorbeeld.
                example_code: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    leuk {is} {ask} Welk dier vind jij leuk?
                    {add} leuk {to_list} dieren
                    {print} Ik kies dieren {at} {random}
                    ```
                story_text_2: "### Verwijderen \n Als je items aan een lijstje kunt toevoegen, kun je natuurlijk ook items verwijderen. Dat doe je met`{remove} {from}`.\n"
                example_code_2: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    niet_leuk {is} {ask} Welk dier vind jij niet leuk?
                    {remove} niet_leuk {from} dieren
                    {print} Ik kies dieren {at} {random}
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer de nieuwe codes uit. Voeg de smaak die de speler graag wil toe aan het lijstje en haal de smaken waar diegene allergisch voor is van het lijstje af.
                example_code_3: |
                    ```
                    {print} Verrassingsmilkshake
                    smaken {is} aardbei, chocolade, vanille
                    hoop {is} {ask} Welke smaak hoop je dat het wordt?
                    _
                    allergie {is} {ask} Voor welke smaak ben je allergsich?
                    _
                    {print} Je krijgt een {at} {random} milkshake
                    ```
                start_code: |
                    dieren {is} hond, kat, kangoeroe
                    leuk {is} {ask} Welk dier vind jij leuk?
                    {add} leuk {to_list} dieren
                    niet_leuk {is} {ask} Welk dier vind jij niet leuk?
                    {remove} niet_leuk {from} dieren
                    {print} Ik kies dieren {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: We gaan nu `{and}` en `{or}` gebruiken! Als je twee dingen wilt checken hoef je niet meer twee {if}jes in elkaar te doen maar kan je nu `{and}` en `{or}` gebruiken. Beide dingen moeten waar zijn als je een `{and}` gebruikt. We kunnen ook `{or}` gebruiken. Daarbij moet er √©√©n
                    van de twee waar zijn.
                example_code: |
                    ```
                    naam = {ask} 'hoe heet jij?'
                    leeftijd = {ask} 'hoe oud ben jij?'
                    {if} naam {is} 'Hedy' {and} leeftijd {is} 2
                        {print} 'Jij bent de echte Hedy!'
                    ```
                start_code: |-
                    naam = {ask} 'hoe heet jij?'
                    leeftijd = {ask} 'hoe oud ben jij?'
                    {if} naam {is} 'Hedy' {and} leeftijd {is} 2
                        {print} 'Jij bent de echte Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: vraag_commando
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## Het vraag commando
                    Nu je het`{print}` commando onder de knie hebt, is het tijd voor een nieuw commando: `{ask}`. Met het`{ask}` commando, kun je een vraag stellen. Kijk maar:
                example_code: |
                    ```
                    {print} Hallo!
                    {ask} Wat is jouw naam?
                    ```
                story_text_2: |
                    ## Het echo commando
                    Als je wil dat de computer jouw antwoord ook herhaalt, kun je het `{echo}` commando gebruiken. Let op: Je antwoord wordt herhaald aan het einde van de zin. In het voorbeeld komt jouw antwoord dus na Hoi.
                example_code_2: "```\n{print} Hallo!\n{ask} Hoe heet je? \n{echo} Hoi\n```\n"
                story_text_3: "### Opdracht \nProbeer het`{ask}`commando en het`{echo}` commando uit. Vul eerst een goede code in op de plek van het streepje om het programma aan de praat te krijgen.\nStel daarna nog twee vragen door het `{ask}` commando te gebruiken. Gebruik na elke `{ask}` ook een `{echo}`\
                    \ om het antwoord op het scherm te tonen\n"
                example_code_3: |
                    ```
                    _ Hoe gaat het?
                    _
                    ```
                start_code: |
                    {print} Hallo!
                    {ask} Wat is jouw naam?
                    {echo} Hoi
            2:
                story_text: |
                    ## Het vraag commando
                    Nu we **variabelen** in onze codes kunnen gebruiken, hebben we het `{echo}` commando niet langer nodig.
                    We kunnen variabelen gebruiken om antwoorden in op te slaan. Hierdoor kunnen we antwoorden op meerdere vragen gebruiken in onze codes.
                    Kijk maar eens naar het voorbeeld:

                    Op deze manier worden je programma's steeds interactiever!
                example_code: |
                    ```
                    naam {is} {ask} Wat is je naam?
                    {print} Hoi naam
                    leeftijd {is} {ask} Hoe oud ben je?
                    {print} naam is leeftijd jaar oud
                    ```
                story_text_2: "### Opdracht\nJe hebt in het vorige avontuur al geleerd hoe je variabelen kunt instellen met het`{is}` commando.\nDaar heb je minstens 3 variabelen gemaakt en ze gebruikt met een print commando.\nNu gaan we de variabelen interactief maken in plaats van ze in te stellen,\
                    \ zoals we deden in ons voorbeeld. \n\nKopieer je code van het vorige avontuur en maak de variabelen interactief door `{ask}` commando's te gebruiken.\n"
                example_code_2: |
                    ```
                    lievelingsdier {is} {ask} Wat is je lievelingsdier?
                    {print} Ik hou van lievelingsdier
                    ```
                start_code: |-
                    naam {is} {ask} Hoe heet je?
                    {print} Hoi naam
                    leeftijd {is} {ask} Hoe oud ben je?
                    {print} naam is leeftijd jaar oud.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Probeer zo dicht mogelijk bij 21 te komen
        levels:
            17:
                story_text: "Blackjack is een simpel kaartspelletje waarbij je zo dicht mogelijk bij 21 punten moet komen. Je krijgt twee kaarten. Elke kaart is het getal waard dat erop staat, en de kaarten met plaatjes (Boer, Vrouw, Heer) zijn 10 punten waard.\nDe Aas is 1 of 11 punten waard (dat mag\
                    \ je zelf kiezen). De dealer, jouw tegenstander, krijgt ook twee kaarten.\nAls je wil, mag je een derde kaart pakken en die punten worden bij jouw score opgeteld. De dealer mag ook een extra kaart pakken.\nMaar pas op dat je nooit over de 21 punten heengaat, want dan verlies je!\n\
                    De speler die het dichtst bij de 21 punten komt, zonder eroverheen te gaan, wint! \n\nVeel plezier!\n"
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    kaarten = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Boer', 'Vrouw','Heer', 'Aas']
                    punten = 0
                    dealer_punten = 0
                    kaart_1 = kaarten[{random}]
                    kaart_2 = kaarten[{random}]
                    kaart_3 = kaarten[{random}]
                    dealer_kaart_1 = kaarten[{random}]
                    dealer_kaart_2 = kaarten[{random}]
                    dealer_kaart_3 = kaarten[{random}]
                    # Punten voor kaart 1
                    {if} kaart_1 == 'Boer' {or} kaart_1 == 'Vrouw' {or} kaart_1 == 'Heer':
                        punten = punten + 10
                    {elif} kaart_1 == 'Aas':
                        punten = punten + 11
                    {else}:
                        punten = punten + kaart_1
                    # punten voor kaart 2
                    {if} kaart_2 == 'Boer' {or} kaart_2 == 'Vrouw' {or} kaart_2 == 'Heer':
                        punten = punten + 10
                    {elif} kaart_2 == 'Aas':
                        punten = punten + 11
                    {else}:
                        punten = punten + kaart_2
                    # punten voor dealer kaart 1
                    {if} dealer_kaart_1 == 'Boer' {or} dealer_kaart_1 == 'Vrouw' {or} dealer_kaart_1 == 'Heer':
                        dealer_punten = dealer_punten + 10
                    {elif} dealer_kaart_1 == 'Aas':
                        dealer_punten = dealer_punten + 11
                    {else}:
                        dealer_punten = dealer_punten + dealer_kaart_1
                    # punten voor dealer kaart 2
                    {if} dealer_kaart_2 == 'Boer' {or} dealer_kaart_2 == 'Vrouw' {or} dealer_kaart_2 == 'Heer':
                        dealer_punten = dealer_punten + 10
                    {elif} dealer_kaart_2 == 'Aas':
                        dealer_punten = dealer_punten + 11
                    {else}:
                        dealer_punten = dealer_punten + dealer_kaart_2
                    # Twee Azen
                    {if} kaart_1 == 'Aas' {and} kaart_2 == 'Aas':
                        punten = 12
                    {if} dealer_kaart_1 == 'Aas' {and} dealer_kaart_2 == 'Aas':
                        dealer_punten = 12
                    # Scorebord
                    {print} 'Jij hebt een ' kaart_1 ' en een ' kaart_2 ' (' punten ' punten)'
                    {print} 'De dealer heeft een ' dealer_kaart_1 ' en een ' dealer_kaart_2 ' (' dealer_punten ' punten)'
                    # Extra kaart voor de speler
                    hit = {ask} 'Wil je een extra kaart?'
                    {if} hit == 'ja':
                        {if} kaart_3 == 'Boer' {or} kaart_3 == 'Vrouw' {or} kaart_3 == 'Heer':
                            punten = punten + 10
                        {elif} kaart_3 == 'Aas':
                            {if} punten > 11:
                                punten = punten + 11
                            {else}:
                                punten = punten + 1
                        {else}:
                            punten = punten + kaart_3
                        print 'Je krijgt een extra ' kaart_3 ' (' punten ' punten)'
                    {else}:
                        print 'Je krijgt geen extra kaarten'
                    # Winnaar
                    {if} punten > 21 {or} dealer_punten > punten {or} dealer_punten == 21:
                        {print} 'Je verliest'
                    {elif} dealer_punten < 17:
                        {print} 'De dealer pakt een extra kaart. Het is een... ' dealer_kaart_3
                        {if} dealer_kaart_3 == 'Boer' {or} dealer_kaart_3 == 'Vrouw' {or} dealer_kaart_3 == 'Heer':
                            dealer_punten = dealer_punten + 10
                        {elif} dealer_kaart_3 == 'Aas':
                            {if} dealer_punten < 11:
                                dealer_punten = dealer_punten + 11
                            {else}:
                                dealer_punten = dealer_punten + 1
                        {else}:
                            dealer_punten = dealer_punten + dealer_kaart_3
                        {print} 'De dealer heeft nu  ' dealer_punten ' punten'
                        {if} dealer_punten < 21 {and} dealer_punten > punten:
                            {print} 'Je verliest'
                        {else}:
                            {print} 'Je wint!'
                    {elif} punten > dealer_punten {and} punten < 21:
                        {print} 'Je wint!!'
                    ```
                start_code: '# Schrijf jouw code hier'
    calculator:
        name: Rekenmachine
        default_save_name: Rekenmachine
        description: Maak een rekenmachine
        levels:
            6:
                story_text: |
                    Nu je kunt rekenen, kun je ook een programma maken om sommetjes te oefenen. Je kunt de sommen zelf verzinnen, bijv zo:
                example_code: |
                    ```
                    goede_antwoord = 11 * 27
                    antwoord = {ask} 'Hoeveel is 11 keer 27?'
                    {if} antwoord {is} goede_antwoord {print} 'goedzo'
                    {else} {print} 'Foutje! Het was ' goede_antwoord
                    ```
                story_text_2: |
                    ### Opdracht
                    De rekenmachine hierboven rekent het antwoord voor je uit, maar je kunt ook een programma maken om je eigen rekenvaardigheid te testen, zoals deze:
                    Vul de streepjes in om het af te maken!
                example_code_2: |
                    ```
                    goed_antwoord = 11 * 27
                    antwoord = {ask} 'Heveel is 11 keer 27?'
                    {if} antwoord {is} _ {print} 'goed gedaan!'
                    {else} {print} 'Wrong! It was ' _
                    ```
                story_text_3: |
                    Je kunt ook de computer zelf willekeurige sommen laten maken met {random}.

                    Zo kies je een aantal tafels om uit te oefenen, en pak je daaruit steeds een andere som:
                start_code: |
                    getal_1 = {ask} 'Het eerste getal is:'
                    getal_2 = {ask} 'Het tweede getal is:'
                    correct_antwoord = getal_1 * getal_2
                    {print} getal_1 ' keer ' getal_2 ' is ' correct_antwoord
            9:
                story_text: |
                    In dit level kunnen we de rekenmachine van level 6 uitbreiden en meerdere sommen achter elkaar vragen.

                    ### Opdracht 1
                    Kun jij regel 10 afmaken zodat het programma werkt?

                    ### Opdracht 2
                    Geef de speler feedback over een goed en over een fout antwoord. Breid je programma daarvoor uit met een `{else}`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        getal1 = getallen {at} {random}
                        getal2 = getallen {at} {random}
                        goede_antwoord = getal1 * getal2
                        {print} 'Hoeveel is ' getal1 ' keer ' getal2 '?'
                        antwoord = {ask} 'Vul hier het antwoord in:'
                        {print} 'Jouw antwoord is ' antwoord
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Je score is ' score ' van 10!'
                    ```
                start_code: '{print} ''Welkom bij de rekenmachine!'''
            10:
                story_text: |
                    Met dit rekenspelletje kun je de tafels oefenen.
                    Hoe meer getallen je aan de lijst toevoegt, hoe meer tafels je kunt oefenen.
                    ### Opdracht
                    Kun jij meer getallen toevoegen aan de lijst, zodat je alle tafels tot 10 kunt oefenen?
                example_code: |
                    ```
                    nummers = 1, 2, 3
                    {for} nummer1 {in} nummers
                        {for} nummer2 {in} nummers
                            antwoord = {ask} 'Hoeveel is ' nummer2 ' keer ' nummer1 '?'
                            goed = nummer1 * nummer2
                            {if} antwoord {is} goed
                                {print} 'Goedzo!'
                            {else}
                                {print} 'Foutje! Het was... ' goed
                    ```
                start_code: '# Schrijf jouw code hier'
            11:
                story_text: |
                    Met een `{for}` kan je jouw tafeloefenprogramma met nog minder regels code maken.

                    ### Opdracht 1
                    Verbeter de voorbeeldcode zodat een nette tafel geprint wordt: <br> "1 keer 10 is 10", "2 keer 10 is 20", enz.

                    ### Opdracht 2
                    Ga terug naar jouw code van level 10, en zorg dat je code `{for}` en `{range}` gebruikt.
                example_code: |
                    ```
                    nummer = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * nummer
                    ```
                start_code: |
                    nummer = 10
                    {for} i {in} {range} 1 to 10
                       {print} i * nummer
            12:
                story_text: |
                    In dit level kun je ook met kommagetallen werken met de rekenmachine.

                    ### Opdracht 1
                    Vul de lege plekken weer in om de rekenmachine goed te laten werken. Onthoud wel dat je geen komma gebruikt, maar een punt!

                    ### Opdracht 2
                    Maak nu weer een rekensommenoefenprogramma, maar dan met kommagetallen.
                    Maak een lijst met getallen, kies er steeds twee uit, maak er een som mee en laat de speler het juiste antwoord invullen.
                    Controleer natuurlijk ook of het klopt. **(extra)** Maak het progamma moeilijker met levens. Bij een fout gaat er een leven af, en na drie fouten stopt het spel.
                example_code: |
                    ```
                    getal1 = {ask} 'Wat is het eerste getal?'
                    getal2 = {ask} 'Wat is het tweede getal?'
                    antwoord = _
                    {print} getal1 ' plus ' getal2 ' is ' _
                    ```
                start_code: '# Schrijf jouw code hier'
            13:
                story_text: |
                    ### Opdracht 1
                    Maak het sommenoefenprogramma nu extra moeilijk. De speler moet twee sommen achter elkaar goed hebben. Maak de codes op de streepjes af.

                    ### Opdracht 2 (extra)
                    Sommen hebben soms meerdere goede antwoorden. Je kan 10 bijvoorbeeld delen door 5, maar ook door 2. Dus de som 'Door welk getal kan je 10 delen?' heeft twee goede antwoorden.
                    Verzin zelf een som met meerdere antwoorden, vraag de speler om een antwoord en reken ze beide goed met `{or}`.
                    Begin opnieuw met een leeg programmeerveld en programmeer het helemaal zelf.
                example_code: |
                    ```
                    antwoord1 = {ask} 'Wat is 10 keer 7?'
                    antwoord2 = {ask} 'Wat is 6 keer 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In dit level kun je het spelletje 'Raad mijn getal' programmeren!
                example_code: |
                    ```
                    {print} 'Raad mijn getal'
                    getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    getal = getallen {at} {random}
                    spel = 'aan'
                    {for} i {in} {range} 1 {to} 10
                        {if} spel == 'aan'
                            gok = {ask} 'Welk getal denk je?'
                            {if} gok > getal
                                {print} 'Lager!'
                            {if} gok < getal
                                {print} 'Hoger!'
                            {if} gok == getal
                                {print} 'Hoera!'
                                spel = 'af'
                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    In het rekenspelletje dat je een aantal levels terug hebt leren maken, kun je de `{while}` loop toevoegen.
                    Hierdoor mag de speler pas door naar de volgende vraag als het goede antwoord gegeven is.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        getal1 = getallen {at} {random}
                        getal2 = getallen {at} {random}
                        goede_antwoord = getal1 * getal2
                        antwoord = 0
                        {while} antwoord != goede_antwoord
                            {print} 'Hoeveel is ' getal1 ' keer ' getal2 '?'
                            antwoord = {ask} 'Vul hier het antwoord in:'
                            {print} 'Jouw antwoord is ' antwoord
                        {print} 'Goed zo!'
                    {print} 'Je hebt gewonnen!'
                    ```
                start_code: '# Schrijf jouw code hier'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Tijd voor nog een nieuw commando! Met de code `{clear}` wis je alle tekst van je scherm. Zo kun je voorkomen dat je uitvoerscherm te vol raakt.
                    Let op! Gebruik bij het `{clear}` commando ook altijd een `{sleep}` anders wist Hedy je scherm zo vlug dat je de tekst niet eens gezien hebt!
                example_code: |
                    ```
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} 'VERRASSING!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'VERRASSING!'
    default:
        name: Introductie
        default_save_name: intro
        description: Level uitleg
        levels:
            1:
                story_text: |
                    Welkom bij Hedy! In Level 1 ga je je eerste codes leren maken.

                    Als je een code hebt getypt in het invoerscherm kun je op de knop 'Voer de code uit' klikken. Je programma wordt dan uitgevoerd in het uitvoerscherm.

                    Klaar om te leren programmeren? Ga dan snel naar het eerste avontuur in het volgende tabje!
                start_code: '{print} hallo wereld!'
            2:
                story_text: |
                    Gefeliciteerd! Je bent door naar level 2. Hopelijk heb je al wat coole codes gemaakt!
                    In het eerste level heb je misschien gemerkt dat het  `{echo}` commando maar voor √©√©n antwoord tegelijk gebruikt kan worden.
                    Bijvoorbeeld in het restaurantavontuur kun je echo√´n wat de klanten willen eten, of wat ze willen drinken, maar niet allebei in √©√©n zin.
                example_code: |
                    **Let op! Deze code werkt niet!**
                    In Hedy veranderen commando's wel eens. Zo werkt `echo` alleen in level 1. In dit level leer je een betere manier om antwoord te echo√´n!
                    ```
                    {print} Welcome bij restaurant Hedy
                    {ask} Wat wil je eten?
                    {echo} Dus jij wilt graag
                    {ask} Wat wil je drinken?
                    {echo} Dus jij wilt graag
                    ```
                story_text_2: |
                    Als de speler een hamburger en een cola bestelt, kun je niet aan het einde √©√©n zin maken waarin de bestelling herhaald wordt. Het zou moeten in twee aparte regels.
                    Daarnaast plaatst het `{echo}` commando het antwoord altijd aan het einde van de zin. Dus je kunt bijvoorbeeld niet zeggen "Je hamburger komt er aan!".

                    Dat verandert gelukkig in dit level. In level 2 leer je werken met variabelen. Hiermee kun je meerdere stukjes informatie opslaan √®n kun je het overal in de zin plaatsen waar je wil.
                    Op naar het volgende avontuur!
                start_code: '{print} hello world!'
            3:
                story_text: |
                    In het vorige level heb je geleerd wat een variabele is en hoe je avonturen wat interactiever kunt maken.
                    Maar... Dat is niet het enige wat je kunt doen met variabelen! Je kunt met variabelen ook lijstjes maken.
                    En je kunt Hedy een willekeurig item van het lijstje laten kiezen, waardoor je echte spelletjes kunt programmeren!
                    Ga maar snel naar het volgende avontuur!
                start_code: '{print} hello world!'
            4:
                story_text: |
                    In de vorige levels heb je geoefend met variabelen, maar misschien ben je dit probleem tegengekomen.
                    Als je deze code wil programmeren:

                    Je wilde natuurlijk printen:

                    `Mijn naam is Sophie`

                    maar Hedy print:

                    `Mijn Sophie is Sophie`.

                    In dit level leer je dit probleem aan te pakken door middel van aanhalingstekens.
                example_code: |
                    ```
                    naam {is} Sophie
                    {print} Mijn naam is naam
                    ```
                start_code: '{print} ''Hallo wereld'''
            5:
                story_text: |
                    In de voorgaande levels heb je geleerd om met `{at} {random}`  te werken. Hierdoor kun je spelletjes maken waarbij er steeds een andere uitkomst is.
                    Maar echt interactief is het niet... De speler heeft namelijk geen invloed op wat er gebeurt in het spel.

                    In dit level leer je het `{if}` commando, waarmee je verschillende reacties kunt programmeren. Zo leer je bijvoorbeeld een wachtwoord instellen.
                    Ga maar snel naar het nieuwe avontuur!
                example_code: |
                    ```
                    wachtwoord {is} {ask} 'Wat is het juiste wachtwoord?'
                    ```
                start_code: |-
                    naam {is} {ask} 'Hoe heet jij?'
                    {if} naam {is} Hedy {print} 'cool!' {else} {print} 'meh'
            6:
                story_text: |
                    In het vorige level heb je geoefend met `{ask}` en `{if}`. Zo heb je in het restaurant bijvoorbeeld aan je klanten gevraagd wat ze wilden eten.
                    Wat je echter nog niet kunt doen, is de prijs berekenen voor je klanten.

                    In dit level kun je optellen, aftrekken, vermenigvuldigen en delen in jouw programma's. Hierdoor kun je een bonnetje maken voor je restaurantgasten, of een geheime kortingscode bedenken voor je vrienden en familie.
                    Je leert dit level ook een rekenspelletje maken, waarmee je broertje of zusje de tafelsommen kan oefenen.
                    Neem maar eens een kijkje!
                example_code: |
                    ```
                    eten_prijs {is} 0
                    drinken_prijs {is} 0
                    totaal_prijs {is} 0
                    {print} 'Welkom bij McHedy'
                    bestelling {is} {ask} 'Wat wil je eten?'
                    {if} bestelling {is} hamburger eten_prijs {is} 5
                    {if} bestelling {is} friet eten_prijs {is} 2
                    drinken {is} {ask} 'Wat wilt u daarbij drinken?'
                    {if} drinken {is} water drinken_prijs {is} 0
                    {else} drinken_prijs {is} 3
                    totaal_prijs {is} eten_prijs + drinken_prijs
                    {print} 'Dat wordt dan ' totaal_prijs ' euro, alstublieft'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Goed gedaan! Je bent bij het volgende level, wat betekent dat je goed geoefend hebt met `{if}` en `{else}`. Waarschijnlijk heb je al gemerkt dat je codes steeds langer worden.
                    Hier zie je de code van het verjaardagsliedje 'Happy Birthday'.

                    Dat is een hoop code voor steeds hetzelfde zinnetje.... Gelukkig leer je in het volgende avontuur een oplossing met het `{repeat}` commando. Hiermee kun je een regel code meerdere keren herhalen.
                example_code: |
                    ```
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    Je hebt nu √©√©n regel code leren herhalen. Dat is handig, maar niet altijd genoeg. Soms wil je een groepje van meerdere codes een paar keer herhalen.
                    In dit level leer je hoe je dat doet!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'In het volgende avontuur leer je meerdere regels herhalen!'
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            9:
                story_text: |
                    Fantastisch! Je bent alweer bij een nieuw level! In de vorige levels leerde je meerdere regels code in een blokje zetten met een {if} of {repeat} commando. Maar je kon ze nog niet allebei tegelijk gebruiken...
                    Goed nieuws! In dit level mag je een {if} in een {if} of in een {repeat} zetten. Kijk maar!
                example_code: |
                    ```
                    antwoord = {ask} 'Ben je klaar om iets nieuws te leren?'
                    {if} antwoord {is} ja
                        {print} 'Super! Je kunt leren hoe je een herhaalcommando in een alscommando kunt zetten'
                        {print} 'Joepie!'
                        {print} 'Joepie!'
                        {print} 'Joepie!'
                    {else}
                        {print} 'Nee? Oefen dan nog even door in het vorige level'
                start_code: '{print} Op naar het volgende avontuur!'
            10:
                story_text: |
                    Wat ben jij goed bezig! In het vorige level ben je misschien tegen een klein probleempje aangelopen. Je hebt geleerd hoe je regels kunt herhalen, maar wat als je ze elke keer net ietsje ander wil.
                    Bijvoorbeeld in het Engelse liedje 'if you're happy and you know it'. Dat zou er dan ongeveer zo uitzien:

                    Als je in het volgende couplet niet 'clap your hands' maar 'stomp your feet' wil gebruiken, dan moet je de code volledig aanpassen.
                    Superonhandig! In dit level leer je het `{for}` commando, dat dit probleem voor je oplost!
                    Ga maar snel door!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            11:
                story_text: |
                    Je bent al ver gekomen! Goedzo! In de hogere levels gaat de Hedy programmeertaal steeds meer op Python lijken.
                    In Python bestaat het `{repeat}` commando niet, maar er is wel een commando dat werkt zoals {repeat}. Ben je benieuwd hoe je`{repeat}` zegt in Pythontaal? Ga dan naar het volgende avontuur!
                start_code: '{print} ''Op naar het volgende avontuur!'''
            12:
                story_text: |
                    Misschien heb je in een van je programma's al eens geprobeerd om kommagetallen te gebruiken, bijvoorbeeld bij je restaurant. Als je dat gedaan hebt, dan ben je er achtergekomen dat Hedy die kommagetallen steeds afrondde.
                    Vanaf nu mag je ook kommagetallen gebruiken! Wil je weten hoe? Kijk dan in het volgende avontuur!
                example_code: |
                    ```
                    burger = 5
                    drinken = 2
                    totaal = burger + drinken
                    print 'Je hebt een burger en drinken besteld'
                    print 'Dat kost ' totaal ' euro alstublieft'
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            13:
                story_text: |
                    In vorige levels heb je geleerd hoe je twee `{if}`commando's in elkaar kan stoppen. Dit werk prima, maar het kan wel resulteren in lange onhandige codes zoals deze:

                    In dit systeem moet je zowel de goede gebruikersnaam als het goede wachtwoord opgeven.
                    In dit level leer je het `{and}` commando, waarmee je codes zoals deze een stuk korter en makkelijker kunt maken!
                    Kijk maar!
                example_code: |
                    ```
                    gebruikersnaam = {ask} 'Wat is je gebruikersnaam?'
                    wachtwoord = {ask} 'Wat is je wachtwoord?'
                    {if} gebruikersnaam {is} 'Hedy'
                        {if} wachtwoord {is} 'geheim'
                            {print} 'Welkom Hedy!'
                        {else}
                            {print} 'Toegang geweigerd!'
                    {else}
                        {print} 'Toegang geweigerd!'
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            14:
                story_text: |
                    Met het programma hiernaast kun je berekenen of je je schoolvak wel of niet hebt gehaald (dus, of je een 6 of hoger hebt gehaald).
                    Je kunt zien dat deze code extreem onhandig is, door de veel te lange regel 5.
                    Alle cijfers van 1 tot 5 moesten apart worden ingevoerd. Gelukkig leer je in het volgende avontuur hoe je dit kunt oplossen!
                example_code: |
                    ```
                    eerste_cijfer = {ask} 'Wat heb je gehaald op je eerste toets?'
                    tweede_cijfer = {ask} 'Wat heb je gehaald op je tweede toets?'
                    samen = eerste_cijfer + tweede_cijfer
                    gemiddelde_cijfer = samen / 2
                    {if} gemiddelde_cijfer = 1 {or} gemiddelde_cijfer = 2 {or} gemiddelde_cijfer = 3 {or} gemiddelde_cijfer = 4 {or} gemiddelde_cijfer = 5
                        {print} 'Oh oh! Je gaat dit vak niet halen...'
                    {else}
                        {print} 'Hoera! Je haalt het vak!'
                    ```
                start_code: '{print} ''Ga naar het volgende avontuur'''
            15:
                story_text: |
                    In het spelletje hiernaast kan de speler erg lang blijven spelen...
                    Maar de code is onhandig en veel te lang. Daarbij kan de speler geen 101 potjes spelen als hij/zij dat zou willen!
                    Kun je dan nooit oneindig spelen?
                    In dit level leer je een code waarmee dat wel kan! En nog een stuk gemakkelijker ook!
                example_code: |
                    ```
                    spel {is} 'aan'
                    {for} i {in} {range} 1 {to} 100
                        {if} spel {is} 'aan'
                            antwoord = {ask} 'Wil je doorspelen?'
                            {if} antwoord {is} 'nee'
                                spel {is} 'over'
                            {if} antwoord {is} 'ja'
                                {print} 'Ok dan ga ik door'
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            16:
                story_text: |
                    In dit level komen we weer een stukje dichter bij Pythoncode. Je gaat leren hoe je twee lijstjes met elkaar kunt matchen.
                    Zo kun je bijvoorbeeld een lijstje met dieren matchen aan het bijpassende geluid.
                    Want als je dat tot nu toe probeerde, kom je uit op de codes hieronder. En die slaan duideijk nergens op!
                example_code: |
                    ```
                    dieren = 'kip', 'paard', 'koe'
                    geluiden = 'tok', 'pfffff', 'boe'
                    {for} dier {in} dieren
                        {print} 'een ' dier ' zegt ' geluiden {at} {random}
                    ```
                    Dit kun je ook proberen, maar....
                    ```
                    dieren = 'kip', 'paard', 'koe'
                    sounds = 'tok', 'pffffff', 'boe'
                    {for} dier {in} dieren
                        {for} geluid {in} geluiden
                            {print} 'Een ' dier ' zegt ' geluid
                    ```
                start_code: '{print} ''Op naar het volgende avontuur!'''
            17:
                story_text: |
                    Nu maken we nog een kleine verandering bij het inspringen. Elke keer als we moeten inspringen, gebruiken we een `:` bij de regel erboven.

                    In dit level leer je ook een nieuw commando `{ elif }`. `{elif}` is  een samentrekking van {else} en {if} voor als je 3 of meer opties wilt programmeren.
                    Kijk maar in het volgende avontuur!
                start_code: '{print} ''Op naar het volgende avontuur!'''
            18:
                story_text: |
                    Hoera! Je hebt het einde van Hedy bereikt! De codes die je hier in het laaste level maakt kun je kopi√´ren naar andere Python omgevingen, zoals replit or PyCharm. Daar kun je verder Python leren!
                    Let wel op! Python kan alleen Engelse commando's lezen. Dus heb je de commando's geprogrammeerd in een andere taal, zet ze dan nu om naar het Engels.
                start_code: '{print} (''Geweldig gedaan!!!'')'
    dice:
        name: Dobbelsteen
        default_save_name: Dobbelsteen
        description: Maak je eigen dobbelsteen
        levels:
            3:
                story_text: |
                    In dit level kunnen we kiezen uit een lijst. Daarmee kunnen we de computer een kant van de dobbelsteen laten kiezen.
                    Kijk eens bij de spelletjes die je thuis in de kast hebt staan.
                    Zitten daar spelletjes tussen met een (speciale) dobbelsteen? Die kun je ook namaken met deze code.
                    Bijvoorbeeld de dobbelsteen van het spelletje Regenwormen met daarop de getallen 1 tot en met 5 en een regenworm.
                    ![Dobbelsteen van regenwormen met 1 tot en met 5 en een regenworm erop](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {print} Jij gooit _ {at} {random}
                    ```
                story_text_2: |
                    ### Opdracht
                    De dobbelsteen in het voorbeeld hierboven zijn voor het spelletje regenwormen. Kun jij ook normale dobbelstenen maken? Of andere speciale dobbelstenen van een ander spel?
                example_code_2: |
                    ```
                    keuze {is} _
                    ```
                start_code: |
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {print} Jij gooide _ {at} {random} !
            4:
                story_text: |
                    Ook in dit level kun je een dobbelsteen maken. Maar nu mag je het zelf proberen, zonder voorbeeld!

                    ### Opdracht
                    Programmeer een dobbelsteen. Tip: Weet je niet hoe? Spiek dan bij jouw dobbelsteen uit het vorige level, maar vergeet de aanhalingstekens niet.
                start_code: '{print} ''Wat zal de dobbelsteen deze keer aangeven?'''
            5:
                story_text: |
                    Je kunt ook in dit level weer een dobbelsteen maken en daarbij de `{if}` en `{else}` gebruiken.
                    ### Opdracht
                    Maak de code af zodat de code zegt 'Je mag stoppen met gooien' als je een regenworm hebt gegooid. Hij moet 'je moet nog een keer gooien' antwoorden als je iets anders hebt gegooid dan een regenworm.
                    **Extra** Maar misschien wil jij wel een dobbelsteen uit een heel ander spel namaken. Dat is natuurlijk ook goed. Verzin dan zelf een reactie. Bijv 'yes' bij 6 en 'jammer' bij iets anders.
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    worp {is} _
                    {print} 'je hebt ' _ ' gegooid'
                    {if} _ {is} regenworm {print} 'Je mag stoppen met gooien.'
                    _ {print} 'Je moet nog een keer hoor!'
                    ```
                start_code: '{print} ''Wat zal de dobbelsteen deze keer aangeven?'''
            6:
                story_text: |
                    Je kunt nu weer een regenwormendobbelsteen maken, maar nu kun je ook uitrekenen hoeveel punten er gegooid zijn.

                    Je weet misschien dat de worm bij Regenwormen telt voor 5 punten. Nu kun je een worp gooien, en dan meteen uitrekenen hoeveel punten je dan hebt gegooid. Zo doe je dat voor 1 dobbelsteen:
                example_code: |
                    ```
                    keuzes = 1, 2, 3, 4, 5, regenworm
                    punten = 0
                    worp = keuzes {at} {random}
                    {print} 'je gooide ' worp
                    {if} worp {is} regenworm punten = punten + 5
                    {else} punten = punten + worp
                    {print} 'dat zijn dan ' punten ' punten'
                    ```
                    Kun jij de code nu zo maken dat je de totaalscore krijgt voor 8 dobbelstenen? Daarvoor moet je sommige stukken van de code knippen en plakken.
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: '{print} ''Wat zal de dobbelsteen deze keer aangeven?'''
            7:
                story_text: |
                    Je kunt ook in dit level weer een dobbelsteen maken. Met de `{repeat}` code kun je makkelijk een heel handje dobbelstenen rollen.
                    Probeer de voorbeeldcode maar eens af te maken! Op de streepjes moeten meerdere commando's en tekens komen.

                    Maar misschien wil jij wel een hele andere dobbelsteen maken. Dat mag natuurlijk ook!
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: '{print} ''Wat zal de dobbelsteen deze keer aangeven?'''
            10:
                story_text: |
                    Treuzelen je medespelers altijd bij het gooien van de dobbelstenen en duurt je spel te lang? In dit level kun je Hedy in een keer laten gooien voor alle spelers!

                    ### Opdracht
                    Verander de namen in jouw eigen vrienden of je familie, en maak de code af zodat iedereen met de dobbelsteen dobbelt.
                example_code: |
                    ```
                    spelers = Anne, Jonneke, Jessie, Ilona
                    keuzes = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} speler ' gooit ' keuzes {at} {random}
                        {sleep}
                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    In dit dobbelspelletje moet je 6 gooien in zo min mogelijk beurten.
                example_code: |
                    ```
                    opties = 1, 2, 3, 4, 5, 6
                    {print} 'Gooi 6 in zo min mogelijk beurten!'
                    gegooid = 0
                    pogingen = 0
                    {while} gegooid != 6
                        gegooid = opties {at} {random}
                        {print} 'Jij gooide ' gegooid
                        pogingen = pogingen + 1
                    {print} 'Hoera! Je hebt 6 gegooid in ' pogingen ' pogingen.'
                    ```
                start_code: '# Schrijf jouw code hier'
    dishes:
        name: Afwas?
        default_save_name: Afwas
        description: Gebruik de computer om te kijken wie de afwas doet (Start op level 2)
        levels:
            3:
                story_text: |
                    Heb jij altijd onenigheid thuis over wie vandaag de afwas moet doen of de kattenbak moet verschonen?
                    Dan kun je de computer heel eerlijk laten kiezen. Dat kun jij nu programmeren in dit level!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} mensen {at} {random} doet de afwas!
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak je eigen versie van het afwasprogramma. Maak eerst een lijst van jouw gezinsleden.
                    Daarna bedenk je een taak die gedaan moet worden en laat je de computer kiezen wie de taak moet doen met het `{at} {random}` commando.

                    **Extra** Heb jij geen zin om de afwas te doen? Hack dan het programma door jouw naam van het lijstje te halen met `{remove}`.
                start_code: '{print} Wie doet de afwas?'
            4:
                story_text: |
                    Met aanhalingstekens kun je je afwasprogramma beter maken.

                    ### Opdracht
                    Vul eerst de lege plekken in de voorbeeldcode in om hem aan de praat te krijgen.
                    Is dat gelukt? Fantastisch! Dan kun je nu je eigen code van het vorige level kopi√´ren en werkend maken in dit level door aanhalingstekens toe te voegen op de juiste plekken.
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} _ de afwas wordt gedaan door _
                    {print} mensen {at} _
                    ```
                start_code: '{print} ''Wie doet de afwas?'''
            5:
                story_text: |
                    Met de `{if}` kun je jouw programma nu nog leuker maken. Je kan je programma laten reageren op de keuze.
                    ### Opdracht
                    Maak jij de code af zodat het 'chips' {print} als jij aan de beurt bent, en anders 'yes!'?
                    Vergeet de aanhalingstekens niet!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    afwasser {is} mensen {at} {random}
                    _ afwasser {is} Sophie {print} _ chips ik moet de afwas doen _
                    _ {print} ' gelukkig geen afwas want ' _ ' wast al af'
                    ```
                start_code: '{print} ''Wie doet de afwas?'''
            6:
                story_text: |
                    Hoe vaak gaat iedereen eigenlijk afwassen? Is dat wel eerlijk? Dat kun je nu tellen.

                    Nu kun je regels 3 t/m 5 een paar keer (bijv 7 keer voor een hele week) kopi√´ren om weer voor een hele week vooruit te rekenen.
                    Maak jij de code voor de hele week?
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    emma_wast_af = 0
                    afwasser = mensen {at} {random}
                    {print} 'De afwasser is ' afwasser
                    {if} afwasser {is} Emma emma_wast_af = emma_wast_af + 1
                    {print} 'Emma gaat deze week ' emma_wast_af ' keer afwassen'
                    ```
                story_text_2: |
                    Als je heel veel pech hebt moet je bij het vorige afwasprogramma misschien wel de hele week afwassen! Dat is niet eerlijk!
                    Daarom kun je ook het `{remove}` commando gebruiken om de gekozen afwasser uit het lijstje te halen. Zo hoeft de afwasser pas weer af te wassen als iedereen geweest is.
                    De code voor maandag en dinsdag staat klaar, maak jij de rest van de week af?
                    En kan jij een oplossing bedenken voor als het lijstje leeg is...?
                example_code_2: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    afwasser = mensen {at} {random}
                    {print} 'Maandag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    afwasser = mensen {at} {random}
                    {print} 'Dinsdag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    afwasser = mensen {at} {random}
                    ```
                start_code: '{print} ''Wie doet de afwas?'''
            7:
                story_text: |
                    Met de `{repeat}` kun je stukjes code herhalen. Daarmee kun je dan voor meerdere dagen uitrekenen wie er aan de beurt is voor de afwas.
                    ### Opdracht
                    Print voor 7 dagen uit wie er moet afwassen. Op ieder streepje moet een ander commando of getal komen.
                    **(extra)** Er zijn nog meer klusjes in huis! Verander je programma zo dat het voor drie taakjes een rooster maakt. Print er ook bij voor welke taakjes het is.
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    {repeat} _ _ {print} 'De afwasser is ' _ _ _
                    ```
                start_code: '{print} ''Wie doet de afwas?'''
            10:
                story_text: |
                    In dit level kun je je afwasrooster nog makkelijker programmeren en het rooster netjes voor de hele week uitprinten.

                    ### Opdracht
                    Voeg nog een tweede klusje toe, bijvoorbeeld afdrogen, opruimen of stofzuigen, en zorg dat dat ook voor iedere dag toegewezen wordt.
                    <br> **(extra)** Het programma is nu niet zo eerlijk, je kan zomaar pech hebben en heel vaak moeten afwassen. Hoe zou je het eerlijk kunnen maken zodat niemand meer dan twee keer afwast?
                example_code: |
                    ```
                    dagen = maandag, dinsdag, woensdag, donderdag, vrijdag, zaterdag, zondag
                    namen = mama, papa, Emma, Sophie
                    {for} dag {in} dagen
                        {print} 'Op ' dag ' doet ' namen {at} {random} ' de afwas.'
                    ```
                start_code: |
                    dagen = maandag, dinsdag, woensdag, donderdag, vrijdag, zaterdag, zondag
                    namen = mama, papa, Emma, Sophie
                    {for} dag {in} dagen
                       {print} 'Op ' dag ' doet ' namen {at} {random} ' de afwas.'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |-
                    Je kunt in dit level een nieuw commando gebruiken: `{ elif }`. `{elif}` is de afkorting van {else} en {if} en zorgt ervoor dat je 3 (of meer!) opties kunt maken.
                    Kijk maar!
                example_code: |
                    ```
                    prijzen = ['1 miljoen euro', 'een appeltaart', 'niets']
                    jouw_prijs = prijzen[{random}]
                    {print} 'Je wint ' jouw_prijs
                    {if} jouw_prijs == '1 miljoen euro' :
                        {print} 'Joepie, je bent rijk!'
                    {elif} jouw_prijs == 'een appeltaart' :
                        {print} 'Lekker, een appeltaart!'
                    {else}:
                        {print} 'Veel geluk de volgende keer..'
                    ```
                start_code: |
                    prijzen = ['1 miljoen euro', 'een appeltaart', 'niets']
                    jouw_prijs = prijzen[{random}]
                    {print} 'Je wint ' jouw_prijs
                    {if} jouw_prijs == '1 miljoen euro' :
                        {print} 'Joepie, je bent rijk!'
                    {elif} jouw_prijs == 'een appeltaart' :
                        {print} 'Lekker, een appeltaart!'
                    {else}:
                        {print} 'Veel geluk de volgende keer..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    **Voor elk item op mijn lijstje**
                    In dit level leren we een nieuwe code, de code `{for}`. Met `{for}` kun je alle dingen in een lijstje gebruiken.
                    `{for}` mag meerdere regels gebruiken, net zoals de `{repeat}` en `{if}`, dus alle regels eronder moeten met spaties beginnen.
                example_code: |
                    ```
                    dieren {is} hond, kat, papegaai
                    {for} dier {in} dieren
                      {print} dier ' is een leuk dier!'
                    ```
                start_code: |-
                    dieren {is} hond, kat, papegaai
                    {for} dier {in} dieren
                      {print} dier ' is een leuk dier!'
            11:
                story_text: |-
                    We gaan nu een extra vorm van de `{for}` toevoegen! In vorige levels gebruikten we de `{for}` altijd met een lijst. Maar nu mag je `{for}` ook gebruiken met getallen.
                    We doen dat met een variabele, maar gevolgd door `{in}` en `{range}`. Daarna komt het begingetal, `{to}` en dan het eindgetal.

                    Probeer het voorbeeld eens uit. Je moet nog steeds alle regels die na `{for}`komen, inspringen. Dat betekent dat ze moeten beginnen met vier spaties.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10
                        {print} i
                    {print} 'Wie niet weg is, is gezien'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10
                        {print} i
                    {print} 'Wie niet weg is, is gezien'
            17:
                story_text: |
                    Er komt nu een kleine verandering in het inspringen. Elke keer als er moet worden ingesprongen, moet je een `:` typen in de regel daarvoor.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Wie niet weg is, is gezien! Ik kom!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Wie niet weg is, is gezien! Ik kom!'
    fortune:
        name: Waarzegger
        default_save_name: Waarzegger
        description: Laat Hedy jouw toekomst voorspellen
        levels:
            1:
                story_text: |
                    Heb je ooit op de kermis jouw toekomst laten voorspellen door een waarzegger? Of heb je ooit met magische biljartbal gespeeld?
                    Dan weet je waarschijnlijk dat zij niet echt de toekomst kunnen voorspellen, maar dat maakt de voorspelling niet minder leuk!

                    Ook Hedy kunnen we omtoveren in een waarzeggersmachine! In level 1 beginnen we makkelijk, met het voorstellen van Hedy de Waarzegger en het herhalen van de antwoorden van de speler met {echo}.
                    Kijk maar naar het voorbeeld:
                example_code: |
                    ```
                    _ Hoi, ik ben Hedy de waarzegger!
                    _ Wie ben jij?
                    _ Ik voorspel... Ik voorspel...
                    _ Jouw naam is
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm met de gele knop en vul de commando's in op de lijntjes om de code te laten werken.
                    **Extra** Pas de code aan en laat de waarzegger niet alleen je naam voorspellen, maar ook iets anders. Zoals je leeftijd, woonplaats, favoriete sportteam of iets anders over jezelf.
                start_code: '# Maak jouw eigen code hier'
            3:
                story_text: |
                    In het vorige level heb je een begin gemaakt aan de waarzegger, maar echt voorspellingen waren er nog niet.
                    In dit level kun je een variabele gebruiken en het `{at} {random}` commando om Hedy antwoorden te laten kiezen op je vraag.
                    Kijk maar naar dit voorbeeld:
                example_code: |
                    ```
                    {print} Hoi Ik ben Hedy de Waarzegger
                    vraag {is} {ask} Wat wil je weten?
                    {print} vraag
                    antwoorden {is} ja, nee, misschien
                    {print} Mijn glazen bol zegt...
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
                story_text_2: |
                    ### Opdracht
                    Er zijn nu maar 3 antwoordopties waar Hedy uit kan kiezen, kun jij er meer toevoegen? Bijvoorbeeld: zeker weten, geen idee of probeer het nog eens!
                start_code: '# Schrijf jouw code hier'
            4:
                story_text: |
                    In dit level kun je oefenen met de aanhalingstekens.

                    ### Opdracht
                    We hebben alle aanhalingstekens uit het voorbeeld verwijderd. Kun jij ze toevoegen om de code aan de praat te krijgen?

                    ### Opdracht 2
                    Kopieer je eigen waarszeggerscode van het vorige level en voeg aanhalingstekens toe om de code ook in dit level te laten werken.
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Hoi ik ben Hedy de Waarzegger!
                    voorspelling {is} {ask} Wat wil je weten?
                    {print}  Dit is je vraag:  voorspelling
                    antwoorden {is} ja, nee, misschien
                    {print} Mijn glazen bol zegt...
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
            5:
                story_text: |
                    In dit level leer je hoe je er (stiekem) voor kunt zorgen dat Hedy altijd goede voorspellingen voor jou heeft.
                    Door `{if}` en `{else}` te gebruiken kun je er namelijk voor zorgen dat jij de leuke voorspellingen krijgt, en de anderen niet!
                    Kijk naar het voorbeeld om te zien hoe het moet:
                example_code: |
                    ```
                    {print} 'Hoi ik ben Hedy de Waarzegger'
                    {print} 'Ik kan voorspellen wie morgen de loterij wint!'
                    naam {is} {ask} 'Wie ben jij?'
                    {if} naam {is} Hedy {print} 'Hoera, je wint! ü§©' {else} {print} 'Helaas, iemand anders wint üò≠'
                    ```
                start_code: '# Schrijf jouw code hier'
            6:
                story_text: |
                    In dit level kun je rekenen met Hedy, waardoor je "magische" formules kunt gebruiken in je voorspellingen!
                    Zo kun je berekenen hoe rijk je wordt, aan de hand van de formule in het voorbeeld:



                    ### Opdracht
                    Kun jij je eigen (gekke) waarzegmachine maken?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de Waarzegger!'
                    {print} 'Ik kan voorspellen hoeveel kinderen je later krijgt!'
                    leeftijd = {ask} 'Hoe oud ben je?'
                    brusjes = {ask} 'Hoeveel broers/zussen heb je?'
                    lengte = {ask} 'Hoe lang ben je (in cm)?'
                    kinderen = lengte / leeftijd
                    kinderen = kinderen - brusjes
                    {print} 'Jij krijgt later... '
                    {sleep} 2
                    {print} kinderen ' kinderen!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Ik ben Hedy de gekke Waarzegger!'
                    {print} 'Ik kan voorspellen hoe slim jij bent!!'
                    voetbal = {ask} 'Geef een cijfer van 1 tot 10 hoe erg jij van voetbalt houdt?'
                    bananen = {ask} 'Hoeveel bananen heb jij deze week gegeten?'
                    hygiene = {ask} 'Hoevaak heb jij jouw handen gewassen vandaag?'
                    resultaat = bananen + hygiene
                    resultaat = resultaat * voetbal
                    {print} 'Jij bent ' resultaat ' procent slim.'
                    ```
                start_code: '# Schrijf jouw code hier'
            7:
                story_text: |
                    Nu kun je het a`{repeat}` commando gebruiken om meerdere voorspellingen te doen. Kijk maar naar het voorbeeld.
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de waarzegger'
                    {print} 'Je mag 3 vragen stellen!'
                    {repeat} 3 {times} vraag = {ask} 'Wat wil je weten?'
                    ```
                start_code: '# Schrijf jouw code hier'
            8:
                story_text: |
                    Weet je nog dat je in voorgaande levels een waarzegger hebt gemaakt die drie vragen kon stellen?
                    Het probleem dat we tegenkwamen is dat Hedy toen eerst de drie vragen printte en daarna pas de drie antwoorden.
                    Nu is dat probleem opgelost en kan Hedy na een vraag meteen een antwoord printen, omdat je nu een heel stuk code mag herhalen.
                    Kijk maar:

                    ### Opdracht
                    Voeg het juiste commando toevoegen op de streepjes?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de waarzegger!'
                    {print} 'Je mag 3 vragen stellen!'
                    antwoorden = ja, nee, misschien
                    _ _ _
                        vraag = {ask} 'Wat wil je weten?'
                        {print} vraag
                        {sleep}
                        {print} antwoorden {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
            10:
                story_text: |
                    In dit level kun je met een druk op de knop het hele leven voorspellen van al je vrienden tegelijk!

                    ### Opdracht 1
                    Voeg minstens twee namen toe aan de lijst en voer je programma nog een keer uit. Kijk goed wat er nu veranderd is!
                example_code: |
                    ```
                    huizen = villa, appartement, krot, rijtjeshuis
                    liefdes = niemand, een prins(es), zomaar iemand, je ware liefde
                    huisdieren = hond, cavia, olifant
                    namen = Jenna, Ryan, Jim
                    {for} naam {in} namen
                        {print} naam ' woont in een ' huizen {at} {random}
                        {print} naam ' trouwt met ' liefdes {at} {random}
                        {print} naam ' krijgt een ' huisdieren {at} {random} ' als huisdier'
                        {sleep} 2
                    ```
                start_code: '# Schrijf jouw code hier'
            12:
                story_text: |
                    Vanaf level 12 moet je in een lijst ook aanhalingstekens gebruiken.

                    ### Opdracht
                    Kun jij minstens twee voorspellingen toevoegen aan het lijstje?
                example_code: |
                    ```
                    voorspellingen = 'je glijdt uit over een bananenschil', _
                    {print} 'Ik pak mijn glazen bol erbij...'
                    {print} 'Ik zie... Ik zie...'
                    {sleep} 2
                    {print} voorspellingen {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Opdracht
                    We kunnen ook een waarzegger maken in Harry Potter thema. Vul het juiste in op de plek van het streppje zodat er 9 regels geprint worden.
                    **Extra** Verander het thema van de waarzegger ook eens in iets anders! Zoals jouw eigen favoriete (sport)club, boek of show
                example_code: |
                    ```
                    afdelingen = Griffoendor, Zwadderich, Huffelpuf, Ravenklauw
                    vakken = toverdranken, verdediging tegen de zwarte kunsten, bezweringen, transfiguratie
                    angsten = Voldemort, spinnen, je S.L.I.J.M.B.A.L.len niet halen
                    naam = Harry, Ron, Hermelien
                    _
                    _ {print} naam ' wordt geplaatst in ' afdelingen {at} {random}
                    _ {print} naam ' is goed in ' vakken {at} {random}
                    _ {print} naam 's grootste angst is ' angsten {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Spookhuis
        default_save_name: Spookhuis
        description: Ontsnap uit het spookhuis
        levels:
            1:
                story_text: |
                    In dit avontuur leer je een echte spookhuis game maken, waarbij de spelers moeten ontsnappen uit jouw spookhuis door je juiste deur te kiezen.
                    Als je de goede deur kiest overleef je het, maar anders...

                    In level 1 beginnen we ons spookhuisspel door een spannend verhaal te verzinnen en de speler te vragen welk monster ze tegenkomen in het spookhuis.
                example_code: |
                    ```
                    {print} Hoe ben ik hier terechtgekomen?
                    {print} Ik herinner me dat ik mijn vrienden vertelde over die verlaten villa..
                    {print} en toen werd ineens alles zwart.
                    {print} Maar waarom lig ik hier nu op de grond...?
                    {print} ik heb knallende hoofdpijn, alsof ik een harde klap heb gehad.
                    {print} Huh? Wat is dat geluid?
                    {print} Oh nee! Volgens mij ben ik niet alleen in dit huis!
                    {print} Ik moet maken dat ik wegkom!
                    {print} Er staan drie deuren voor me, maar welke moet ik kiezen?
                    {ask} Welke deur kies ik?
                    {echo} Ik kies deur
                    {print} _
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Maak het spookverhaal zelf af door minstens 5 regels aan het verhaal toe te voegen.
                    Begin elke regel met een `{print}` commando.
                start_code: '{print} Hoe ben ik hier terechtgekomen?'
            2:
                story_text: |
                    In dit spookhuis kun je je monsters kiezen met emojis. Al kun je natuurlijk ook gewoon woorden gebruiken.
                example_code: |
                    ```
                    monster1 {is} üëª
                    monster2 {is} ü§°
                    monster3 {is} üë∂
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer.
                    {print} Maar daar word je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```
                story_text_2: |
                    ### Opdracht
                    In het voorbeeldje hierboven is van tevoren bepaald welk monster er achter de deur staat. Dus elke keer als je het programma start, heb je dezelfde uitkomst.
                    Kun jij het `{ask}` commando gebruiken om het spookhuis interactief te maken, zodat de spelers kunnen kiezen welke monsters ze tegenkomen?
                example_code_2: |
                    ```
                    monster1 {is} _
                    monster2 {is} _
                    monster3 {is} _
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer.
                    {print} Maar daar word je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    In het vorige level heb je een spannende intro bedacht voor je spookhuis, maar een echt spel is het nog niet: Het loopt namelijk altijd hetzelfde af.
                    In level twee kun je je verhaal interactiever maken door verschillende eindes te bedenken: soms word je opgepeuzeld door een verschrikkelijk monster en soms ontsnap je!
                    Hedy kiest willekeurig of je overleeft of niet...
                example_code: |
                    ```
                    _ Ontsnap uit het spookhuis!
                    _ Er zijn drie deuren voor je neus...
                    _ _ _ Welke deur kies jij?
                    _ Je opent deur ... keuze
                    monsters _ een zombie, een vampire, LEEG JE BENT ONTSNAPT
                    _ Daar zie je...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '{print} Ontsnap uit het spookhuis!'
            4:
                story_text: |
                    In dit level heb je geleerd hoe je aanhalingstekens moet gebruiken.

                    ### Opdracht 1
                    Kun jij de voorbeeldcode afmaken door de streepjes in te vullen?

                    ### Opdracht 2
                    Kopieer je eigen spookhuiscode van het vorige level en voeg aanhalingstekens toe om de code ook in dit level te laten werken.
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Ontsnap uit het spookhuis!
                    {print} Voor je staan drie deuren...
                    keuze {is} {ask} Welke deur kies je?
                    {print} Je koos deur keuze
                    monsters {is} een zombie, een vampier, NIKS JE ONTSNAPT
                    {print} Jij ziet...
                    {sleep}
                    {print} monsters {at} {random}
                    ```
                start_code: '{print} ''Ontsnap uit het spookhuis!'''
            5:
                story_text: |
                    Tot nu toe werd er in je spookhuisspel wel altijd aan de speler gevraagd welke deur geopend moest worden, maar zoals je misschien al gemerkt hebt, maakte het niet uit wat voor antwoord de speler gaf.
                    De speler kon netjes een deur kiezen, maar als de speler een verkeerd antwoord gaf, zoals 'pannenkoek!', dan zou de speler het spel nog steeds kunnen winnen (ook al is er niet eens een deur gekozen!).
                    In dit level kun je alleen winnen als je dezelfde deur kiest als Hedy heeft gekozen en maakt het dus echt uit welk antwoord je invult!

                    ### Opdracht
                    Kun jij de 4 missende woorden invullen op de streepjes?
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    {print} 'Voor je staan 3 deuren...'
                    deuren {is} 1,2,3
                    monsters {is} weerwolf, mummy, vampier, zombie
                    gekozendeur {is} {ask} 'Welke deur kies je?'
                    {print} 'Jij kiest deur...' gekozendeur
                    {sleep}
                    goededeur {is} deuren {at} {random}
                    _ _ _ _ {print} 'Hoera! Je ontsnapt!'
                    {else} {print} 'Oh nee! Je wordt opgepeuzeld door een...' monsters {at} {random}
                    ```
                start_code: '{print} ''Ontsnap uit het spookhuis!'''
            9:
                story_text: |
                    In de vorige levels heb je geleerd hoe je hele stukken code meerdere keren kunt herhalen. Hierdoor kun je levels maken in je spookhuisgame!
                    In de lagere levels hoefde je maar een kamer door voordat je ontsnapt was, maar in dit level moet je wel 3x uit een kamer vluchten voordat je ontsnapt bent.
                    Dat maakt het spel een stuk lastiger om te winnen, kijk maar...

                    ### Opdracht
                    Je spel is nu wel heel lastig te winnen... Kun jij je spel zo aanpassen dat er maar √©√©n foute deur is om te kiezen, in plaats van twee?
                    Tip: Je moet goede_deur veranderen in foute_deur, en de `{if}` en `{else}` code omdraaien.
                    En natuurlijk mag je ook je eigen draai aan het verhaal geven. Andere monsters, of juist cadeautjes?
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    speler = levend
                    deuren = 1, 2, 3
                    monsters = zombie, vampier, mummy, reuzespin
                    {repeat} 3 {times}
                        {if} speler {is} levend
                            goede_deur = deuren {at} {random}
                            {print} 'Voor je staan drie deuren...'
                            gekozen_deur = {ask} 'Welke deur kies je?'
                            {print} 'Jij kiest deur...' gekozen_deur
                            {sleep}
                            {if} gekozen_deur {is} goede_deur
                                {print} 'Gelukkig! Geen monster!'
                            {else}
                                {print} 'Je wordt opgegeten door een... ' monsters {at} {random}
                                speler = dood
                        {else}
                            {print} 'GAME OVER'
                    {if} speler {is} levend
                        {print} ' Hoera! Je bent ontsnapt!'
                    ```
                start_code: '{print} ''Ontsnap uit het spookhuis!'''
            11:
                story_text: |
                    De speler van het spookhuis loopt door drie kamers en komt steeds een monster tegen.

                    ### Opdracht 1
                    Maak het programma af op de streepjes, en zorg dat je steeds laat weten in welke kamer de speler is.

                    ### Opdracht 2
                    Maak er een spannend avontuur van door deze stappen te volgen:

                    1. Maak een lijst met keuzes (bijv aanvallen of wegrennen)
                    2. Zorg dat de speler kan kiezen met een `{ask}`
                    3. Is het antwoord goed? Dan komt het volgende monster. Is de keuze fout? Laat dat de speler weten met een `{print}`.

                    **(extra)** Als je de foute keuze maakt, komt er toch nog een monster! Denk na over hoe je dat zou kunnen veranderen.
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    monsters = zombie, vampier, mummy, reuzespin
                    _
                        {print} 'Kamer ' i
                        monster = monsters {at} {random}
                    ```
                start_code: '{print} ''Ontsnap uit het spookhuis!'''
            14:
                story_text: |
                    In dit level gebruik je `<` en `>` om levens toe te voegen aan je spel.
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis'
                    levens = 3
                    deuren = 1, 2, 3
                    monsters = 'de boze heks', 'een zombie', 'een slapende 3 koppige hond'
                    {for} i {in} {range} 1 {to} 10
                        {if} levens > 0
                            goede_deur = deuren {at} {random}
                            monster = monsters {at} {random}
                            gekozen_deur = {ask} 'Welke deur kies jij?'
                            {if} goede_deur == gekozen_deur
                                {print} 'Je hebt de goede deur gekozen'
                            {else}
                                {print} 'Je ziet...' monster
                                {if} monster == 'een slapende 3 koppige hond'
                                    {print} 'Pffieuw.... Hij slaapt'
                                {else}
                                    {print} 'Je hebt een leven kwijt!'
                                    levens = levens - 1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# Schrijf jouw code hier'
            16:
                story_text: |
                    Deze spookhuisgame gebruikt de connectie tussen de verschillende lijstjes, die je in dit level kunt gebruiken.
                    Bijvoorbeeld: alle eigenschappen die bij de zombie horen staan als eerste in alle lijstjes, de heks als tweede en de vampier derde.
                    Kijk maar naar de code.
                example_code: |
                    ```
                    getallen = [1, 2, 3]
                    i = getallen[{random}]
                    hint = ['gegrom', 'kakelende lach', 'vleermuis gefladder']
                    monsters = ['zombie', 'heks', 'vampier']
                    noodlot = ['Je brein wordt opgepeuzeld', 'Je wordt vervloekt', 'Je wordt gebeten']
                    goedlot = ['Je gooit de ham naar de zombie die er lekker aan begint te knagen.', 'Je zet de gordijnen in de fik. De heks vlucht, bang voor het vuur', 'De vampier haat knoflook en vlucht weg']
                    wapens = ['rauwe ham', 'aansteker', 'knoflook']
                    {print} 'Je staat bij een oude verlaten villa'
                    {print} 'Iets is hier niet pluis...'
                    {print} 'Je hoort ' hint[i]
                    {print} 'Je gaat op ontdekking'
                    {print} 'Je stapt de keukendeur binnen en ziet daar een aansteker, een rauwe ham en een knoflook'
                    jouw_wapen = {ask} 'Wat neem je mee?'
                    {print} 'Met je ' jouw_wapen ' loop je door naar de woonkamer'
                    {print} 'Daar zie je een ' monsters[i]
                    benodigde_wapen = wapens[i]
                    {if} jouw_wapen == benodigde_wapen
                        {print} 'Je gebruikt je ' jouw_wapen
                        {print} goedlot[i]
                        {print} 'Jij wint!'
                    {else}
                        {print} 'Je hebt helaas het verkeerde wapen'
                        {print} noodlot[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# Schrijf jouw code hier'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    In dit level is er iets nieuws, de `{if}`! Met de `{if}` kun je een keuze maken tussen twee verschillende opties.
                    Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.
                example_code: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk' {else} {print} 'minder leuk!'
                    ```
                story_text_2: |
                    Soms wordt code met een `{if}` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `{else}`:
                example_code_2: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer je eigen code te maken met `{if}` en `{else}`. Je kunt het voorbeeld gebruiken als je dat wilt.
                example_code_3: |
                    ```
                    antwoord {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Goedzo!'
                    _ _ 'Nee 2 + 2 = 4'
                    ```
                start_code: |-
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
            8:
                story_text: |
                    Je hebt al geleerd hoe je een blok aan regels code kunt herhalen met`{repeat}`.
                    Je kunt nu ook inspringen na het {if} of {else} commando om zo'n blok te vormen.
                    Kijk maar naar het voorbeeld.

                    ### Opdracht
                    Voeg een {else} commando toe aan de voorbeeldcode. Maak een blok van de regels code door in te springen. Inspirngen doe je door de regel te starten met 4 spaties.
                example_code: |
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom Hedy'
                        {print} 'Jij mag computeren!'
                    ```
                start_code: |
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom Hedy'
                        {print} 'Jij mag computeren!'
            9:
                story_text: |
                    In dit level kun je een {if} commando in een ander {if} commando stoppen.
                example_code: |
                    doorgaan = {ask} 'Wil je doorgaan?'
                    {if} doorgaan = ja
                        zeker = {ask} 'Weet je het zeker?'
                        {if} zeker = ja
                            {print} 'We gaan door'
                        {else}
                            {print} 'Je bent niet zeker'
                    {else}
                        {print} 'Je wil niet doorgaan'
                start_code: |
                    doorgaan = {ask} 'Wil je doorgaan?'
                    {if} doorgaan = ja
                        zeker = {ask} 'Weet je het zeker?'
                        {if} zeker = ja
                            {print} 'We gaan door'
                        {else}
                            {print} 'Je bent niet zeker'
                    {else}
                        {print} 'Je wil niet doorgaan'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    **Lijstjes**
                    Om te kijken of iets in een lijst zit, kun je nu ook gebruik maken van `{in}`.
                    Deze code print mooi als je geel of rood antwoordt, en anders meh!
                example_code: |
                    ```
                    mooie_kleuren {is} geel, rood
                    lievelingskleur {is} {ask} 'Wat is jouw lievelingskleur?'
                    {if} lievelingskleur {in} mooie_kleuren {print} 'mooi!'
                    {else} {print} 'mwah'
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak de voorbeeldcode af door de juiste codes op de streepjes te zetten.
                    Ben je klaar? Probeer dan een eigen code te verzinnen.
                example_code_2: |
                    ```
                    dieren is koe, schaap, varken
                    antwoord is ask 'Wat is je lieverlingsdier?'
                    _ antwoord _ dieren _ 'Mijne ook!'
                    _ _ 'Mijn lievelingsdieren zijn koeien, schapen en varkens'
                    ```
                start_code: |
                    mooie_kleuren {is} geel, rood
                    lievelingskleur {is} {ask} 'Wat is jouw lievelingskleur?'
                    {if} lievelingskleur {in} mooie_kleuren {print} 'mooi!'
                    {else} {print} 'mwah'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variabelen
                    Je kunt een waarde in een woord opslaan met het commando `{is}`. Dit noemen we een **variabele**. In dit voorbeeld hebben we een variabele gemaakt die 'naam' heet en een variabele 'leeftijd'. Je kunt een variabele overal in de zin plaatsen waar je wil en Hedy vervangt de variabele dan voor de waarde. Kijk maar:
                example_code: |
                    ```
                    naam {is} Hedy
                    leeftijd {is} 15
                    {print} naam is leeftijd jaar oud
                    ```
                story_text_2: |
                    ### Opdracht
                    Tijd om je eigen variabelen te maken!
                    In het voorbeeld hebben we de variabele 'lievelingsdier' gemaakt. In regel 1 wordt de variabele 'ingesteld', en in regel 2 gebruiken we de variabele met een `{print}`.
                    Maak eerst ons voorbeeld af door jouw lievelingsdier in te vullen op de plek van het streepje. Bedenk daarna zelf minstens 3 van zulk soort codes. Kies daarbij een variabele en stel hem in met het `{is}` commando. Gebruik daarna de variabele in een zin met een `{print}` commando, zoals wij in het voorbeeld hebben gedaan.
                example_code_2: |
                    ```
                    lievelingsdier is _
                    {print} Ik hou van lievelingsdier
                    ```
                start_code: |-
                    naam {is} Hedy
                    leeftijd {is} 15
                    {print} naam is leeftijd jaar oud.
            6:
                story_text: |
                    We veranderen ook hoe je een woord opslaat in een variabele! Je mag hierbij vanaf nu een `=` in plaats van een `{is}` gebruiken. Kijk maar:                example_code: |
                    ```
                    naam = Hedy
                    antwoord = 20 + 4
                    ```
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    naam = Hedy
                    antwoord = 20 + 4
            14:
                story_text: |
                    We gaan nieuwe tekens leren, je kent ze misschien wel van rekenen/wiskunde, `<` en `>`.
                    De `<` kijkt of het eerste getal kleiner is dan de tweede. Bijvoorbeeld met `leeftijd < 12` kun je kijken of `leeftijd` kleiner is dan 12.
                    Als je wil kijken of een getal kleiner of even groot is dan een ander getal, kun je `<=` gebruiken. Bijvoorbeeld `leeftijd <= 11`.
                    De `>` kijkt of iets groter is dan het tweede getal. Bijvoorbeeld met `punten > 10` kun je kijken of `punten` groter is dan 10.
                    Als je wil kijken of een getal groter of even groot is als een ander getal, kun je `>=` gebruiken. Bijvoorbeeld `punten >= 11`.
                    Je gebruikt de vergelijkingen in de `{if}` zo:
                example_code: |
                    ```
                    leeftijd = {ask} 'Hoe oud ben jij?'
                    {if} leeftijd < 12
                            {print} 'Dan ben je jonger dan ik!'
                    ```
                story_text_2: |
                    Als je iets precies wilt vergelijken, mag je dat nu doen met twee isgelijktekentjes. Zo doen de meeste programmeertalen dat:
                example_code_2: |
                    ```
                    name = {ask} 'Hoe heet jij?'
                    {if} name == 'Hedy'
                        {print} 'Jij bent cool!'
                    ```
                story_text_3: |
                    Je kan ook vergelijken of iets *niet* hetzelfde is met `!=`. Zo:
                example_code_3: |
                    ```
                    name = {ask} 'Hoe heet jij?'
                    {if} name != 'Hedy'
                        {print} 'Jij bent Hedy niet'
                    ```
                start_code: |-
                    leeftijd = {ask} 'Hoe oud ben jij?'
                    {if} leeftijd < 13
                        {print} 'Dan ben je jonger dan ik!'
                    {else}
                        {print} 'Dan ben je ouder dan ik!'
    language:
        name: Woordjes leren
        default_save_name: Woordjes leren
        description: Maak je eigen programma om woordjes te leren in een vreemde taal
        levels:
            5:
                story_text: "Maak een programma om woordjes mee te leren in een andere taal.\n \n### Opdracht\nVoeg minstens 3 nieuwe woorden om te leren toe aan het programma.\n **Extra** Je kunt natuurlijk ook een andere taal kiezen dan Frans. Verander de code in de taal die jij graag zou willen leren.\
                    \ \n"
                example_code: |
                    ```
                    {print} 'Leer Frans!'
                    kat {is} {ask} 'üê±'
                    {if} kat {is} chat {print} 'Goedzo!'
                    {else} {print} 'Helaas, kat is chat'
                    kikker {is} {ask} 'üê∏'
                    {if} kikker {is} grenouille {print} 'Super!'
                    {else} {print} 'Helaas, kikker is grenouille'
                    ```
                start_code: '# Schrijf jouw code hier'
            16:
                story_text: |
                    Maak je eigen programma om woordjes te leren in een vreemde taal.
                example_code: |
                    ```
                    franswoord = ['bonjour', 'ordinateur', 'pomme de terre']
                    vertaling = ['hallo', 'computer', 'aardappel']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        antwoord = {ask} 'Wat betekent ' franswoord[i] '?'
                        correct = vertaling[i]
                        {if} antwoord == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Fout, ' franswoord[i] ' betekent ' vertaling[i]
                    {print} 'Je hebt ' score ' goede antwoorden gegeven.'
                    ```
                start_code: '# Schrijf jouw code hier'
    maths:
        name: Rekenen
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In level 6 is er iets nieuws: je kunt nu ook rekenen. De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.
                    De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
                    Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als "5 keer 5", dan onthoud je dat het makkelijkst.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 min 5 is ' 5 - 5
                    {print} '5 keer 5 is ' 5 * 5
                    {print} '5 gedeeld door 5 is ' 5 / 5
                    ```
                start_code: |
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 min 5 is ' 5 - 5
                    {print} '5 keer 5 is ' 5 * 5
                    {print} '5 gedeeld door 5 is ' 5 / 5
            12:
                story_text: |-
                    **Kommagetallen**
                    Tot nu toe mocht je bij Hedy geen kommagetallen gebruiken zoals 1.5, maar vanaf nu mag dat wel. Let op! Gebruik een punt en geen komma.
                example_code: |
                    ```
                    {print} 'Anderhalf plus anderhalf is...'
                    {print} 1.5 + 1.5
                    ```
                story_text_2: |-
                    **Rekenen met woorden**
                    In dit level kun je het + teken ook gebruiken met woorden. Zoals het voorbeeld hier:
                example_code_2: |
                    ```
                    a = 'Hallo '
                    b = 'wereld!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'kommagetallen gebruiken een punt'
                    {print} 2.5 + 2.5
    parrot:
        name: Papegaai
        default_save_name: Papegaai
        description: Maak je eigen online papegaai die je napraat!
        levels:
            1:
                story_text: |
                    Maak je eigen online papegaai die je napraat!
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    {ask} Wie ben jij?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Laat de papegaai nu een andere vraag stellen dan in het voorbeeld. Vul de vraag in op het lijntje.
                    **Extra** Je kunt de papegaai ook meerdere vragen laten stellen. Typ onder jouw code nog meer regels code.
                example_code_2: |
                    ```
                    {print} Ik ben Hedy de papegaai
                    {ask} _
                    {echo}
                    {echo}
                    ```
                start_code: |
                    {print} Ik ben papegaai Hedy
                    {ask} Wie ben jij?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Maak je eigen online papegaai die je napraat!
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    naam {is} {ask} Wie ben jij?
                    {print} naam
                    {sleep}
                    {print} koppie krauw
                    {sleep}
                    {print} naam
                    ```
                story_text_2: |
                    ### Opdracht
                    Je kunt variabelen gebruiken om de papegaai meer te laten zeggen dat alleen je naam. Kun jij deze code afmaken?
                start_code: '{print} Ik ben Hedy de papegaai!'
            3:
                story_text: |
                    Leer je papegaai nieuwe woordjes met het `{add}` commando!
                    ### Opdracht
                    Hoe kun je de papegaai meerdere woorden laten zeggen?
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} Train je papegaai!
                    nieuw_woord {is} {ask} Welk woord moet je papegaai leren?
                    {add} nieuw_woord {to_list} woorden
                    {print} üßí: Zeg nieuw_woord , Hedy!
                    {print} ü¶ú: woorden {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
            4:
                story_text: |
                    In dit level gebruiken we aanhalingstekens bij de commando's `{ask}` en `{print}`.
                    ### Opdracht
                    Maak de code af door aanhalingstekens toe te voegen op de lijntjes.
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} _ Welk woord moet je papegaai leren? _
                    {add} nieuw_woord {to_list} woorden
                    {print} _ üßí: Zeg _ nieuw_woord _ , Hedy! _
                    {print} _ ü¶ú: _ woorden {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
            5:
                story_text: |
                    Beloon je papegaai als hij het nieuwe woordje zegt!

                    Maak de code af door de juiste commando's in te vullen op de lijntjes.
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} 'Welk woord moet je papegaai leren?'
                    {add} nieuw_woord {to_list} woorden
                    {print} 'üßí Zeg ' nieuw_woord ', Hedy!'
                    gezegd_woord {is} woorden {at} {random}
                    {print} 'ü¶ú ' gezegd_woord
                    _ gezegd_woord {is} nieuw_woord _ 'üßí Goedzo! üç™'
                    _ _ 'üßí Nee! Zeg ' nieuw_woord
                    ```
                start_code: '# Schrijf jouw code hier'
    piggybank:
        name: Spaarvarken
        default_save_name: Spaarvarken
        description: Tel je zakgeld!
        levels:
            12:
                story_text: |
                    In dit avontuur kun je een digitaal spaarvarkentje maken.

                    ### Opdracht
                    Maak de code af zodat je jouw zakgeld kunt tellen en kunt berekenen hoe lang het duurt voordat je iets kunt kopen!
                    **(extra)** Misschien heb je al wat geld gespaard? Voeg een extra `{ask}` toe en trek je al gespaarde bedrag af van wat je nog moet sparen.
                example_code: |
                    ```
                    {print} 'Het digitale spaarvarken'
                    wens = {ask} 'Wat zou je graag willen hebben?'
                    prijs = {ask} 'Hoeveel kost dat?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'
                    weken = prijs / zakgeld
                    {print} 'Je kunt over ' _ ' weken een ' _ ' kopen!'
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In dit level kun je Hedy laten vertellen of je al genoeg geld hebt gespaard of niet!
                example_code: |
                    ```
                    geld = {ask} 'Hoeveel geld heb je al gespaard?'
                    wens = {ask} 'Hoeveel geld heb je nodig?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'
                    sparen = wens - geld
                    weken = sparen / zakgeld
                    {if} wens > geld
                        {print} 'Helaas even doorsparen!'
                        {print} 'Je moet nog ' weken ' weken.'
                    {else}
                        {print} 'Hoera, je hebt genoeg!'
                        {print} 'Op naar de winkel!'
                    ```
                start_code: '# Schrijf jouw code hier'
    pressit:
        name: Toetsaanslag
        default_save_name: Toetsaanslag
        description: Koppel een toets aan code
        levels:
            5:
                story_text: "In dit level leren we nog een commando: `{pressed}`.\nMet `{pressed}` kun je toetsen op het toetsenbord gebruiken om te bepalen welken stukjes code er worden uitgevoerd.\n\n### Opdracht\n Bekijk het voorbeeld en voeg nog een regel toe die op toetsen reageert. \n"
                example_code: |
                    ```
                    {print} 'Wil je een goed (g) of slecht (a) einde?'
                    {if} g {is} {pressed} {print} 'Ze leefden nog lang en gelukkig ‚ù§'
                    {else} {print} 'De prins werd opgegeten door een nijlpaard üò≠'
                    ```
                story_text_2: |
                    Je kan iedere code koppelen aan een toets, ook de tekenschildpad.

                    ### Opdracht
                    Kopieer de regels code zodat je een grotere tekening kan maken.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# Jouw code komt hier'
            7:
                story_text: |
                    Nu je `{repeat}` hebt geleerd kunnen we meerdere keren kijken of er een toets is ingedrukt. Dat kan je gebruiken om de schildpad te besturen.

                    ### Opdracht
                    De voorbeeldcode kijkt √©√©n keer of er een toets is ingedrukt. Pas de code aan zodat dat vaker gebeurt en maak er dan een mooie tekening meer.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# schrijf jouw code hier'
            9:
                story_text: |
                    We kunnen nu met `{pressed}` een programma maken om typen te oefenen.

                    ### Opdracht
                    Maak de code af. Er moet steeds een willekeurige letter worden gekozen. Doe je het goed dan krijg je een punt erbij, bij een foute toets gaan er twee punten af!
                example_code: |
                    ```
                    punten = 1
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Typ de letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# schrijf jouw code hier'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introductie print commando
        levels:
            1:
                story_text: |
                    ## Het print commando
                    Je kunt tekst laten verschijnen in je scherm met het `{print}` commando.
                example_code: |
                    ```
                    {print} Hey, programmeur!
                    {print} Welkom bij Hedy!
                    ```
                story_text_2: |
                    ### Opdracht
                    In Hedy vind je bij elk avontuur opdrachten. In de opdrachten oefen je de nieuwe commando's en concepten, en je kunt de voorbeeldcodes omtoveren tot je eigen programma.
                    In deze opdracht zie je een roze streepje. Op dit streepje moet jij zelf een regel code invullen voordat je de code kunt uitvoeren.

                    Vul in dit geval het `{print}` commando in op de plek van het streepje en voeg daarna nog 5 regels code toe. Elk van die regels moet starten met een `{print}` commando.
                    Veel plezier!
                example_code_2: |
                    ```
                    _ Hallo!
                    ```
                start_code: |
                    {print} Welkom bij Hedy!
            18:
                story_text: |-
                    We gaan nu echte Python code programmeren! Dat betekent dat we vanaf nu haakjes moeten gebruiken bij `{print}` en `{range}`.
                    Het betekent ook dat je nu in andere Python omgevingen kunt gaan programmeren met Hedy code. Je moet hierbij dan wel de Engelse commando's gebruiken. Als je de Engelse commando's nog niet gebruikte, dan kun je nu de schakelaar omzetten in het commandomenu.
                example_code: |
                    ```
                    {print}('Hallo!')
                    {for} i {in} {range}(1, 10):
                        {print}('Dit is regel ', i)
                    ```
                story_text_2: Als je meer dan √©√©n regel wilt printen, dan moet je die scheiden met een komma.
                example_code_2: |
                    ```
                    temperatuur = 25
                    {print}('Het is ', temperatuur, ' graden buiten')
                    ```
                story_text_3: Als laatste veranderen we het woord dat je moet gebruiken voor `{ask}`. Vanaf nu noemen we ask`{input}`.
                example_code_3: |
                    ```
                    {print}('Mijn naam is Hedy!')
                    naam = {input}('Hoe heet je?')
                    {print}('Dus jouw naam is ', naam)
                    ```
                start_code: |-
                    naam = 'Hedy'
                    {print}('Mijn naam is ', naam)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Maak je eigen quiz!
        levels:
            14:
                story_text: |
                    In dit avontuur leer je je eigen quiz maken. Vul het voorbeeld in, maak extra vragen en geniet van je eigen quiz!
                    Je kunt de quiz maken over wat je maar wil: je hobby, lievelingsdier, lievelingsboek of ...?
                example_code: |
                    ```
                    {print} 'Maak je eigen quiz'
                    punten_a = 0
                    punten_b = 0
                    {print} 'Vraag'
                    {print} 'Antwoordoptie A'
                    {print} 'Antwoordoptie B'
                    antwoord = {ask} 'Welk antwoord?'
                    {if} antwoord == 'A'
                        punten_a = punten_a + 1
                    {if} antwoord == 'B'
                        punten_b = punten_b + 1
                    {print} 'Einde van de quiz!'
                    {print} 'We kijken naar de resultaten!'
                    {if} punten_a > punten_b
                        {print} 'Jij hoort in club A'
                    {if} punten_b > punten_a
                        {print} 'Jij hoort in club B'
                    ```
                start_code: '# Schrijf jouw code hier'
    quotation_marks:
        name: '''Aanhalingstekens'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Aanhalingstekens'
                    In level 4 zijn `{ask}` en `{print}` anders.

                    Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

                    Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `{is}`.

                    De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!
                example_code: |
                    ```
                    {print} 'Vanaf nu gebruik je aanhalingstekens!'
                    antwoord {is} {ask} 'Wat gebruiken we vanaf nu?'
                    {print} 'We gebruiken ' antwoord ' vanaf nu'
                    ```
                story_text_2: |
                    ## Hoge komma's
                    Let op! Omdat we nu aanhalingstekens gebruiken, raakt Hedy in de war als je een hoge komma wil gebruiken in woorden zoals: Auto's.
                    Zorg dus dat je de hoge komma's weghaalt en de spelling dus aanpast naar: Autos.
                    In het voorbeeldje hieronder zie je wat er gebeurt als je de hoge komma's wel gewoon blijft gebruiken.
                example_code_2: |
                    ```
                    _ Let op dit voorbeeld laat zien hoe het NIET moet_
                    {print} 'Daar rijden twee oma's in hun auto's '
                    {print} 'Zouden zij liever 's middags of 's avonds rijden?'
                    ```
                start_code: |-
                    {print} 'Vanaf nu gebruik je aanhalingstekens!'
                    antwoord {is} {ask} 'Wat gebruiken we vanaf nu?'
                    {print} 'We gebruiken ' antwoord ' vanaf nu'
            12:
                story_text: |
                    **Tekst moet altijd met aanhalingstekens**
                    Nu we verder zijn met programmeren moet je ook weten dat tekst altijd tussen aanhalingstekens hoort. Ook in de `=`.
                example_code: |
                    ```
                    naam = 'Hedy de Robot'
                    {print} 'Hallo ' naam
                    ```
                story_text_2: |
                    **Tekst moet ook in lijstjes met aanhalingstekens**
                    Ook bij lijstjes gebruik je nu aanhalingstekens. Let op: elk item op je lijstje moet los tussen aanhalingstekens staan!
                    Hierdoor kun je nu ook twee woorden opslaan als 1 item op je lijstje, bijvoorbeeld 'Iron Man'.
                example_code_2: |
                    ```
                    superhelden = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superhelden {at} {random}
                    ```
                story_text_3: |
                    **Tekst moet ook aanhalingstekens na een `{if}` commando**
                example_code_3: |
                    ```
                    naam = {ask} 'Wie ben jij?'
                    {if} naam = 'Hedy de Robot'
                        {print} 'Hoi!'
                    ```
                story_text_4: |
                    **Getallen hoeven geen aanhalingstekens**
                    Alleen bij tekst gebruik je aanhalingstekens, bij getallen dus niet:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'Jij hebt ' score ' gehaald!'
                    ```
                start_code: |-
                    name = {ask} 'Wie ben jij?'
                    {if} name = 'Hedy de Robot'
                        {print} 'Hoi!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## Maak een lijstje!
                    In level 3 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `{at} {random}`.
                example_code: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    {print} dieren {at} {random}
                    ```
                story_text_2: |
                    Je kunt {at} {random} ook in een zin gebruiken.
                example_code_2: |
                    ```
                    eten {is} broodje, pizza, salade, burrito
                    {print} Ik ga een eten {at} {random} lunchen.
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer het `{at} {random}` commando uit door je eigen gameshow te maken (zoals Miljoenenjacht op tv). De kandidaat kiest een koffer of een deur waarachter een grote prijs verstopt kan zitten!
                    Lukt het jou om zo'n programma te maken? De eerste regels zijn alvast te vinden in het voorbeeld
                example_code_3: |
                    ```
                    {print} Win een prijs!
                    {print} Voor je staan 3 koffers...
                    gekozen {is} {ask} Welke koffer kies je?
                    prijzen {is} _
                    _
                    ```
                start_code: |
                    dieren {is} hond, kat, kangoeroe
                    {print} dieren {at} {random}
            16:
                story_text: |-
                    We zijn aangekomen bij de laatste paar Hedy levels. We komen dus steeds dichter bij echte Python code.
                    In dit level gaan we leren hoe je lijsten maakt op de Pythonmanier. Dat werkt met vierkante haakjes zetten om lijstjes, dat zijn deze: `[` en `]`.
                    Als we woorden in de lijst willen zetten, moeten we om de woorden ook enkele aanhalingstekens zetten. Bij getallen hoeft dat niet.
                    We kunnen in dit level ook met een getal plekken in lijstjes aanwijzen.
                example_code: |
                    ```
                    vrienden = ['Ahmed', 'Ben', 'Cayden']
                    geluksgetallen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                       {print} 'het geluksgetal van ' vrienden[i]
                       {print} 'is ' geluksgetallen[i]
                    ```
                start_code: |-
                    vrienden = ['Ahmed', 'Ben', 'Cayden']
                    geluksgetallen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'het geluksgetal van ' vrienden[i]
                        {print} 'is ' geluksgetallen[i]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is leuk!'
                    ```
                start_code: |
                    {print} 'Fijne verjaardag voor jou'
                    {print} 'Fijne verjaardag voor jou'
                    {print} 'Fijne verjaardag lieve Hedy'
                    {print} 'Fijne verjaardag voor jou!'
            8:
                story_text: |
                    **Inspringen**
                    `{ask}` en `{print}` werken nog steeds zoals je gewend bent. Maar bij  `{if}`, `{else}`, `{pressed}` en `{repeat}` is er iets veranderd!
                    Je kunt vanaf dit level meerdere regels samen uitvoeren. Daarvoor moet je deze regels *inspringen*, dat betekent dat ze moeten beginnen met vier spaties.
                    Ook als je maar √©√©n regel in een blok wilt zetten, moet je inspringen!
                example_code: |
                    Zo werkt het `{repeat}` commando vanaf nu:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo allemaal'
                        {print} 'Dit wordt allemaal 5 keer herhaald'
                    ```
                    Dit is hoe `{if}` en `{else}` vanaf nu werken:
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom, Hedy'
                        {print} 'Je kan nu spelen op je computer!'
                    {else}
                        {print} 'INDRINGER!'
                        {print} 'Je kunt deze computer niet gebruiken!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo allemaal'
                        {print} 'Dit wordt allemaal 5 keer herhaald'
            9:
                story_text: |
                    In dit level kun je niet alleen meerdere regels gebruiken bij `{if}` en `{repeat}`, maar je kunt ze ook nog eens in elkaar zetten!
                    In het voorbeeldje zie je een `{if}` commando in een `{repeat}` commando staan.

                    Andersom mag het ook en een `{if}` mag ook in een `{if}` en een `{repeat}` in een `{repeat}`.
                    Probeer het maar eens!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        eten = {ask} 'Wat wil je bestellen?'
                        {if} eten {is} pizza
                            {print} 'lekker'
                        {else}
                            {print} 'pizza is lekkerder'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        eten = {ask} 'Wat wil je bestellen?'
                        {if} eten {is} pizza
                            {print} 'lekker'
                        {else}
                            {print} 'pizza is lekkerder'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    Je hebt nu geoefend met het `{repeat}` commando in combinatie met het `{print}` commando, maar wist je dat je `{repeat}` ook met andere commando's kunt combineren?
                    In deze voorbeeldcode kun je zien hoe je `{repeat}` ook met `{ask}`, `{if}` of `{else}` gebruikt kan worden.
                example_code: |
                    ```
                    {repeat} 2 {times} antwoord = {ask} 'Wist je al dat je een vraag ook kunt herhalen?'
                    {if} antwoord {is} ja {repeat} 2 {times} {print} 'Daar was jij al achter!'
                    {else} {repeat} 3 {times} {print} 'Je hebt weer iets nieuws geleerd!'
                    ```
                story_text_2: |
                    Met `{repeat}` kun je ook variabelen gebruiken om in te stellen hoe vaak iets herhaald moet worden. In het voorbeeld zie je dat we eerst vragen hoe oud iemand is met de variabele leeftijd.
                    Daarna, in regel 3, wordt 'Hieperdepiep Hoera!' net zo vaak herhaald als diegene oud is geworden. Zo hebben we dus de variabele leeftijd gebruikt samen met het `{repeat}` commando.
                example_code_2: |
                    ```
                    {print} 'Yes! Je bent jarig!'
                    leeftijd = {ask} 'Hoe oud ben je geworden?'
                    {repeat} leeftijd {times} {print} 'Hieperdepiep Hoera!'
                    ```
                start_code: |
                    {repeat} 2 {times} antwoord = {ask} 'Wist je al dat je een vraag ook kunt herhalen?'
                    {if} antwoord {is} ja {repeat} 2 {times} {print} 'Daar was jij al achter!'
                    {else} {repeat} 3 {times} {print} 'Je hebt weer iets nieuws geleerd!'
            8:
                story_text: |
                    ### In het blok of niet?
                    In dit level moet je goed nadenken over welke regels code in het blok moeten staan en welke niet.
                    Bijvoorbeeld: Als je Hedy het liedje *de mosselman* wil laten zingen. Je wil dan dat het zinnetje 'de mosselman' wordt herhaald.
                    Dat betekent dat de laatste regel niet moet worden herhaald en dus ook niet in het blok mag staan.
                    Het liedje klopt niet als je de laatste regel ook laat inspringen.

                    ### Opdracht
                    Elke regel code start met een streepje. Verwijder het streepje en laat de regels waar nodig inspringen om het liedje af te maken.
                example_code: |
                    ```
                    _ {print} 'Zeg ken jij de mosselman?'
                    _ {repeat} 2 {times}
                    _ {print} 'de mosselman'
                    _ {print} 'Zeg ken jij de mosselman? Hij woont in Scheveningen'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'Deze regel wordt herhaald...'
                        {print} 'Deze ook..'
                    {print} 'maar deze niet!'
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Maak een virtueel restaurant
        levels:
            1:
                story_text: |
                    Je kunt met Hedy ook een virtueel restaurant bouwen en de bestellingen van je klanten opnemen!
                example_code: |
                    ```
                    {print} Welkom bij McHedy! üçü
                    _ Wat wilt u bestellen?
                    {echo} Dus u wilt graag
                    {print} Bedankt voor uw bestelling!
                    {print} Het komt eraan!
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Vul allereerst het goede commando in op het streepje om de code te laten werken.
                    Voeg daarna zelf minstens 4 regels code toe aan het restaurantprogramma.
                    Vraag de klanten wat ze willen drinken en vraag of ze willen pinnen.
                    Bedenk tot slot een aardige manier om de klant gedag te zeggen.
                start_code: '# Schrijf jouw code hier'
            2:
                story_text: |
                    In level 2 kun je variabelen gebruiken om je restaurant interactiever te maken! Kijk maar naar het voorbeeld.
                example_code: |
                    ```
                    {print} Welkom bij Hedy's restaurant!
                    {print} Vandaag serveren we pizza of lasagne.
                    eten {is} {ask} Wat wilt u eten?
                    {print} Heerlijk! eten is ook mijn favoriet!
                    topping {is} {ask} Met groente of vlees?
                    {print} eten met topping komt eraan!
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer jouw restaurantcode van het vorige level naar het invoerscherm hier beneden.
                    Maak de code kloppend door de `{ask}` en `{echo}` commando's te vervangen door variabelen zoals je in dit level geleerd hebt.

                    Nu je code weer werkt is het tijd om er iets aan toe te voegen.
                    Kijk naar de laatste zin van de voorbeeldcode `{print} eten met topping komt eraan!`
                    In deze regel zijn 2 variabelen in 1 regel gebruikt om een opsomming te maken van de bestelling.
                    Voeg nu in jouw code ook zo'n opsomming toe van het eten en het drinken dat de klant heeft besteld.

                    **Extra** Nu je variabelen hebt leren gebruiken, kun je zoveel variabelen als je wil toevoegen aan √©√©n regel. Kun jij nog meer variabelen toevoegen aan je regel, zoals hier opeten of meenemen, pinnen of cash, met of zonder rietje etc.?
                start_code: '# Schrijf jouw code hier'
            3:
                story_text: |
                    Vind jij het moeilijk om te kiezen wat je wil eten? Je kunt Hedy voor je laten kiezen!
                    Je maakt gewoon een lijst van je favoriete eten en Hedy kiest dan een willekeurig menu voor je uit.
                    Je kan het extra grappig maken, door Hedy ook de prijs van je eten te laten kiezen. Wat zal het worden vandaag?
                example_code: |
                    ```
                    gerechten {is} spaghetti, spruitjes, hamburgers
                    {print} Jij eet vanavond gerechten {at} {random}!
                    prijzen {is} 1 euro, 10 euro, 100 euro
                    {print} Dat wordt dan prijzen {at} {random}, alstublieft.
                    ```
                story_text_2: |
                    ### Opdracht
                    Nu ga je zelf een random restaurant maken.
                    Maak nu zelf lijstjes van voorgerechten, hoofdgerechten, toetjes, drinken en prijzen.
                    Gebruik dan het `{print}` en het `{at} {random}` commando om de klant te vertellen wat hij vanavond voorgeschoteld krijgt.
                example_code_2: |
                    ```
                    {print} Welkom in restaurant de Willekeur
                    voorgerechten {is} _
                    hoofdgerechten {is} _
                    toetjes {is} _
                    drinken {is} _
                    prijzen {is} _
                    _
                    ```
                start_code: '# Schrijf jouw code hier'
            4:
                story_text: |
                    ### Opdracht
                    Kun jij de voorbeeldcode aan de praat krijgen door aanhalingstekens toe te voegen?
                    Voeg daarna `{clear}` commando's toe om steeds maar 1 regel tekst in je uitvoerscherm te hebben.

                    ### Opdracht 2
                    Kopieer je eigen restaurantcode van het vorige level en voeg aanhalingstekens en {clear} commando's toe om de code ook in dit level te laten werken.
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Welkom bij Hedys restaurant!
                    {print} Vandaag serveren we pizza of lasagna.
                    eten {is} {ask} Wat wil je eten?
                    {print} Goede keuze!  eten  is mijn favoriet!
                    topping {is} {ask} wil je er vlees of groenten bij?
                    {print} eten  met  topping  wordt gemaakt!
                    drank {is} {ask} Wat wil je erbij drinken?
                    {print} Bedankt voor de bestelling.
                    {print} Jouw  eten  en  drank  komen er zo aan!
                    ```
                start_code: '# Schrijf jouw code hier'
            5:
                story_text: |
                    Nu kun je het nieuwe `{if}` commando gebruiken om een `{ask}` te stellen aan jouw klanten en verschillende reacties te geven op hun antwoorden.
                    Zo kun je bijvoorbeeld de `{ask}` stellen of de klant saus wil bij de frietjes, terwijl dat een rare vraag zou zijn `{if}` de klant pizza bestelt.
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy'
                    eten {is} {ask} 'Wat wilt u eten?'
                    {if} eten {is} friet saus {is} {ask} 'Welke saus wilt u bij de friet?'
                    {if} eten {is} pizza topping {is} {ask} 'Welke topping wilt u op de pizza?'
                    {print} eten
                    ```
                start_code: '# Schrijf jouw code hier'
            6:
                story_text: |
                    In dit level kun je in je restaurant prijzen toevoegen en berekenen!
                example_code: |
                    Je kunt een simpel restaurant maken:
                    ```
                    {print} 'Welkom bij McHedy'
                    {print} 'U kunt kiezen uit een hamburger, een kroket of een kaassouffle'
                    {print} 'U krijgt frietjes en drinken bij uw bestelling. '
                    eten = {ask} 'Wat wilt u bestellen?'
                    prijs = 0
                    {if} eten {is} hamburger prijs = 8
                    {if} eten {is} kroket prijs = 6
                    {if} eten {is} kaassoufle prijs = 5
                    {print} 'U heeft een ' eten ' besteld'
                    {print} 'Dat is dan ' prijs ' euro, alstublieft!'
                    {print} 'Bedankt en eet smakelijk!'
                    ```
                start_code: '{print} ''Welkom'''
            7:
                story_text: |
                    In dit level heb je geleerd hoe je `{repeat}` gebruikt om een regel code een aantal keren te herhalen.
                    Nu kun je dit commando gebruiken om een `{ask}` aan meerdere klanten te stellen om hun bestelling op te nemen.

                    ### Opdracht
                    Kun jij de code afmaken? Hedy moet de vraag zo vaak herhalen als dat er klanten zijn. Dus als je 5 antwoordt, moet er 5 keer een vraag gesteld worden.
                    **(extra)** Maak de code nog langer door niet alleen 5 keer naar eten, maar ook naar drinken of saus te vragen.
                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel personen bent u?'
                    ```
                start_code: '# Schrijf jouw code hier'
            8:
                story_text: |
                    In dit level kun je meerdere regels code herhalen, wat betekent dat je meerdere mensen kunt vragen wat ze willen eten en drinken en dat ook nog kunt printen.
                    Kijk maar naar het voorbeeld!
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy!'
                    {print} 'U kunt hier uw bestelling doorgeven'
                    mensen = {ask} 'Voor hoeveel personen wilt u bestellen?'
                    {repeat} mensen {times}
                        eten = {ask} 'Wat wilt u eten?'
                        {print} eten
                    {print} 'Bedankt voor uw bestelling.'
                    {print} 'Eet smakelijk!'
                    ```
                story_text_2: "### Opdracht\nBreid je code uit met meer dingen op het menu. Bijvoorbeeld: vragen of ze drinken willen, of toetjes. Voeg minstens nog een extra vraag toe. \n**(extra)** Voeg alles toe aan het menu dat je kan verzinnen, zoveel dingen als je wil!\n"
                start_code: '{print} ''Welkom bij McHedy!'''
            9:
                story_text: |
                    In dit level kun je het restaurant nog beter maken.

                    ### Opdracht
                    Alle inspringcode is verdwenen! Kan jij het repareren?
                    Het restaurant moet zo werken dat als de klant friet bestelt, moet Hedy vraagt welke saus de klant daarbij wil, maar niet bij pizza.

                    **(extra)** Een restaurant heeft natuurlijk niet alles op voorraad. Maak een lijstje met sauzen en zeg bij iedere bestelling of je die saus wel verkoopt. <br>
                    **(extra)** Op een pizza kan ook van alles! Vraag de klant bij een pizza wat voor beleg hij wil.<br>
                    **(extra)** Willen de klanten ook wat drinken? Vraag dat ook.<br>
                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel mensen bent u vanavond?'
                    {print} 'Mooi, welkom allemaal'
                    prijs = 0
                    {repeat} mensen {times}
                    _ eten = {ask} 'Wat wilt u bestellen?'
                    _ {print} eten
                    _ {if} eten {is} friet
                    _ prijs = prijs + 3
                    _ saus = {ask} 'Welke saus wilt u daarbij?'
                    _ {if} saus {is} geen
                    _ {print} 'zonder saus'
                    _ {else}
                    _ prijs = prijs + 1
                    _ {print} 'met ' saus
                    _ {if} eten {is} pizza
                    _ prijs = prijs + 4
                    {print} 'Dat is dan ' prijs ' euro'
                    {print} 'Eet smakelijk!'
                    ```
                start_code: '# Schrijf jouw code hier'
            10:
                story_text: |
                    In dit level kun je gemakkelijk de bestelling opnemen van gasten voor verschillende gangen.

                    ### Opdracht 1
                    Voeg op de streepjes een `{ask}` in, zodat er om de bestelling gevraagd wordt en print de bestelling uit in een mooie zin.
                example_code: |
                    ```
                    gangen = voorgerecht, hoofdgerecht
                    {for} gang {in} gangen
                        {print} 'Wat wilt u voor ' gang '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### Opdracht 2
                    Dit kun je uiteraard ook voor meerdere mensen toepassen!
                    Kun jij elke regel inspringen met de goede hoeveelheid spaties?
                    Tip: Sommige regels hebben geen spaties nodig.
                example_code_2: |
                    ```
                    _ gangen = voorgerecht, hoofdgerecht
                    _ namen = Timon, Onno
                    _ {for} naam {in} namen
                    _ {for} gang {in} gangen
                    _ eten = {ask} naam ', Wat wil jij bestellen als ' gang '?'
                    _ {print} naam ' bestelt ' eten ' als ' gang
                    ```
                start_code: gangen = voorgerecht, hoofdgerecht, nagerecht
            11:
                story_text: |
                    Je kunt nu `{for}`met een `{range}` gebruiken om een bestelling met `{print}` te tonen voor meerdere mensen.

                    ### Opdracht
                    Maak de restaurantcode af. Zorg dat je de bestelling van meerdere mensen kan opnemen. Print steeds netjes het nummer uit, dus 'persoon 1', 'persoon 2', enz.
                    Weet je niet meteen hoe het moet? Kijk dan bij jouw restaurant van level 8.

                    **(extra)** In level 9 hebben we prijzen uitgerekend in het restaurant. Dat kun je nu ook weer toevoegen.
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy!'
                    {print} 'U kunt hier uw bestelling doorgeven'
                    mensen = {ask} 'Voor hoeveel personen wilt u bestellen?'
                    {print} 'Dus u wilt bestellen voor ' mensen ' mensen.'
                    {print} 'Laten we beginnen'
                    ```
                start_code: '{print} ''Welkom bij McHedy!'''
            12:
                story_text: |
                    In dit level kun je kommagetallen gebruiken op je menukaart, kijk maar!
                    ### Opdracht
                    Kun jij een manier bedenken om je vrienden en familie 15% korting te geven?
                example_code: |
                    ```
                    prijs = 0.0
                    eten = {ask} 'Wat wil je eten?'
                    drinken = {ask} 'Wat wil je drinken?'
                    {if} eten {is} 'hamburger'
                        prijs = prijs + 6.50
                    {if} eten {is} 'pizza'
                        prijs = prijs + 5.75
                    {if} drinken {is} 'water'
                        prijs = prijs + 1.20
                    {if} drinken {is} 'frisdrank'
                        prijs = prijs + 2.35
                    {print} 'Dat wordt dan ' prijs ' euro, alsjeblieft'
                    ```
                start_code: '# Schrijf jouw code hier'
            13:
                story_text: |
                    In dit level leer je nieuwe commando's om je code nog verder uit te breiden.

                    ### Opdracht 1
                    Zet op de logische plek in het progamma een `{and}` en een `{or}`.

                    ### Opdracht 2
                    Breid je restaurant uit met nog minstens √©√©n `{and}` en √©√©n `{or}`.
                    Denk aan een speciale kortingsbon die alleen geldt voor pizza, of een gratis drankje
                    bij friet en bij pannenkoeken. Of iets heel anders natuurlijk!
                example_code: |
                    ```
                    prijs = 10
                    eten = {ask} 'Wat wil je eten?'
                    drinken = {ask} 'Wat wil je drinken?'
                    {if} eten {is} 'broodje' _ drinken {is} 'sap'
                        {print} 'Dat is ons voordeelmenu'
                        prijs = prijs - 3
                    {if} drinken {is} 'water' _ drinken {is} 'sap'
                        {print} 'Dat is een gezonde keuze!'
                    {print} 'Dat wordt dan ' prijs ' euro'
                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    Met de `{while}` kun je zorgen dat je klanten kunnen blijven bestellen tot ze klaar zijn.
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy'
                    meer = 'ja'
                    {while} meer == 'ja'
                        bestelling = {ask} 'Wat wil je bestellen?'
                        {print} bestelling
                        meer = {ask} 'Wilt u nog iets bestellen?'
                    {print} 'Bedankt!'
                    ```
                start_code: '# Schrijf jouw code hier'
    rock:
        name: Steen, papier, schaar
        default_save_name: Steen
        description: Maak jouw eigen steen, papier, schaar spel
        levels:
            1:
                story_text: |
                    In level 1 kun je een begin maken met een steen, papier, schaar spel.

                    Met `{ask}` kun je een keuze maken, en met `{echo}` kan je die keuze herhalen.
                example_code: |
                    ```
                    {print} Wat kies jij?
                    {ask} Kies uit steen, papier of schaar
                    {echo} Dus jouw keuze was:
                    ```

                    Je kunt in plaats van woorden natuurlijk ook emoji's gebruiken: ‚úä‚úã‚úå
                story_text_2: |
                    ### Opdracht
                    In plaats van woorden kun je ook emojis gebruiken: ‚úä‚úã‚úå
                    Kun jij de code maken met emojis?
                example_code_2: |
                    ```
                    {print} Wat kies jij?
                    {ask} kies uit: _
                    {echo} Dus jouw keuze was :
                    ```
                start_code: |
                    {print} Welkom bij jouw eigen steen papier schaar!
                    {ask} Kies uit steen, papier of schaar
            2:
                story_text: |
                    In dit level kun je variabelen gebruiken om alvast een stukje van het spelletje te programmeren. In het volgende level leer je het spelletje maken.
                example_code: |
                    ```
                    _ {is} {ask} steen, papier of schaar?
                    {print} ik kies _
                    ```
                start_code: '# Schrijf jouw code hier'
            3:
                story_text: |
                    Je kunt het `{at} {random}` commando gebruiken om de computer steen, papier of schaar te laten kiezen!

                    ### Opdracht
                    Maak de code af door het `{at} {random}` commando te gebruiken.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} keuzes {at} {random}
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode en vul de correcte code in op het lijntje om een extra speler aan het spel toe te voegen.

                    **Extra** Nu heten de spelers nog speler 1 speler 2. Kun jij met behulp van vraagcommando's (en natuurlijk variabelen) vragen naar de namen van de spelers?
                    Daarna kun jij uitvoer maken die er bijvoorbeeld zo uitziet:

                    `James kiest... papier`
                example_code_2: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} speler 1 kiest... keuzes {at} {random}
                    {print} speler 2 _
                    ```
                start_code: '{print} Welkom bij jouw eigen steen papier schaar!'
            4:
                story_text: |
                    In dit level kunnen we steen, papier, schaar verder programmeren. Maar als je er tekst bij wilt, moet je ook hier nu aanhalingstekens gebruiken.
                    ### Opdracht
                    Kopieer je code uit het vorige level en maak hem werkend in dit level door bij elk `{print}` en `{ask}` commando aanhalingstekens te gebruiken.
                start_code: '{print} ''Welkom bij jouw eigen steen papier schaar!'''
            5:
                story_text: |
                    In level 5 kunnen we gaan bepalen of het gelijkspel is.
                    Daarvoor heb je de nieuwe `{if}` code nodig.

                    ### Opdracht
                    Maak de codes af door de lijntjes in te vullen.
                    * Laat de computer een willekeurige keuze maken
                    * Vraag naar de keuze van de speler
                    * Vul de juiste variabelen in op regel 4 en 5.
                    * Programmeer regel 6 zodat er gecheckt wordt of het gelijkspel is.
                example_code: |
                    ```
                    opties {is} steen, papier, schaar
                    computerkeuze {is} _
                    keuze {is} _
                    {print} 'jij koos ' _
                    {print} 'computer koos ' _
                    {if} _ {is} _ {print} 'gelijkspel!' {else} {print} 'geen gelijkspel'
                    ```

                    Vul op de streepjes eerst de goede code aan om te kijken of het gelijkspel is.
                start_code: '{print} ''Welkom bij jouw eigen steen papier schaar!'''
            9:
                story_text: |
                    In dit level kun je het hele steen, papier, schaar programma maken door de `{if}` commando's in elkaar te zetten!

                    ### Opdracht
                    Maak de code af zodat het programma bij iedere combinatie vertelt wie er heeft gewonnen.

                    **(extra)** Is √©√©n potje voor jou niet genoeg? Breid de code uit zodat je meerdere potjes kan spelen. Je kan zelfs met een `{ask}` beginnen en
                    vragen hoeveel potjes er gespeeld gaan worden.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    jouw_keuze {is} {ask} 'Wat kies jij?'
                    computer_keuze {is} keuzes {at} {random}
                    {print} 'Jij kiest ' jouw_keuze
                    {print} 'De computer kiest ' computer_keuze
                    {if} computer_keuze {is} jouw_keuze
                        {print} 'Gelijkspel'
                    {if} computer_keuze {is} steen
                        {if} jouw_keuze {is} papier
                            {print} 'Jij wint!'
                        {if} jouw_keuze {is} schaar
                            {print} 'De computer wint!'
                    # Maak deze code af
                    ```
                start_code: '# Schrijf jouw code hier'
            10:
                story_text: |
                    Wil je niet steeds zelf kiezen? Laat Hedy het voor je doen!
                    Je hoeft alleen de namen van de spelers in te vullen en ze krijgen steeds een willekeurige keuze.

                    ### Opdracht 1
                    Maak het programma af door de lijst met namen in te vullen.

                    ### Opdracht 2
                    Voeg nu ook een computerspeler toe die bij iedere speler iets kiest.

                    **(extra)** Zoek je code van level 9 op en print ook wie er in iedere ronde wint: de computer of de persoon uit de lijst namen?
                example_code: |
                    ```
                    keuzes = steen, papier, schaar
                    spelers = _
                    {for} speler {in} spelers
                        {print} speler ' kiest ' keuzes {at} {random}
                    ```
                start_code: '# Schrijf jouw code hier'
            13:
                story_text: |
                    Met het `{and}` commando kun je steen, papier, schaar met veel minder regels programmeren. Kijk maar eens naar de voorbeeldcode.

                    ### Opdracht
                    Maak de code af zodat bij iedere combinatie een antwoord wordt geprint. Er moet dus altijd in beeld komen wie er gewonnen heeft! Voer je code een paar keer uit om te kijken of er altijd een winner gekozen wordt.
                example_code: |
                    ```
                    opties = 'steen', 'papier', 'schaar'
                    jouw_keuze = {ask} 'Wat kies jij?'
                    computer_keuze = opties {at} {random}
                    {print} 'Jij kiest ' jouw_keuze
                    {print} 'De computer kiest ' computer_keuze
                    {if} computer_keuze {is} jouw_keuze
                        {print} 'Gelijkspel'
                    {if} computer_keuze {is} 'steen' {and} jouw_keuze {is} 'papier'
                        {print} 'Jij wint!'
                    {if} computer_keuze {is} 'steen' {and} jouw_keuze {is} 'schaar'
                        _
                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    Speel tot je de computer verslaat! Maar maak eerst de voorbeeld code af...
                example_code: |
                    ```
                    gewonnen = 'nee'
                    opties = 'steen', 'papier', 'schaar'
                    {while} gewonnen == 'nee'
                        jouw_keuze = {ask} 'Wat kies jij?'
                        computer_keuze = opties {at} {random}
                        {print} 'jij koos ' jouw_keuze
                        {print} 'de computer koos ' computer_keuze
                        {if} computer_keuze == jouw_keuze
                            {print} 'Gelijkspel!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'schaar'
                            {print} 'Je verliest!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'papier'
                            {print} 'Je wint!'
                            gewonnen = 'ja'
                    _
                    ```
                start_code: '# Schrijf jouw code hier'
    rock_2:
        name: Steen, papier, schaar 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Nu je `{ask} hebt geleerd te gebruiken, kun je de steen, papier, schaar code ook interactief maken!

                    ### Opdracht
                    Maak de steen, papier, schaarcode interactief door met `{ask}` commando.
                example_code: |
                    ```
                    keuze is _
                    {print} Ik kies keuze
                    ```
                start_code: '# place your code here'
    secret:
        name: Geheim agent
        default_save_name: Geheim agent
        description: Maak je eigen spionnencode
        levels:
            12:
                story_text: "In dit avontuur kun je jouw eigen geheim agent code maken. Maak een bericht dat alleen de juiste agent kan ontcijferen.\nAls je vijand probeert de code te kraken krijgen ze valse informatie om hun tijd te verspillen.\n \n### Opdracht 1\nMaak je eigen code voor jouw geheime\
                    \ agent. Laat beiden onderdelen zien aan de echte spion.\n### Opdracht 2\nVoeg nog een derde vraag toe en maak jouw wachtwoord langer met bijv een kledingstuk of een voorwerp!                 \n"
                example_code: |
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} '_'
                        plek {is} 'Ga naar het vliegveld '
                    {else}
                        plek {is} 'Ga naar het treinstation '
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} wachtwoord {is} _
                        tijd {is} 'morgen om 02:00'
                    {else}
                        tijd {is} 'vandaag om 10:00'
                    {print} _ _
                    ```
                start_code: '# Schrijf jouw code hier'
            13:
                story_text: |
                    We kunnen nu met maar √©√©n `{if}` bekijken of het programma gebruikt wordt door de geheim agent.
                    ### Opdracht 1
                    Maak de code af door het lege stukje te vullen. Let op: de superspion moet beide antwoorden goed hebben, voordat hij de juiste geheime informatie krijgt.
                    ### Opdracht 2
                    We willen de vijand extra verwarren! Maak een lijst met nepantwoorden en kies, bij een fout antwoord, iets uit de lijst.
                    **(extra)** Voeg een extra vraag toe zoals in level 12.
                example_code: |
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} naam {is} 'Agent007' _ wachtwoord {is} 'TOPSECRET'
                        {print} 'Ga naar het vliegveld om 02:00'
                    {else}
                        {print} 'Ga naar het treinstation om 10:00'
                    ```
                start_code: '# Schrijf jouw code hier'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    Nog een nieuw commando in dit level is `{sleep}`, waarmee je het programma een tijdje kunt pauzeren.Als je een getal achter {sleep} zet, wacht het programma zoveel seconden.

                    ### Opdracht
                    Ga met dit nieuwe commando oefenen door je eigen code te schrijven waarin je 3 keer het {sleep} commando gebruikt. Bij elk {sleep} commando moet de wachtttijd verschillend zijn.
                example_code: |
                    ```
                    {print} Mijn favoriete kleur is...
                    {sleep} 2
                    {print} groen!
                    ```
                start_code: |
                    {print} Mijn favoriete kleur is...
                    {sleep} 2
                    {print} groen!
    songs:
        name: Zing een liedje!
        default_save_name: Liedje
        description: Print een liedje
        levels:
            6:
                story_text: |
                    In liedjes zit vaak veel herhaling. Soms wordt er in die herhaling ook geteld.
                    Bijvoorbeeld in het welbekende potje met vet. Dat kan je met een beetje rekenen zelf programmeren.

                    ### Opdracht
                    Je kunt nu regel 2 t/m 9 zo vaak herhalen als je wil door de regels te kopi√´ren en plakken.
                example_code: |
                    ```
                    couplet = 1
                    {print} 'Ik heb het potje met vet'
                    {print} 'al op de tafel gezet'
                    {print} 'Ik heb het'
                    {print} 'potje, potje, potje, potje... '
                    {print} 'veeeeeet'
                    {print} 'al op de tafel gezet'
                    couplet = couplet + 1
                    {print} 'Door naar het ' couplet 'e couplet'
                    ```

                    Na het potje met vet kun je natuurlijk ook nog andere liedjes programmeren. Er zijn veel liedjes met tellen erin.
                    Misschien kun jij het liedje 99 bottles of beer ook wel maken! Daar tellen we af in plaats van op.
                story_text_2: |
                    Dit kinderliedje telt van 10 visjes naar 1 visje. Kopieer regel 2 tot en met 7 om het hele lied te maken!
                example_code_2: |
                    ```
                    nummer = 11
                    nummer = nummer - 1
                    {print} nummer 'kleine visjes zwommen naar de zee'
                    {print} 'Moeder zei ik ga niet mee! '
                    {print} 'Ik blijf liever in de vieze oude sloop want in de zee daar zwemmen haaien en die bijten je'
                    {print} 'BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB'
                    {sleep}
                    ```
                start_code: '{print} ''Zing een liedje!'''
            7:
                story_text: |
                    In liedjes zit vaak veel herhaling. Denk maar aan Baby Shark! Ze zingen steeds hetzelfde:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Opdracht

                    Kan jij Baby Shark printen met een `{repeat}`? Maak de code af door de streepjes in te vullen. **(extra)**
                    Na Baby Shark kun je natuurlijk ook nog andere liedjes programmeren. Er zijn veel liedjes met herhaling erin! Kun jij er nog eentje verzinnen en printen met code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    Nu kun je meerdere regels herhalen, wat heel fijn is in liedjes!

                    ### Opdracht
                    Zet het juiste commando op de streepjes, en zorg dat de code op de juiste manier inspringt.

                    **(extra)** Is Billie Boem gelukt? Probeer dan 10 kleine visjes.
                example_code: |
                    ```
                    _ 3 {times}
                    dier = {ask} 'Welk dier kies je?'
                    {print} 'En wie rijdt er op zijn ' dier ' door de prairie?'
                    {print} 'Dat is cowboy Billie Boem, door de boeven zeer gevreesd!'
                    {print} 'Er is nooit in het Wilde Westen een cowboy geweest, die zo dapper was als Cowboy Billie Boem.'
                    {print} 'Van je hotsie knotsie knetter!'
                    {print} 'Van je jippie jippie jeej!'
                    {print} 'Maar zijn ' dier ' was zeer vermoeid en die kon niet langer mee'
                    {print} 'Maar hij moest de boeven vangen, dus koos hij een ander beest'
                    {print} 'en nu mag je zelf bedenken wat voor beest dat is geweest!'
                    ```
                start_code: '# Schrijf jouw code hier'
            10:
                story_text: "Ook in dit level kunnen we weer liedjes zingen, bijv. Baby Shark. Met `{for}` kunnen we het liedje met maar 6 regels code printen. \n\n### Opdracht 1\nKun jij baby shark printen met een `{for}`? Vul de streepjes in en maak de codes verder af.\n"
                example_code: "```\nfamilie = baby, mama, papa, opa, oma\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Opdracht 2
                    Print het liedjes 10 kleine visjes met een `{for}`. Zoek de tekst op als je die niet kent.
                    **(extra)** Print het liedje Old MacDonald had a farm. Zoek de tekst op als je die niet kent, en zorg dat alle dieren ook het goede geluid maken, met een `{if}`.
                example_code_2: |
                    ```
                    visjes = 10, 9, 8, 7, 6, 5, 4, 3, 2
                    ```
                start_code: '# Schrijf jouw code hier'
            11:
                story_text: |
                    In dit level kun je makkelijk (af)tellen in een liedje. Zo kun je bijvoorbeeld het kinderliedje '10 kleine visjes' programmeren.

                    ### Opdracht 1
                    Maak het liedje af. Zoek de tekst op als je die niet meer weet.

                    ### Opdracht 2
                    De laatste regel van het liedje is anders. Zorg dta je die regel ook print iin de `{for}`. Darr heb je een `{if}` voor nodig.
                example_code: |
                    ```
                    _ _ _ _ 10 _ 1
                        {print} i ' kleine visjes zwommen naar de zee'
                    ```
                start_code: '# Schrijf jouw code hier'
            12:
                story_text: |
                    In dit level kun je meerdere woorden in een variabele opslaan. Dat komt goed uit bij liedjes zoals het Engelse kinderliedje 'if you're happy and you know it, clap your hands'.

                    ### Opdracht
                    Kun jij de regels beginnen met de goede hoeveelheid spaties om het liedje aan de praat te krijgen?
                    Let op: Je hoeft niet overal in te springen!
                example_code: |
                    ```
                    _ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    _ {print} 'if youre happy and you know it {and} you really want to show it'
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    ```
                start_code: '# Schrijf jouw code hier'
            16:
                story_text: |
                    Maak het nog makkelijker om een liedje te programmeren zoals old MacDonald! Je kunt nu de dieren en hun geluiden aan elkaar koppelen, door ze op dezelfde plaats in het lijstje te zetten.
                    Ook de Dronken Zeeman gaat lekker snel in dit level! Je hebt maar 5 regels nodig voor het gehele lied. Kijk maar!
                example_code: |
                    ```
                    dieren = ['big', 'hond', 'koe']
                    geluiden = ['knor', 'woef', 'boe']
                    {for} i {in} {range} 1 {to} 3
                        dier = dieren[i]
                        geluid = geluiden[i]
                        {print} 'Old MacDonald had een wei'
                        {print} 'hi ja hi ja ho!'
                        {print} 'En in die wei daar stond een ' dier
                        {print} 'hi ja hi ja ho!'
                        {print} 'met een ' geluid geluid ' hier'
                        {print} 'en een ' geluid geluid ' daar'
                        {print} 'hier een ' geluid
                        {print} 'daar een ' geluid
                        {print} 'overal een ' geluid geluid
                    ```

                    ```
                    coupletten = ['wat zullen we doen met de dronken zeeman?', 'hang hem aan de mast om uit te waaien', 'stop hem met zijn kop in een emmer water', 'dat zullen we doen met de dronken zeeman']
                    {for} couplet {in} coupletten
                        {for} i {in} {range} 1 {to} 3
                            {print} couplet
                        {print} 's morgens in de vroegte'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'HELA HUP! daar gaat ie!'
                        {print} 's morgens in de vroegte'
                    ```
                start_code: '# Schrijf jouw code hier'
            18:
                story_text: |
                    In level 16 hebben we liedjes met lijsten gemaakt. Maar, deze codes doen het nu niet meer goed. De dubbele punten uit level 17 en de haakjes uit level 18 moeten er nog bij.

                    ### Opdracht 1
                    De dronken zeeman van level 16 staat hier als voorbeeldcode. Die is dus fout in dit level.
                    Zorg jij dat alles weer werkt? Om je te helpen hebben we op de plekken van _sommige_ fouten een _ neergezet.

                    ### Opdracht 2
                    Zoek nu ook je OldMacDonald lied op uit level 16, en verbeter dat.
                example_code: |
                    ```
                    coupletten = ['wat zullen we doen met de dronken zeeman?', 'hang hem aan de mast om uit te waaien', 'stop hem met zijn kop in een emmer water', 'dat zullen we doen met de dronken zeeman']
                    {for} couplet {in} coupletten _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ couplet _
                        {print} 's morgens in de vroegte'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'HELA HUP! daar gaat ie!'
                        {print} 's morgens in de vroegte'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Boter Kaas en Eieren
        default_save_name: Boter
        description: Speel een potje Boter Kaas en Eieren!
        levels:
            13:
                story_text: "In dit avontuur kun je het spelletje Boter Kaas en Eieren programmeren. \nJe speelt met twee personen. Kies om de beurt een plekje op het speelbord (1 - 9) waar je jouw teken op wil zetten (x of o). \nDe speler die als eerst 3 op een rij heeft (horizontaal, verticaal of diagonaal)\
                    \ wint!\n\n### Opdracht 1\nDit spel doet het wel maar er zijn een paar problemen! Je kan zomaar een veld van de andere speler pakken. Kijk eerst met een `{if}` of er wel een punt staat in het gekozen veld. Zo niet, waarschuw de speler dan.\n\n ### Opdracht 2\nHet spel kan ook niet\
                    \ zelf besluiten of er al een winnaar is. Kijk steeds of er al drie dezelfde tekens op een rij zijn en vertel dan wie er gewonnen heeft.\n\n### Opdracht 3 (extra)\nSpelen met een vriend(innet)je kan niet altijd! Programmeer jij een computertegenstander om tegen te spelen?\n"
                example_code: |
                    ```
                    speler = 'x'
                    veld = '.', '.', '.', '.', '.', '.', '.', '.', '.'

                    {for} i in {range} 1 {to} 9
                        keuze = {ask} 'Speler ' speler ' welke plek kies jij?'
                        veld at keuze = speler
                        clear
                        print veld at 1 veld at 2 veld at 3
                        print veld at 4 veld at 5 veld at 6
                        print veld at 7 veld at 8 veld at 9
                        {if} speler = 'x'
                            speler = 'o'
                        {else}
                            speler = 'x'
                    ```
                start_code: '#  Schrijf jouw code hier'
            14:
                story_text: "In de vorige levels heb je het spel \"boter, kaas en eieren\" kunnen maken. Nu heb je het = teken, het == teken en het != teken geleerd. \nJe kunt deze kennis toepassen in het \"boter, kaas en eieren\" spel op deze manier:\n"
                example_code: |
                    ```
                    teken = 'x'
                    open_plekken = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spel = 'aan'
                    plek_1 = '.'
                    plek_2 = '.'
                    plek_3 = '.'
                    plek_4 = '.'
                    plek_5 = '.'
                    plek_6 = '.'
                    plek_7 = '.'
                    plek_8 = '.'
                    plek_9 = '.'
                    {print} 'BOTER KAAS EN EIEREN!'
                    {print} plek_1 plek_2 plek_3
                    {print} plek_4 plek_5 plek_6
                    {print} plek_7 plek_8 plek_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} spel != 'uit'
                            keuze = {ask} 'Speler ' teken ', Welke plek kies jij?'
                            {if} keuze {in} open_plekken
                                {remove} keuze {from} open_plekken
                                {if} keuze == 1
                                    plek_1 = teken
                                {if} keuze == 2
                                    plek_2 = teken
                                {if} keuze == 3
                                    plek_3 = teken
                                {if} keuze == 4
                                    plek_4 = teken
                                {if} keuze == 5
                                    plek_5 = teken
                                {if} keuze == 6
                                    plek_6 = teken
                                {if} keuze == 7
                                    plek_7 = teken
                                {if} keuze == 8
                                    plek_8 = teken
                                {if} keuze == 9
                                    plek_9 = teken
                            {else}
                                {print} 'Die plek was al bezet!'
                            {print} plek_1 plek_2 plek_3
                            {print} plek_4 plek_5 plek_6
                            {print} plek_7 plek_8 plek_9
                            {print} ' '
                            winnaar = {ask} 'Heb je gewonnen?'
                            {if} winnaar == 'ja'
                                {print} 'Goed gedaan, speler ' teken '!'
                                spel = 'uit'
                            {else}
                                {if} teken == 'x'
                                    teken = 'o'
                                {else}
                                    teken = 'x'
                    ```
                start_code: '# Schrijf jouw code hier'
            15:
                story_text: |
                    In dit level kun je jouw spel nog meer verbeteren door gebruik te maken van de {while} lus. Met deze lus kun je de twee regels `{if} game != 'over'` en `{for} i {in} {range} 1 to 9`  combineren tot √©√©n simpele regel.

                    Kijk maar:
                example_code: |
                    ```
                    teken = 'x'
                    open_plekken = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spel = 'aan'
                    plek_1 = '.'
                    plek_2 = '.'
                    plek_3 = '.'
                    plek_4 = '.'
                    plek_5 = '.'
                    plek_6 = '.'
                    plek_7 = '.'
                    plek_8 = '.'
                    plek_9 = '.'
                    {print} 'BOTER KAAS EN EIEREN!'
                    {print} plek_1 plek_2 plek_3
                    {print} plek_4 plek_5 plek_6
                    {print} plek_7 plek_8 plek_9
                    {print} ' '
                    {while} spel != 'uit'
                        keuze = {ask} 'Speler ' teken ', welke plek kies jij?'
                        {if} keuze {in} open_plekken
                            {remove} keuze {from} open_plekken
                            {if} keuze == 1
                                plek_1 = teken
                            {if} keuze == 2
                                plek_2 = teken
                            {if} keuze == 3
                                plek_3 = teken
                            {if} keuze == 4
                                plek_4 = teken
                            {if} keuze == 5
                                plek_5 = teken
                            {if} keuze == 6
                                plek_6 = teken
                            {if} keuze == 7
                                plek_7 = teken
                            {if} keuze == 8
                                plek_8 = teken
                            {if} keuze == 9
                                plek_9 = teken
                        {else}
                            {print} 'Die plek was al bezet'
                        {print} plek_1 plek_2 plek_3
                        {print} plek_4 plek_5 plek_6
                        {print} plek_7 plek_8 plek_9
                        {print} ' '
                        winnaar = {ask} 'Heb je gewonnen'
                        {if} winnaar == 'ja'
                            {print} 'Goed gedaan, speler' teken '!'
                            spel = 'uit'
                        {else}
                            {if} teken == 'x'
                                teken = 'o'
                            {else}
                                teken = 'x'
                    ```
                start_code: '# schrijf jouw code hier'
            17:
                story_text: "In de vorige levels was je boter kaas en eieren spel nog vervelend om te spelen. Na elke x of o die je zette vroeg het spel namelijk of je gewonnen had of niet. \nDit maakte het spel wel speelbaar, maar erg traag. In dit level heb je het `{elif}` commando geleerd, dat dit\
                    \ probleem kan oplossen. \nMet `{elif}` kun je Hedy laten checken of er een speler gewonnen heeft. Hiervoor heb je wel wat extra regels nodig.\n\nIn de voorbeeld code zie je dat we de voorwaarden om te winnen (3 op een rij)hebben toegevoegd. \nJe vindt ze op regel 46 tot 69. Je kunt\
                    \ zien dat elke keer als een speler 3 op een rij heeft, het spel de variabele spel op 'uit' zet. \nDit betekent dat de `{while}` lus wordt gestopt en dat het spel stopgezet wordt.\n"
                example_code: |
                    ```
                    teken = 'x'
                    open_plekken = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    spel = 'aan'
                    plek_1 = '.'
                    plek_2 = '.'
                    plek_3 = '.'
                    plek_4 = '.'
                    plek_5 = '.'
                    plek_6 = '.'
                    plek_7 = '.'
                    plek_8 = '.'
                    plek_9 = '.'
                    {print} 'BOTER KAAS EN EIEREN!'
                    {print} plek_1 plek_2 plek_3
                    {print} plek_4 plek_5 plek_6
                    {print} plek_7 plek_8 plek_9
                    {print} ' '
                    {while} spel != 'uit':
                        keuze = {ask} 'Speler ' teken ', welke plek kies jij?'
                        {if} keuze {in} open_plekken:
                            {remove} keuze {from} open_plekken
                            {if} keuze == 1:
                                plek_1 = teken
                            {if} keuze == 2:
                                plek_2 = teken
                            {if} keuze == 3:
                                plek_3 = teken
                            {if} keuze == 4:
                                plek_4 = teken
                            {if} keuze == 5:
                                plek_5 = teken
                            {if} keuze == 6:
                                plek_6 = teken
                            {if} keuze == 7:
                                plek_7 = teken
                            {if} keuze == 8:
                                plek_8 = teken
                            {if} keuze == 9:
                                plek_9 = teken
                        {else}:
                            {print} 'Die plek was al bezet'
                        {print} plek_1 plek_2 plek_3
                        {print} plek_4 plek_5 plek_6
                        {print} plek_7 plek_8 plek_9
                        {print} ' '
                        {if} plek_1 == plek_2 {and} plek_2 == plek_3 {and} plek_1 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_4 == plek_5 {and} plek_5 == plek_6 {and} plek_4 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_7 == plek_8 {and} plek_8 == plek_9 {and} plek_7 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_1 == plek_4 {and} plek_4 == plek_7 {and} plek_1 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_2 == plek_5 {and} plek_5 == plek_8 {and} plek_2 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_3 == plek_6 {and} plek_6 == plek_9 {and} plek_3 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_1 == plek_5 {and} plek_5 == plek_9 {and} plek_1 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {elif} plek_3 == plek_5 {and} plek_5 == plek_7 {and} plek_3 != '.':
                            {print} 'Speler ' teken ' wint!'
                            spel = 'uit'
                        {else}:
                            {if} teken == 'x':
                                teken = 'o'
                            {else}:
                                teken = 'x'
                    ```
                start_code: '# schrijf jouw code hier'
    turtle:
        name: Tekenen
        default_save_name: Schildpad
        description: Maak jouw eigen tekening
        levels:
            1:
                story_text: |
                    In level 1 kun je ook beginnen met een programmeer-tekening! Door lijnen te combineren met draaien kun je bijvoorbeeld een
                    vierkant maken of een trapje.

                    Met `{forward}` ga je naar voren. Het getal erna bepaalt hoe ver naar voren. Met `{turn} {right}` draai je een kwartslag, met de klok mee. `{turn} {left}` draait tegen de klok in.
                    Wil je naar achteren? Gebruik dan het `{forward} ` commando met een negatief getal. Dus bijvoorbeeld `{forward} -100`.
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    In dit level kun je variabelen gebruiken om de turtle interactief te maken. Je kunt bijvoorbeeld aan de speler vragen hoeveel stapjes de turtle moet nemen.
                example_code: |
                    ```
                    {print} Figuren tekenen
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                story_text_2: "Daarnaast kon je in level 1 alleen maar linksaf of rechtsaf slaan. Dat is een beetje saai!\nIn level 2 kun je de neus van de turtle naar elke richting laten wijzen. \n\nGebruik 90 graden om een kwartslag te draaien. Een heel rondje draaien is 360 graden. \nKun jij een figuurtje\
                    \ tekenen met deze code? Misschien een driehoek of een cirkel?\n"
                example_code_2: |-
                    {print} Schildpaddenrace!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                start_code: |-
                    {print} Schildpaddenrace!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
            3:
                story_text: |
                    Ook bij je teken-schildpad kun je `{at} {random}` gebruiken! Dan loopt hij steeds een ander pad.
                    Kies met `{at} {random}` een hoek uit een lijstje. Als je regels 2 en 3 een paar keer herhaalt, krijg je een langere tekening.

                    ### Opdracht
                    Kun jij regel 2 en 3 kopi√´ren en plakken om een langere random code te maken?
                example_code: |
                    ```
                    hoeken {is} 10, 50, 90, 150, 250
                    {turn} hoeken {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    hoeken {is} 10, 50, 90, 150, 250
                    {turn} hoeken {at} {random}
                    {forward} 25
            4:
                story_text: |
                    In dit level moet je aanhalingstekens gebruiken bij `{print}` en `{ask}`. Ook bij het tekenen dus!
                example_code: |
                    ```
                    {print} 'Figuren tekenen'
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                story_text_2: |
                    Je kunt de lijn ook van kleur laten wisselen met `{color}`. Kijk maar eens naar het voorbeeld.
                    Je kunt het commande `{color} {white}` gebruiken om onzichtbare lijnen te tekenen. Je kunt die witte lijnen b.v. gebruiken om ergens anders op het scherm te beginnen met tekenen.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Figuren tekenen'
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
            5:
                story_text: |
                    In dit level kun je met `{if}` een keuze maken. Bijvoorbeeld tussen verschillende soorten figuren.
                example_code: |
                    ```
                    {print} 'Figuren tekenen'
                    figuur {is} {ask} 'Wil je een driehoek of een vierkant?'
                    {if} figuur {is} driehoek hoek {is} 120
                    {else} hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                story_text_2: |
                    ### Opdracht
                    Vul je juiste getallen in om de code aan de praat te krijgen.
                    Probeer daarna om de optie 'achteruit' toe te voegen.

                    **Extra**  Maak het programma opnieuw en gebruik daarbij Noord, Oost, Zuid en West in plaats van links en rechts.
                    Op deze manier kun je nog meer richtingen gebruiken, zoals Noordoost en Zuidwest.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |-
                    {print} 'Figuren tekenen'
                    figuur {is} {ask} 'Wil je een vierkant of een driehoek?'
                    {if} figuur {is} driehoek hoek {is} 120 {else} hoek {is} 90
                    {turn} hoek
                    {forward} 25
            6:
                story_text: |
                    In dit level kun je gaan rekenen en kun je daarmee verschillende figuren tekenen.
                    Misschien heb je op school al geleerd dat een heel rondje rond draaien 360 graden is. Zo niet, dan weet je het nu!
                    Daarom gebruik je voor een vierkant ook 90 graden. 360 gedeeld door 4 is 90.
                    Nu we met Hedy kunnen rekenen, kunnen we alle figuren tekenen die we maar willen!
                example_code: |
                    ```
                    hoeken = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / hoeken
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    ```
                start_code: '{print} ''Figuren tekenen'''
            8:
                story_text: "Nu we meerdere regels kunnen herhalen, kunnen we makkelijker figuren maken.\nWant we hoeven maar √©√©n keer in te stellen wat de hoek is, en die variabele steeds gebruiken in de `{repeat}`.\n\n### Opdracht 1\n De voorbeeldcode tekent een vierkant. Verander dat in een ander figuur\
                    \ zoals een driehoek of zeshoek. Je moet daarvoor twee regels veranderen!\nTip: een heel rondje is 360 graden.                   \n\n### Opdracht 2\nMaak nu een tekening naar je eigen inzicht, met minstens twee verschillende veelhoeken.\n"
                example_code: |
                    ```
                    hoek = 90
                    {repeat} 10 {times}
                        {turn} hoek
                        {forward} 50
                    ```
                story_text_2: |
                    **(extra)** We kunnen nu het programma verbeteren dat verschillende figuren tekent.
                    Maak de code af en je kunt iedere veelhoek tekenen.
                example_code_2: |
                    ```
                    kanten = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / kanten
                    {repeat} kanten {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: hoeken = {ask} 'Hoeveel hoeken krijgt dit figuur?'
            9:
                story_text: |
                    We kunnen met een `{repeat}` in een `{repeat}` we complexere figuren maken.

                    ### Opdracht 1
                    De voorbeeldcode tekent drie zwarte driehoeken, verander dat in vijf roze vierkanten.

                    **(extra)** Maak je eigen figuur bestaande uit minstens twee verschillende vormen.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    Nu gaan we een nieuwe loop leren: De `{while}` loop!
                    We gaan door zo lang het statement dat we hebben waar is.
                    Vergeet dus niet in de loop de waarde te veranderen.

                    Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven.
                    Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!
                example_code: |
                    ```
                    antwoord = 0
                    {while} antwoord != 25
                        antwoord = {ask} 'What is 5 times 5?'
                    {print} 'Je hebt een correct antwoord gegeven'
                    ```
                start_code: |-
                    antwoord = 0
                    {while} antwoord != 25
                        antwoord = {ask} 'Wat is 5 keer 5?'
                    {print} 'Goed gedaan!'
    years:
        name: Oud en Nieuw
        default_save_name: Oud en Nieuw
        description: Aftellen naar het nieuwe jaar
        levels:
            11:
                story_text: |
                    In dit level kan je `{for}` en `{range}` gebruiken om af te tellen met Oud en Nieuw.

                    ### Opdracht
                    Maak de code af zodat er wordt afgeteld. Je mag zelf kiezen vanaf welk getal.
                    Voeg ook een `{sleep}` toe zodat er steeds een tel voorbij gaat voor er een nieuw getal komt.
                example_code: |
                    ```
                    {for} getal {in} {range} _ {to} _
                        {print} getal
                    {print} 'Gelukkig Nieuwjaar!
                    ```
                start_code: '# Jouw code komt hier'
