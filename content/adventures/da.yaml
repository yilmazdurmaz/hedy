adventures:
    story:
        name: Historie
        default_save_name: Historie
        description: Historie
        levels:
            1:
                story_text: |
                    På niveau 1 kan du lave en historie med en hovedperson du selv indtaster.

                    På første linje, brug `{ask}` til at spørge hvem hovedpersonen skal være.

                    Efter den første linje, start med `{print}` hvis sætningen skal printes.
                    Brug `{echo}` hvis du vil have din hovedpersonen i slutningen af sætningen.
                example_code: |
                    ```
                    {ask} Hovedpersonen i denne historie
                    {print} Hovedpersonen går nu ind i skoven
                    {echo} Han er en lidt bange,
                    {print} Han hører mærkelige lyde alle steder
                    {print} Han er bange for at det en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Opgave
                    Kan du lave din egen historie i Hedy nu og ved at bruge `{print}` , `{ask}` og `{echo}`?
                start_code: '{print} Din historie starter her'
            2:
                story_text: |
                    På niveau 2 kan du gøre din historie sjovere. Din hovedperson kan nu være hvor som helst i sætningen.

                    Du bliver nødt til at programmere en lille smule mere for at få det til at ske. Du skal nu først give en hovedperson et navn.

                    Så kan du sætte det navn ind alle steder i en sætning.

                    ### Opgave
                    Kan du selv lave en historie hvor du bruger en variabel? Kan du tilføje endnu flere variabler?
                example_code: |-
                    ```
                    navn {is} {ask} Hvad hedder hovedpersonen?
                    {print} navn løber nu rundt i skoven
                    {print} navn er lidt bange
                    {print} Pludselig hører han en mærkelig lyd...
                    {sleep}
                    {print} navn er bange for at det er en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
                start_code: '{print} Din historie'
            3:
                story_text: |
                    På niveau 3 kan du gøre din historie endnu sjovere. Du kan bruge tilfældighed til et monster, dyr eller anden forhindring, sådan her:
                example_code: |
                    ```
                    dyr {is} 🦔, 🐿, 🦉, 🦇
                    {print} Nu hører han lyden af et dyr {at} {random}
                    ```
                story_text_2: |
                    Kommandoen `{add}` kan også hjælpe dig i din historie.
                example_code_2: |
                    ```
                    {print} Han hører en lyd
                    dyr {is} 🐿, 🦔, 🦇, 🦉
                    dyret {is} {ask} Hvad tror du det er?
                    {add} dyret {to_list} dyr
                    {print} det var et dyr {at} {random}
                    ```
                story_text_3: |
                    Dette er et eksempel med `{remove}` kommandoen i din historie

                    ### Opgave
                    Kan du bruge de 3 nye kommandoer `{at} {random}` , `{add} {to}` og `{remove} {from}` i din egen historie?
                example_code_3: |
                    ```
                    {print} Hans rygsæk blev alt for tung.
                    {print} I den var der en flaske med vand, en lommelygte og en mursten.
                    taske {is} vand, lommelygte, mursten
                    efterlad {is} {ask} Hvilken ting skal han efterlade?
                    {remove} efterlad {from} taske
                    ```
                start_code: '{print} Din historie'
            4:
                story_text: |
                    Du har måske lagt mærke til at der stadig er et problem i de tidligere niveauer. Prøvede du at printe en sætning med ordet navn? i.e. `{print}` mit navn er navn.
                    Dette kan du løse på dette niveau. Du skal bruge anførselstegn om alt det du vil printe.
                example_code: |
                    ```
                    navn {is} Hans
                    {print}  _ Hovedpersonens navn er _ navn
                    {print} navn  _ går nu ind i skoven _
                    {print} navn _ er en smule bange _
                    dyr {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Han hører lyden af _ dyr {at} {random}
                    {print} navn _ er bange for at det er en hjemsøgt skov _
                    ```
                start_code: '{print} ''Din historie vil blive printet her!'''
            5:
                story_text: |
                    På dette niveau kan du programmere forskellige slutninger, hvilket vil gøre din historie endnu sjovere.

                    ### Opgave
                    Find på to forskellige slutninger til din historie, for eksempel:

                    - Prinsessen går gennem skoven
                    - Hun møder et monster

                    - Lykkelig slutning: Hun griber sit sværd og monstret løber hurtigt sin vej
                    - Ulykkelig slutning: Monstret spiser prinsessen

                    Du kan også sikre at et navn bliver indtastet igen. Det fungerer ligesom på det forrige niveau. Du kan kombinere det med `{if}`, og så har du allerede lavet et helt program!
                example_code: |
                    ```
                    navn {is} {ask} 'Hvem går i skoven?'
                    {print} navn ' går gennem skoven'
                    {print} navn ' møder et monster'
                    slutning {is} {ask} 'Vil du have en lykkelig eller ulykkelig slutning?'
                    {if} slutning {is} lykkelig {print} navn ' griber sit sværd og monstret løber hurtigt sin vej'
                    {else} {print} 'Monstret æder ' navn
                    ```
                start_code: '{print} ''Her begynder din historie!'''
            7:
                story_text: |
                    I en historie, gentages nogle ord flere gange. For eksempel, når nogen råber på hjælp eller synger en sang.
                    Du kan indsætte disse gentagelser i din historie, på dette niveau med `{repeat}`.

                    ### Opgave
                    Tilføj en gentagelse til din egen historie. Gå tilbage til dine gemte programmer, vælg dit historieprogram fra niveau 6 og
                    find en linje der indeholder {print} og gentag det!
                example_code: |
                    ```
                    {print} 'The prince kept calling for help'
                    {repeat} 5 {times} {print} 'Help!'
                    {print} 'Why is nobody helping me?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Help!'''
            8:
                story_text: |
                    In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!

                    ### Exercise
                    Can you make your own story with two different endings?
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} 'Michael types in the code and...'
                        {print} '💥ZAP!💥'
                        {print} 'They are back in their garage'
                    {else}
                        {print} 'Michael yells COME ON RICHARD! RUN FASTER!'
                        {print} 'But Richard is too slow...'
                        {print} 'The T-rex closes in and eats him in one big bite!🦖'
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting to put `{if}`, `{repeat}` or `{for}` commands inside other `{if}`, `{repeat}` or `{for}` commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: |
                    ```
                    animals = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} animal {in} animals
                        {print} 'I see a ' animal ' looking at me'
                        {print} animal
                        {print} animal
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.

                    ### Exercise
                    Can you make your own adventure minigame like this?
                example_code: |
                    ```
                    sword = 'lost'
                    game = 'on'
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {for} i {in} {range} 0 {to} 2
                        {if} game {is} 'on'
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} 'left' {and} sword {is} 'found'
                                {print} 'Our hero comes across a dragon!'
                                {print} 'Luckily our hero has a sword to defeat the beast!'
                                game = 'over'
                            {if} path {is} 'left' {and} sword {is} 'lost'
                                {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                {print} 'Our hero is beaten by the dragon...'
                                {print} 'Try again'
                                game = 'over'
                            {if} path {is} 'right' {and} sword {is} 'found'
                                {print} 'You have already found the sword. There is nothing left here.'
                                {print} 'She walks back'
                            {if} path {is} 'right' {and} sword {is} 'lost'
                                {print} 'Our hero finds a sword'
                                {print} 'This could come in very handy'
                                sword = 'found'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.
                    Or you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
                    ```
                start_code: '# place your code here'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
                start_code: '# Schrijf jouw code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## The ask command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## The ask command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous tab you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a print command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous tab and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# place your code here'
    calculator:
        name: Calculator
        default_save_name: Calculator
        description: Create a calculator
        levels:
            6:
                story_text: |
                    Now that you can do maths, you can make a calculator yourself!
                example_code: |
                    ```
                    number_1 {is} {ask} 'Fill in the first number:'
                    number_2 {is} {ask} 'Fill in the second number:'
                    correct_answer = number_1 * number_2
                    {print} number_1 ' times ' number_2 ' is ' correct_answer
                    ```
                story_text_2: |
                    ### Exercise
                    The calculator above will calculate the answer for you, but you can also make a program to test your own maths skills, like this:
                    Fill in the blanks to make it complete!
                example_code_2: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} _ {print} 'good job!'
                    {else} {print} 'Wrong! It was ' _
                    ```
                story_text_3: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                start_code: '{print} ''Welcome to this calculator!'''
            9:
                story_text: |
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game.
                    ### Exercise
                    Can you finish line 10 to make to program work?
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct_answer = number1 * number2
                        {print} 'What is ' number1 ' times ' number2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is' answer
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
                start_code: '{print} ''Welcome to this calculator!'''
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Can you add more numbers to the list, so you can practise all the multiplications?
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers. Fill in the blanks to get it to work properly!
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = _
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# place your code here'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Introduktion
        default_save_name: intro
        description: Niveau forklaring
        levels:
            1:
                story_text: "På niveau 1 kan do bruge kommandoerne `{print}`, `{ask}` og `{echo}`.\n Skriv din programkode i programmeringsfeltet. Eller tryk på den grønne knap i kodeeksemplet, og koden vil blive skrevet for dig!\nPrøv selv koden med den grønne 'Kør koden' knappen under programmeringsfeltet.\n\
                    \nDu kan printe tekst på skærmen ved at bruge `{print}` kommandoen.     \n"
                start_code: '{print} hej verden!'
            2:
                story_text: |
                    På niveau 2 lærer vi to nye kommandoer: `{is}` og `{sleep}`.
                    Du kan navngive et ord med `{is}`. Dette kaldes en variabel. I dette eksempel lavede vi en variabel der hedder navn og en variabel der hedder alder. Du kan bruge ordet navn i din kode og det vil blive erstattet af Hedy, som her:

                    På denne måde har du ikke længere brug for `{echo}` kommandoen!
                example_code: |
                    ```
                    navn {is} Hedy
                    alder {is} 15
                    {print} navn er alder år gammel
                    ```
                story_text_2: |
                    `{print}` virker stadig på samme måde, men `{ask}` kommandoen har ændret sig. Du skal bruge en variabel sammen med `{ask}` kommandoen. Det ser sådan ud:
                start_code: '{print} hej verden!'
            3:
                story_text: |
                    På niveau 3 kan du lave en liste. Du kan lade computeren vælge noget tilfældigt fra listen. Det kan du gøre med `{at} {random}`.
                start_code: '{print} hej verden!'
            4:
                story_text: |
                    På niveau 4 har `{ask}` og `{print}` ændret sig.

                    Du skal den tekst du vil printe i anførselstegn.

                    Dette er nyttigt, for nu kan du printe alle de ord du har lyst til. Du kan også printe de ord du har brugt til at gemme med `{is}`.

                    De fleste programmeringssprog bruger også anførselstegn til at printe, så vi kommer også tættere på rigtig programmering!
                example_code: |
                    ```
                    {print} 'Du skal bruge anførselstegn fra nu af!'
                    svar {is} {ask} 'Hvad er det du skal bruge fra nu af?'
                    {print} 'Vi har brug for at bruge ' svar
                    ```
                start_code: '{print} ''Hej verden'''
            5:
                story_text: |
                    På niveau 5 er der noget nyt, `{if}`! Med `{if}` kan du vælge mellem 2 forskellige muligheder.
                    Denne kode printer lækkert hvis du taster Hedy som navn, and bøh! hvis du skriver noget andet.
                    `{ask}` og `{print}` virker stadig som de gjorde på niveau 4.
                example_code: |
                    ```
                    navn {is} {ask} 'hvad er dit navn?'
                    {if} navn {is} Hedy {print} 'lækkert' {else} {print} 'buh!'
                    ```
                start_code: |-
                    navn {is} {ask} 'hvad er dit navn?'
                    {if} navn {is} Hedy {print} 'fedt!' {else} {print} 'kedeligt'
            6:
                story_text: |
                    På dette niveau lærer du noget nyt: du kan nu også regne.

                     Plus er nemt, du skriver det som i matematik: `5 + 5` for eksempel. Minus virker også fint, det er `5 - 5`.

                     Gange er en smule anderledes, for der er ikke noget gange symbol på dit tastatur. Prøv at lede, den er der virkelig ikke!
                     Der for ganger vi med stjernen ved siden af ø: `5 * 5`. Læs det som "5 gange 5" det hjælper dig med at huske det.
                example_code: |
                    ```
                    {print} '5 plus 5 er ' 5 + 5
                    {print} '5 minus 5 er ' 5 - 5
                    {print} '5 gange 5 er ' 5 * 5
                    ```
                start_code: '{print} ''5 gange 5 er '' 5 * 5'
            7:
                story_text: |
                    Niveau 7 tilføjer `{repeat}` kommandoen.  `{repeat}` kan bruges til at udføre en kodelinje flere gange.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy er sjovt!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy er sjovt!'''
            8:
                story_text: |
                    `{ask}` og`{print}` virker stadig som du kender dem. Men `{if}`, `{else}`, {pressed} og `{repeat}` har ændret sig!
                    Du kan nu udføre en gruppe kode sammen, men du skal *indrykke* koden.
                    Det betyder at sætte fire mellemrum i begyndelsen af linjen. Du skal også indrykke når du blot vil lave en gruppe med en enkelt linje.
                example_code: |
                    Sådan virker `{repeat}` kommandoen nu:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hej alle'
                        {print} 'Dette gentages 5 gange'
                    ```
                    Sådan virker `{if}` og `{else}` kommandoerne nu:

                    ```
                    navn {is} {ask} 'Hvad hedder du?'
                    {if} navn {is} Hedy
                        {print} 'Velkommen Hedy'
                        {print} 'Du må spille på din computer!'
                    {else}
                        {print} 'ADVARSEL!'
                        {print} 'Du må ikke bruge denne computer!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hej folkens'
                        {print} 'Dette vil blive printet 5 gange'
            9:
                story_text: |
                    På dette niveau må du kun bruge flere linjer med `{if}` og`{repeat}`, men du kan også sætte dem sammen!
                    I eksemplet kan du se en `{if}` kommando inde i en `{repeat}` kommando. Det er også tilladt den anden vej rundt, og en `{if}` er også tilladt i en anden `{if}` og en `{repeat}` i en `{repeat}`.
                    Giv det et forsøg!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        mad = {ask} 'Hvad kunne du tænke dig?'
                        {if} mad {is} pizza
                            {print} 'lækkert!'
                        {else}
                            {print} 'pizza er bedre'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        mad = {ask} 'Hvad kunne do tænke dig?'
                        {if} mad {is} pizza
                            {print} 'lækkert!'
                        {else}
                            {print} 'pizza er bedre'
            10:
                story_text: |-
                    På dette niveau lærer vi en ny kommando der hedder `{for}`. Med `{for}` kan du lave en liste og bruge alle elementerne.
                    `{for}` skaber en blok, ligesom `{repeat}` og `{if}` så alle linjer i blokken skal starte med mellemrum (indrykning).
                example_code: |
                    ```
                    alle_dyr {is} hunde, katte, fisk
                    {for} dyr {in} alle_dyr
                      {print} 'Jeg elsker ' dyr
                    ```
                start_code: |-
                    alle_dyr {is} hunde, katte, fisk
                    {for} dyr {in} alle_dyr
                      {print} 'Jeg elsker ' dyr
            11:
                story_text: |-
                    `{print}` virker på samme måde men vi tilføjer en ny slags `{for}`. Du kan nu skrive `{for} counter {in} {range} 1 {to} 5` i stedet for `{repeat} 5 {times}` og bruge `counter` i dit program.
                    Prøv og se hvad der sker! Husk at bruge indrykning efter `{for}` og `{if}` kommandoen (De betyder at linjen starter med fire mellemrum).
                start_code: |-
                    {for} tæller {in} {range} 1 {to} 5
                        {print} tæller
            12:
                story_text: |-
                    **Kommatal**
                    Indtil nu, har Hedy ikke tilladt kommatal som 1,5, men nu tillader vi det. Bemærk at computere bruger `.` i kommatal.
                example_code: |
                    ```
                    {print} 'To og en halv plus to og en halv er..'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'kommatal skal nu bruge et punktum'
                    {print} 2.5 + 2.5
            13:
                story_text: Vi skal nu lære `{and}` og `{or}`! Hvis du vil tjekke to udsagn, behøver du ikke bruge to {if} kommandoer men kan blot bruge `{and}` og `{or}`. Hvis du bruger `{and}`, skal begge udsagn, til højre og venstre for `{and}` være sande. Vi kan også bruge `{or}`. Så behøver kun et
                    enkelt udsagn være sandt.
                example_code: |
                    ```
                    navn = {ask} 'hvad hedder du?'
                    alder = {ask} 'hvor gammel er du?'
                    {if} navn {is} 'Hedy' {and} alder {is} 2
                        {print} 'Du er virkelig Hedy!'
                    ```
                start_code: |-
                    navn = {ask} 'hvad hedder du?'
                    alder = {ask} 'hvor gammel er du?'
                    {if} navn {is} 'Hedy' {and} alder {is} 2
                        {print} 'Du er virkelig Hedy!'
            14:
                story_text: |
                    Vi skal lære flere nye ting. Du kender dem måske allerede fra matematik,  `<` og `>`.
                    `<` tjekker om det første tal er mindre end det andet, for eksempel alder `<` 12 tjekker om alder er mindre end 12.
                    Hvis du gerne vil tjekke om det første tale er mindre end eller lig med, kan du bruge `<=`, for eksempel alder `<=` 11.
                    `>` tjekker  om det første tal er større end det andet, for eksempel point `>` 10 tjekker om point er større end 10.
                    Hvis du vil tjekke om det første tal er større end eller lig med det andet, kan du bruge `>=`, for eksempel point `>=` 11.
                    Du kan bruge disse sammenligninger i en `{if}`, sådan her:
                example_code: |
                    ```
                    alder = {ask} 'Hvor gammel er du?'
                    {if} alder > 12
                        {print} 'Du er ældre end mig!'
                    ```
                start_code: |-
                    alder = {ask} 'Hvor gammel er du?'
                    {if} alder < 13
                        {print} 'Du er yngre end mig!'
                    {else}
                        {print} 'Du er ældre end mig!'
            15:
                story_text: |-
                    Nu skal vi lære et nyt loop, et `{while}` loop! Vi fortsætter loop'et så længe udsagnet er sandt.
                    Så glem ikke at ændre værdien inde i loop'et.

                    I eksemplet, fortsætter vi indtil der er blevet givet det rigtige svar.
                    Hvis det rigtige svar ikke bliver givet, slutter loop'et aldrig!
                example_code: |
                    ```
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Hvad er 5 gange 5?'
                    {print} 'Det er rigtigt'
                    ```
                start_code: |-
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Hvad er 5 gange 5?'
                    {print} 'Det er rigtigt'
            16:
                story_text: |-
                    Vi skal lave lister på som i Python, med firkantede parenteser rundt om! Vi beholder også anførselstegn rund om hvert element som vi har lært på et tidlige niveau.
                    Du kan også bruge firkantede parenteser til at udpege et sted i en liste.
                example_code: |
                    ```
                    venner = ['Ahmed', 'Bente', 'Claus']
                    lykke_tal = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'Lykketallet til ' venner[i]
                        {print} 'er ' lykke_tal[i]
                    ```
                start_code: |-
                    frugt = ['æble', 'banan', 'kirsebær']
                    {print} frugt
            17:
                story_text: |-
                    Nu skal vi ændre indrykning en lille smule. Hver gang vi har brug for indrykning, skal vi bruge `:` på linjen før indrykningen.

                    På dette niveau kan du også bruge en ny kommando: `{elif}`. `{elif}` er en forkortelse for {else} {if} når du vil lave 3 (eller flere!) muligheder.
                    Se en gang!
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Klar eller ej, her kommer jeg!'
            18:
                story_text: Vi er nået til ægte Python kode! Det betyder at vi er nødt til at bruge parenteser til {print} og {range} fra nu af.
                start_code: |-
                    navn = 'Hedy'
                    {print}('Jeg hedder ', navn)
    dice:
        name: Terninger
        default_save_name: Terninger
        description: Lav din egen terning
        levels:
            3:
                story_text: |
                    På dette niveau kan vi vælge fra en liste. På denne måde kan vi lade computeren vælge en side på en terning.
                    Se på de brætspil du har i skabet derhjemme.
                    Er der spil med en (speciel) terning? Du kan også lave sådan en med denne kode.
                    For eksempel, terningerne til spillet Earthworms med tallene 1 til 5 og en regnorm på.

                    ![Terning fra Earthworms med 1 til 5 og en regnorm på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    muligheder {is} 1, 2, 3, 4, 5, regnorm
                    {print} muligheder {at} {random}
                    ```
                story_text_2: |
                    ### Opgave
                    Terningerne fra eksemplet ovenfor er terninger til et specifikt spil. Kan du lave en normal terning?
                    Eller en anden speciel terning fra et andet spil?
                example_code_2: |
                    ```
                    muligheder {is} _
                    ```
                start_code: '{print} Hvad vil terningen vise denne gang?'
            4:
                story_text: |
                    På dette niveau kan vi lave sætninger med terningeværdien i en sætning, med anførselstegn selvfølgelig.
                    Denne gang er kodeeksemplet ikke helt færdigt. Kan du færdiggøre den?
                start_code: '{print} ''Hvad vil terningen vise denne gang?'''
            5:
                story_text: |
                    Du kan også lave en terning igen på dette niveau ved at bruge `{if}`.
                    Færdiggør kodeeksemplet så programmet siger "Du kan stoppe med at kaste" når du har slået en regnorm.

                    Men måske du gerne vil genskabe en terning fra et helt andet spil. Det er også helt fint! Så find på din egen reaktion, f.eks. 'jubii' ved en 6'er og 'ærgerligt' ved noget andet.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: '{print} ''What will the die indicate this time?'''
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:

                    ### Exercise
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: '{print} ''What will the die indicate this time?'''
            7:
                story_text: |
                    You can also make a dice again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.

                    ### Exercise
                    Try to finish the sample code!  **(extra)** Think of a game you know that involves a dice and program that using a `{repeat}.`
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''What will the dice indicate this time?'''
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                    Can you fill in the correct line of code on the blanks?
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    _
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# place your code here'
    dishes:
        name: Opvask?
        default_save_name: Opvask
        description: Brug computeren til at se hvem der tager opvasken
        levels:
            3:
                story_text: |
                    Er i altid uenige om hvem der skal tage opvasken eller tømme kattebakken derhjemme?
                    Så kan du lade computeren vælge retfærdigt. Du kan programmere det på dette niveau!
                    Først laver du en liste med alle medlemmerne af din familie. Derefter tag fra listen med `{at} {random}`.
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} personer {at} {random}
                    ```
                story_text_2: |
                    Har du ikke lyst til at tage opvasken? Hack programmet ved at fjerne dit navn fra listen med `{remove}` `{from}` kommandoen.
                start_code: '{print} Hvem tager opvasken?'
            4:
                story_text: |
                    Med anførselstegn kan du lave din opvaskeplan pænere.
                    Denne gang er eksemplet ikke helt færdig.

                    Kan du færdiggøre koden ved at udfylde de tomme felter? Hvert af de tomme felter skal erstattes med et ord eller symbol.

                    Tip: Glem ikke anførselstegn!
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} _ opvasken tages af _
                    {sleep}
                    {print} personer {at} _
                    ```
                start_code: '{print} ''Hvem tager opvasken?'''
            5:
                story_text: |
                    Med `{if}` kan du nu have endnu mere sjov med valg i dit program. Du kan få dit program til at reagere på et valg lavet af computeren.

                    Kan du færdigøre koden så den printer 'ærgerligt' når det er din tur og ellers 'sådan!'?
                    Glem ikke anførselstegn!
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\nopvasker {is} personer {at} {random}\n{if} opvasker {is} Sophie {print} _ ærgerligt jeg skal tage opvasken _ \n{else} {print} 'heldigvis ingen opvask for ' _ ' er allerede i gang'\n```\n"
                start_code: '{print} ''Hvem tager opvasken?'''
            6:
                story_text: |
                    Hvor ofte skal alle tage opvasken? Er det retfærdigt? Du kan tælle det på dette niveau.
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    emma_tager_den = 0
                    opvasker = personer {at} {random}
                    {print} 'Opvaskeren er ' opvasker
                    {if} opvasker {is} Emma emma_tager_den = emma_tager_den + 1
                    {print} 'Emma tager opvasken ' emma_tager_den ' gange denne uge'
                    ```

                    Du kan nu kopiere linje 3 til 5 nogle gange (e.g. 7 gange for en hel uge) for at beregne en hel uge igen.
                    Laver du koden for hele ugen?
                story_text_2: |
                    Hvis du er ekstremt uheldig vil det forrige program måske vælge dig til at tage opvasken hele ugen! Det er ikke retfærdigt!
                    For at lave et mere retfærdigt system can du bruge `{remove}` kommandoen til at fjerne den valgte person fra listen. På den måde skal du ikke tage opvasken igen før alle har taget deres tur.

                    Mandag og tirsdag er klar til dig! Kan du tilføje resten af ugen?
                    Og... kan du finde på en løsning til når listen er tom?
                example_code_2: |
                    ```
                    personer = mor, far, Emma, Sophie
                    opvasker = personer {at} {random}
                    {print} 'Mandag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    {print} 'Tirsdag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    ```
                start_code: '{print} ''Hvem tager opvasken?'''
            7:
                story_text: |
                    Med `{repeat}` kan du gentage stykker af kode. Du kan bruge dette til at beregne hvem der skal tage opvasken i flere dage!
                    ### Opgave
                    Brug `{repeat}` kommandoen til at beslutte hvem der skal tage opvasken en hel uge. Hver blanke felt skal udskiftes med en kommando eller et tal!
                    **(ekstra)** Kan du finde på flere opgaver i huset? Ret koden så den beslutter hvem der klarer tre husholdningsopgaver. Glem ikke at printe hvilken opgave det handler om!
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    {repeat} _ _ {print} 'Opvasken tages af ' _ _ _
                    ```
                start_code: '{print} ''Hvem tager opvasken?'''
            10:
                story_text: |
                    På dette niveau kan du lave et endnu bedre opvaske skema.
                example_code: |
                    ```
                    dage = mandag, tirsdag, onsdag, torsdag, fredag, lørdag, søndag
                    navne = mor, far, Emma, Sophie
                    _ dag _ dage
                        {print} navne {at} {random} ' tager opvasken på ' day
                    ```
                start_code: '# placer din kode her'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Fortune teller
        default_save_name: Fortune Teller
        description: Let Hedy predict the future
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# place your code here'
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I’m Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or 'ask again'.
                start_code: '# place your code here'
            4:
                story_text: |
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.

                    ### Exercise
                    We have removed all the quotation marks from this example code, can you add them in all the right places?
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: '# place your code here'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict if youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone else will win!😭'
                    ```
                start_code: '# place your code here'
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.



                    ### Exercise
                    Can you think of your own (silly) fortune telling machine?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!
                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can ask 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    In the previous levels you've learned how to use `{repeat}` to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the `{repeat}` command.
                    In the next example you can have your fortune teller ask 3 questions and also print them!

                    ### Exercise
                    Can you fill in the `{repeat}` command correctly on the blanks?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can ask me 3 questions.'
                    answers = yes, no, maybe
                    _ _ _
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Can you add more different fortunes to the list?
                example_code: |
                    ```
                    fortunes = 'you will slip on a banana peel', _
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# place your code here'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Haunted House
        default_save_name: Haunted House
        description: Escape from the haunted house
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but if not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
                start_code: '{print} How did I get here?'
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _ Escape from the haunted house! _
                    {print} _ There are 3 doors in front of you... _
                    choice {is} {ask} _ Which door do you choose? _
                    {print} _ You picked door ... _ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _ You see... _
                    {sleep}
                    {print} monsters {at} {random}
                     ```
                start_code: '# place your code here'
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.

                    ### Exercise
                    Can you find the 4 missing words to complete the code?
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    _ _ _ _ {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.

                    ### Exercise
                    Finish the program with the correct line of code. Mind: There are 3 rooms that the player needs to survive before they win!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    _
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: Language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                    ### Exercise
                    Can you make this program for a different language? Or can you add more words to the French one?
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# place your code here'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Parrot
        default_save_name: Parrot
        description: Create your own online pet parrot that will copy you!
        levels:
            1:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Im Hedy the parrot
                    {ask} What is your name?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
                start_code: '{print} Im Hedy the parrot!'
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                    ### Exercise
                    How can you make your parrot say multiple words?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} 🧒 Say new_word, Hedy!
                    {print} 🦜 words {at} {random}
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ 🧒 Say _ new_word _, Hedy!_
                    {print} _ 🦜 _ words {at} {random}
                    ```
                start_code: '# Write your code here'
            5:
                story_text: |
                    Reward your parrot if it says the correct word!
                    Finish the code by filling in the 4 missing commands.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} '🧒 Say ' new_word ', Hedy!'
                    {print} '🦜 ' said_word
                    _ said_word {is} new_word _ '🧒 Great job, Hedy! 🍪'
                    _ _ '🧒 No, Hedy! Say ' new_word
                    ```
                start_code: '# place your code here'
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank.
                    Finish the code to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' _ ' in ' _ ' weeks.'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In this level you can let Hedy tell you if you have saved up enough money!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# place your code here'
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# place your code here'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# place your code here'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Create your own virtual restaurant
        levels:
            1:
                story_text: |
                     In level 1 you can make your own virtual restaurant and take your guests' orders.
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant 🍟
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: '# place your code here'
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the toppings!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
                start_code: '# place your code here'
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                    ### Exercise
                    Can you make your own version of the random restaurant?
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    In this level you have to use quotation marks when using the `{print}` or `{ask}` command.

                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Welcome to Hedys restaurant!
                    {print} Today we are serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The  food  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food  with  topping  is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your  food  and  drinks  will be right there!
                    ```
                start_code: '# place your code here'
            5:
                story_text: |
                    In this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.
                    In the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
                start_code: '# place your code here'
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    In this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to `{ask}` multiple people what they'd like to eat.

                    ### Exercise
                    Can you complete the code? Hedy needs to repeat this question as many times as there are people. So if there are 5 people, the question needs to be asked 5 times.
                    **(extra)** Expand your code with more questions, for example about drinks or sauce.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    ### Exercise
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: '# place your code here'
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would ask for sauce if somebody orders fries, but you wouldn't if someone orders pizza!

                    ### Exercise
                    This is a challenge for the real brainiacs! Each line that needs indentation has been given a blank.
                    Can you figure out how much indentation each line needs in order for the code to work propperly?
                    Good luck!
                    TIP: If the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    ### Exercise
                    Of course, you could also order for multiple people!
                    Can you add the correct amount of indentation before each line to make the code work properly?
                    TIP: some lines don't need any indentation at all.
                example_code_2: |
                    ```
                    _ courses = appetizer, main course, dessert
                    _ names = Timon, Onno
                    _ {for} name {in} names
                    _ {for} course {in} courses
                    _ food = {ask} name ', what would you like to eat as your ' course '?'
                    _ {print} name ' orders ' food ' as their ' course
                    ```
                start_code: courses = appetizer, main course, dessert
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to `{print}` the orders from multiple customers in an orderly manner.

                    ### Exercise
                    Can you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                    _ {print} 'Order number ' i
                    _ food = {ask} 'What would you like to eat?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ sauce = {ask} 'What kind of sauce would you like with that?'
                    _ {print} sauce
                    _ drinks = {ask} 'What would you like to drink?'
                    _ {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.

                    ### Exercise
                    Can you think of a code to give your friends and family a 15% discount?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
                start_code: '# place your code here'
    rock:
        name: Rock, paper, scissors
        default_save_name: Rock
        description: Make your own rock, paper, scissors game
        levels:
            1:
                story_text: |
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ✊✋✌
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
                start_code: |
                    {print} Welcome to your own rock scissors paper!
                    {ask} What will you choose?
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    _ {is} {ask} rock, paper, or scissors?
                    {print} I choose _
                    ```
                start_code: '# place your code here'
            3:
                story_text: |
                    In this level we can enter lists and choose things from them.
                    You first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.
                    For example, you can let the computer pick from rock, paper and scissors.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: '{print} Welcome to your own rock scissors paper!'
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see if they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the `{if}` commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                    You only have to fill in the names of the players.
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = _
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    _
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    _
                    ```
                start_code: '# place your code here'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: SuperSpy
        default_save_name: SuperSpy
        description: Make your own spy code
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.

                    ### Exercise
                    Make your own secret code for your superspy. Can you make it consist of even more variables?
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    if name {is} 'Agent007'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'TOPSECRET'
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} a + b
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    Can you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    password {is} {ask} 'What is your password?'
                    {if} name {is} 'Agent007' _ password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the trainstation at 10.00'
                     ```
                start_code: '# place your code here'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Sing a song!
        default_save_name: Song
        description: Print a song
        levels:
            6:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.

                    Tip: Use the read aloud function to let Hedy sing the song to you!

                    ### Exercise
                    You can now repeat lines 2 to 7 as many times as you want by copying the lines.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    {sleep}
                    ```
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    {print} number ' little monkeys jumping on the bed'
                    {print} 'One fell off and bumped his head'
                    {print} 'Mama called the doctor and the doctor said'
                    {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    {sleep}
                    ```
                start_code: '{print} ''Lets sing!'''
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Exercise
                    You can print the song Baby Shark with a `{repeat}`? Finish the code by replacing the blanks?
                    **Extra** After Baby Shark you can of course also program other songs. There are many songs with repetition!
                    Can you think of one more song and print it?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In this level you can repeat the song 99 times, just by adding one simple line!
                    Do you know which line of code to add on the blanks?
                example_code: |
                    ```
                    verse = 99
                    _ _ _
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines, using `{for}`!
                    Or you can make Old McDonald with all the different animals.



                    ### Exercises
                    Can you add the last verse of the monkeys on the bed, when there is only one monkey left?

                    Can you make the baby shark code even shorter by using a `{repeat}` command?

                    Can you add new animals to Old MacDonald's farm?
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark'
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting, like the 5 little monkeys.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    _ _ _ _ 5 _ 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    In this song we can make it even easier to program 'if you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:

                    ### Exercise
                    Can you add the right amount of indentation to each line to make the song play correctly?
                    Mind: Not all lines need indentation
                example_code: |
                    ```
                    _ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    _ {print} 'if youre happy and you know it and you really want to show it'
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    ```
                start_code: '# place your code here'
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: "```\nalle_dyr = ['gris', 'hund', 'ko']\nlyde = ['øh', 'vuf', 'muh']\n{for} i {in} {range} 1 {to} 3\n    dyr = alle_dyr[i]\n    lyd = lyde[i]\n    {print} 'Jens Hansen havde en bondegård'\n    {print} 'ih ah ih ah oh!'\n    {print} 'og på den gård der var en ' dyr\n    {print}\
                    \ 'ih ah ih ah oh!'\n    {print} 'Der var ' lyd lyd' her'\n    {print} 'og ' lyd lyd' der'\n    {print} lyde ' her'\n    {print} lyde ' der'\n    {print} 'alle steder ' lyde lyde\n```\n\n```\nlinjer = ['Hvad skal vi gøre med den fulde sømand', 'Smid ham i brummen til han vågner', 'Han\
                    \ skal klynges op i masten']\n{for} linje {in} linjer\n    {for} i {in} {range} 1 {to} 3\n        {print} linje \n    {print} 'Tidligt om morgnen.'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Hu hej, se hun sejler'\n    {print} 'Tidligt om morgnen.'\n```\n"
                start_code: '# placer din kode her'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schrijf jouw code hier'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Tic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 {to} 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# place your code here'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# place your code here'
    turtle:
        name: Skildpadde
        default_save_name: Skildpadde
        description: Lav din egen tegning
        levels:
            1:
                story_text: |
                    Du kan også bruge Hedy til at tegne. Ved at kombinere hjørner og streger, kan du lave et kvadrat eller trapper!

                    Ved at bruge `{forward}` tegner du en streg fremad. Tallet bagefter bestemmer hvor langt skildpadden vil gå. `{turn} {right}` drejer en kvart omgang med uret, `{turn} {left}` drejer mod uret.

                    Hvis du vil baglæns, bruger du `{forward}` kommandoen sammen med et negativt tal. For eksempel `{forward} -100`

                    ### Opgave
                    Dette er starten på en lille trappe. Kan du lave den med 5 trin?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    På dette niveau kan du bruge variabler. For eksempel kan du spørge hvor mange skridt skildpadden skal tage.
                example_code: |
                    ```
                    svar {is} {ask} Hvor mange skridt skal skildpadden tage?
                    {forward} svar
                    ```
                story_text_2: |
                    På niveau 1 kunne skildpadden også kun dreje til højre eller venstre. Det er en smule kedeligt!
                    På niveau 2 kan den se i alle retninger.

                    Brug 90 til at dreje en kvart omgang. Det kalder vi grader. En hel omgang er 360 grader.

                    ### Opgave
                    Kan du lave en figur med denne kode? Måske en trekant eller cirkel?
                example_code_2: |
                    ```
                    {print} Tegner figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} Skildpaddeløb!
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            3:
                story_text: |
                    På dette niveau kan du bruge `{at} {random}` med tegneskildpadden. Et tilfældigt valg får skildpadden til at gå en ny vej hver gang.
                    Brug `{at} {random}` for at vælge et element fra en liste.
                    ### Opgave
                    Kan du lave den tilfældige sti længere ved at copy-paste linje 2 og 3?
                example_code: |
                    ```
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
            4:
                story_text: |
                    På niveau 4 skal du bruge anførselstegn sammen med `{print}` og `{ask}`. Også når du tegner!
                example_code: |
                    ```
                    {print} _ Tegner figurer _
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kan også skifte farve på stregerne med kommandoen `{color}`. Se eksemplet.
                    Du kan også bruge kommandoen `{color} {white}` til at lave 'usynlige' streger. Du kan bruge de hvide streger til at flytte skildpadden hvor som helst på skærmen før du begynder at tegne.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Tegner figurer'
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            5:
                story_text: |
                    På niveau 5 kan du lave et valg med `{if}`. For eksempel mellem forskellige typer figurer.
                example_code: |
                    ```
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du have en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
                start_code: |-
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du tegne en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120 {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
            6:
                story_text: |
                    På dette niveau kan du bruge beregninger til at tegne forskellige figurer.
                    Du kan måske lært i skolen at dreje en hel omgang er 360 grader. Hvis ikke, ved du det nu!
                    Det er også derfor du bruger 90 grader til en firkant. 360 divideret med 4 er 90.
                    Nu hvor vi kan lave matematik med Hedy kan vi tegne alle de figurer vi ønsker!
                example_code: |
                    ```
                    hjørner = {ask} 'Hvor mange hjørne kunne du tænke dig?'
                    vinkel = 360 / hjørner
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    ```
                start_code: '{print} ''Tegner figurer'''
            8:
                story_text: "Nu hvor vi kan gentage flere streger, kan vi lave lettere lave figurer.\nVi skal kun sætte vinklen en gang og så bruge den variabel i `{repeat}` kommandoen.\n\n### Opgave 1\nKoden i eksemplet skaber et kvadrat. Ændrer koden så den skaber en anden figur, så som en trekant eller\
                    \ sekskant. \n Dette kræver at du ændrer to linjer i koden.\nTip: En hel omgang er 360 grader.\n\n### Opgave 2\nLav nu en tegning der består af mindst på polygoner.\n"
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 4 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    Vi kan nu forbedre programmet der tegner forskellige figurer
                    Kan du regne ud hvor meget skildpadden skal dreje til højre her? Færdiggør koden og du kan tegne hvilken som helst polygon du kunne tænke dig!
                example_code_2: |
                    ```
                    kanter = {ask} 'Hvor mange kanter skal jeg tegne?'
                    vinkel = 360 / hjørner
                    {repeat} kanter {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: kanter = {ask} 'Hvor mange kanter skal jeg tegne?'
            9:
                story_text: |
                    Nu hvor vi kan bruge `{repeat}` inden i en `{repeat}`, kan vi lave mere komplekse figurer.

                    ### Opgave 1
                    Denne kode skaber tre sorte trekanter og fem lyserøde firkanter.

                     **(ekstra)** Lav en figur du selv vælger bestående af mindst to forskellige former.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# placer din kode her'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    {for} _ {in} _ 10 {to} 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: '# place your code here'
