adventures:
    story:
        name: Histoire
        default_save_name: Story
        description: Histoire
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire une histoire avec un personnage principal dont tu auras choisi le nom toi-même.

                    À la première ligne, utilise `{ask}` pour demander le nom du personnage de ton histoire.

                    Après la première ligne, commence avec `{print}` si la phrase a besoin d'être affichée.
                    Où utilise `{echo}` si tu veux que le nom de ton personnage principal soit à la fin de la phrase.
                example_code: |
                    ```
                    {ask} Le nom du personnage principal de cette histoire est
                    {print} Le personnage principal est en train de marcher dans la forêt
                    {echo} Il a un peu peur,
                    {print} Il entend de drôles de bruits tout autour
                    {print} Il craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Défi
                    Crée maintenant ta propre histoire à l'aide d'au moins 6 lignes de code.
                    Cette histoire doit être différente de celle proposée dans le code d'exemple.
                    Utilise au moins une commande `{ask}` et une commande `{echo}`.
                    Tu peux choisir n'importe quel sujet.
                    Si tu n'as pas d'idée, tu peux parler de l'un des sujets suivants : un film, un match ou une journée au zoo.
                start_code: '{print} Ton histoire commence ici'
            2:
                story_text: |
                    Dans le niveau 2 tu peux créer une histoire plus drôle. Le nom de ton personnage principal peut être à n'importe quel endroit de la phrase

                    Tu vas devoir programmer un petit supplément pour ça. Maintenant, tu dois commencer par donner un nom à ton personnage principal.

                    Tu peux ensuite mettre ce nom n'importe où dans une phrase.
                example_code: |-
                    ```
                    nom {is} {ask} Quel est le nom du personnage principal ?
                    {print} nom va courir dans les bois
                    {print} nom a un peu peur
                    {print} Soudain, il entend un bruit étrange…
                    {sleep}
                    {print} nom craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Exercice
                    Il est maintenant temps d'ajouter des variables à l'histoire que tu as créée au niveau précédent.
                    Va dans « Mes programmes », recherche ton histoire créée au niveau 1 et copie le code. Colle le code dans la zone de programmation de ce niveau.

                    Ce code ne fonctionne pas à ce niveau parce que tu n'as pas encore utilisé de variables.
                    En utilisant la forme adéquate apprise dans ce niveau, modifiez les commandes `{ask}` et `{echo}` de ton code.

                    **Défi supplémentaire** Pour ajouter du suspens à ton histoire, ajoute une commande `{sleep}`.
                start_code: '{print} Ton histoire'
            3:
                story_text: |
                    Dans le niveau 3, tu peux rendre ton histoire plus amusante. Tu peux tirer au hasard un monstre, un animal ou un autre obstacle, comme ceci :
                example_code: |
                    ```
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} Maintenant il entend le cri d'un animaux {at} {random}
                    ```
                story_text_2: |
                    La commande `{add}` peut aussi être pratique pour ton histoire.
                example_code_2: |
                    ```
                    {print} Il entend un bruit
                    animaux {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} C'est quoi à ton avis ?
                    {add} animal {to_list} animaux
                    {print} C'était un animaux {at} {random}
                    ```
                story_text_3: |
                    Ceci est un exemple de la commande `{remove}` dans ton histoire.

                    ### Défi
                    Copie ton histoire des niveaux précédents dans celui-ci.
                    Dans ce niveau, tu as appris 3 nouvelles commandes `{at} {random}`, `{add} {to}` et `{remove} {from}`.
                    Ajoute de nouvelles lignes de code à ton histoire de manière à ce que ces nouvelles commandes apparaissent au moins une fois.
                example_code_3: |
                    ```
                    {print} Son sac à dos est beaucoup trop lourd.
                    {print} Il y a dedans une bouteille d'eau, une lampe torche et une brique.
                    sac_à_dos {is} eau, torche, brique
                    jeté {is} {ask} Quel objet devrions-nous jeter ?
                    {remove} jeté {from} sac_à_dos
                    ```
                start_code: '{print} Ton histoire'
            4:
                story_text: |
                    Tu as sans doute remarqué que le problème des niveaux précédents persiste. As-tu essayé d'afficher une phrase contenant le mot « nom » ? Par exemple : `{print}` mon nom est nom.
                    Tu peux résoudre ce problème dans ce niveau. Tu dois mettre entre guillemets tout ce que tu veux écrire.

                    ### Défi
                    Copie le code d’exemple et ajoute des guillemets à la place des espaces blancs aux lignes 1 et 2 pour le faire fonctionner.
                    Les espaces blancs en ligne 3 et 4 ne devraient pas être remplacés par des guillemets, mais une commande `{sleep}`et une commande `{clear}`. Peux-tu faire marcher ça ?

                    ### Défi 2
                    Rends-toi au niveau précédent et copie le code de ton histoire. Dans ce niveau, ton code fonctionnera en ajoutant des guillemets aux bons endroits.
                    Astuce : les variables de ta propre histoire ne doivent pas être entre guillemets, comme le montre la seconde ligne dans le code d'exemple. Dans cette ligne, le nom de la variable n'est pas entre guillemets.
                example_code: |
                    ```
                    nom {is} {ask} _ Comment t'appelles-tu ? _
                    {print}  _ Le personnage principal s'appelle _ nom
                    _
                    _
                    {print} nom  _ va se promener dans les bois _
                    {print} nom _ a un peu peur _
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Il entend le bruit d'un _ animaux {at} {random}
                    {print} nom _ craint que la forêt ne soit hantée _
                    ```
                start_code: '{print} "ton histoire sera écrite ici !"'
            5:
                story_text: |
                    Dans ce niveau, différentes fins peuvent être programmées afin de rendre ton histoire encore plus amusante.
                    Le code d'exemple te montre comment réaliser deux fins différentes.

                    ### Défi 1
                    Écrie une nouvelle histoire courte du sujet de ton choix.
                    En panne d'inspiration ? Choisie l'un des sujets suivants : un super-héros, une journée d'école ennuyeuse, une île déserte.

                    Maintenant, donne la possibilité au joueur de choisir une fin heureuse ou non, comme indiqué dans le code d'exemple.
                    Programme les deux fins.

                    ### Défi 2
                    Copie l'histoire créée aux niveaux précédents.
                    Trouve le moyen d'ajouter au moins deux commandes `{if}` et `{else}` à ton histoire.
                    La fin peut être heureuse ou non. Tu peux également trouver d'autres moyens d'inclure ces commandes.
                example_code: |
                    ```
                    nom {is} {ask} "Qui se promène en forêt ?"
                    {print} nom " se promène en forêt"
                    {print} nom " rencontre un monstre"
                    fin {is} {ask} "Voudrais-tu une fin triste ou heureuse ?"
                    {if} fin {is} heureuse {print} nom " sort son épée et le monstre s'enfuie rapidement"
                    {else} {print} "Le monstre mange " nom
                    ```
                start_code: '{print} "C''est ici que commence ton histoire !"'
            7:
                story_text: |
                    Dans une histoire, on se répète parfois. Par exemple, quand une personne appelle à l'aide ou chante une chanson.
                    À ce niveau, tu peux écrire ces répétitions dans ton histoire, avec `{repeat}`.

                    ### Exercice
                    Ajoute une répétition à ta propre histoire. Recherche dans tes programmes sauvegardés, choisi l'histoire que tu as programmé au niveau 6, trouve une ligne contenant `{print}` et répète là !
                example_code: |
                    ```
                    {print} "Le prince appelait à l'aide sans arrêt"
                    {repeat} 5 {times} {print} "au secours !"
                    {print} "Pourquoi personne ne vient m'aider ?"
                    ```
                start_code: '{repeat} 5 {times} {print} ''Help!'''
            8:
                story_text: |
                    À ce niveau tu peux utiliser plusieurs lignes dans une commande `{if}`, ainsi tu peux améliorer ta fin heureuse ou triste !

                    ### Exercice 1
                    L'exemple de code montre deux fins différentes, une ou les personnages sautent dans une machine à voyager dans le temps et une où ce n'est pas le cas.
                    Complète les espaces blancs avec, au moins, une phrase pour chaque fin.
                    **Pour aller plus loin**, continue l'histoire. Que se passe-t-il dans l'histoire ? Tu peux aussi ajouter un second `{ask}` avec des options différentes.

                    ### Exercice 2
                    Recherche dans tes programmes sauvegardés et choisi une histoire du niveau 5. Maintenant écrit une fin triste et heureuse d'au moins trois lignes de long pour chacune !
                example_code: |
                    ```
                    {print} "Oh non ! Le T-rex se rapproche !
                    fin = {ask} "Voulez-vous une fin triste ou heureuse ?"
                    {if} fin {is} "heureuse"
                        {print} "Juste à temps, Richard retourne d'un saut dans la machine à voyager dans le temps !"
                        {print} _
                    {else}
                        {print} "Oh non ! Richard est trop lent…"
                        {print} _
                    ```
                start_code: '# écrit ton code ici'
            9:
                story_text: |
                    In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                        _ {print} 'Robin buys the book and goes home'
                        _ {else}
                        _ {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: "```\nanimaux = _ , _ , _ \n{print} 'Ours brun, Ours brun'\n {print} 'Que vois-tu?'\n```\n"
                start_code: '# écrit ton code ici'
            12:
                story_text: In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
                start_code: '# écrit ton code ici'
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.
                example_code: |
                    ```
                    {print} "Notre hero se promène en forêt"
                    {print} "Le chemin se sépare en deux"
                    chemin = {ask} "Quel chemin doit-elle choisir ?"
                    arme = {ask} "Quelle arme doit-elle prendre ?"
                    {if} chemin {is} "gauche" {and} arme {is} "épée"
                        _
                    ```
                start_code: '# place ton code ici'
            15:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.
                    Or you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
                    ```
                start_code: '# écrit ton code ici'
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercice 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercice 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    naam = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
                start_code: '# écrit ton code ici'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: Introduction de ajoute et supprime de
        levels:
            3:
                story_text: |
                    ## Ajouter à
                    Tu peux ajouter des éléments à une liste avec la commande `{add} {to}`. Pour ajouter un élément à une liste, tu peux simplement écrire : `{add} pingouin {to} animaux` ou tu peux utiliser la commande `{ask}` comme dans le code d'exemple.
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    favori {is} {ask} Quel est ton animal préféré ?
                    {add} favori {to_list} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_2: |
                    ## Supprimer d'une liste
                    Si tu peux ajouter des éléments à une liste, tu peux aussi en retirer bien sûr. Cela se fait avec la commande `{remove} {from}`
                example_code_2: |
                    ```
                    animaux {is} chien, chat, kangourou
                    mal_aimé {is} {ask} Quel animal n'aimes-tu pas ?
                    {remove} mal_aimé {from} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye les nouvelles commandes dans ce restaurant virtuel. Ajoute les parfums que les joueurs désirent à la liste et supprime les parfums auxquels ils sont allergiques.
                example_code_3: |
                    ```
                    {print} Le milkshake mystérieux
                    parfums {is} fraise, chololat, vanille
                    désire {is} {ask} Quelle parfum désires-tu ?
                    _
                    allergie {is} {ask} Est-tu allergique à un parfum ?
                    _
                    {print} Voici un milkshake parfums {at} {random}
                    ```
                start_code: |-
                    animaux {is} chien, chat, kangourou
                    favori {is} {ask} Quel est ton animal préféré ?
                    {add} favori {to_list} animaux
                    mal_aimé {is} {ask} Quel animal n'aimes-tu pas ?
                    {remove} mal_aimé {from} animaux
                    {print} Je choisis animaux {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: et ou
        description: Introduction de {and} et {or}
        levels:
            13:
                story_text: |-
                    Nous allons maintenant apprendre `{and}' et `{or}` ! Si tu veux vérifier deux éléments, tu n'es plus obligé d'utiliser deux `{if}` mais tu peux utiliser `{and}` et `{or}`

                    Si tu utilises `{and}`, les deux éléments, à gauche et à droite du `{and}` doivent être vrai. Nous pouvons aussi utiliser `{or}`. Dans ce cas, seulement un des éléments doit être correct.
                example_code: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    âge = {ask} "Quel est ton âge ?"
                    {if} nom {is} 'Hedy' {and} âge {is} 2
                        {print} "Tu es la vraie Hedy !"
                    ```
                start_code: |-
                    nom = {ask} "quel est ton nom ?"
                    âge = {ask} "quel est ton âge ?"
                    {if} nom {is} "Hedy" {and} âge {is} 2
                        {print} "Tu es la vraie Hedy !"
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction à la commande '{ask}'
        levels:
            1:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que tu sais utiliser la commande `{print}`, tu es prêt pour apprendre la commande suivante : `{ask}`. Avec la commande `{ask}`, tu peux poser une question. Fais un essai :
                example_code: |
                    ```
                    {print} Salut !
                    {ask} quel est ton nom ?
                    ```
                story_text_2: |
                    ## La commande `{echo}`
                    Si tu veux que l'ordinateur te répète ta réponse, tu peux utiliser la commande `{echo}`. Attention, car la réponse est ajoutée à la fin de la phrase, soit, dans cet exemple, après salut.
                example_code_2: |
                    ```
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    {echo} Salut
                    ```
                story_text_3: |
                    ### Exercice
                    Essayer les commandes `{ask}` et `{echo}`. Tout d'abord, complète les blancs pour faire fonctionner ce programme.
                    Ensuite pose 2 autres questions avec la commande `{ask}`, après chaque `{ask}` utilise `{echo}` pour afficher la réponse à l'écran.
                example_code_3: |
                    ```
                    _ Comment vas-tu ?
                    _
                    ```
                start_code: |
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    {echo} salut
            2:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que l'on peut utiliser les **variables** dans nos codes, la commande `{echo}` n'est plus utile.
                    On peut utiliser les variables pour stocker les réponses à nos questions et ainsi utiliser la réponse à plusieurs questions dans nos codes.
                    Vérifie-le :

                    De cette façon ton code devient interactif !
                example_code: |
                    ```
                    nom {is} {ask} Quel est ton nom ?
                    {print} Bonjour nom
                    âge {is} {ask} Quel âge as-tu ?
                    {print} nom a âge ans.
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'onglet précédent tu t'es entraîné à attribuer des valeurs aux variables avec la commande `{is}`.
                    Tu as créé au moins 3 variables et les a utilisées avec la commande `{print}`.
                    Maintenant, au lieu de simplement attribuer une valeur fixe aux variables, nous voulons les rendre interactives, comme dans l'exemple.

                    Copie le code de l'onglet précédent et rend les variables interactives en utilisant la commande `{ask}`.
                example_code_2: |
                    ```
                    animaux_préférés {is} {ask} Quel est ton animal préféré ?
                    {print} J'aime les animaux_préférés
                    ```
                start_code: |-
                    nom {is} {ask} Quel est ton nom ?
                    {print} Bonjour nom
                    âge {is} {ask} Quel âge as-tu ?
                    {print} nom a âge ans.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']
                    points = 0
                    dealer_points = 0
                    card_1 = cards[{random}]
                    card_2 = cards[{random}]
                    card_3 = cards [{random}]
                    dealer_card_1 = cards[{random}]
                    dealer_card_2 = cards[{random}]
                    dealer_card_3 = cards[{random}]
                    # Points for card 1
                    {if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':
                        points = points + 10
                    {elif} card_1 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_1
                    # Points for card 2
                    {if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':
                        points = points + 10
                    {elif} card_2 == 'Ace':
                        points = points + 11
                    {else}:
                        points = points + card_2
                    # Points for dealer card 1
                    {if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_1 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_1
                    # Points for dealer card 2
                    {if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':
                        dealer_points = dealer_points + 10
                    {elif} dealer_card_2 == 'Ace':
                        dealer_points = dealer_points + 11
                    {else}:
                        dealer_points = dealer_points + dealer_card_2
                    # Two Aces
                    {if} card_1 == 'Ace' {and} card_2 == 'Ace':
                        points = 12
                    {if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':
                        dealer_points = 12
                    # Scoreboard
                    {print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'
                    {print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'
                    # Extra card for the player
                    hit = {ask} 'Do you want an extra card?'
                    {if} hit == 'yes':
                        {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':
                            points = points + 10
                        {elif} card_3 == 'Ace':
                            {if} points > 11:
                                points = points + 11
                            {else}:
                                points = points + 1
                        {else}:
                            points = points + card_3
                        print 'You get an extra ' card_3 ' (' points ' points)'
                    {else}:
                        print 'No extra cards'
                    # Winner
                    {if} points > 21 {or} dealer_points > points {or} dealer_points == 21:
                        {print} 'You lose'
                    {elif} dealer_points < 17:
                        {print} 'The dealer takes an extra card. It is a... ' dealer_card_3
                        {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':
                            dealer_points = dealer_points + 10
                        {elif} dealer_card_3 == 'Ace':
                            {if} dealer_points < 11:
                                dealer_points = dealer_points + 11
                            {else}:
                                dealer_points = dealer_points + 1
                        {else}:
                            dealer_points = dealer_points + dealer_card_3
                        {print} 'The dealer has ' dealer_points ' points now'
                        {if} dealer_points < 21 {and} dealer_points > points:
                            {print} 'You lose'
                        {else}:
                            {print} 'You win'
                    {elif} points > dealer_points {and} points < 21:
                        {print} 'You win!'
                    ```
                start_code: '# écrit ton code ici'
    calculator:
        name: Calculatrice
        default_save_name: Calculator
        description: Create a calculator
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} correct_answer {print} 'good job!'
                    {else} {print} 'Wrong! It was ' correct_answer
                    ```
                story_text_2: |
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_2: |
                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```
                story_text_3: |
                    **Extra** Vous pouvez également laisser l'ordinateur faire des additions aléatoires de lui-même en utilisant random.

                    C'est ainsi que vous choisissez un certain nombre de tables pour vous entraîner, et que vous obtenez toujours une somme différente :
                start_code: '{print} ''Welcome to this calculator!'''
            9:
                story_text: |
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numéros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        numéro1 = numéros {at} {random}
                        numéro2 = numéros {at} {random}
                        bonne_réponse = numéro1 * numéro2
                        {print} 'Combien vaut ' numéro1 ' fois ' numéro2 ' ?'
                        tentative = {ask} 'Entre ta réponse ici...'
                        {print} 'Ta réponse est' tentative
                        {if} tentative {is} bonne_réponse
                            score = score + 1
                    {print} 'Bien joué ! Ton score est... ' score ' sur 10 !'
                    ```
                start_code: '{print} ''Welcome to this calculator!'''
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: '# écrit ton code ici'
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercice 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercice 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
                start_code: '# écrit ton code ici'
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
                start_code: '# écrit ton code ici'
            13:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2 (extra)
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schrijf jouw code hier'
            14:
                story_text: |
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
                start_code: '# écrit ton code ici'
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# écrit ton code ici'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: La commande {clear}
        levels:
            4:
                story_text: |
                    C'est le moment d'apprendre une nouvelle commande ! Avec `{clear}`tu peux effacer tout le texte de l'écran d'affichage. De cette manière, tu peux éviter que ton écran ne soit trop rempli de texte.
                    Attention ! Quand tu utilises une commande `{clear}`, rappelle-toi d'utiliser un `{sleep}` juste avant. Sinon Hedy effacera ton écran sans te laisser le temps de le lire !
                example_code: |
                    ```
                    {print} "3"
                    {sleep}
                    {clear}
                    {print} "2"
                    {sleep}
                    {clear}
                    {print} "1"
                    {sleep}
                    {clear}
                    {print} "SURPRISE !"
                    ```
                start_code: |
                    {print} "3"
                    {sleep}
                    {clear}
                    {print} "2"
                    {sleep}
                    {clear}
                    {print} "1"
                    {sleep}
                    {clear}
                    {print} "SURPRISE !"
    default:
        name: Introduction
        default_save_name: intro
        description: Explication du niveau
        levels:
            1:
                story_text: "Bienvenue chez Hedy ! \n\nAu niveau 1, tu peux commencer à raconter une histoire.\nEssaye toi-même le code ci-dessous avec le bouton vert « Exécuter le code » en dessous la zone de programmation.\n\nPrêt ? Ensuite, rends-toi à l'onglet suivant pour apprendre ta première commande !\n"
                start_code: '{print} bonjour le monde !'
            2:
                story_text: |
                    Bravo ! Tu as atteint le niveau 2. Avec un peu de chance, tu as déjà écrit des super codes !
                    Dans le premier niveau, tu as peut-être remarqué que la commande `{echo}` ne peut se rappeler qu'une seule information à la fois.
                    Par exemple, dans l'aventure du restaurant, tu peux re-dire ce que le client voulait manger ou ce qu'il voulait boire, mais pas les deux en une seule phrase.
                example_code: |
                    **Attention ! Ce code ne fonctionne pas !**
                    Dans Hedy, les commandes changeront parfois. `{echo}` par exemple, ne fonctionne qu'au niveau 1. À ce niveau tu apprendras une meilleure façon de répéter les réponses.
                    ```
                    {print} Bienvenue chez Hedy
                    {ask} Que voudrais-tu manger ?
                    {echo} Donc, tu veux
                    {ask} Que voudrais-tu boire ?
                    {echo} Donc, tu veux
                    ```
                story_text_2: |
                    Si le joueur répond un hamburger et un coca, il n'est pas possible de dire « donc tu voudrais un hamburger et un coca », pour le moment tu dois écrire deux lignes différentes.
                    Aussi, la commande `{echo}` ne sait re-dire le mot qu'à la fin de la phrase. Donc tu ne peux pas dire « ton hamburger est en route ! ».

                    À partir du niveau 2, ça change. Au niveau 2, tu vas apprendre à travailler avec des variables, ce qui te permet de mémoriser plusieurs réponses et les afficher où tu veux.
                    Pour découvrir tout ça, allons à l'onglet suivant !
                start_code: '{print} bonjour le monde !'
            3:
                story_text: |
                    Dans le niveau précédent tu as appris ce qu'est une variable et comment tu peux l'utiliser pour rendre tes aventures plus interactives.
                    Mais... ce n'est pas la seule chose que tu peux faire avec des variables ! Tu peux aussi utiliser des variables pour faire des listes.
                    Et tu peux même demander à Hedy de tirer un mot au hasard dans la liste, ce qui te permet de faire des vrais jeux !
                    Va jeter un coup d'œil à l'onglet suivant !
                start_code: '{print} bonjour le monde !'
            4:
                story_text: |
                    Aux niveaux précédents, tu t'es entrainé à utiliser les variables, mais tu as peut-être rencontré le problème suivant.
                    Tu as peut-être essayé de lancer un code qui ressemble à ceci :

                    Bien sûr, tu voulais afficher

                    `Mon nom est Sophie`

                    mais Hedy a affiché

                    `Mon Sophie est Sophie`.

                    À ce niveau, ce problème est résolu à l'aide des guillemets.
                example_code: |
                    ```
                    nom {is} Sophie
                    {print} Mon nom est nom
                    ```
                start_code: '{print} "Bonjour le monde"'
            5:
                story_text: |
                    Dans les niveaux précédents tu as appris à utiliser `{at} {random}` pour rendre tes jeux différents à chaque exécution.
                    Ce n'est pas vraiment interactif et le joueur n'a pas d'influence sur le déroulement du jeu.

                    Dans ce niveau, tu apprendras la commande `{if}`, qui permet de donner différentes réponses à ton programme. Tu peux par exemple programmer un mot de passe secret pour ton ordinateur.
                    Rendons-nous à l'onglet suivant pour cette nouvelle commande !
                example_code: |
                    ```
                    password {is} {ask} 'Quel est le mot de mot de passe ?'
                    ```
                start_code: |-
                    nom {is} {ask} "quel est ton nom ?"
                    {if} nom {is} Hedy {print} "cool !" {else} {print} "mouais"
            6:
                story_text: |
                    Dans le niveau précédent, tu t'es entrainé avec `{ask}` et `{if}`. Tu es capable, par exemple, de demander à des invités ce qu'ils souhaitent manger.
                    Ce que tu ne peux pas encore faire est de calculer le prix du repas de chacun.

                    Le niveau suivant rend possible l'addition, la soustraction et la multiplication dans tes programmes. Tu pourras calculer les prix dans ton restaurant mais aussi ajouter un code secret pour faire une réduction à tes amis et ta famille.
                    Une autre possibilité sera de programmer ton propre jeu de mathématiques, pour que ton petit frère ou ta petite sœur s'entraîne aux multiplications.
                    En selle !
                example_code: |
                    ```
                    prix_plat {is} 0
                    prix_boisson {is} 0
                    prix_total {is} 0
                    {print} "Bienvenue chez McHedy"
                    commande {is} {ask} "Que désirez-vous manger ?"
                    {if} commande {is} hamburger prix_plat {is} 5
                    {if} commande {is} frites prix_plat {is} 2
                    boisson {is} {ask} "Que désirez-vous boire ?"
                    {if} boisson {is} eau prix_boisson {is} 0
                    else prix_boisson {is} 3
                    prix_total {is} prix_plat + prix_boisson
                    {print} "Ça fera " prix_total " euros, s'il vous plait"
                    ```
                start_code: '# écrit ton code ici'
            7:
                story_text: |
                    Bon travail ! Vous avez atteint le niveau suivant, ce qui signifie que vous avez pratiqué avec `{if}` et `{else}`. Vous avez probablement remarqué que vos codes deviennent de plus en plus longs.
                    Par exemple, si vous voulez programmer 'Joyeux anniversaire'.

                    C'est beaucoup de code pour principalement les mêmes mots encore et encore. Heureusement, dans l'onglet suivant, vous apprendrez une solution avec la commande `{repeat}`, qui vous permet de répéter une ligne de code plusieurs fois.
                example_code: |
                    ```
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire Hedy"
                    {print} "Joyeux anniversaire"
                    ```
                start_code: |
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire chère Hedy"
                    {print} "Joyeux anniversaire"
            8:
                story_text: |
                    Maintenant, vous avez appris comment répéter une seule ligne de code. C'est pratique, mais ce n'est pas toujours suffisant. Parfois, vous voulez répéter plusieurs lignes en même temps.
                    Ce niveau vous permet de regrouper quelques lignes de code et de répéter ce petit groupe de lignes en une seule fois !
                example_code: |
                    ```
                    {repeat} 5 {times} {print} "Dans le prochain onglet, vous pourrez répéter plusieurs lignes de code en une seule fois !"
                    ```
                start_code: '{print} "Allons à l''onglet suivant !"'
            9:
                story_text: |
                    Super travail ! Vous avez atteint un nouveau niveau ! Dans le niveau précédent, vous avez appris à utiliser plusieurs lignes de code dans une commande {if} ou {repeat}. Mais vous ne pouvez pas encore les combiner…
                    Bonne nouvelle ! Dans ce niveau, vous aurez la possibilité de mettre un {if} à l'intérieur d'un autre {if}, ou à l'intérieur d'une commande {repeat}.
                example_code: |
                    ```
                    réponse = {ask} "Es-tu prêt·e à apprendre quelque chose de nouveau ?"
                    {if} réponse {is} oui
                        {print} "Super ! Tu vas apprendre à utiliser la commande de répétition dans la commande de condition !"
                        {print} "Hourra !"
                        {print} "Hourra !"
                        {print} "Hourra !"
                    {else}
                        {print} "Peut-être devrais-tu t'entraîner davantage en retournant au niveau précédent."
                start_code: '{print} Allons à l''onglet suivant !'
            10:
                story_text: |
                    Tu te débrouilles très bien ! Aux niveaux précédents, nous avons encore rencontré un petit problème. Tu as appris à répéter des lignes, mais que faire si tu voulais modifier légèrement la ligne ?
                    Par exemple, si tu veux chanter la chanson "Si tu es heureux et que tu le sais". Cela ressemblerait à ceci :

                    Mais si tu veux également la strophe suivante "Tape des pieds", puis la suivante, et la suivante… tu vas devoir changer complètement le code.
                    Dans ce niveau, tu vas apprendre la commande `{for}`, qui te permet d'utiliser une liste d'actions et de répéter le code avec une action différente à chaque fois !
                    Jettes-y un œil !
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} "Si tu es heureux et que tu le sais, tape des mains"
                    {print} "Si tu es heureux et que tu le sais, et que tu veux vraiment le montrer"
                    {print} "Si tu es heureux et que tu le sais, tape des mains"
                    ```
                start_code: '{print} "Allons à l''onglet suivant !"'
            11:
                story_text: |
                    Tu as atteint le niveau 10, tu t'en sors très bien ! Dans les niveaux à venir, Hedy s'occupe de plus en plus de t'apprendre le langage de programmation Python.
                    En Python, il n'y a pas de commande `{repeat}`, mais il existe une commande similaire à `{repeat}`. Es-tu curieux de découvrir comment dire `{repeat}` en langage Python ? Dépêche-toi d'avancer pour le découvrir !
                start_code: '{print} "Allons à l''onglet suivant !"'
            12:
                story_text: |
                    Tu as peut-être essayé d'utiliser des nombres décimaux dans ton aventure au restaurant. Si c'est le cas, tu as remarqué que Hedy ne les comprenait pas encore et les arrondissait toujours.
                    À partir de ce niveau, tu peux utiliser des nombres décimaux.
                example_code: |
                    ```
                    burger = 5
                    boisson = 2
                    total = burger + boisson
                    print "Vous avez commandé un burger et une boisson"
                    print "Ça coûte " total " euros, s'il vous plait"
                    ```
                start_code: '{print} "Allons à l''onglet suivant !"'
            13:
                story_text: |
                    Dans les niveaux précédents, vous avez appris à mettre deux commandes `{if}` l'une à l'intérieur de l'autre. Cela fonctionne bien, mais cela crée des codes très longs et peu pratiques, comme celui-ci :

                    Ici, vous devez fournir à la fois le nom d'utilisateur correct et le mot de passe correct.
                    Dans ce niveau, vous allez apprendre la commande `{and}` qui permettra de raccourcir considérablement ce code et le rendre plus compréhensible !
                    Vérifions ça !
                example_code: |
                    ```
                    nom_utilisateur = {ask} "Quel est ton nom d'utilisateur ?"
                    mot_de_passe = {ask} "Quel est ton mot de passe ?"
                    {if} nom_utilisateur {is} "Hedy"
                        {if} mot_de_passe {is} "secret"
                            {print} "Bienvenue Hedy !"
                        {else}
                                {print} "Accès refusé"
                    {else}
                        {print} "Accès refusé !"
                    ```
                start_code: '{print} ''Allons au niveau suivant !'''
            14:
                story_text: |
                    Avec le programme ci-dessous, tu peux calculer si tu as réussi une matière à l'école (c'est-à-dire si tu as obtenu une note de 6 ou plus).
                    Tu peux voir que ce code est extrêmement inefficace en raison de la longueur excessive du code dans la ligne 5.
                    Toutes les différentes notes de 1 à 5 doivent être programmées séparément. Heureusement pour toi, dans ce niveau, tu vas apprendre comment le faire sans avoir à écrire ce code extrêmement long !
                example_code: |
                    ```
                    premiere_note = {ask} "Quelle note as-tu eu à ton premier test ?"
                    deuxieme_note = {ask} "Quelle note as-tu eu sur ton deuxième test ?"
                    somme = premiere_note + deuxieme_note
                    moyenne = somme / 2
                    {if} moyenne = 1 {or} moyenne = 2 {or} moyenne = 3 {or} moyenne = 4 {or} moyenne = 5
                        {print} "Oh non ! Tu as raté le sujet…"
                    {else}
                        {print} "Super ! Tu as réussi le sujet !"
                    ```
                start_code: '{print} "Allons à l''onglet suivant"'
            15:
                story_text: |
                    Dans le jeu ci-dessous, un code a été créé pour permettre au joueur de jouer autant qu'il le souhaite…
                    Mais le code est inefficace et beaucoup trop long. De plus, que se passe-t-il si le joueur veut jouer à 101 jeux au lieu de 100 ?
                    On ne peut pas jouer à l'infini ?
                    Dans ce niveau, tu vas apprendre une commande qui rendra tout cela beaucoup plus facile !
                example_code: |
                    ```
                    jeu {is} "en cours"
                    {for} i {in} {range} 1 {to} 100
                        {if} jeu {is} "en cours"
                            réponse = {ask} "Est-ce que tu veux continuer ?"
                            {if} réponse {is} "non"
                                jeu {is} "fini"
                            {if} réponse {is} "oui"
                                {print} "Ok on continue"
                    ```
                start_code: '{print} "Allons au niveau suivant !"'
            16:
                story_text: |
                    Dans ce niveau, nous allons nous rapprocher un peu plus du véritable code Python. Tu vas également apprendre comment faire correspondre deux listes ensemble.
                    De cette manière, tu peux programmer un code dans lequel le bon animal est associé au bon son.
                    Parce que les deux codes ci-dessous… n'ont aucun sens, évidemment !
                example_code: |
                    ```
                    animaux = "poule", "chèvre", "vache"
                    cris = "cot", "bêêêê", "meuh"
                    {for} animal {in} animaux
                        {print} "Une " animal " fait " cris {at} {random}
                    ```
                    Vous pourriez également essayer de le faire fonctionner de cette manière, mais…
                    ```
                    animaux = "poule", "chèvre", "vache"
                    cris = "cot", "bêêêê", "meuh"
                    {for} animal {in} animaux
                        {for} cri {in} cris
                            {print} "Une " animal " fait " cri
                    ```
                start_code: '{print} "Allons à l''onglet suivant !"'
            17:
                story_text: |
                    Maintenant nous allons changer les indentations un petit peu. Chaque fois que nous aurons besoin d'une indentation, nous aurons besoin d'écrire `:` à la ligne précédant l'indentation.

                    À ce niveau tu peux aussi utiliser une nouvelle commande : `{elif}`. `{elif}` est un raccourci pour `{else} {if}` et tu en as besoin quand tu veux faire 3 (ou plus !) options.
                    Vérifions ça !
                start_code: '{print} "Allons au niveau suivant !"'
            18:
                story_text: |
                    Félicitations ! Tu as atteint le dernier niveau de Hedy ! Le code que tu as créé ici peut être copié dans des environnements Python réels tels que Replit ou PyCharm, et tu peux continuer à apprendre là-bas !
                    Note cependant que Python ne peut lire que des commandes en anglais, donc si tu as utilisé une autre langue pour les commandes, tu dois maintenant basculer sur les commandes en anglais.
                start_code: '{print} ("Félicitations !!!")'
    dice:
        name: Dé
        default_save_name: Dice
        description: Make your own dice
        levels:
            3:
                story_text: |
                    In this level we can choose from a list. With that we can let the computer choose one side of the die.
                    Take a look at the games you have in your closet at home.
                    Are there games with a (special) die? You can also copy it with this code.
                    For example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
                start_code: '{print} What will the die indicate this time?'
            4:
                story_text: |
                    Dans ce niveau, tu peux aussi créer un dé. Mais cette fois, tu peux essayer par toi-même sans un exemple de code !

                    ### Exercice
                    Fais ton propre dé dans ce niveau.
                    Astuce : si tu manques d'idée sur comment faire un dé. Jette un œil au dé que tu as fait au niveau d'avant, mais n'oublie pas d'ajouter les guillemets.
                start_code: '{print} "Quelle est la valeur du dé cette fois ?"'
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
                start_code: '{print} ''What will the die indicate this time?'''
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: '{print} ''What will the die indicate this time?'''
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: '{print} ''What will the die indicate this time?'''
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: '# écrit ton code ici'
            15:
                story_text: |
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# écrit ton code ici'
    dishes:
        name: Vaisselle ?
        default_save_name: Dishes
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
                start_code: '{print} Who does the dishes?'
            4:
                story_text: |
                    Avec les guillemets, tu peux rendre le programme de la vaisselle encore mieux.

                    ### Exercice
                    D'abord, remplace les blancs avec les bons symboles ou commandes pour que ce programme d'exemple fonctionne.
                    Est-ce que tu as saisi ? Génial ! Maintenant, copie le code que tu as fait au niveau précédent et fais le fonctionner dans ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    famille {is} maman, papa, Emma, Sophie
                    {print} _ la vaisselle est faite par _
                    {sleep}
                    {print} famille {at} _
                    ```
                start_code: '{print} "Qui fait la vaisselle ?"'
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    {if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'
                    ```
                start_code: '{print} ''Who does the dishes?'''
            6:
                story_text: |
                    How often is everyone going to do the dishes? Is that fair? You can count it in this level.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    emma_washes = 0
                    dishwasher = people {at} {random}
                    {print} 'The dishwasher is' dishwasher
                    {if} dishwasher {is} Emma emma_washes = emma_washes + 1
                    {print} 'Emma will do the dishes this week' emma_washes 'times'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
                start_code: '{print} ''Who does the dishes?'''
            7:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
                start_code: '{print} ''Who does the dishes?'''
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
                start_code: '# écrit ton code ici'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: pour
        description: La commande {for}
        levels:
            10:
                story_text: |-
                    ## Pour
                    À ce niveau nous apprenons une nouvelle commande appelée `{for}`. Avec `{for}` tu peux répéter quelque chose pour tous les éléments d'une liste
                    `{for}` crée un bloc, comme `{repeat}` et `{if}`. Il faut donc ajouter 4 espaces devant toutes les lignes du bloc.
                example_code: |
                    ```
                    animaux {is} chiens, chats, méduses
                    {for} animal {in} animaux
                        {print} "J'aime les " animal
                    ```
                start_code: |-
                    animaux {is} chiens, chats, méduses
                    {for} animal {in} animaux
                        {print} "J'aime les " animal
            11:
                story_text: |-
                    À ce niveau, nous ajoutons une nouvelle forme pour le `{for}`. Aux niveaux précédents, nous avons utilisé `{for}`avec une liste, mais nous pouvons aussi utiliser `{for}` avec des nombres.
                    Nous le faisons en ajoutant un nom de variable, suivi par `{in}``{range}`. Nous écrivons ensuite le nombre de départ, puis `{to}`, et enfin le nombre d'arrivé.

                    Essaye l'exemple pour voir ce qui se passe ! À ce niveau aussi, tu devras utilise les indentations pour les lignes en dessous de l'instruction `{for}`.
                example_code: |-
                    {for} compteur {in} {range} 1 {to} 10
                        {print} compteur
                    {print} "Caché ou pas, j'arrive !"
                start_code: |-
                    {for} compteur {in} {range} 1 {to} 10
                        {print} compteur
                    {print} "Caché ou pas, j'arrive !"
            17:
                story_text: |
                    Maintenant, nous allons un petit peu changer l'indentation. Chaque fois que nous avons une nouvelle indentation, nous devons ajouter `:` au début de la ligne précédente.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} "Caché ou pas, j'arrive !"
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} "Caché ou pas, j'arrive !"
    fortune:
        name: La voyante
        default_save_name: La voyante
        description: Demandons à Hedy de prédire le futur
        levels:
            1:
                story_text: |
                    As-tu déjà été à un carnaval et u ton futur prédit par une voyante ? Ou déjà joué avec une boule de cristal ?
                    Alors tu sais probablement qu'elles ne peuvent pas réellement prédire ton futur, mais que c'est quand même amusant d'y jouer !

                    Dans les nivaux à venir tu pourras apprendre comment créer ta propre machine à prédire l'avenir.
                    Au niveau 1 tu peux commencer en douceur en laissant Hedy se présenter elle-même comme une voyante et la laisser `{echo}` les réponses des joueurs.
                    Comme ceci :
                example_code: |
                    ```
                    _ Bonjour, je suis Hedy la voyante
                    _ Qui es-tu ?
                    _ Laisse moi regarder dans ma boule de cristal
                    _ Je vois… je vois…
                    _ ton nom est
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation et complète les espaces vides roses pour faire marcher le code.
                    **En plus** Change le code pour que la voyante, non seulement prédise ton nom, mais également ton âge, ton équipe de sport favori et quelque chose d'autre à ton sujet.
                start_code: '# écrit ton code ici'
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    ```
                    {print} Je suis Hedy la voyante
                    question {is} {ask} Que veux-tu savoir ?
                    {print} Voici ce que tu veux savoir : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit...
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
                story_text_2: |
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: '# écrit ton code ici'
            4:
                story_text: |
                    Ce niveau n'ajoute pas de nouvelles fonctions, mais te permet de t'entrainer à utiliser les guillemets.
                    Tu peux refaire ton code du niveau 3, et assure-toi d'ajouter les guillemets aux bons endroits !

                    Rappelle-toi qu'au niveau 3, on ne pouvait pas utiliser le mot « question » à la fois en nom de variable et en mot normal à afficher.
                    Les guillemets du niveau 4 rendent ça possible !

                    ### Exercice
                    Nous avons retiré toutes les guillemets de cet exemple de code, peux-tu les ajouter à tous les bons endroits ?

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code de la voyante. Fais fonctionner le code dans ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Je suis Hedy la voyante !
                    question {is} {ask} Que voudrais-tu savoir ?
                    {print} Voici ta question : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit...
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    amis {is} Jonathan, Lucile, David
                    {print} "Je peux prédire si tu vas gagner à la loterie demain !"
                    personne {is} {ask} "Qui es-tu ?"
                    bonnes_réponses {is} Hourra ! Tu as gagné !, Tu vas certainement gagner !, Nous avons un gagnant !
                    mauvaises_réponses {is} Pas de chance ! Essaye encore !, C`est une autre personne qui gagnera, Tu as perdu !
                    {if} personne {in} amis {print} bonnes_réponses {at} {random}
                    {else} {print} mauvaises_réponses {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: '# écrit ton code ici'
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                start_code: '# place your code here'
            12:
                story_text: |-
                    A partir du niveau 12, vous devrez également utiliser les guillemets dans les listes, avant et après chaque élément.

                    ### Exercice
                    Ajoutez deux prédictions à la liste
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# écrit ton code ici'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercice
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# écrit ton code ici'
    haunted:
        name: La maison hantée
        default_save_name: La maison hantée
        description: Échappe-toi de la maison hantée
        levels:
            1:
                story_text: |
                    Dans cette aventure, tu vas essayer de faire un jeu dans lequel tu dois t'échapper d'une maison hantée en choisissant la bonne porte.
                    Si tu choisis la bonne porte, tu survis, sinon un terrible monstre pourrait...

                    Au premier niveau, on commence notre jeu de la maison hantée en créant une histoire d'épouvante et en demandant au joueur quel monstre il imaginerait dans cette maison.
                example_code: |
                    ```
                    {print} Comme suis-je arrivé ici ?
                    {print} Je me souviens de mon ami me disant d'entrer dans ce vieux manoir…
                    {print} et soudain, tout est devenu noir.
                    {print} Mais comment me suis-je retrouvé sur le sol… ?
                    {print} Ma tête me fait mal comme si j'avais été frappé par une batte de baseball
                    {print} Quel est ce bruit ?
                    {print} Oh non ! J'ai l'impression que je ne suis pas seul dans cette maison !
                    {print} Il faut que je m'échappe d'ici !
                    {print} Il y a 3 portes devant moi…
                    {ask} Quel porte choisis-tu ?
                    {echo} Je choisis la porte
                    {print} … ?
                    ```
                story_text_2: |
                    ### Exercice
                    Copie le code d'exemple dans la zone de programmation en cliquant sur le bouton jaune.
                    Maintenant finis l'histoire en ajoutant au moins 5 lignes de code.
                    Rappelle-toi de commencer chaque ligne de code avec la commande `{print}`.
                start_code: '{print} Comment suis-je arrivé ici ?'
            2:
                story_text: |
                    Dans cette maison hantée tu peux choisir tes monstres avec des emojis. Bien sûr tu peux aussi utiliser des mots.
                example_code: |
                    ```
                    monstre_1 {is} 👻
                    monstre_2 {is} 🤡
                    monstre_3 {is} 👶
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'exemple ci-dessus, les monstres sont prédéterminés. Donc, à chaque fois que tu exécutes ton code, l'histoire est la même
                    Peux-tu ajouter la commande `{ask}` pour rendre la maison hantée interactive et permettre au joueur de choisir les montres qu'il rencontre ?
                example_code_2: |
                    ```
                    monstre_1 {is} _
                    monstre_2 {is} _
                    monstre_3 {is} _
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
                start_code: monstre1 {is} _
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# écrit ton code ici'
            4:
                story_text: |
                    Dans ce niveau, tu vas apprendre comment utiliser les guillemets dans tes jeux.

                    ### Exercice
                    Peux-tu faire fonctionner ta maison hantée pour le niveau 4 ?

                    ### Exercice 2
                    Reviens au niveau précédent et copie ton code de la maison hantée. Fais fonctionner le code dans ce niveau en ajoutant des guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Echappe toi de la maison hantée !
                    {print} Il y a 3 portes devant toi...
                    choix {is} {ask} Quelle porte choisis-tu ?
                    {print} Tu as choisi la porte ... choix
                    monstres {is} un zombie, un vampire, RIEN TU T'ES ECHAPPE•E
                    {print} Tu vois...
                    {sleep}
                    {print} monstres {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            14:
                story_text: |
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# écrit ton code ici'
            16:
                story_text: |
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# écrit ton code ici'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introduction à la commande `{if}`
        levels:
            5:
                story_text: |
                    ## Si… sinon…
                    Au niveau 5 il y a quelque chose de nouveau, le `{if}` ! Avec le `{if}` tu peux choisir entre deux options différentes.
                    Ce code écrit « bien » si tu réponds « Hedy » comme nom, et « bouuu ! » si tu réponds quelque chose d'autre.
                    `{ask}` et `{print}` continuent de fonctionner de la même manière qu'au niveau 4.
                example_code: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien" {else} {print} "bouu !"
                    ```
                story_text_2: |
                    Parfois, le code avec un `{if}`devient vraiment long et ne tient plus très bien sur la ligne.<br>
                    Tu peux diviser le code sur deux lignes en commençant la seconde ligne avec le `{else}` comme ceci :
                example_code_2: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien"
                    {else} {print} "bouuu !"
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye de créer ton propre code avec `{if}`et `{else}`. Tu peux utiliser l'exemple de code si tu veux.
                example_code_3: |
                    ```
                    réponse {is} {ask} "2 + 2 = ?"
                    _ _ _ 4 _ "Bon travail !"
                    _ _ "Non 2 + 2 = 4"
                    ```
                start_code: |-
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien"
                    {else} {print} "bouu !"
            8:
                story_text: |
                    ## Si… Sinon…
                    Tu as appris à répéter un bloc de ligne de code après une commande `{repeat}`.
                    Maintenant, tu peux aussi utiliser l'indentation pour faire un bloc après une commande `{if}` ou `{else}`.
                    Regarde l'exemple de code.

                    ### Exercice
                    Ajoute une commande `{else}` à l'exemple de code. Fait un bloc de lignes en utilisant l'indentation. Tu le fais en commençant chaque ligne avec 4 espaces.
                example_code: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy
                        {print} "Bienvenue Hedy"
                        {print} "Tu peux jouer sur ton ordinateur !"
                    ```
                start_code: |
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy
                        {print} "Bienvenue Hedy"
                        {print} "Tu peux jouer sur ton ordinateur !"
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introduction de la commande `{in}`
        levels:
            5:
                story_text: |
                    ## Listes
                    Quand nous voulons vérifier si quelque chose est dans une liste, nous pouvons maintenant utiliser la commande `{in}`.
                    Ce code écrit « joli ! » si tu choisis vert ou jaune, et « bof » sinon.
                example_code: |
                    ```
                    jolies_couleurs {is} vert, jaune
                    couleur_favori {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_favori {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
                    ```
                story_text_2: |
                    ### Exercice
                    Termine l'exemple de code en remplissant les blancs avec les commandes que tu as apprises.
                    Quand tu auras fini, essaye de créer ton propre code et utilise une question que tu auras trouvée toi-même.
                example_code_2: |
                    ```
                    animaux {is} chien, vache, mouton
                    réponse {is} {ask} "Quel est ton animal préféré ?"
                    _ réponse _ animaux _ "c'est aussi le mien !"
                    _ _ "mes animaux préférés sont le chien, la vache et le mouton"
                    ```
                start_code: |-
                    jolies_couleurs {is} vert, jaune
                    couleur_favori {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_favori {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
    is_command:
        name: '{is}'
        default_save_name: command_est
        description: Introduction de la commande {is}
        levels:
            2:
                story_text: |
                    ## Les variables
                    Tu peux donner une valeur à un mot avec `{is}`. C'est ce que l'on appelle une **variable**. Dans cet exemple, nous avons défini une variable qui s'appelle « nom » et une variable qui s'appelle « âge ». Tu peux utiliser le mot « nom » n'importe où dans ton code et il sera remplacé par « Hedy », comme ceci :
                example_code: |
                    ```
                    nom {is} Hedy
                    âge {is} 15
                    {print} nom a âge ans
                    ```
                story_text_2: |
                    ### Exercice
                    Il est temps de faire tes propres variables !
                    Dans le code d'exemple, nous avons défini la variable `animaux_favoris`. En ligne 1, la variable reçoit une valeur, et en ligne 2 nous avons utilisé la variable dans une commande `{print}`.
                    Pour commencer, termine notre exemple en remplissant l'espace vide rose avec le nom de ton animal favori. Ensuite, essaye d'écrire 3 autres codes toi-même. Choisi un mot, donne-lui une valeur avec la commande `{is}`. Ensuite, utilise ta nouvelle variable dans une commande `{print}`, comme nous venons de le faire.
                example_code_2: |
                    ```
                    animaux_préférés {is} _
                    {print} J'aime les animaux_préférés
                    ```
                start_code: |-
                    nom {is} Hedy
                    âge {is} 15
                    {print} nom a âge ans
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    Nous allons apprendre d'autres nouveaux éléments. Tu les connais peut-être déjà grâce aux mathématiques, le `<` et `>`.
                    Le `<` vérifie si le premier nombre est plus petit que le second, par exemple, âge `<` 1` vérifie si âge est plus petit que 12.
                    Si tu veux vérifier que le premier nombre est plus petit ou égal au second, tu peux utiliser `<=`. Par exemple âge `<=` 11.
                    Le `>` vérifie si le premier nombre est plus grand que le second, par exemple, points `>` 10 vérifie si points est plus grand que 10.
                    Si tu veux vérifier si le premier nombre est plus grand ou égal au second, tu peux utiliser `>=`. Par exemple points `>=` 11.
                    Ces comparaisons s'utilisent avec `{if}`, comme ceci :
                example_code: |
                    ```
                    âge = {ask} "Quel âge as-tu ?"
                    {if} âge > 12
                         {print} "Tu es plus agé que moi !"
                    ```
                story_text_2: |
                    A parti de ce niveau et pour les suivants, si tu veux comparer l'égalité, tu dois utiliser deux fois le signe égale. C'est ainsi que font la plupart des langages de programmation.
                example_code_2: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom == "Hedy"
                        {print} "Tu es cool !"
                    ```
                story_text_3: |
                    Tu peux aussi comparer si une chose n'est *pas* égale à une autre chose en utilisant `!=` comme ceci :
                example_code_3: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom != "Hedy"
                        {print} "Tu n'es pas Hedy"
                    ```
                start_code: |-
                    âge = {ask} "Quel âge as-tu ?"
                    {if} âge < 13
                        {print} "Tu es plus jeune que moi !"
                    {else}
                        {print} "Tu es plus âgé que moi !"
    language:
        name: Langage
        default_save_name: Language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# écrit ton code ici'
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# écrit ton code ici'
    maths:
        name: maths
        default_save_name: maths
        description: Introduction des maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    Dans ce niveau tu apprends quelque chose de nouveau : tu peux maintenant faire des calculs.

                    L'addition est facile, tu écris comme en math : `5 + 5` par exemple. Le moins aussi fonctionne bien, c'est `5 - 5`.

                    La multiplication est un peu différente parce qu'il n'y a pas la croix de la multiplication sur ton clavier. Cherche là, elle n'y est pas !
                    Voilà pourquoi on multiplie avec l'étoile : `5 * 5`. Lit le « 5 fois 5 » pour t'aider à t'en souvenir plus facilement.
                example_code: |
                    ```
                    {print} "5 plus 5 fait " 5 + 5
                    {print} "5 moins 5 fait " 5 - 5
                    {print} "5 fois 5 fait " 5 * 5
                    ```
                start_code: '{print} "5 fois 5 est " 5 * 5'
            12:
                story_text: |-
                    **Nombres décimaux**
                    Jusqu'à présent, Hedy ne te permettait pas d'utiliser les nombres décimaux comme 1.5, mais maintenant nous les autorisons. Attention, les langages de programmation utilisent le point pour les nombres décimaux et non la virgule.
                example_code: |
                    ```
                    {print} "Deux et demi plus deux et demi fait…"
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} "Les nombres décimaux ont maintenant besoin d'utiliser un point"
                    {print} 2.5 + 2.5
    parrot:
        name: Perroquet
        default_save_name: Perroquet
        description: Crée ton propre perroquet en ligne qui te copiera !
        levels:
            1:
                story_text: |
                    Crée ton propre perroquet en ligne qui te copiera !
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} quel est ton nom ?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercice
                    Copies l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Fais dire au perroquet une question différente en écrivant quelque chose dans l'espace vide de l'exemple !

                    **En plus** Tu peux aussi faire poser plusieurs questions au perroquet. Écrits plusieurs autres lignes de code à la suite de ce que tu as déjà écrit.
                example_code_2: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Je suis Hedy le perroquet
                    {ask} Quel est ton nom ?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Au niveau précédent, tu as fait un perroquet qui te répétait. À ce niveau, nous allons faire un perroquet interactif, en utilisant une variable et la commande `{ask}`.
                    Nous allons aussi rendre le perroquet plus vivant en ajoutant des commandes `{sleep}` après les choses qu'il dit.
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    nom _ _ Quel est ton nom ?
                    {print} nom
                    _
                    {print} coco
                    _
                    {print} nom
                    ```
                story_text_2: |
                    ### Exercice
                    Pour commencer, termine la ligne 2 avec une commande `{is}` et une commande `{ask}`.
                    Ensuite, écrit une commande `{sleep}` aux lignes 4 et 6 pour que le perroquet se calme un petit peu.

                    **En plus** Peux-tu faire que le perroquet demande plus que ton nom, en ajoutant des lignes de code ?
                start_code: '{print} Je suis Hedy le perroquet !'
            3:
                story_text: |
                    Apprend à ton perroquet un nouveau mot avec `{add}`.
                    ### Exercice
                    Peux-tu ajouter la commande `{add} {to}` pour faire marcher le code ?
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} Entraine ton perroquet !
                    nouveau_mot {is} {ask} Quel mot veux-tu lui apprendre ?
                    _ nouveau_mot _ mots
                    {print} 🧒 Dit nouveau_mot , Hedy !
                    {print} 🦜 mots {at} {random}
                    ```
                start_code: '# écrit ton code ici'
            4:
                story_text: |
                    Dans ce niveau nous devons utiliser les guillemets avec les commandes `{ask}` et `{print}`.
                    ### Exercice
                    Complète le code en remplissant les blancs par des guillemets.
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} _ Entraîne ton perroquet ! _
                    nouveau_mot {is} {ask} _ Quel mot souhaites-tu apprendre au perroquet ? _
                    {add} nouveau_mot {to_list} mots
                    {print} _ 🧒 Dis _ nouveau_mot _, Hedy !_
                    {print} _ 🦜 _ mots {at} {random}
                    ```
                start_code: '# Écrit ton code ici'
            5:
                story_text: |
                    Récompense ton perroquet s'il dit le bon mots !
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} "Entraîne ton perroquet !"
                    nouveau_mot {is} {ask} "Quel mot veux-tu lui apprendre ?"
                    {add} nouveau_mot {to_list} mots
                    mot_dit {is} mots {at} {random}
                    {print} "🧒 Dis " nouveau_mot ", Hedy !"
                    {print} "🦜 " mot_dit
                    _ mot_dit {is} nouveau_mot _ "🧒 Bien joué, Hedy ! 🍪"
                    _ _ "🧒 Non, Hedy ! Dis " nouveau_mot
                    ```
                start_code: '# écrit ton code ici'
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
                start_code: '# écrit ton code ici'
            14:
                story_text: |
                    Dans ce niveau, tu peux laisser Hedy te dire {if} tu as économisé assez d'argent !
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# écrit ton code ici'
    pressit:
        name: Presse une touche
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercice
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ❤'
                    {else} {print} 'The prince was eaten by a hippopotamus 😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercice
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# écrit ton code ici'
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercice
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# écrit ton code ici'
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercice
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# écrit ton code ici'
    print_command:
        name: '{print}'
        default_save_name: affiche
        description: Introduction à la commande affiche
        levels:
            1:
                story_text: |
                    ## La commande d'affichage
                    Tu peux afficher du texte à l'écran en utilisant la commande `{print}`.
                example_code: |
                    ```
                    {print} Salut à toi, programmeur/programmeuse !
                    {print} Bienvenue chez Hedy !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans Hedy tu as des exercices pour chaque aventure. Un exercice te permet de t'entrainer aux nouvelles commandes et concepts, et te permet de jouer avec les codes d'exemple.
                    Dans cet exercice, tu verras un espace vide rose. Tu dois écrire quelque chose à la place de cet espace vide pour que ton code fonctionne.

                    Complète l'espace vide en écrivant la commande `{print}` et ajoute cinq autres lignes de code. Chaque ligne doit commencer par la commande `{print}`.
                    Amuse-toi !
                example_code_2: |
                    ```
                    _ Salut !
                    ```
                start_code: |
                    {print} Bienvenue chez Hedy !
            18:
                story_text: |-
                    Nous sommes arrivés à du code Python réel ! Cela signifie qu'à partir de maintenant, nous devons utiliser les parenthèses avec `{print}` et `{range}`
                    Cela signifie aussi que tu peux utiliser le code Hedy de ce niveau dans n'importe quel environnement Python du moment que tu utilises les commandes en anglais. Si tu ne l'as pas encore fait, tu peux basculer en anglais dans le menu des commandes.
                example_code: |
                    ```
                    {print}('Salut !')
                    {for} i {in} {range}(1, 10):
                        {print}('Ceci est la ligne ', i)
                    ```
                story_text_2: Si tu veux afficher plus d'un élément, tu dois les séparer par une virgule.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}("Il fait ", temperature, " degrés dehors")
                    ```
                story_text_3: Le changement final que nous devons faire pour avoir du code Python c'est de remplacer `{ask}` par `{input}`.
                example_code_3: |
                    ```
                    {print}("Mon nom est hedy !")
                    nom = {input}("quel est ton nom ?")
                    {print}("Ainsi ton nom est ", nom)
                    ```
                start_code: |-
                    nom = "Hedy"
                    {print}("mon nom est ", nom)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# écrit ton code ici'
    quotation_marks:
        name: '"Les guillemets"'
        default_save_name: quotation_marks
        description: Introduction des guillemets
        levels:
            4:
                story_text: |
                    ## "Les guillemets"
                    Au niveau 4 `{ask}` et `{print}` ont changé.
                    Tu dois mettre le texte que tu veux afficher entre des guillemets.
                    C'est utile, parce que tu peux maintenant afficher tous les mots que tu veux. Même les mots que tu as utilisés pour mémoriser des choses avec `{is}`.
                    La plupart des langages de programmation utilisent aussi des guillemets pour afficher, donc on s'approche un peu plus de la vraie programmation !
                example_code: |
                    ```
                    {print} "Tu as besoins d'utiliser les guillemets à partir de maintenant !"
                    réponse {is} {ask} "Qu'avons nous besoins d'utiliser à partir de maintenant ?"
                    {print} "Nous avons besoins d'utiliser " réponse
                    ```
                story_text_2: |
                    ## Apostrophes
                    Important ! Hedy accepte que tu utilises les guillemets ou les apostrophes pour entourer tes textes. En anglais, on utilise généralement les apostrophes car cela ne pose pas trop de problème, mais en français, cela pose un problème avec, par exemple, « aujourd'hui » ou « s'il vous plait »
                    Astuce : Nous te recommandons d'utiliser les guillemets qui fonctionnent bien dans la plupart de situations.
                    L'exemple montre la mauvaise façon d'utiliser les apostrophes.
                example_code_2: |
                    ```
                    _ Voici comment ça ne marche pas avec les apostrophes_
                    {print} 'aujourd'hui je fais du babysitting avec les enfants de ma sœur'
                    {print} 'qu'y a-t-il de plus amusant que ça ?'
                    ```
                start_code: |-
                    {print}"Tu as besoins d'utiliser les guillemets à partir de maintenant !"
                    réponse {is} {ask} "Qu'avons-nous besoins d'utiliser à partir de maintenant ?"
                    {print} "Nous avons besoins d'utiliser " réponse
            12:
                story_text: |
                    **Tous les textes doivent être entre guillemets**
                    À partir de ce niveau, tu devras utiliser les guillemets quand tu enregistres un texte avec `=` :
                example_code: |
                    ```
                    nom = "Hedy le robot"
                    {print} "Bonjour " nom
                    ```
                story_text_2: |
                    **Tous les éléments des listes ont aussi besoins des guillemets**
                    Les listes, c'est du texte ! Donc, elles ont aussi besoins des guillemets. Attention que chaque élément de la liste à besoins de ses guillemets individuellement.
                    Cela te permet d'avoir un élément de deux mots dans une liste. Par exemple "Iron Man".
                example_code_2: |
                    ```
                    superhéros = "Spiderman", "Batman", "Iron Man"
                    {print} superhéros {at} {random}
                    ```
                story_text_3: |
                    **Tout texte dans la comparaison d'un `{if}` a besoins de guillemets**
                example_code_3: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom = "Hedy le robot"
                        {print} "Salut !"
                    ```
                story_text_4: |
                    **Les nombres n'ont pas besoins de guillemets**
                    Pour les nombres, tu ne dois pas utiliser les guillemets avec `=` :
                example_code_4: |
                    ```
                    score = 25
                    {print} "Tu as " score
                    ```
                start_code: |-
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom = "Hedy le robot"
                        {print} "Salut !"
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: Introduction de la commande `{at} {random}`
        levels:
            3:
                story_text: |
                    ## Au hasard
                    À ce niveau, tu peux créer une liste avec la commande `{is}`. Tu peux laisser l'ordinateur choisir un élément au hasard dans cette liste. Tu fais ça avec `{at} {random}`
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    {print} animaux {at} {random}
                    ```
                story_text_2: |
                    Tu peux aussi utiliser la commande `{at} {random}` dans une phrase.
                example_code_2: |
                    ```
                    nouriture {is} part de tarte, part de pizza, salade, crêpe
                    {print} Je vais prendre une nouriture {at} {random} pour le déjeuner.
                    ```
                story_text_3: |
                    ### Exercice
                    Essaie la commande `{at} {random}` en faisant ton propre jeu concours (comme à la télé) où tu choisis une porte ou une valise qui peut contenir le gros lot !
                    Sauras-tu le faire ? Nous avons déjà écrit les premières lignes dans le code d'exemple.
                example_code_3: |
                    ```
                    {print} Le grand jeu concours !
                    {print} Voyez ces 3 valises devant vous…
                    choix {is} {ask} Quelle valise choisissez-vous ?
                    les_prix {is} _
                    _
                    ```
                start_code: |
                    animaux {is} chien, chat, kangourou
                    {print} animaux {at} {random}
            16:
                story_text: |-
                    Nous allons créer des listes comme en Python, avec des crochets autour des listes ! Nous gardons aussi les guillemets autour de chaque élément comme nous l'avons appris au niveau précédent.
                    Nous utilisons les crochets pour désigner une position dans une liste. La commande {at} {random} ne peut plus être utilisée.
                example_code: |
                    ```
                    amis = ["Ahmed", "Ben", "Cayden"]
                    numéros_porte_bonheur = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} "Le numéro porte-bonheur de " amis[i]
                        {print} "est " numéros_porte_bonheur[i]
                    ```
                start_code: |-
                    fruit = ["pomme", "banane", "cerise"]
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: la commande répète
        levels:
            7:
                story_text: |
                    ## Répète ! Répète ! Répète !
                    Le niveau 7 ajoute la commande `{repeat}`. `{repeat}` peut être utilisée pour exécuter une ligne de code plusieurs fois. Comme ceci :

                    ### Exercice
                    Joue avec la commande `{repeat}`. Peux-tu faire la chanson d'anniversaire avec seulement 3 lignes de code à la place de 4 maintenant ?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} "Hedy est marrant !"
                    ```
                start_code: |
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire"
                    {print} "Joyeux anniversaire, Hedy"
                    {print} "Joyeux anniversaire"
            8:
                story_text: |
                    ### La commande `{repeat}` et l'indentation
                    Dans ce niveau, tu peux répéter plusieurs lignes de code avec une seule commande `{repeat}`.
                    Tu le fais en faisant un bloc avec les lignes que tu veux répéter.
                    Les lignes de ce bloc vont avoir besoin d'une **indentation**.
                    Cela veut dire mettre quatre espaces au début de chaque ligne. Tu devras indenter même si tu veux créer un bloc d'une seule ligne.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} "Salut tout le monde"
                        {print}"Tout ceci sera répété 5 fois"
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} "Bonjour tout le monde"
                        {print} "Ceci sera écrit 5 fois"
            9:
                story_text: |
                    Dans ce niveau, tu peux non seulement utiliser plusieurs lignes avec `{if}` et `{repeat}`, mais tu peux aussi mettre ces commandes ensemble !
                    Dans l'exemple, tu vois une commande `{if}` dans une commande `{repeat}`. Ça marche aussi à l'inverse, et un `{if}` peut aussi se trouver dans un autre `{if}` et un `{repeat}` dans un autre `{repeat}`.
                    Essaye !
                example_code: |
                    ```
                    {repeat} 3 {times}
                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "bien !"
                        {else}
                            {print} "la pizza c'est meilleur"
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "parfait !"
                        {else}
                            {print} "pizza c'est meilleur"
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Répète avec d'autres commandes et avec des variables
                    Tu t'es entrainé avec la commande `{repeat}` combinée avec la commande `{print}`, mais savais-tu que tu pouvais aussi utiliser d'autres commandes avec `{repeat}` ?
                    Dans cet exemple de code, tu peux voir que `{repeat}` peut aussi être utilisée avec une commande `{ask}`, `{if}` ou `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} réponse = {ask} "Savais-tu que tu pouvais poser une question plusieurs fois ?"
                    {if} réponse {is} oui {repeat} 2 {times} {print} "Tu le savais déjà !"
                    {else} {repeat} 3 {times} {print} "Tu as appris quelque chose de nouveau !"
                    ```
                story_text_2: |
                    Une autre chose intéressante que tu peux faire avec la commande `{repeat}`, c'est d'utiliser une variable pour indiquer le nombre de fois que quelque chose doit être répété. Dans l'exemple de code, tu peux voir que nous demandons en premier quel âge a la personne.
                    Ensuite, en ligne 3, le message est répété `âge` fois. Donc nous avons utilisé la variable `âge` avec la commande `{repeat}`.
                example_code_2: |
                    ```
                    {print} "Youpi ! C'est ton anniversaire"
                    âge = {ask} "Quel âge as-tu ?"
                    {repeat} âge {times} {print} "Hip Hip Hip Hourra !"
                    ```
                start_code: |-
                    {repeat} 2 {times} réponse = {ask} "Savais-tu que tu pouvais poser une question plusieurs fois ?"
                    {if} réponse {is} oui {repeat} 2 {times} {print} "Tu le savais déjà !"
                    {else} {repeat} 3 {times} {print} "Tu as appris quelque chose de nouveau !"
            8:
                story_text: |
                    ### C'est dans le bloc ou pas ?
                    À ce niveau, tu dois faire attention à quelles lignes de code doivent être dans le bloc et lesquelles ne doivent pas y être.
                    Par exemple : si tu veux chanter la chanson *Vive le vent*. Tu veux que seule la ligne avec "Vive le vent" soit répétée deux fois.
                    Cela veut dire que les lignes suivantes ne devrait pas démarrer avec une indentation car elles n'appartiennent pas au bloc.
                    Si tu démarres les autres lignes avec une indentation, la chanson ne sera plus correcte.

                    ## Exercice
                    Chaque ligne de l'exemple de code démarre avec un espace blanc. Retire le blanc et essaye de trouver quelle ligne a besoin d'une indentation et quelle ligne n'en a pas besoin pour faire la chanson de vive le vent.
                example_code: |
                    ```
                    _ {repeat} 2 {times}
                    _ {print} "Vive le vent"
                    _ {print} "Vive le vent d'hiver"
                    _ {print} "Qui s'en va sifflant, soufflant"
                    _ {print} "Dans les grands sapins verts, oh !"
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} "Cette ligne sera répétée…"
                        {print} "Cette ligne aussi…"
                    {print} "mais celle-ci ne le sera pas !"
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Crée ton propre restaurant virtuel
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire ton propre restaurant virtuel et prendre les commandes de tes clients.
                example_code: |
                    ```
                    {print} Bienvenu au restaurant Chez Hedy 🍟
                    _ Que voulez-vous commander ?
                    {echo} Ainsi vous voulez commander
                    {print} Merci pour votre commande !
                    {print} c'est bientôt prêt !
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Pour commencer, complète avec la bonne commande dans l'espace vide rose pour faire marcher le code.
                    Ensuite, ajoute au moins 4 lignes de code supplémentaires au programme du restaurant.
                    Demande au client ce qu'il désire boire et demande-lui s'il veut payer en liquide ou avec la carte.
                    Enfin, pense à une façon sympa de dire au revoir à ton client.
                start_code: '# Écrit ton code ici'
            2:
                story_text: |
                    Au niveau 2 tu pourrais étendre ton restaurant en utilisant des variables. Au niveau 1, Hedy pouvait seulement `{echo}` les commandes et seulement retenir la dernière chose commandée.
                    Maintenant tu peux utiliser des variables et Hedy peut se rappeler à la fois la nourriture et l'accompagnement !
                example_code: |
                    ```
                    {print} Bienvenue dans le restaurant Chez Hedy !
                    {print} Aujourd'hui, nous avons pizza ou lasagnes.
                    nouriture {is} {ask} Que désirez-vous manger ?
                    {print} Très bon choix ! nourriture est mon choix préféré
                    accompagnement {is} {ask} Désirez-vous des frites ou de la salade avec ça ?
                    {print} nourriture avec accompagnement sont en route !
                    ```
                story_text_2: |
                    ### Exercice
                    Copie ton code du restaurant du niveau précédent dans la zone de programmation ci-dessous.
                    Corrige le code en remplaçant les commandes `{ask}` et `{echo}` et en utilisant des variables comme tu viens de l'apprendre à ce niveau.

                    Maintenant que ton code fonctionne à nouveau, c'est le moment d'ajouter quelquechose en plus.
                    Regarde la dernière ligne du code d'exemple : `{print} nouriture avec accompagnement sont en route !`
                    Dans cette simple ligne, deux variables ont été utilisés pour créer un résumé de la commande.
                    Maintenant ajoute ton propre résumé de la nourriture et de la boisson commandé par le client.

                    **En plus** Maintenant que tu as appris comment utiliser les variables, tu peux utiliser autant de variables sur une ligne que tu le désires. Peux-tu ajouter plus de variables dans ton code, pour demander « sur place » ou « à emporter », « en liquide » ou « en carte », « avec ou sans paille », etc. ?
                start_code: '# écrit ton code ici'
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: '# écrit ton code ici'
            4:
                story_text: |
                    Dans ce niveau, tu dois utiliser les guillemets lorsque tu utilises les commandes `{print}` ou `{ask}`.

                    ### Exercice
                    Ajoute les guillemets à ce code pour le faire fonctionner ! Attention : les variables ne doivent pas être entourées de guillemets.

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code du restaurant. Fais fonctionner ce code en utilisant les guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Bienvenue au Restaurant Chez Hedy !
                    {print} Aujourd'hui nous servons pizza ou lasagne.
                    plat {is} {ask} Que voudrais-tu manger ?
                    {print} Très bon choix !  plat  est ce que je préfère !
                    accompagnement {is} {ask} Voudrais-tu de la viande ou des légumes en garniture ?
                    {print} plat  avec  accompagnement  . C'est parti !
                    boisson {is} {ask} Que voudrais-tu boire avec ça ?
                    {print} Merci pour ta commande.
                    {print} Tes  plat  et  boisson  vont être servis !
                    ```
                start_code: '# écrit ton code ici'
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
                start_code: '# écrit ton code ici'
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    Vous pouvez créer un code de restaurant simple, comme celui-ci :
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy"
                    {print} "Voici notre menu :"
                    {print} "Nos plats principaux sont : pizza, lasagnes ou spaghettis"
                    plat_principal = {ask} "Quel plat principal souhaitez-vous ?"
                    prix = 0
                    {if} plat_principal {is} pizza prix = 10
                    {if} plat_principal {is} lasagnes prix = 12
                    {if} plat_principal {is} spaghettis prix = 8
                    {print} "Vous avez commandé " plat_principal
                    {print} "Ce sera " prix " euros, s'il vous plaît"
                    {print} "Merci, bon appétit !"
                    ```
                start_code: '# écrit ton code ici'
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:
                example_code: |
                    ```
                    {print} "Bienvenu au restaurant Chez Hedy"
                    personnes = {ask} "Combien de personnes vont nous rejoindre aujourd'hui ?"
                    ```
                start_code: '# écrit ton code ici'
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: '# écrit ton code ici'
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant chez Hedy !"
                    nombre_personnes = {ask} "Combien de personnes se joindront à nous aujourd'hui ?"
                    {print} "Génial !"
                    prix = 0
                    {repeat} nombre_personnes {times}
                    _ nourriture = {ask} "Que voulez-vous commander ?"
                    _ {print} nourriture
                    _ {if} nourriture {is} frites
                    _ prix = prix + 3
                    _ sauce = {ask} "Quelle sauce voulez-vous avec vos frites ?"
                    _ {if} sauce {is} aucune
                    _ {print} "pas de sauce"
                    _ {else}
                    _ prix = prix + 1
                    _ {print} "avec " sauce
                    _{if} nourriture {is} pizza
                    _ prix = prix + 4
                    {print} "Cela fera " prix " euros"
                    {print} "Bon appétit !"
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    ### Exercice
                    Bien sûr, vous pouvez aussi commander pour plusieurs personnes !
                    Pouvez-vous ajouter la bonne quantité d'indentation avant chaque ligne pour que le code fonctionne correctement ?
                    Conseil : certaines lignes n'ont pas besoin d'être indentées.
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
                start_code: courses = appetizer, main course, dessert
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Bienvenue au restaurant Hedy!'
                    nombre_personnes = {ask} 'Pour combien de personnes souhaitez-vous commander?'
                    {print} 'Vous voulez donc commander pour ' nombre_personnes ' personnes.'
                    {print} "Allons-y !"
                    ```
                start_code: '# écrit ton code ici'
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# écrit ton code ici'
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                start_code: '# écrit ton code ici'
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything {else}?'
                    {print} 'Thank you!'
                    ```
                start_code: '# écrit ton code ici'
    rock:
        name: Pierre, papier, ciseaux
        default_save_name: Rock
        description: Make your own rock, paper, scissors game
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux commencer à programmer le jeu pierre, papier, ciseaux.

                    Avec `{ask}` tu peux faire un choix, et avec `{echo}` tu peux répéter ce choix.
                example_code: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi pierre, papier, ciseaux
                    {echo} ainsi, tu as choisi :
                    ```
                story_text_2: |
                    ### Exercice
                    Au lieu d'utiliser des mots, tu peux aussi utiliser les emojis : ✊✋✌️
                    Peux-tu écrire un code utilisant des emojis ?
                example_code_2: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi _
                    {echo} ainsi, tu as choisi :
                    ```
                start_code: |
                    {print} Bienvenue à ton propre pierre-papier-ciseaux !
                    {ask} Que choisis-tu ?
            2:
                story_text: |
                    À ce niveau tu peux t'entrainer à utiliser les variables pour faire passer le jeu pierre, papier, ciseaux au niveau supérieur !
                    ### Exercice
                    Termine le code en écrivant la **variable** dans les espaces vides.
                    Ce jeu n'est pas très interactif, mais ne t'inquiet pas ! Dans l'onglet suivant, tu apprendras comment utiliser les variables avec la commande `{ask}` pour rendre ton jeu interactif !
                example_code: |
                    ```
                    choix {is} pierre
                    {print} Je choisis _
                    ```
                start_code: '# écrit ton code ici'
            3:
                story_text: |
                    You can use the `{at} {random}` command to let the computer pick rock, paper or scissors!

                    ### Exercice
                    Finish the code by using the `{at} {random}` command.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
                start_code: '{print} Welcome to your own rock scissors paper!'
            4:
                story_text: |
                    À ce niveau nous pouvons continuer le programme pierre, papier, ciseaux. Mais si tu veux ajouter du texte, tu dois utiliser les guillemets ici aussi.
                    ### Exercice
                    Copie ton code du niveau précédent et fais le fonctionner en utilisant les guillemets après chaque commande `{print}` ou `{ask}`.
                start_code: '{print} "Bienvenue dans ton propre pierre papier ciseaux !"'
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    ### Exercice
                    Aux niveaus précédents, tu as souvent commencé ton propre jeu pierre-papier-ciseau. Peux-tu le finir en utilisant la commande `{for}` correctement pour que le jeu fonctionne ?
                example_code: |
                    ```
                    choix = _
                    joueurs = _
                    {for} _
                    ```
                start_code: '# écrit ton code ici'
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
                start_code: '# écrit ton code ici'
            15:
                story_text: |
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
                start_code: '# écrit ton code ici'
    rock_2:
        name: Pierre, papier, ciseaux 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Maintenant que tu as appris comment utiliser la commande `{ask}`, tu peux rendre ton code de pierre, papier, ciseaux interactif !

                    ### Exercice
                    Rend le code de pierre, papier, ciseaux interactif en ajoutant la commande `{ask}`et une question à ton code de pierre, papier, ciseaux.
                example_code: |
                    ```
                    choix {is} _
                    {print} Je choisi choix
                    ```
                start_code: '# écrit ton code ici'
    secret:
        name: SuperEspion
        default_save_name: SuperSpy
        description: Make your own spy code
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    if name is 'Agent007'
                        a is 'Go to the airport '
                    else
                        a is 'Go to the trainstation '
                    password is ask 'What is the password?'
                    if password is 'TOPSECRET'
                        b is 'tomorrow at 02.00'
                    else
                        b is 'today at 10.00'
                    print a + b
                    ```
                start_code: '# écrit ton code ici'
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name is ask 'What is your name?'
                    password is ask 'What is your password?'
                    if name is 'Agent007' and password is 'TOPSECRET'
                        print 'Go to the airport at 02.00'
                    else
                        print 'Go to the trainstation at 10.00'
                    ```
                start_code: '# écrit ton code ici'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: Introduction à la commande pour endormir
        levels:
            2:
                story_text: |
                    Une autre nouvelle commande de ce niveau est `{sleep}`. Elle endort le programme pendant une seconde. Si tu écris un nombre après la commande `{sleep}`, le programme s'endort durant le nombre de secondes correspondantes.

                    ### Exercice
                    Entraine-toi avec cette nouvelle commande en écrivant ton propre code dans lequel tu utiliseras la commande `{sleep}` au moins 3 fois. Pour chaque commande `{sleep}`, utilise un temps de sommeil différent.
                example_code: |
                    ```
                    {print} Ma couleur préférée est…
                    {sleep} 2
                    {print} le vert !
                    ```
                start_code: |-
                    {print} Ma couleur préférée est…
                    {sleep} 2
                    {print} le vert !
    songs:
        name: Chante une chanson
        default_save_name: Song
        description: Écrit une chanson
        levels:
            6:
                story_text: |
                    Les chansons contiennent beaucoup de répétitions. Parfois la répétition est basée sur un comptage.
                    Par exemple, dans la fameuse chanson "Bouteilles vertes". Tu peux programmer cette chanson avec un petit peu de maths.

                    Astuce : Utilise la fonction de lecture du texte pour que Hedy te chante la chanson !

                    ### Exercice
                    Tu peux maintenant répéter les lignes 2 à 7 autant de fois que tu le veux en copiant les lignes.
                example_code: |
                    ```
                    verset = 99
                    {print} verset " bouteilles vertes posées sur le mur"
                    {print} verset " bouteilles vertes"
                    {print} "Et si une bouteille verte vient à tomber"
                    verset = verset - 1
                    {print} verset " bouteilles vertes posées sur le mur"
                    ```
                story_text_2: |
                    Cette chanson enfantine décompte à partir de 5 petits singes jusqu'à 1 seul singe.
                    Si tu recopies les lignes de 2 à 7 en dessous du code, tu peux chanter toute la chanson !
                example_code_2: |
                    ```
                    nombre = 6
                    nombre = nombre - 1
                    {print} nombre " petits singes sautant sur le lit"
                    {print} "Un tomba du lit et se cogna la tête"
                    {print} "Maman appella le docteur et le docteur dit"
                    {print} "PLUS AUCUN SINGE SAUTANT SUR LE LIT !"
                    {sleep}
                    ```
                start_code: '{print} ''Chantons !'''
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
                example_code: |
                    ```
                    couplet = 99
                    {repeat} 99 {times}
                        {print} couplet ' bouteilles de bière sur le mur'
                        {print} couplet ' bouteilles de bière'
                        {print} 'Prends en une et fais la circuler'
                        couplet = couplet - 1
                        {print} couplet ' bouteilles de bière sur le mur'
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old McDonald with all the different animals.
                example_code: "```\nfamille = bébé, maman, papa, mamie, papi\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Exercice 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
                start_code: '# écrit ton code ici'
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: '# écrit ton code ici'
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} 'if youre happy and you know it'
                            {print} action
                        {print} 'if youre happy and you know it and you really want to show it'
                        {print} 'if youre happy and you know it'
                        {print} action
                    ```
                start_code: '# écrit ton code ici'
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# écrit ton code ici'
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercice 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercice 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# écrit ton code ici'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# écrit ton code ici'
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Tic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
                start_code: '# écrit ton code ici'
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
                start_code: '# écrit ton code ici'
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
                start_code: '# écrit ton code ici'
    turtle:
        name: Tortue
        default_save_name: Tortue
        description: Fait ton propre dessin
        levels:
            1:
                story_text: |
                    Tu peux aussi utiliser Hedy pour dessiner. En combinant tournants et lignes, tu peux dessiner un carré ou des escaliers !

                    En utilisant `{forward}` tu traces une ligne vers l'avant. Le nombre écrit après détermine la distance que va parcourir la tortue. `{turn} {right}` tourne d'un quart de tour dans le sens des aiguilles d'une montre, `{turn} {left}` tourne dans le sens inverse des aiguilles d'une montre.

                    Si tu veux reculer, tu utilises quand même la commande `{forward}`, mais avec un nombre négatif. Par exemple `{forward} -100`

                    ### Exercice
                    Ceci est le début d'un petit escalier. Peux-tu lui dessiner 5 marches ?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    À ce niveau, tu peux utiliser des variables pour rendre la tortue interactive. Par exemple, tu peux demander au joueur de combien de pas la tortue doit avancer.
                example_code: |
                    ```
                    réponse {is} {ask} De combien de pas la tortue doit-elle avancer ?
                    {forward} réponse
                    ```
                story_text_2: |
                    Aussi, au niveau 1 la tortue pouvait seulement tourner à gauche ou à droite. C'était un peu lassant !
                    Au niveau 2 elle peut se diriger dans toutes les directions.

                    Utilise 90 pour tourner d'un quart de tour. On appelle ça des degrés. Un tour complet fait 360 degrés.

                    ### Exercice
                    Peux-tu faire une figure avec ce code ? Peut-être un triangle ou un cercle ?
                example_code_2: |
                    ```
                    {print} Dessin de formes
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |-
                    {print} Course de la tortue !
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            3:
                story_text: |
                    À ce niveau, tu peux utiliser `{at} {random}` avec la tortue dessinatrice. Un choix aléatoire permet à la tortue de suivre un chemin différent à chaque fois.
                    Utilise `{at} {random}` pour choisir une valeur dans une liste.
                    ### Exercice
                    Peux-tu copier-coller les lignes 2 et 3 pour créer un chemin aléatoire plus long ?
                example_code: |
                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
            4:
                story_text: |
                    Au niveau 4 tu dois utiliser les guillemets avec `{print}` et `{ask}`. Aussi quand tu dessines !
                example_code: |
                    ```
                    {print} _ Dessin de formes _
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    Tu peux aussi changer la couleur des lignes avec la commande `{color}`. Jette un œil à l'exemple.
                    Tu peux aussi utiliser la commande `{color} {white}` pour rendre des lignes « invisibles ». Tu pourrais utiliser ces lignes blanches pour déplacer la tortue où tu veux à l'écran avant de commencer à dessiner.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} "Dessin de formes"
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            5:
                story_text: |
                    Au niveau 5 tu peux faire un choix avec `{if}`. Par exemple entre différent type de formes.
                example_code: |
                    ```
                    {print} "Dessin fr formes"
                    forme {is} {ask} "Veux-tu un carré ou un triangle ?"
                    {if} forme {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercice
                    Écrit les bons nombres dans ce code pour le faire marcher.
                    Après que tu ais fait ça, tu peux essayer d'ajouter l'option en arrière.

                    **En plus** Au lieu d'utiliser `{left}` et `{right}`, refait le programme avec Nord, Est, Sud et Ouest.
                    Tu pourrais même ajouter encore plus de directions comme Nord-Est, Sud-Ouest, etc.
                example_code_2: |
                    ```
                    direction {is} {ask} "Veux-tu aller à gauche, à droite ou tout droit ?"
                    {if} direction {is} gauche {turn} _
                    {if} direction {is} droite {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} "Dessins de formes"
                    forme {is} {ask}  "Veux-tu un carré ou un triangle ?"
                    {if} forme {is} triangle angle {is} 120 {else} angle {is} 90
                    {turn} angle
                    {forward} 25
            6:
                story_text: |
                    In this level you can use calculations to draw different figures.
                    You may have learned in school that turning a full circle is 360 degrees. If not, now you know!
                    That's why you also use 90 degrees for a square. 360 divided by 4 is 90.
                    Now that we can do math with Hedy, we can draw all the figures we want!
                example_code: |
                    ```
                    angles = {ask} 'How many angles do you want?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
                start_code: '{print} ''Drawing figures'''
            8:
                story_text: |
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
                example_code_2: |
                    ```
                    angles = {ask} 'How many angles should I draw?'
                    angle = 360 / angles
                    {repeat} angle {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: angles = {ask} 'How many angles should I draw?'
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercice 1
                    This code creates three black triangles, change that into five pink squares.

                    **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# écrit ton code ici'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: tant que
        levels:
            15:
                story_text: |-
                    Nous allons apprendre une nouvelle boucle, la boucle `{while}` ! La boucle continue tant que la condition est vraie.
                    Alors n'oublie pas de changer la valeur dans la boucle.

                    Dans l'exemple de code, on continue jusqu'à obtenir une réponse correcte.
                    Si la réponse correcte n'est jamais donnée, la boucle ne se termine pas !
                example_code: |
                    ```
                    réponse = 0
                    {while} réponse != 25
                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
                    ```
                start_code: |-
                    réponse = 0
                    {while} réponse != 25
                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
    years:
        name: Nouvel an
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercice
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
                start_code: '# écrit to code ici'
