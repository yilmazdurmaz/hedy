adventures:
    story:
        name: Historia
        default_save_name: Historia
        description: Historia
        levels:
            1:
                story_text: |
                    En el nivel 1 puedes crear una historia con un protagonista que t√∫ elijas.

                    En la primera l√≠nea, usa `{ask}` y pregunta qui√©n es el personaje principal de tu historia.

                    A continuaci√≥n, utiliza `{print}` si necesitas mostrar una frase por pantalla.
                    Utiliza `{echo}` si quieres que el nombre de tu personaje aparezca al final de la frase.
                example_code: |
                    ```
                    {ask} El protagonista de esta historia es
                    {print} El protagonista camina por un bosque
                    {echo} Est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {print} √âl tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### ejercicio
                    Ahora crea tu propia historia de un m√≠nimo de 6 l√≠neas de c√≥digo.
                    Esta historia no puede ser la misma que el c√≥digo de ejemplo.
                    Utiliza m√≠nimo un comando `{ask}` y un comando `{echo}`.
                    Lo puedes hacer sobre cualquier tema que quieras.
                    Si no se te ocurre ning√∫n tema, usa uno de estos: en el cine, un partido o un d√≠a en el zool√≥gico.
                start_code: '{print} Aqu√≠ comienza tu historia'
            2:
                story_text: |
                    En el nivel 2 puedes hacer tu historia m√°s divertida. El nombre de tu protagonista ahora puede estar en cualquier posici√≥n de la frase.

                    Para eso debes realizar un poquito m√°s de programaci√≥n. Debes dar primero un nombre al protagonista de tu historia.

                    Puedes luego usar este nombre en las oraciones que siguen.
                example_code: |-
                    ```
                    nombre {is} {ask} ¬øC√≥mo se llama el protagonista?
                    {print} nombre est√° caminando por el bosque
                    {print} nombre est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {sleep}
                    {print} nombre tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora es momento de a√±adir variables a la historia que hiciste en el nivel anterior.
                    Ve a 'Mis Programas', busca tu historia del nivel 1 y copia el c√≥digo. Pega el c√≥digo en tu pantalla de entrada en este nivel.

                    Este c√≥digo no funcionar√° en este nivel, porque no has usado variables a√∫n.
                    Cambia los comandos `{ask}` y `{echo}` en tu c√≥digo a la forma correcta que aprendiste en este nivel.

                    **Extra** a√±ade un comando `{sleep}` a tu c√≥digo para crear tensi√≥n en la historia.
                start_code: '{print} Tu historia'
            3:
                story_text: |
                    En el nivel 3 puedes hacer tu historia m√°s divertida. Puedes usar aleatoriedad para cualquier monstruo, animal, o cualquier otro obst√°culo, como este:
                example_code: |
                    ```
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} √âl ahora escucha el ruido de un animales {at} {random}
                    ```
                story_text_2: |
                    El comando `{add}` puede ser √∫til en tu historia.
                example_code_2: |
                    ```
                    {print} √âl escucha un sonido
                    animales {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} ¬øQu√© piensas qu√© es?
                    {add} animal {to_list} animales
                    {print} fue un animales {at} {random}
                    ```
                story_text_3: |
                    Este es un ejemplo del comando `{remove}` en tu historia

                    ### Desaf√≠o
                    Copia tu historia de los niveles anteriores en este nivel.
                    En este nivel aprendiste tres nuevos comandos `{at} {random}` , `{add} {to}` y `{remove} {from}`.
                    A√±ade nuevas l√≠neas de c√≥digo a tu historia para que todos los nuevos comandos est√©n por lo menos una vez en tu c√≥digo.
                example_code_3: |
                    ```
                    {print} Su mochila se hizo muy pesada.
                    {print} Dentro de ella hab√≠a una botella de agua, una linterna y un ladrillo
                    bolso {is} agua, linterna, ladrillo
                    botar {is} {ask} ¬øQu√© art√≠culo deber√≠a botar √©l?
                    {remove} botar {from} bolso
                    ```
                start_code: '{print} Tu historia'
            4:
                story_text: |
                    Quiz√° te hayas dado cuenta de que a√∫n hay un problema en los niveles anteriores. ¬øHas intentado mostrar por pantalla una frase que contenga la palabra nombre? por ejemplo `{print}` mi nombre es nombre.
                    Puedes solucionarlo en este nivel. Debes utilizar comillas para todo lo que quieras mostrar por pantalla.

                    ### Ejercicio
                    Copia el c√≥digo de ejemplo y compl√©talo a√±adiendo comillas en los huecos de las l√≠neas 1 y 2.
                    Los huecos en blanco en las l√≠neas 3 y 4 no se deben reemplazar por comillas, sino por un comando `{sleep}` y un `{clear}`. ¬øPuedes hacerlo funcionar?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu historia. Haz funcionar el c√≥digo en este nivel a√±adiendo comillas en los lugares correctos.
                    Recuerda: Las variables en tu propia historia tienen que estar fuera de las comillas. Como en la segunda l√≠nea del c√≥digo de ejemplo. En esa l√≠nea el nombre de la variable esta situado fuera de las comillas.
                example_code: |
                    ```
                    nombre {is}{ask} _ ¬øCu√°l es tu nombre? _
                    {print}  _ El protagonista de esta historia es _ nombre
                    _
                    _
                    {print} nombre  _ ahora est√° caminando por el bosque _
                    {print} nombre _ est√° un poco asustado _
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ √âl escucha el ruido de un _ animales {at} {random}
                    {print} nombre _ teme que √©ste sea un bosque encantado _
                    ```
                start_code: '{print} ''¬°Tu historia se imprimir√° aqu√≠!'''
            5:
                story_text: |
                    En este nivel puedes programar distintos finales, lo que har√° que tu historia sea incluso m√°s divertida.
                    En el c√≥digo de ejemplo puedes ver como hacer 2 finales diferentes.

                    ### Ejercicio 1
                    Escribe una nueva breve historia con al menos 6 l√≠neas de c√≥digo, sobre un tema de tu elecci√≥n.
                    ¬øSin inspiraci√≥n? Escoge uno de estos temas: un superh√©roe, un d√≠a aburrido en la escuela, perdido en una isla desierta.

                    Ahora dale al jugador la oportunidad de escoger una final bueno o malo, como en el c√≥digo de ejemplo.
                    Programa ambos finales.

                    ### Ejercicio 2
                    Copia la historia que has creado para tu propia aventura en los niveles anteriores.
                    Encuentra una forma de a√±adir por lo menos 2 comandos `{if}` y `{else}` a tu historia.
                    Esto puede ser un final bueno o malo, pero puedes intentar buscar otras formas de incorporar los comandos.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øQui√©n camina por el bosque?'
                    {print} nombre ' camina por el bosque'
                    {print} nombre ' encuentra un monstruo'
                    f√≠n {is} {ask} '¬øQuieres un final bueno o malo?'
                    {if} final {is} bueno {print} nombre ' coge la espada y el monstruo huye r√°pidamente'
                    {else} {print} 'El monstruo se come' nombre
                    ```
                start_code: '{print} ''¬°Aqu√≠ viene tu historia!'''
            7:
                story_text: "En una historia, a veces es necesario repetir algo. Por ejemplo, si alguien pide ayuda, o si se canta una canci√≥n.\nEso lo puedes hacer ahora en el nivel 6 usando `{repeat}`.\n\n### Desaf√≠o\nA√±ade repetici√≥n a tu propia historia. En tu carpeta de historias guardadas, abre\
                    \ la del Nivel 6, \n encuentra una l√≠nea que contenga `{print}` y rep√≠tela.\n"
                example_code: |
                    ```
                    {print} 'La princesa grita pidiendo ayuda'
                    {repeat} 5 {times} {print} '¬°Ayuda!'
                    {print} 'Por qu√© nadie viene en mi ayuda?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''¬°Ayuda!'''
            8:
                story_text: "En este nivel puedes usar varias l√≠neas en tus comandos `{if}`, ¬°de esta manera puedes mejorar tu final malo o bueno!\n\n### Ejercicio 1\n El c√≥digo de ejemplo muestra dos finales diferentes; uno donde los personajes usan una m√°quina del tiempo y otro en el que no.\nCompleta\
                    \ los espacios en blanco con al menos una frase por cada final. \n**Extra** Haz que la historia dure m√°s. ¬øQu√© ocurre en la historia? Puedes tambi√©n a√±adir un segundo `{ask}` con diferentes opciones.\n\n### Ejercicio 2\nVuelve a tus historias guardadas, escoge la historia del nivel\
                    \ 5. Escribe un final bueno y uno malo de al menos tres l√≠neas cada uno.\n"
                example_code: |
                    ```
                    {print} '¬°OH NO! ¬°El T-rex se est√° acercando!'
                    final = {ask} '¬øQuieres un final triste o feliz?'
                    {if} final {is} feliz
                        {print} 'Justo a tiempo Richard salta de vuelta en la m√°quina del tiempo!'
                        {print} _
                    {else}
                        {print} '¬°Oh, no! Richard es demasiado lento...
                        {print} _
                    ```
                start_code: '# coloca tu c√≥digo aqu√≠'
            9:
                story_text: |
                    En este nivel puedes usar los comandos `{if}` y `{repeat}`  dentro de otros comandos `{if}` y `{repeat}`.
                    Esto te da muchas opciones y te ayuda a hacer tu historia mas interactiva.

                    ### Ejercicio 1
                    Termina el c√≥digo de forma que `{if}` funcione correctamente.

                    ### Ejercicio 2
                    Agrega un comando `{if}` y `{else}` en la parte que Robin va a casa tambi√©n.

                    ### Ejercicio 3
                    Vuelve a tu historia del nivel 8 y usa por lo menos dos `{if}` dentro de otro`{if}`
                example_code: |
                    ```
                    {print} 'Robin est√° caminando hacia el centro de la ciudad'
                    lugar = {ask} '¬øRobin va a ir a una tienda, o va a ir a casa?'
                    {if} lugar {is} tienda
                        {print} 'Ella entra en la tienda.'
                        {print} 'Robin ve un libro que luce interesante'
                        libro = {ask} '¬øCompra el libro Robin?'
                        {if} libro {is} si
                            {print} 'Robin compra el libro y se va a casa'
                        {else}
                            {print} 'Robin deja la tienda y se va a casa'
                    {else}
                        {print} 'Robin se va a casa'
                    ```
                start_code: '# coloca t√∫ c√≥digo aqu√≠'
            10:
                story_text: |
                    En este nivel puedes usar el comando {for} en tu historia. De esta manera puedes programar f√°cilmente el libro para ni√±os 'oso pardo, oso pardo, ¬øqu√© ves?'

                    ### Ejercicio

                    Mira en <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> la historia </a> si no la conoces, aseg√∫rate que este igual que el libro.
                example_code: "```\nanimales = _ , _ , _ \n{print} 'Oso pardo, Oso pardo'\n {print} '¬øQu√© ves?'\n```\n"
                start_code: '# coloca tu c√≥digo aqu√≠'
            12:
                story_text: |-
                    En este nivel puedes usar las comillas para almacenar m√∫ltiples palabras en una variable.

                    ### Ejercicio

                    Encuentra una historia de un nivel anterior, cualquier nivel esta bien. Ahora aseg√∫rate que las comillas est√©n en el lugar correcto.
                example_code: |
                    ```
                    nombre = 'La Reina de Inglaterra'
                    {print} nombre ' estaba comiendo un pedazo de pastel, cuando de pronto...'
                    ```
                start_code: '# coloca tu c√≥digo aqu√≠'
            13:
                story_text: |
                    Usando los comandos `{and}` y `{or}` puedes hacer tus historias mas vers√°tiles. Puedes hacer dos preguntas y responder a la combinaci√≥n de respuestas.

                    ### Ejercicio 1
                    Mira el c√≥digo de ejemplo de este nivel y compl√©talo. Luego a√±ade por lo menos 2 `{if}` con `{and}` o `{or}`.

                    ### Ejercicio 2
                    Encuentra una historia de un nivel anterior y a√±ade un `{and}` o `{or}`.
                example_code: |
                    ```
                    {print} 'Nuestra hero√≠na est√° caminando en el bosque'
                    {print} 'El camino se divide en dos'
                    camino = {ask} '¬øQue camino deber√≠a escoger ella?'
                    arma={ask} 'Que arma escoge ella?'
                    {if} camino {is} 'derecha' {and} arma {is} 'espada'
                        _
                    ```
                start_code: '# coloca tu c√≥digo aqu√≠'
            15:
                story_text: |
                    Usar un bucle `{while}` puede hacer que tus historias sean m√°s interesantes. Por ejemplo, puedes usar `{while} game {is} 'on'` para seguir jugando hasta que termine.
                    O puedes usar `{while} sword {is} 'lost'` para evitar que el jugador contin√∫e el juego hasta que encuentre algo.
                example_code: |
                    ```
                    llaves = 'perdidas'
                    {print} 'Est√°s en tu jard√≠n y perdiste tus llaves.'
                    {print} '¬øEn donde las quieres buscar?'
                    {print} '¬®Puedes escoger: √°rbol, lecho de flores, roca, buz√≥n'
                    {while} llaves == 'perdidas'
                        lugar = {ask} '¬øEn donde quieres buscar?'
                        {if} lugar == 'lecho de flores'
                            {print} '¬°Aqu√≠ est√°n!'
                            keys = 'encontradas'
                        {else}
                            {print} 'No, no est√°n en ' lugar
                    {print} '¬°Ahora puedes entrar en la casa'
                    ```
                start_code: '# coloca t√∫ c√≥digo aqu√≠'
            18:
                story_text: |
                    Vamos a hacer otra historia, pero ahora usaremos par√©ntesis con `{print}`.

                    ### Ejercicio 1
                    Crea una historia de m√≠nimo 5 oraciones. No tienes que usar 'nombre' a√∫n.
                example_code: |
                    ```
                    {print}('Bienvenido a esta historia!')
                    ```
                story_text_2: |
                    ### Ejercicio 2
                    Ya preparamos un `{input}` para ti. Primero usa la variable `name` en tu historia.
                    Luego a√±ade un segundo `{ask}` y usa esa variable tambi√©n.
                    Tip: Recuerda las comas en el `{print}` entre texto y variables
                example_code_2: |
                    ```
                    nombre = {input}("Cual es tu nombre?")
                    {print}('Bienvenido a esta historia!')
                    ```
                start_code: '# Pon tu c√≥digo aqu√≠'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: comando_a√±adir_borrar
        description: introducci√≥n a a√±adir a y borrar de
        levels:
            3:
                story_text: |
                    ## A√±adir a
                    Puedes a√±adir objetos a la lista con el comando `{add} {to}`. Para a√±adir un objeto a una lista puedes escribir: `{add} penguin {to} animals` o puedes usar el comando `{ask}` como en el c√≥digo de ejemplo.
                example_code: |
                    ```
                    animales {is} perro, gato, canguro
                    gusta {is} {ask} ¬øCu√°l es tu animal preferido?
                    {add} gusta {to_list} animales
                    {print} Yo elijo animales {at} {random}
                    ```
                story_text_2: |
                    ## Borrar de
                    Si puedes a√±adir objetos a una lista, por supuesto que tambi√©n puedes quitarlos. Esto se hace con el comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animales {is} perro, gato, canguro
                    no_gustar {is} {ask} ¬øQu√© animal no te gusta?
                    {remove} no_gustar {from} animales
                    {print} Elijo animales {at} {random}
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los nuevos comandos en este restaurante virtual. A√±ade el sabor que el jugador est√° esperando a la lista y elimina los sabores a los que es al√©rgico.
                example_code_3: |
                    ```
                    {print} Batido misterioso
                    sabores {is} fresa, chocolate, vainilla
                    espera {is} {ask} ¬øQu√© sabor est√°s esperando?
                    _
                    alergias {is} {ask} ¬øEres al√©rgico a cualquiera de los sabores?
                    _
                    {print} Recibe un batido de sabores {at} {random}
                    ```
                start_code: |-
                    animales {is} perro, gato, canguro
                    gustar {is} {ask} ¬øCu√°l es tu animal preferido?
                    {add} gustar {to_list} animales
                    no_gustar {is} {ask} ¬øQu√© animal no te gusta?
                    {remove} no_gustar {from} animales
                    {print} Elijo animales {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: y o
        description: introducci√≥n a y o
        levels:
            13:
                story_text: |-
                    ¬°Ahora vamos a aprender `{and}` y `{or}`! Si quieres comprobar dos sentencias, no tienes que usar dos `{if}`s pero puedes usar `{and}` y `{or}`.

                    Si usas `{and}`, ambas sentencias, a la izquierda y derecha de `{and}` tienen que ser verdaderas. Tambi√©n podemos usar `{or}`. Entonces s√≥lo una sentencia tiene que ser correcta.
                example_code: |
                    ```
                    nombre = {ask} '¬øc√≥mo te llamas?'
                    edad = {ask} '¬øcu√°ntos a√±os tienes?'
                    {if} nombre {is} 'Hedy' {and} edad {is} 2
                        {print} '¬°T√∫ eres el verdadero Hedy!'
                    ```
                start_code: |-
                    nombre = {ask} '¬øc√≥mo te llamas?'
                    edad = {ask} '¬øcu√°ntos a√±os tienes?'
                    {if} nombre {is} 'Hedy' {and} edad {is} 2
                        {print} '¬°T√∫ eres el verdadero Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: comando_preguntar
        description: Introducci√≥n al comando preguntar
        levels:
            1:
                story_text: |
                    ## El comando preguntar
                    Ahora que puedes usar el comando `{print}`, est√°s preparado para usar el siguiente comando: `{ask}`. Con el comando `{ask}`, puedes hacer una pregunta. Compru√©balo:
                example_code: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    ```
                story_text_2: |
                    ## El comando echo
                    Si quieres que el ordenador te repita la respuesta, puedes usar el comando `{echo}`. Se har√° eco de la respuesta de nuevo al final de la frase, as√≠ que en este ejemplo despu√©s de hola.
                example_code_2: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    {echo} hola
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los comandos `{ask}` y `{echo}`. Lo primero, rellena los huecos en blanco para hacer que el programa funcione.
                    Despu√©s, haz 2 preguntas m√°s usando el comando `{ask}`, tras cada `{ask}` usa un `{echo}` para imprimir la respuesta en pantalla.
                example_code_3: |
                    ```
                    _ ¬øQu√© tal est√°s?
                    _
                    ```
                start_code: |
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    {echo} hola
            2:
                story_text: |
                    ## El comando preguntar
                    Ahora que podemos usar **variables** en nuestros c√≥digos, ya no necesitamos el comando `{echo}`.
                    Podemos usar variables para almacenar las respuestas a nuestras pregunta y de esta manera podemos usar la respuesta a varias preguntas en nuestros c√≥digos.
                    Compru√©balo:

                    ¬°De esta manera tu c√≥digo se convierte interactivo!
                example_code: |
                    ```
                    nombre {is} {ask} ¬øC√≥mo te llamas?
                    {print} Hola nombre
                    edad {is} {ask} ¬øCu√°ntos a√±os tienes?
                    {print} nombre tiene edad a√±os.
                    ```
                story_text_2: |
                    ### Ejercicio
                    En la pesta√±a anterior has practicado estableciendo variables con el comando `{is}`.
                    Has creado al menos 3 variables y las has usado con el comando imprimir.
                    Ahora, en vez de establecer las variables queremos que hagas las variables interactivas, como hicimos en nuestro ejemplo.

                    Copia tu c√≥digo de la pesta√±a anterior y haz las variables interactivas usando el comando `{ask}`.
                example_code_2: |
                    ```
                    animales_favoritos {is} {ask} ¬øCu√°l es tu animal favorito?
                    {print} Me gusta animales_favoritos
                    ```
                start_code: |-
                    nombre {is} {ask} ¬øC√≥mo te llamas?
                    {print} Hola nombre
                    edad {is} {ask} ¬øCu√°ntos a√±os tienes?
                    {print} nombre tiene edad a√±os.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Intenta acercarte lo m√°ximo posible a 21
        levels:
            17:
                story_text: |
                    Blackjack es un juego simple de cartas en el cual debes acercarte lo m√°ximo posible a 21. Recibes dos cartas. El valor de cada carta es el n√∫mero que llevan, la Jota, Reina y Rey valen 10 puntos.
                    El As vale 1 o 11 puntos (puedes elegir). El repartidor, tu oponente, tambi√©n obtiene dos cartas.
                    Si quieres, puedes obtener otra carta, y sus puntos se sumar√°n al total. El repartidor tambi√©n puede obtener otra carta.
                    Pero ten mucho cuidado de no pasarte de 21 puntos, porque si lo haces, ¬°Pierdes!
                    ¬°El jugador que se acerque mas a 21 sin pasarse gana!

                    ¬°Buena suerte!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    cartas = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jota', 'Reina', 'Rey', 'As']
                    puntos = 0
                    puntos_repartidor = 0
                    carta_1 = cartas[{random}]
                    carta_2 = cartas[{random}]
                    carta_3 = cartas [{random}]
                    carta_repartidor_1 = cartas[{random}]
                    carta_repartidor_2 = cartas[{random}]
                    carta_repartidor_3 = cartas[{random}]
                    # Puntos por carta 1
                    {if} carta_1 == 'Jota' {or} carta_1 == 'Reina' {or} carta_1 == 'Rey':
                        puntos = puntos + 10
                    {elif} carta_1 == 'As':
                        puntos = puntos + 11
                    {else}:
                        puntos = puntos + carta_1
                    # Puntos por carta 2
                    {if} carta_2 == 'Jota' {or} carta_2 == 'Reina' {or} carta_2 == 'Rey':
                        puntos = puntos + 10
                    {elif} carta_2 == 'As':
                        puntos = puntos + 11
                    {else}:
                        puntos = puntos + carta_2
                    # Puntos para el repartidor por la carta 1
                    {if} carta_repartidor_1 == 'Jota' {or} carta_repartidor_1 == 'Reina' {or} carta_repartidor_1 == 'Rey':
                        puntos_repartidor = puntos_repartidor + 10
                    {elif} carta_repartidor_1 == 'As':
                        puntos_repartidor = puntos_repartidor + 11
                    {else}:
                        puntos_repartidor = puntos_repartidor + carta_repartidor_1
                    # Puntos del repartidor por la carta 2
                    {if} carta_repartidor_2 == 'Jota' {or} carta_repartidor_2 == 'Reina' {or} carta_repartidor_2 == 'Rey':
                        puntos_repartidor = puntos_repartidor + 10
                    {elif} carta_repartidor_2 == 'As':
                        puntos_repartidor = puntos_repartidor + 11
                    {else}:
                        puntos_repartidor = puntos_repartidor + carta_repartidor_2
                    # Dos ases
                    {if} carta_1 == 'As' {and} carta_2 == 'As':
                        puntos = 12
                    {if} carta_repartidor_1 == 'As' {and} carta_repartidor_2 == 'As':
                        puntos_repartidor = 12
                    # Marcador
                    {print} 'Tienes un ' carta_1 ' y un ' carta_2 ' (' puntos ' puntos)'
                    {print} 'El repartidor tiene un ' carta_repartidor_1 ' y un ' carta_repartidor_2 ' (' puntos_repartidor ' puntos)'
                    # Carta extra para el repartidor
                    visita = {ask} '¬øQuieres una carta extra?'
                    {if} visita == 'si':
                        {if} carta_3 == 'Jota' {or} carta_3 == 'Reina' {or} carta_3 == 'Rey':
                            puntos = puntos + 10
                        {elif} carta_3 == 'As':
                            {if} puntos > 11:
                                puntos = puntos + 11
                            {else}:
                                puntos = puntos + 1
                        {else}:
                            puntos = puntos + carta_3
                        {print} 'Tienes un' carta_3 ' extra (' puntos ' puntos)'
                    {else}:
                        {print} 'Sin cartas extra'
                    # Ganador
                    {if} puntos > 21 {or} puntos_repartidor > puntos {or} puntos_repartidor == 21:
                        {print} 'Perdiste'
                    {elif} puntos_repartidor < 17:
                        {print} 'El repartidor toma una carta extra. Es un... ' carta_repartidor_3
                        {if} carta_repartidor_3 == 'Jota' {or} carta_repartidor_3 == 'Reina' {or} carta_repartidor_3 == 'Rey':
                            puntos_repartidor = puntos_repartidor + 10
                        {elif} carta_repartidor_3 == 'As':
                            {if} puntos_repartidor < 11:
                                puntos_repartidor = puntos_repartidor + 11
                            {else}:
                                puntos_repartidor = puntos_repartidor + 1
                        {else}:
                            puntos_repartidor = puntos_repartidor + carta_repartidor_3
                        {print} 'El repartidor tiene ' puntos_repartidor ' puntos ahora'
                        {if} puntos_repartidor < 21 {and} puntos_repartidor > puntos:
                            {print} 'Pierdes'
                        {else}:
                            {print} 'Ganas'
                    {elif} puntos > puntos_repartidor {and} puntos < 21:
                        {print} '¬°Ganaste!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Haz una calculadora
        levels:
            6:
                story_text: |
                    Ahora que puedes calcular, ¬°puedes hacer una calculadora!
                example_code: |
                    ```
                    n√∫mero_1 = {ask} 'Rellena el primer n√∫mero:'
                    n√∫mero_2 = {ask} 'Escribe el segundo n√∫mero:'
                    respuesta_correcta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' por ' n√∫mero_2 ' es ' respuesta_correcta
                    ```
                story_text_2: |
                    ### Ejercicio
                    La calcula va a ser capaz de calcular las respuestas por ti, pero tambi√©n puedes hacer un programa para probar tus propias habilidades matem√°ticas, as√≠:
                    ¬°Rellena los espacios para completar el c√≥digo!
                example_code_2: |
                    ```
                    respuesta_correcta = 11 * 27
                    respuesta = {ask} '¬øCuanto es 11 por 27?'
                    {if} respuesta {is} _ {print} '¬°Buen trabajo!'
                    {else} {print} '¬°Incorrecto! Era ' _
                    ```
                story_text_3: |
                    **Extra** Tambi√©n puedes dejar que el ordenador haga sumas aleatorias por s√≠ mismo usando random.

                    As√≠ eliges un n√∫mero de tablas para practicar, y de ah√≠ siempre obtienes una suma diferente:
                start_code: |
                    n√∫mero_1 = {ask} 'Introduce el primer n√∫mero:'
                    n√∫mero_2 = {ask} 'Escribe el segundo n√∫mero:'
                    respuesta_correcta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' por ' n√∫mero_2 ' es ' respuesta_correcta
            9:
                story_text: |
                    En el nivel 6 creaste una calculadora, en este nivel puedes ampliar el c√≥digo para que haga varias preguntas.

                    ### Ejercicio 1
                    ¬øPuedes completar la l√≠nea 1' para hacer que el programa funcione?

                    ### Ejercicio 2
                    Dale al jugador informaci√≥n cuando introduzcan una pregunta acertada o err√≥nea. Para conseguir eso, ampl√≠a tu programa con un `{else}`.
                example_code: "```\npuntuaci√≥n = 0\n{repeat} 10 {times}\n    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    n√∫mero1 = n√∫meros {at} {random}\n    n√∫mero2 = n√∫meros {at} {random}\n    respuesta_correcta = numero1 * numero2\n    {print} '¬øCu√°nto es 'n√∫mero1' multiplicado por 'n√∫mero2'?'\n \
                    \   respuesta = {ask} 'Escriba su respuesta aqu√≠...'\n    {print} 'Tu respuesta es' respuesta\n    {if}_{is}_ \n        puntuaci√≥n = puntuaci√≥n + 1\n{print} '¬°Buen trabajo! Tu puntuaci√≥n es... 'puntuaci√≥n' sobre 10!'\n```\n"
                start_code: '{print} ''¬°Bienvenido a esta calculadora!'''
            10:
                story_text: |
                    ¬°Este juego de c√°lculo te ayuda a practicar las tablas de multiplicar!
                    ### Ejercicio
                    ¬øPuedes a√±adir m√°s n√∫meros a la lista para practicar las tablas de multiplicar hasta el 10?
                example_code: |
                    ```
                    n√∫meros = 1, 2, 3
                    {for} n√∫mero1 {in} n√∫meros
                        {for} n√∫mero2 {in} n√∫meros
                            respuesta = {ask} '¬øCu√°nto es ' n√∫mero2 ' por ' n√∫mero1 '?'
                            correcta = n√∫mero1 * n√∫mero2
                            {if} respuesta {is} correcta
                                {print} '¬°Muy bien!'
                            {else}
                                {print} 'Te equivocas. La respuesta correcta es ' correcta
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            11:
                story_text: |
                    Con `{for}` puedes simplificar programas de practica de las tablas de multiplicaci√≥n.

                    ### Ejercicio 1
                    Mejora el c√≥digo de ejemplo para que

                    ### Ejercicio 2
                    Vuelve al c√≥digo de multiplicaci√≥n del nivel 10, y modif√≠calo para que use un `{for}` y `{range}`.
                example_code: |
                    ```
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
                    ```
                start_code: |
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
            12:
                story_text: |
                    En este nivel puedes hacer una calculadora que funcione para n√∫meros decimales.

                    ### Ejercicio 1
                    Rellena los huecos en blanco para completar la calculadora. Recuerda usar un punto y no una coma para los n√∫meros decimales.

                    ### Ejercicio 2
                    Crea un nuevo programa de pr√°ctica de matem√°ticas, pero ahora usa n√∫meros decimales.
                    Crea una lista de n√∫meros, elige dos a multiplicar y deja que el jugador responda.
                    ¬°Y por supuesto tienes que validar la respuesta! **Extra** Aumenta la dificultad a√±adiendo vidas: Un jugador pierde una vida por cada respuesta incorrecta y tras fallar tres respuestas el juego termina.
                example_code: |
                    ```
                    n√∫mero1 = {ask} '¬øCu√°l es el primer n√∫mero?'
                    n√∫mero2 = {ask} '¬øCu√°l es el segundo n√∫mero?'
                    respuesta = _
                    {print} n√∫mero1 ' m√°s ' n√∫mero2 ' es ' respuesta
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            13:
                story_text: |
                    ### Ejercicio 1
                    Hagamos el programa de pr√°ctica un poco m√°s dif√≠cil. Ahora el jugador tiene que responder correctamente a dos preguntas. Rellena los espacios en blanco para completar el programa.

                    ### Ejercicio 2 Extra
                    A veces, los c√°lculos tienen varias respuestas correctas. Por ejemplo, 10 se puede dividir entre 5 y entre 2. As√≠ que la pregunta "¬øQu√© n√∫mero divide a 10?" se puede responder entre 2 y entre 5.
                    Pide un c√°lculo que tenga m√∫ltiples respuestas correctas, pide al jugador que te responda y determine si es correcto utilizando `{or}`.
                    Vac√≠a el campo de programaci√≥n y crea tu propia soluci√≥n.
                example_code: |
                    ```
                    respuesta1 = {ask} 'Cuanto es 10 por 7?'
                    respuesta2 = {ask} 'Cuanto es 6 por 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Escribe tu c√≥digo aqu√≠'
            14:
                story_text: |
                    En este nivel puedes programar el juego 'Adivina el n√∫mero'
                example_code: |
                    ```
                    {print} 'Adivina el n√∫mero'
                    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    n√∫mero = n√∫meros {at} {random}
                    juego = 'en marcha'
                    {for} i {in} {range} 1 {to} 10
                        {if} juego == 'en marcha'
                            intento = {ask} '¬øQue n√∫mero piensas que es?'
                            {if} intento > n√∫mero
                                {print} '¬°Muy alto!'
                            {if} intento < n√∫mero
                                {print} '!Muy bajo!'
                            {if} intento == n√∫mero
                                {print} '¬°Ganaste!'
                                juego = 'termin√≥'
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            15:
                story_text: |
                    Puedes agregar el bucle `{while}` al jugo de la calculadora que aprendiste a hacer en el nivel anterior.
                    Esto asegura que el jugador no pueda continuar a la siguiente pregunta si se responde incorrectamente.
                example_code: |
                    ```
                    puntaje = 0
                    {for} i {in} {range} 0 {to} 9
                        n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        n√∫mero1 = n√∫meros {at} {random}
                        n√∫mero2 = n√∫meros {at} {random}
                        correcta = n√∫mero1 * n√∫mero2
                        respuesta = 0
                        {while} respuesta != correcta
                            {print} '¬øCu√°nto es ' n√∫mero1 ' por ' n√∫mero2 '?'
                            respuesta = {ask} 'Escribe tu respuesta:'
                            {print} 'Tu respuesta es ' respuesta
                        {print} '¬°Buen trabajo!'
                    {print} '¬°Ganaste!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    clear_command:
        name: '{clear}'
        default_save_name: comando_limpiar
        description: comando limpiar
        levels:
            4:
                story_text: |
                    ¬°Hora para un nuevo comando! Con `{clear}` puedes limpiar todo el texto de la pantalla de salida. De esta manera puedes evitar que tu pantalla se llene de texto.
                    ¬°Atenci√≥n! Si usas un comando `{clear}`, recuerda usar un `{sleep}` encima de √©l. En caso contrario, ¬°Hedy limpiar√° tu pantalla sin darte tiempo a leer lo que pone!
                example_code: |
                    ```
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} '¬°SORPRESA!'
                    ```
                start_code: |
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} '¬°SORPRESA!'
    default:
        name: Introducci√≥n
        default_save_name: intro
        description: Explicaci√≥n del nivel
        levels:
            1:
                story_text: |
                    ¬°Bienvenido a  Hedy! En el nivel 1 puede empezar imprimiendo una historia.

                    Prueba el c√≥digo por ti mismo con el bot√≥n verde 'Ejecutar c√≥digo' bajo el bloque de programaci√≥n.

                    ¬øPreparado? ¬°Entonces ve a la siguiente pesta√±a para aprender tu primer comando!
                start_code: '{print} ¬°hola mundo!'
            2:
                story_text: |
                    ¬°Enhorabuena! Has alcanzado el nivel 2. ¬°Espero que ya hayas hecho algunos c√≥digos incre√≠bles!
                    Quiz√°s te has dado cuenta en el primer nivel que el comando `{echo}` s√≥lo puede guardar un bit de informaci√≥n cada vez.
                    Por ejemplo en la aventura del restaurante, puedes imprimir lo que el cliente quiere comer, o que quiere de beber, pero no ambas en una misma frase.
                example_code: |
                    **¬°Cuidado! ¬°Este c√≥digo no funciona!**
                    En Hedy los comandos a veces cambiar√°n. `{echo}` por ejemplo s√≥lo funciona en el nivel 1. En este nivel aprender√°s una forma mejor para devolver las respuestas.
                    ```
                    {print} Bienvenido a Hedy's
                    {ask} ¬øQu√© le gustar√≠a comer?
                    {echo} As√≠ que quiere
                    {ask} ¬øqu√© le gustar√≠a beber?
                    {echo} As√≠ que quiere
                    ```
                story_text_2: |
                    Si el jugador escribe una hamburguesa y un refresco, no puedes decir "as√≠ que quieres una hamburguesa y un refresco", pero tendr√°s que hacerlo en dos l√≠neas separadas.
                    Tambi√©n, el comando `{echo}` s√≥lo imprime la palabra al final de la frase. As√≠ que no puedes decir "¬°tu hamburguesa viene enseguida!".

                    Esos cambios en el nivel 2. En el nivel 2 aprender√°s a trabajar con variables, que te permiten guardar varias partes de informaci√≥n e imprimirlas donde quieras.
                    ¬°As√≠ que vayamos a la siguiente pesta√±a!
                start_code: '{print} hola mundo!'
            3:
                story_text: |
                    En el nivel anterior has aprendido lo que es una variable y como puedes usarla para hacer tus aventuras m√°s interactivas.
                    Pero... ¬°eso no es lo √∫nico que puedes hacer con las variables! Tambi√©n puedes usar variables para hacer listas.
                    Incluso puedes dejar que Hedy elija una palabra al azar de una lista, ¬°lo que te permite hacer juegos de verdad!
                    ¬°Echa un vistazo a la siguiente pesta√±a!
                start_code: '{print} hola mundo!'
            4:
                story_text: |
                    En los niveles anteriores has estado practicando con las variables, pero es posible que te hayas encontrado con este problema.
                    Es posible que hayas intentado ejecutar un c√≥digo como este:

                    Por supuesto que quer√≠as imprimir

                    `My name is Sophie`

                    pero Hedy imprime

                    `My Sophie is Sophie`.

                    En este nivel, este problema se soluciona mediante el uso de comillas.
                example_code: |
                    ```
                    nombre {is} Sofia
                    {print} Mi nombre es nombre
                    ```
                start_code: |
                    Mi nombre {is} Sophie
                    {print} Mi nombre es nombre
            5:
                story_text: |
                    En los niveles anteriores ya has aprendido a usar `{at} {random}` lo que hizo tus juegos distintos cada vez que ejecutaste el c√≥digo.
                    Pero no es muy interactivo, el jugador no tiene ning√∫n efecto en lo que ocurre en el juego.

                    En este nivel aprender√°s el comando `{if}` , que te permite dar respuestas distintas en tu programa. De esta manera, por ejemplo, puedes programa una contrase√±a secreta para tu ordenador.
                    ¬°As√≠ que vayamos a la siguiente pesta√±a para el nuevo comando!
                example_code: |
                    ```
                    contrase√±a {is} {ask} '¬øCu√°l es la contrase√±a correcta?'
                    ```
                start_code: |-
                    nombre {is} {ask} '¬øC√≥mo te llamas?'
                    {if} nombre {is} Hedy {print} '¬°genial!' {else} {print} 'meh'
            6:
                story_text: |
                    En el nivel anterior has practicado con `{ask}` y `{if}`. Por ejemplo puedes preguntar a los clientes qu√© les gustar√≠a comer.
                    Lo que todav√≠a no puedes hacer, es calcular el precio de la cena de todos.

                    El siguiente nivel te permitir√° usar la suma, resta y multiplicaci√≥n en tus programas. De esta manera podr√°s calcular los precios en tu restaurante, pero tambi√©n podr√°s a√±adir un c√≥digo secreto para dar un descuento a tus amigos y familiares.
                    Otra opci√≥n en el siguiente nivel es programar tu propio juego de matem√°ticas, para que tus hermanos peque√±os practiquen sus multiplicaciones.
                    ¬°Ve a verlo por ti mismo!
                example_code: |
                    ```
                    precio_comida {is} 0
                    precio_bebida {is} 0
                    precio_total {is} 0
                    {print} 'Bienvenido a McHedy'
                    pedido {is} {ask} '¬øQu√© le gustar√≠a comer?'
                    {if} pedido {is} precio_comida hamburguesa {is} 5
                    {if} pedido {is} precio_comida patatas fritas {is} 2
                    bebida {is} {ask} '¬øQu√© le gustar√≠a beber?'
                    {if} bebida {is} precio_bebida agua {is} 0
                    {else} precio_bebida {is} 3
                    precio_total {is} precio_comida + precio_bebida
                    {print} 'Ser√°n ' precio_total ' d√≥lares, por favor'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            7:
                story_text: |
                    ¬°Gran trabajo! Has alcanzado el siguiente nivel, lo que significa que has practicado con `{if}` and `{else}`. Te habr√°s dado cuenta de que tus c√≥digos son cada vez m√°s extensos.
                    Por ejemplo, si quieres programar 'Feliz Cumplea√±os'.

                    Eso es mucho trabajo para b√°sicamente las mismas palabras una y otra vez. Por fortuna, en la siguiente pesta√±a aprender√°s una soluci√≥n con el comando `{repeat}`, que te permitir√° repetir una l√≠nea de c√≥digo varias veces.
                example_code: |
                    ```
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz querido Hedy'
                    {print} 'cumplea√±os feliz'
                    ```
                start_code: |
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz querido Hedy'
                    {print} 'cumplea√±os feliz'
            8:
                story_text: |
                    Ahora has aprendido a como repetir una √∫nica l√≠nea de c√≥digo. Esto es √∫til, pero no siempre es suficiente. A veces quieres repetir varias l√≠neas de una vez.
                    Este nivel te permite agrupar un par de l√≠neas de c√≥digo, ¬°y repetir ese peque√±o grupo de l√≠neas de una vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} '¬°En la siguiente pesta√±a puedes repetir varias l√≠neas de c√≥digo a la vez!'
                    ```
                start_code: '{print} ''¬°Vayamos a la siguiente pesta√±a!'''
            9:
                story_text: |
                    ¬°Buen trabajo! ¬°Has alcanzado otro nuevo nivel! En el nivel anterior aprendiste a usar varias l√≠neas de c√≥digo en un comando {if} o {repeat}. Pero todav√≠a no puedes combinar los dos...
                    ¬°Buenas noticias! En este nivel se te permitir√° poner un {if} dentro de otro {if}, o dentro de un comando {repeat}.
                example_code: |
                    ```
                    respuesta = {ask} '¬øEst√°s preparado para aprender algo nuevo?'
                    {if} respuesta {is} s√≠
                        {print} '¬°Genial! !Puedes aprender a usar el comando repetir en el comando si!'
                        {print} '!Hurra!'
                        {print} '!Hurra!'
                        {print} '!Hurra!'
                    {else}
                        {print} 'Tal vez deber√≠as practicar un poco m√°s en el nivel anterior'
                start_code: '{print} ¬°Vayamos a la siguiente pesta√±a!'
            10:
                story_text: |
                    ¬°Lo est√°s haciendo genial! En el nivel anterior todav√≠a nos encontramos con un peque√±o problema. Has aprendido a repetir l√≠neas, pero ¬øy si quisieras cambiar ligeramente la l√≠nea?
                    Por ejemplo, si quieres cantar la canci√≥n 'si eres feliz y lo sabes'. Se parecer√≠a a algo como esto:

                    Si tambi√©n quisieras el siguiente verso 'pisa con los pies', y el siguiente, y el siguiente, tendr√≠as que cambiar por completo tu c√≥digo.
                    En este nivel aprender√°s el comando `{for}`, que te permite hacer una lista de acciones y repetir el c√≥digo con otra acci√≥n !cada vez!
                    ¬°√âchale un vistazo!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'si eres feliz y lo sabes aplaude con tus manos'
                    {print} 'si eres feliz y lo sabes y realmente quieres mostrarlo'
                    {print} 'si eres feliz y lo sabes aplaude con tus manos'
                    ```
                start_code: '{print} ''!Vayamos a la siguiente pesta√±a!'''
            11:
                story_text: |
                    Has alcanzado el nivel 10, ¬°lo est√°s haciendo genial! En los niveles superiores, Hedy se centra m√°s y m√°s en ense√±arte el lenguaje de programaci√≥n Python.
                    En Python no hay comando `{repeat}`, pero hay un comando que funciona como {repeat}.¬øTienes curiosidad de saber c√≥mo se llama `{repeat}` en el idioma Python? Aver√≠gualo r√°pidamente.
                start_code: '{print} ''!Vayamos a la siguiente pesta√±a!'''
            12:
                story_text: |
                    Quiz√° hayas intentado usar n√∫meros decimales en aventura del restaurante. Si lo hiciste, te habr√°s dado cuenta que Hedy no todav√≠a los entend√≠a y siempre los redondeaba.
                    Desde este nivel en adelante puedes usar n√∫meros decimales.
                example_code: |
                    ```
                    hamburguesa = 5
                    bebida = 2
                    total = hamburguesa + bebida
                    imprimir 'Has pedido una hamburguesa y una bebida'
                    imprimir 'Eso cuesta ' total ' d√≥lares por favor'
                    ```
                start_code: '{print} ''¬°Vayamos a la siguiente pesta√±a!'''
            13:
                story_text: |
                    En los niveles anteriores aprendiste c√≥mo poner dos comandos `{if}` uno dentro de otro. Esto funciona bien, pero resulta en c√≥digos extensos e inmanejables como este:

                    En este sistema tienes que poner el nombre de usuario correcto y la contrase√±a correcta.
                    En este nivel aprender√°s el comando `{and}` que har√° este c√≥digo !mucho m√°s corto y m√°s entendible!
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    nombre_usuario = {ask} '¬øCu√°l es tu nombre de usuario?'
                    contrase√±a = {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre_usuario {is} 'Hedy'
                        {if} contrase√±a {is} 'secreta'
                            {print} '¬°Bienvenido Hedy!'
                        {else}
                            {print} 'Acceso denegado'
                    {else}
                        {print} '¬°Acceso denegado!'
                    ```
                start_code: '{print} ''¬°Vamos a la siguiente pesta√±a!'''
            14:
                story_text: |
                    Con el programa de abajo puedes calcular si has aprobado una asignatura en el colegio (por lo tanto, una nota de seis o superior).
                    Puedes ver que este c√≥digo es extremadamente ineficiente, debido al c√≥digo tan largo en la l√≠nea 5.
                    Todas las diferentes notas de 1 a 5 tuvieron que programarse por separado. Afortunadamente para ti, en este nivel aprender√°s como hacer esto sin este c√≥digo !extremadamente largo!
                example_code: |
                    ```
                    primer_curso = {ask} '¬øQu√© nota conseguiste en tu primer examen?'
                    segundo_curso = {ask} '¬øQu√© nota conseguiste en tu segundo examen?'
                    suma = primer_curso + segundo_curso
                    media_curso = suma / 2
                    {if} media_curso = 1 {or} media_curso = 2 {or} media_curso = 3 {or} media_curso = 4 {or} media_curso = 5
                        {print} '¬°Oh no! Has suspendido la asignatura...'
                    {else}
                        {print} '¬°Genial! ¬°Has aprobado la asignatura!'
                    ```
                start_code: |
                    contesta = {ask} '¬øQuieres saber m√°s?'
                    {if} contesta == 'Si'
                        {print} '¬°A la siguiente aventura!'
                    {if} ¬°Contesta != 'si'
                        {print} '¬°Qu√© pena!'
            15:
                story_text: |
                    En el juego de abajo, se ha preparado un c√≥digo para asegurarse que el jugador pueda jugar tanto como quieran...
                    Pero el c√≥digo es ineficiente y tarda mucho. Adem√°s, ¬øy si el jugador quiere jugar 101 partidas en vez de 100?
                    ¬øNo puede jugar hasta el infinito?
                    !En este nivel aprender√°s un comando que har√° todo esto mucho m√°s f√°cil!
                example_code: |
                    ```
                    juego {is} 'iniciado'
                    {for} i {in} {range} 1 {to} 100
                        {if} juego {is} 'iniciado'
                            respuesta = {ask} '¬øQuieres continuar?'
                            {if} respuesta {is} 'no'
                                juego {is} 'finalizado'
                            {if} respuesta {is} 'si'
                                {print} 'Ok continuemos'
                    ```
                start_code: '{print} ''¬°Vamos a la siguiente pesta√±a!'''
            16:
                story_text: |
                    En este nivel creceremos un poco m√°s hacia c√≥digo real de Python. Tambi√©n aprender√°s como hacer que dos listas coincidan.
                    As√≠ puedes programar un c√≥digo en el que el animal correcto coincide con el sonido correcto.
                    Porque los dos c√≥digo de abajo... !Obviamente no tienen sentido!
                example_code: |-
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {print} 'Un ' animal ' dice ' sonidos {at} {random}
                    ```
                    Tambi√©n puedes intentar que funcione as√≠, pero....
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {for} sonido {in} sonidos
                            {print} 'Un ' animal ' dice ' sonido
                    ```
                    Nota: Estos c√≥digos no funcionar√°n as√≠ en este nivel. Dir√≠gete a la siguiente pesta√±a para ver qu√© partes necesitas corregir.
                start_code: '{print} ''¬°Vayamos a la siguiente pesta√±a!'''
            17:
                story_text: |
                    Ahora vamos a cambiar un poco la indentaci√≥n. Cada vez que necesitemos una sangr√≠a, necesitaremos `:` en la l√≠nea anterior a la sangr√≠a.

                    En este nivel tambi√©n se puede utilizar un nuevo comando: `{ elif }`. `{elif}` es la abreviatura de {else} {if} y lo necesitas cuando quieres hacer 3 (¬°o m√°s!) opciones.
                    ¬°Compru√©balo!
                start_code: '{print} ''¬°Vamos a la siguiente pesta√±a!'''
            18:
                story_text: |
                    ¬°Enhorabuena! Has alcanzado el √∫ltimo nivel de Hedy! El c√≥digo que has creado aqu√≠ se puede copiar a entornos reales de Python como replit o PyCharm, ¬°y puedes continuar aprendiendo all√≠!
                    Sin embargo ten en cuenta que Python s√≥lo puede leer comando en ingl√©s, as√≠ que si has estado usando otros idiomas, ahora los tendr√°s que cambiar a ingl√©s.
                start_code: '{print} (''¬°¬°¬°Gran trabajo!!!'')'
    dice:
        name: Dados
        default_save_name: Dados
        description: Crea tu propio juego de dados
        levels:
            3:
                story_text: |
                    En el nivel 2 puedes elegir elementos de una lista. De esa manera podemos hacer que se tiren los dados.
                    Dale una mirada a los juegos de mesa que tienes en tu casa.
                    Hay en tu casa juegos que usen un dado normal (¬øo un dado especial)? Puedes crear los mismos dados con el siguiente programa.
                    Por ejemplo, los dados del juego Gusanitos, que tienen los n√∫meros del 1 al 5, y en lugar de 6, un gusanito.

                    ![Dado con n√∫meros del 1 al 5 y un gusanito en lugar del 6](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, lombriz de tierra
                    {print} ¬°Lanzaste _ {at} {random}!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Los dados en el ejemplo de arriba son dados para un juego en espec√≠fico. ¬øPuedes hacer un dado normal?
                    ¬øU otro dado especial para un juego diferente?
                example_code_2: |
                    ```
                    opciones {is} _
                    ```
                start_code: |
                    opciones {is} 1, 2, 3, 4, 5, lombriz de tierra
                    {print} ¬°Lanzaste _ {at} {random}!
            4:
                story_text: |
                    En este nivel podemos crear dados. Pero en esta ocasi√≥n puedes intentarlo por ti mismo, sin un c√≥digo de ejemplo!

                    ### Ejercicio
                    Haz tu propio dado en este nivel.
                    Nota: Si no tienes idea de como hacer dados. Mira tus dados del nivel anterior, pero no olvides las comillas.
                start_code: '{print} ''¬øQu√© sali√≥ esta vez?'''
            5:
                story_text: |
                    Vamos a a√±adir los comandos `{if}` y `{else}` a nuestros dados!

                    ### Ejercicio
                    Completa el c√≥digo de ejemplo para que diga "Ya puedes dejar de lanzar" una vez que lances un gusano. Deber√≠a decir "Debes lanzarlo otra vez" si no has lanzado nada mas.
                    **Extra** Tal vez quieras recrear una muerte de un juego totalmente diferente. Tambi√©n esta bien! Luego haz tu propia reacci√≥n, por ejemplo, 'Si!' para 6 y 'Lastima!' para algo mas.
                example_code: "```\nopciones {is} 1, 2, 3, 4, 5, lombriz\ntirada {is} opciones {at}{random}\n{print} 'haz tirado ' opciones\n_ lanzar{is} lombriz {print} 'Puedes dejar de tirar los dados' \n_ {print} '!Debes tirar los dados otra vez!'\n```\n"
                start_code: '{print} ''¬øQu√© sali√≥ esta vez?'''
            6:
                story_text: |
                    Puedes hacer un dado de gusanito otra vez en este nivel, pero ahora tambi√©n puedes calcular cuantos puntos han sido tirados.
                    Puedes saber que el gusano cuenta como cinco puntos para los gusanitos. Ahora cada vez que lances el dado puedes calcular inmediatamente cuantos puntos haz tirado.
                    Este es c√≥digo para calcular los puntos para un dado:

                    ### Ejercicio
                    ¬øPuedes hacer que el c√≥digo obtenga la puntuaci√≥n total por 8 dados? Para hacer eso tienes que cortar y copiar algunas l√≠neas de c√≥digo.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, lombriz
                    puntos = 0
                    tirada = opciones {at} {random}
                    {print} 't√∫ lanzaste ' tirada
                    {if} tirada {is} lombriz puntos = puntos + 5 {else} puntos = puntos + tirada
                    {print} 'esos son ' puntos ' puntos'
                    ```
                example_code_2: |
                    ¬øConseguiste calcular la puntuaci√≥n para 8 dados? Esto requer√≠a un mont√≥n de cortar y pegar, ¬øverdad? ¬°Vamos a hacerlo m√°s f√°cil en el nivel 7!
                start_code: '{print} ''¬øQu√© sali√≥ esta vez?'''
            7:
                story_text: |
                    Puedes hacer un dado otra vez en este nivel. Con el c√≥digo `{repeat}` puedes tirar f√°cilmente una mano entera de dados.

                    ### Ejercicio
                    ¬°Intenta terminar el c√≥digo de ejemplo!  **Extra** Piensa en un juego que conozcas que tenga un dado y progr√°malo usando `{repeat}`.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''¬øQu√© indicar√° el dado esta vez?'''
            10:
                story_text: |
                    ### Ejercicio
                    ¬øTodo el mundo tarda mucho lanzando el dado? ¬°En este nivel puedes dejar que Hedy lance todos los dados a la vez!
                    Cambia los nombres por nombres de tus amigos o familia, y completa el c√≥digo para que cada uno pueda lanzarlos.
                example_code: |
                    ```
                    jugadores = Ana, Juan, Pedro
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jugador ' tir√≥ un ' opciones {at} {random}
                        {sleep}
                    ```
                start_code: '# Coloca tu c√≥digo aqu√≠'
            15:
                story_text: |
                    En este juego tienes que tirar un 6 en el menor n√∫mero de intentos posibles.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, 6
                    {print} '¬°Lanza un 6 lo m√°s r√°pido que puedas!'
                    lanzado = 0
                    intentos = 0
                    {while} lanzado != 6
                        lanzado = opciones {at} {random}
                        {print} 'Lanzaste un ' lanzado
                        intentos = intentos + 1
                    {print} '¬°S√≠! Lanzaste un 6 en ' intentos ' intentos.'
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
    dishes:
        name: ¬øPlatos?
        default_save_name: Platos
        description: Usa la computadora para ver quien ha de lavar los platos
        levels:
            3:
                story_text: |
                    ¬øTienes en tu casa discusiones interminables sobre quien ha de lavar los platos hoy, o quien tiene que limpiar la caja del gato?
                    Ahora puedes dejar que la computadora elija honestamente a quien debe hacerlo. ¬°Puedes programar esto ahora en este nivel!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    {print} personas {at} {random} tiene que lavar los platos
                    ```
                story_text_2: |
                    ### Ejercicio
                    Haz tu propia versi√≥n del programa. Primero haz una lista de los miembros de tu familia.
                    Luego piensa en una tarea que tenga que ser hecha, y deja que la computadora decida quien debe hacer la tarea con el comando `{at} {random}`.

                    **Extra** ¬øNo quieres lavar los platos por ti mismo? Hackea el programa quitando tu nombre de la lista con `{remove}``{from}`.
                start_code: '{print} ¬øQui√©n lavar√° los platos hoy?'
            4:
                story_text: |
                    Usando comillas puedes hacer m√°s interesante tu programa.

                    ### Ejercicio
                    Primero, rellena los espacios con los s√≠mbolos o comandos correctos para hacer que el programa de ejemplo funcione.
                    Lo entendiste? Incre√≠ble! Ahora copia tu c√≥digo del nivel anterior y haz que funcione en este nivel a√±adiendo comillas en el lugar correcto.
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Mar√≠a
                    {print} _ los platos ser√°n hechos por _
                    {sleep}
                    {print} personas {at} _
                    ```
                start_code: '{print} ''¬øQuien lavar√° los platos hoy?'''
            5:
                story_text: |
                    Usando el comando `{if}` ahora puedes hacer tu programa todav√≠a m√°s divertido. Ahora tu programa puede reaccionar de acuerdo a la elecci√≥n de quien lavar√° los platos.
                    ### Ejercicio
                    ¬øPuede hacer que tu programa imprima 'oh no' si es tu turno de lavar los platos, y '¬°s√≠!' en caso contrario?
                    ¬°No olvides las comillas!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    lavavajillas {is} personas {at} {random}
                    lavavajillas {is} Sof√≠a {print} _ l√°stima que tengo que lavar los platos _
                    {print} 'afortunadamente no hay platos porque' _ 'ya los est√° lavando'
                    ```
                start_code: '{print} ''¬øQuien lavar√° los platos hoy?'''
            6:
                story_text: |
                    ¬øTodo el mundo lava los platos por igual? ¬øTe parece justo? Puedes contarlo en este nivel.
                example_code: "```\npersonas = mam√°, pap√°, Emma, Mar√≠a\nemma_lava = 0\nlavaplatos = personas {at} {random}\n{print} 'El lavaplatos es ' lavaplatos\n{if} lavaplatos {is} Emma emma_lava = emma_lava + 1\n{print} 'Emma va a hacer los platos hoy ' emma_lava 'veces'\n```\n\nAhora puedes copiar\
                    \ las l√≠neas 3 a 5 unas cuantas veces (por ejemplo, 7 para toda la semana) para calcular para toda la semana otra vez. \n¬øPuedes hacer el c√≥digo para toda la semana?\n"
                story_text_2: |
                    Si tienes muy mala suerte, ¬°el programa anterior puede que te elija para lavar los platos toda la semana! ¬°Eso no es justo!
                    Para crear un sistema mas justo puedes utilizar el comando `{remove}` para eliminar la persona elegida de la lista. De esta forma no tendr√°s que lavar los platos hasta que todos hayan hecho un turno.

                    ¬°Lunes y martes ya est√°n a√±adidos! ¬øPuedes a√±adir el resto de la semana?
                    Y ¬øpuedes dar con una soluci√≥n para cuando la lista est√© vac√≠a?
                example_code_2: "```\npersonas = mam√°, pap√°, Emma, Sof√≠a\nlavavajillas = personas {at} {random}\n{print} 'El lunes los platos ser√°n lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\nlavavajillas = personas {at} {random}\n{print} 'El martes los platos ser√°n lavados por\
                    \ ' lavavajillas \n{remove} lavavajillas {from} personas\n```\n"
                start_code: '{print} ''¬øQui√©n lavar√° los platos?'''
            7:
                story_text: |
                    Con `{repeat}` puedes repetir partes del c√≥digo. Puedes usarlo para calcular qui√©n va a lavar los platos por varios d√≠as!
                    ### Ejercicio
                    Usa el comando de `{repeat}` para decidir quien debe lavar los platos toda la semana. ¬°Cada espacio en blanco debe rellenarse con un comando o numero!
                    **Extra** ¬øPuedes pensar en otras tareas para la casa? Adapta el c√≥digo para que decida sobre tres tareas dom√©sticas. !No te olvides mostrar de que tareas se tratan!
                example_code: |
                    ```
                    gente = mam√°, pap√°, Emma, Sof√≠a
                    {repeat} _ _ {print} 'el lavaplatos es ' _
                    ```
                start_code: '{print} ''¬øQuien lavar√° los platos esta semana?'''
            10:
                story_text: |
                    En este nivel puedes hacer un horario de lavado de platos de forma f√°cil.

                    ### Ejercicio
                    Agrega una tarea secundaria, como aspirar o planchar, y aseg√∫rate que tambi√©n est√© dividida para toda la semana.
                    <br>**Extra** El programa no es justo, puedes tener mala suerte y lavar toda la semana. ¬øC√≥mo puedes hacer el programa m√°s justo?
                example_code: |
                    ```
                    d√≠as = Lunes, Martes, Mi√©rcoles, Jueves, Viernes, S√°bado, Domingo
                    nombres = mam√°, pap√°, Emma, Sof√≠a
                    {for} d√≠a {in} d√≠as
                        {print} nombres {at} {random} ' Har√° los platos el ' d√≠a
                    ```
                start_code: |
                    d√≠as = lunes, martes, mi√©rcoles, jueves, viernes, s√°bado, domingo
                    nombres = mam√°, pap√°, Emma, Sophie
                    {for} d√≠a {in} d√≠as
                        {print} nombres {at} {random} ' lava los platos el ' d√≠a
    elif_command:
        name: '{elif}'
        default_save_name: sinosi
        description: sinosi
        levels:
            17:
                story_text: |
                    En este nivel tambi√©n puedes usar un comando nuevo: `{elif}`. `{elif}` es la abreviatura para `{else}` `{if}` y lo necesitas cuando quieres hacer 3 (o m√°s) opciones.
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    premios = ['1 mill√≥n de d√≥lares', 'una tarta de manzana', 'nada']
                    tu_premio = premios[{random}]
                    {print} 'Ganaste ' tu_premio
                    {if} tu_premio == '1 mill√≥n de d√≥lares' :
                        {print} '¬°S√≠! ¬°Eres rico!'
                    {elif} tu_premio == 'una tarta de manzana' :
                        {print} '¬°Delicioso, una tarta de manzana!'
                    {else}:
                        {print} 'M√°s suerte la pr√≥xima vez..'
                    ```
                start_code: |-
                    premios = ['1 mill√≥n de d√≥lares', 'una tarta de manzana', 'nada']
                    tu_premio = premios[{random}]
                    {print} 'Ganaste ' tu_premio
                    {if} tu_premio == '1 mill√≥n de d√≥lares' :
                        {print} '¬°S√≠! ¬°Eres rico!'
                    {elif} tu_premio == 'una tarta de manzana' :
                        {print} '¬°Delicioso, una tarta de manzana!'
                    {else}:
                        {print} 'M√°s suerte la pr√≥xima vez..'
    for_command:
        name: '{for}'
        default_save_name: para
        description: comando para
        levels:
            10:
                story_text: |-
                    ## Para
                    En este nivel aprendemos un nuevo c√≥digo llamado `{for}`. Con `{for}` puedes hacer una lista y usar todos los elementos.
                    `{for}` crea un bloque, como `{repeat}` y `{if}` as√≠ todas las l√≠neas dentro del bloque necesita empezar con 4 espacios.
                example_code: |
                    ```
                    animales {is} perro, gato, pez globo
                    {for} animal {in} animales
                        {print} 'Yo amo ' animal
                    ```
                start_code: |-
                    animales {is} perro, gato, pez globo
                    {for} animal {in} animales
                        {print} 'Yo amo ' animal
            11:
                story_text: |-
                    En este nivel, a√±adimos una nueva forma del `{for}`. En niveles anteriores, usamos `{for}` con una lista, pero tambi√©n podemos usar `{for}` con n√∫meros.
                    Esto lo hacemos a√±adiendo un nombre de variable, seguido por `{in}` `{range}`. Entonces escribimos el n√∫mero en el que empezar, `{to}` y el n√∫mero en el que terminar.

                    ¬°Prueba este ejemplo a ver qu√© pasa! Otra vez en este nivel, tendr√°s que usar sangr√≠as en las l√≠neas situadas debajo de las sentencias `{for}`.
                example_code: |
                    ```
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Listos o no, all√≠ voy.'
                    ```
                start_code: |-
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Listo o no. ¬°All√° voy!'
            17:
                story_text: |
                    Ahora vamos a cambiar la sangr√≠a un poco. Cada vez que necesitemos una sangr√≠a, necesitamos `:` en la l√≠nea antes de la sangr√≠a.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '¬°Preparado o no, all√° voy!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '¬°Preparado o no, all√° voy!'
    fortune:
        name: El adivino
        default_save_name: El adivino
        description: Deja que Hedy prediga el futuro
        levels:
            1:
                story_text: |
                    ¬øAlguna vez has estado en un carnaval y un adivino ha predicho tu futuro? ¬øO alguna vez has jugado con una bola m√°gica de ocho?
                    Entonces probablemente sepas que realmente no pueden predecir tu futuro, ¬°pero sigue siendo divertido jugar!

                    ¬°En los pr√≥ximos niveles puedes aprender a crear tu propia m√°quina de la fortuna!
                    En el nivel 1 puedes comenzar f√°cil dejando que Hedy se presente como adivina y dejes que haga `{echo}` de las respuestas de los jugadores.
                    As√≠:
                example_code: |
                    ```
                    _¬°Hola, soy Hedy la adivina!
                    _ ¬øQui√©n eres t√∫?
                    _ D√©jame echar un vistazo en mi bola de cristal.
                    _ Veo... Veo...
                    _ Tu nombre es
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada y rellena los espacios en blanco para hacer que tu c√≥digo funcione.
                    **Extra** Cambia el c√≥digo y deja que el adivino no s√≥lo prediga tu nombre, sino tambi√©n tu edad, tu equipo favorito de deporte o cualquier otra cosa sobre ti mismo.
                start_code: '# pon tu c√≥digo aqu√≠'
            3:
                story_text: |
                    En los niveles anteriores has creado tu primera m√°quina de la fortuna, pero Hedy realmente no pod√≠a predecir nada, s√≥lo `{echo}`.
                    En este nivel puedes utilizar una variable y el comando `{at} {random}` para dejar que Hedy escoja una respuesta para ti. Mira este c√≥digo, por ejemplo:
                example_code: |
                    ```
                    {print} ¬°Soy Hedy el adivino!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esto es lo que quieres saber: pregunta
                    respuestas {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuestas {at} {random}
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora Hedy s√≥lo puede responder si, no o quiz√°s. ¬øPuedes darle m√°s opciones a Hedy, como 'sin duda' o 'pregunta de nuevo'.
                start_code: '# pon tu c√≥digo aqu√≠'
            4:
                story_text: |
                    Este nivel no tiene funciones nuevas, pero te permite practicar usando las comillas.
                    Puedes rehacer tu c√≥digo del nivel 3, ¬°y asegurarte de a√±adir las comillas en los lugares correctos!

                    Ten en cuenta que en el nivel 3 no pod√≠amos usar la palabra 'pregunta' como el nombre de la variable y una palabra normal que pod√≠a ser mostrada en pantalla.
                    ¬°Las comillas en el nivel 4 hacen que eso sea posible!

                    ### Ejercicio
                    Hemos eliminado todas las comillas del c√≥digo de ejemplo, ¬øpuedes a√±adirlas en todos los lugares correctos?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia tu c√≥digo del adivino. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los puntos correctos.
                example_code: |
                    ```
                    _ Agrega las comillas a este c√≥digo _
                    {print} ¬°Soy Hedy la adivina!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esta es tu pregunta:  pregunta
                    respuesta {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuesta {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            5:
                story_text: |
                    ### Ejercicio
                    En este c√≥digo de ejemplo ver√°s como hacer un programa adivino que te permita inclinar las posibilidades a tu favor. Este programa de trampas siempre te dice que vas a ganar la loter√≠a, pero tus amigos nunca ganar√°n.

                    Usa esto para hacer tu propio programa, ¬°s√© creativo! Por ejemplo puedes crear un c√≥digo que prediga que:
                    * ¬°tu equipo favorito vencer√° a todos sus rivales!
                    * ¬°se elegir√° tu pel√≠cula favorita para la pel√≠cula de la noche!
                    * ¬°ganas entrada para tu espect√°culo favorito!
                    * eres el m√°s hermoso de todos, como el espejo m√°gico de Blancanieves.
                    ¬°Deja que tu imaginaci√≥n haga el trabajo!

                    Tu programa tiene que ser de al menos 10 l√≠neas de c√≥digo y tiene que tener al menos un comando `{if}` y `{else}`.
                example_code: |
                    ```
                    amigos {is} Jordan, Luc√≠a, David
                    {print} '¬°Puedo predecir si ganar√°s ma√±ana la loter√≠a!'
                    persona {is} {ask} '¬øQui√©n eres?'
                    respuesta_buena {is} ¬°Hurra! ¬°Ganaste!, ¬°Seguro que ganar√°s!, ¬°Tenemos un ganador!
                    respuesta_mala {is} ¬°Mala suerte! ¬°Int√©ntalo de nuevo!, ¬°Otra persona ganar√°, T√∫ perder√°s!
                    {if} persona {in} amigos {print} respuesta_buena {at} {random}
                    {else} {print} respuesta_mala {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            6:
                story_text: |
                    En este nivel puedes usar matem√°ticas para en tus predicciones de adivino. Esto te permite crear f√≥rmulas (bobas) para calcular el futuro.
                    Por ejemplo, puedes calcular cu√°n rico vas a ser o cuantos ni√±os vas a tener cuando crezcas.



                    ### Ejercicio
                    ¬øPuedes pensar en tu (boba) m√°quina adivina?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy el adivino!'
                    {print} '¬°Puedo predecir cu√°ntos hijos tendr√°s cuando crezcas!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    hermanos = {ask} '¬øCu√°ntos hermanos tienes?'
                    altura = {ask} '¬øQu√© altura tienes en cent√≠metros?'
                    ni√±os = altura / edad
                    ni√±os = ni√±os - hermanos
                    {print} 'Tendr√°s...'
                    {sleep}
                    {print} ni√±os ' ni√±os!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            7:
                story_text: |
                    ### Ejercicio
                    Completa este programa que te dice si tu romance te quiere o no.
                example_code: |
                    ```
                    {print} 'Tengo una flor con p√©talos m√°gicos'
                    {print} 'Si coges los p√©talos la flor te dir√° si tu amor tambi√©n te querr√°'
                    cantidad = {ask} '¬øCu√°ntos p√©talos quieres coger?'
                    opciones = te quiere, no te quiere
                    _ _ _ _ opciones {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            8:
                story_text: |
                    !En el siguiente ejemplo puedes hacer que tu adivino haga varias preguntas y tambi√©n que las imprima!

                    ### Ejercicio
                    ¬øPuedes poner los comandos correctos en los huecos en blanco?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy la adivina!'
                    {print} 'Puedes hacerme 3 preguntas'
                    respuestas = s√≠, no, quiz√°s
                    _ _ _
                       pregunta = {ask} '¬øQue quieres saber?'
                       {print} pregunta
                       {sleep}
                       {print} 'Mi bola de cristal dice...' respuestas {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            10:
                story_text: |
                    En este nivel aprender√°s a programar el juego MACC (mansi√≥n, apartamento, caba√±a, casa). En este juego puedes predecir para todos los jugadores a la vez, cu√°l ser√° su futuro.

                    ### Ejercicio
                    Llena los huecos en blanco usando el nuevo comando que has aprendido en este nivel.
                example_code: |
                    ```
                    casas = mansi√≥n, apartamento, caba√±a, casa
                    ama = nadie, alguien de la realeza, su vecino, su verdadero amor
                    mascotas = perro, gato, elefante
                    nombres = Jenna, Ryan, Jim
                    _
                        {print} nombre ' vive en una ' casas {at} {random}
                        {print} nombre ' se casar√° con ' ama {at} {random}
                        {print} nombre ' tendr√° un ' mascotas {at} {random} ' como su mascota.'
                        {sleep}
                    ```
                start_code: '# Escribe tu c√≥digo aqu√≠'
            12:
                story_text: "Desde el nivel 12, tendr√°s que usar comillas en las listas, antes y despu√©s de cada elemento.\n\n### Ejercicio \nA√±ade dos predicciones a la lista"
                example_code: |
                    ```
                    fortuna = 'te resbalar√°s en una c√°scara de pl√°tano', _
                    {print} 'Echar√© un vistazo a tu futuro en mi bola de cristal.'
                    {print} 'Veo... Veo...'
                    {sleep}
                    {print} tu fortuna {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Aventuras de Harry Potter
        levels:
            10:
                story_text: |
                    ### Ejercicio
                    Tambi√©n podemos hacer un adivino ambientado en Harry Potter. Rellena los huecos en blanco de forma que se impriman 9 l√≠neas.
                    **Extra** Cambia la tem√°tica del adivino a algo distinto, como tu libro, pel√≠cula o espect√°culo de la tele favoritos.
                example_code: |
                    ```
                    casas = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    asignaturas = pociones, defensa frente a artes oscuras, encantos, transfiguraci√≥n
                    miedos = Voldemort, ara√±as, fallar tu examen de LECHUZA
                    nombres = Harry, Ron, Hermione
                    _
                    _ {print} nombre ' pertenece a ' casas {at} {random}
                    _ {print} nombre ' es mejor en ' asignaturas {at} {random}
                    _ {print} nombre ' su gran miedo es ' miedos {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    haunted:
        name: La Casa Embrujada
        default_save_name: La Casa Embrujada
        description: Escapa de la casa embrujada
        levels:
            1:
                story_text: |
                    En esta aventura vas a a empezar a hacer un juego en el cual necesitas escapar de una casa embrujada escogiendo la puerta correcta.
                    Si escoges la puerta correcta vas a sobrevivir, pero sino un terrible monstruo podr√≠a...

                    En el nivel 1 vamos a empezar nuestro juego de la casa embrujada haciendo una historia de terror y preguntando al jugador que ven en la casa embrujada.
                example_code: |
                    ```
                    {print} ¬øC√≥mo llegu√© aqu√≠?
                    {print} Recuerdo que mi amigo me estaba diciendo que fu√©ramos a la mansi√≥n...
                    {print} y de repente todo se volvi√≥ negro.
                    {print} ¬øPero como termine en el suelo...?
                    {print} ¬°Mi cabeza me duele como si me hubieran golpeado con un bate de baseball!
                    {print} ¬øQu√© es ese sonido?
                    {print} Oh no! ¬°Siento que no estoy solo en esta casa!
                    {print} ¬°Necesito salir de aqu√≠!
                    {print} Hay 3 puertas...
                    {ask} ¬øCu√°l puerta deber√≠a escoger?
                    {echo} Escoge la puerta
                    {print} ‚Ä¶?
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo a tu entrada de pantalla haciendo clic en el bot√≥n amarillo.
                    Ahora completa la historia a√±adiendo al menos 5 l√≠neas de c√≥digo.
                    Recuerda que cada l√≠nea de c√≥digo empiece con un comando `{print}` .
                start_code: '{print} ¬øC√≥mo llegue aqu√≠?'
            2:
                story_text: |
                    En esta casa embrujada puedes escoger tus monstruos con emojis. Claro que tambi√©n puedes usar palabras.
                example_code: |
                    ```
                    monstruo_1 {is} üëª
                    monstruo_2 {is} ü§°
                    monstruo_3 {is} üë∂
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En el ejemplo de arriba los monstruos est√°n predeterminados. De forma que cada vez que ejecutas tu c√≥digo, el resultado es el mismo.
                    ¬øPuedes agregar un comando `{ask}` para hacer que interactiva la casa embrujada y dejar que los jugadores escojan que monstruos se encuentran?
                example_code_2: |
                    ```
                    monstruo_1 {is} _
                    monstruo_2 {is} _
                    monstruo_3 {is} _
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
                start_code: monstruo1 {is} _
            3:
                story_text: |
                    En los niveles anteriores hiciste la introducci√≥n al juego de la casa embrujada, pero como te habr√°s dado cuenta, la historia siempre termina en un final tenebroso.
                    En este nivel puedes hacer que tu historia sea m√°s interactiva cambiando el resultado del juego; ¬°algunas veces te comer√°n, otras veces escapar√°s!
                    ¬°Deja que Hedy decida aleatoriamente!

                    ### Ejercicio
                    Copia los c√≥digos de ejemplo y rellena los espacios ¬°para hacerlo funcionar!

                    **Extra** Esta historia es bastante sencilla, tal vez puedes asustarla m√°s a√±adiendo una historia m√°s emocionante.
                    Adem√°s ahora mismo tienes finales muy limitados, s√≥lo hay 3 opciones sobre que hay detr√°s de las puertas. ¬°Quiz√° puede pensar en m√°s monstruos para a√±adir a la lista!
                example_code: |
                    ```
                    _ ¬°Escapa de la casa embrujada!
                    _ Hay 3 puertas delante de ti‚Ä¶
                    _ _ _ ¬°Qu√© puerta eliges?
                    _ Elegiste ‚Ä¶ opci√≥n
                    monstruos _ a zombi, a vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    _ Mira...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            4:
                story_text: |
                    En este nivel vas a aprender como usar comillas en tus juegos.

                    ### Ejercicio
                    ¬øPuedes hacer que tu Casa Encantada resistente al nivel 4?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu casa embrujada. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los lugares adecuados.
                example_code: |
                    ```
                    _ A√±ade comillas a este c√≥digo _
                    {print} ¬°Escapa de la casa encantada!
                    {print} Hay 3 puertas delante de ti‚Ä¶
                    elecci√≥n {is} {ask} ¬øQu√© puerta eliges?
                    {print} Escogiste ‚Ä¶ elecci√≥n
                    monstruo {is} un zombi, un vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    {print} Ves...
                    {sleep}
                    {print} monstruo {at} {random}
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            5:
                story_text: |
                    Hasta este nivel el juego de la casa encantada siempre preguntaba al jugador que eligiera una puerta, pero como puede que te hayas dado cuenta los jugadores no necesitaban responder correctamente.
                    Si el jugador respond√≠a algo aleatorio, el juego funcionar√≠a igual y el jugador ¬°puede que hasta ganase! (pese a que no eligiese una puerta).
                    En este nivel, solo podr√°s ganar el juego si eliges la puerta que Hedy eligi√≥ de forma aleatoria.

                    ### Ejercicio
                    ¬øPuedes encontrar las cuatro palabras faltantes para completar el c√≥digo?
                example_code: |
                    ```
                    {print} '¬°Escapa de la casa encantada!'
                    {print} 'Hay tres puertas frente a ti...'
                    puertas {is} 1, 2, 3
                    monstruos {is} hombre lobo, momia, vampiro, zombi
                    puerta_elegida {is} {ask} '¬øQu√© puerta eliges?'
                    {print} 'Has elegido la puerta...' puerta_elegida
                    {sleep}
                    puerta_correcta {is} puertas {at} {random}
                    _ _ _ _ {print} '¬°Genial! ¬°Has escapado!'
                    {else} {print} '¬°O no! Te ha comido un...' monstruos {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            9:
                story_text: |
                    En este nivel puedes usar anidaciones, ¬°lo que te permite hacer tu casa encantada incluso m√°s interactiva!

                    ### Ejercicio
                    Ahora este juego es muy dif√≠cil de vencer, ¬ølo puedes hacer m√°s f√°cil de ganar?
                    ¬øCambias tu c√≥digo para que s√≥lo tenga una puerta incorrecta y dos correctas en vez de una correcta y dos incorrectas?
                    Consejo: Esto significa cambiar tu variable puerta_correcta a puerta_incorrecta, y cambiar el c√≥digo `{if}` y `{else}` .
                    Y claro que puedes cambiar la historia y hacerla a tu manera. ¬°Cambia los monstruos o convi√©rtelo en un concurso donde recibir√°s un regalo!
                example_code: |
                    ```
                    {print} 'Escape de la Casa Embrujada!'
                    jugador = vivo
                    puertas = 1, 2, 3
                    monstruos = zombi, vampiro, ara√±a gigante
                    {repeat} 3 {times}
                        {if} jugador {is} vivo
                            puerta_correcta {is} puertas {at} {random}
                            {print} 'Hay 3 puertas...'
                            puerta_escogida = {ask} '¬øQu√© puerta quieres escoger?'
                            {if} puerta_escogida {is} puerta_correcta
                                {print} '¬°No hay monstruos aqu√≠!'
                            {else}
                                {print} 'Te comi√≥ un ' monstruos {at} {random}
                                jugador = muerto
                        {else}
                            {print} 'JUEGO TERMINADO'
                    {if} jugador {is} vivo
                        {print} '¬°Genial! ¬°Sobreviviste!'
                    ```
                start_code: '{print} ''¬°Escapa de la casa encantada!'''
            11:
                story_text: "En este nivel hemos cambiado el comando `{for}` para que podamos decirle al jugador donde est√°n. \n\n### Ejercicio 1\nCompleta el programa para que el jugador sepa en qu√© habitaci√≥n est√°n.\n\n### Ejercicio 2\nConvierte el programa en una aventura siguiendo estos pasos:\n\n\
                    1. Haz una lista de opciones (como: pelear o volar)\n2. Aseg√∫rate que el jugador puede elegir una opci√≥n con `{ask}`\n3. ¬øEs la respuesta correcta? Entonces pueden pasar al siguiente monstruo. ¬øDieron una respuesta incorrecta? H√°zselo saber con un `{print}`. \n\n**Extra** Si haces\
                    \ una opci√≥n incorrecta, ¬°se sigue mostrando un monstruo! ¬øC√≥mo cambiar√≠as eso?\n"
                example_code: |
                    ```
                    {print} '¬°Escapa de la Casa Encantada!'
                    monstruos = zombi, vampiro, ara√±a gigante
                    _
                        {print} '¬°Habitaci√≥n ' i
                        monstruo = monstruos {at} {random}
                    ```
                start_code: '{print} ''¬°Escapa de la casa encantada!'''
            14:
                story_text: |
                    En este nivel puedes usar los s√≠mbolos `<` y `>` para introducir vidas a tu juego.
                example_code: |
                    ```
                    {print} 'Escape de la Casa Embrujada'
                    vidas = 3
                    puertas = 1, 2, 3
                    monstruos = 'la bruja malvada', 'un zombi', 'un perro de 3 cabezas durmiendo'
                    {for} i {in} {range} 1 {to} 10
                        {if} vidas > 0
                            puerta_buena = puertas {at} {random}
                            monstruo = monstruos {at} {random}
                            puerta_escogida = {ask} '¬øQue puerta escoges?'
                            {if} puerta_buena == puerta_escogida
                                {print} 'Has escogido la puerta correcta'
                            {else}
                                {print} 'Ves un...' monstruo
                                {if} monstruo == 'un perro de 3 cabezas durmiendo'
                                    {print} 'Fiiiuuuuu.... Esta durmiendo'
                                {else}
                                    {print} 'Pierdes una vida'
                                    vidas = vidas -1
                        {else}
                            {print} 'JUEGO TERMINADO'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            16:
                story_text: |
                    Este juego de la casa embrujada usa la conexi√≥n entre las listas que aprendiste a usar en este nivel.
                    Por ejemplo: todas las caracter√≠sticas que pertenecen al primer zombi est√°n todas en las listas, la segunda para la bruja y la tercera para el vampiro.
                    ¬°√âchale un vistazo al c√≥digo!
                example_code: |
                    ```
                    n√∫meros = [1, 2, 3]
                    i = n√∫meros[{random}]
                    pista = ['gru√±ido', 'carcajada', 'aleteo de alas de murci√©lago']
                    monstruos = ['zombi', 'bruja', 'vampiro']
                    mala_suerte = ['Se come tu cerebro', 'Est√°s maldito para siempre', 'Te muerden']
                    buena_suerte = ['Lanzas el jam√≥n. El zombi se distrae y empieza a com√©rselo.', 'Prendes fuego a las cortinas. La bruja huye por miedo al fuego', 'El vampiro odia el ajo y huye']
                    armas = ['jam√≥n', 'mechero', 'ajo']
                    {print} 'Est√°s delante de una vieja mansi√≥n'
                    {print} 'Algo no est√° bien aqu√≠'
                    {print} 'Oyes ' pista[i]
                    {print} 'Vas a explorarlo'
                    {print} 'Entras en la cocina y ves un mechero, un jam√≥n crudo y un ajo.'
                    tu_arma = {ask} '¬øQu√© llevas contigo?'
                    {print} 'Entras en el sal√≥n con ' tu_arma
                    {print} 'All√≠ encuentras un ' monstruos[i]
                    arma_necesaria = armas[i]
                    {if} tu_arma == arma_necesaria
                        {print} 'Usas tu ' tu_arma
                        {print} buena_suerte[i]
                        {print} '¬°GANASTE!'
                    {else}
                        {print} 'Has elegido el arma equivocada...'
                        {print} mala_suerte[i]
                        {print} 'PERDISTE'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    if_command:
        name: '{if} & {else}'
        default_save_name: comando_si
        description: Introducci√≥n al comando si
        levels:
            5:
                story_text: |
                    ## Si‚Ä¶ sino‚Ä¶.
                    En el nivel 4 hay algo nuevo, !`{if}`! Con `{if}` puedes elegir entre dos opciones diferentes.
                    Este c√≥digo imprime genial si pones Hedy como nombre, y boo! si pones cualquier otra cosa.
                    `{ask}` y `{print}` todav√≠a funcionan como hicieron en el nivel 4.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øc√≥mo te llamas?'
                    {if} nombre {is} Hedy {print} 'genial' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    A veces el c√≥digo con un `{if}` se alarga mucho y no encaja bien en una l√≠nea. <br> tambi√©n puedes dividir el c√≥digo en dos l√≠neas, empezando la segunda l√≠nea en el `{else}` tal que as√≠:
                example_code_2: |
                    ```
                    nombre {is} {ask} '¬øcu√°l es tu nombre?'
                    {if} nombre {is} Hedy {print} 'genial'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Ejercicio
                    Intenta crear tu propio c√≥digo con `{if}` y `{else}`. Si quieres puedes usar el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    respuesta {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ '¬°Gran trabajo!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    nombre {is} {ask} '¬°cu√°l es tu nombre?'
                    {if} nombre {is} Hedy {print} 'genial'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## Si‚Ä¶ Sino‚Ä¶
                    Has aprendido a repetir un bloque de l√≠neas de c√≥digo tras un comando `{repeat}`.
                    Ahora puedes usar la sangr√≠a para hacer bloques tras un comando {if} o {else}.
                    Comprueba el c√≥digo de ejemplo.

                    ### Ejercicio
                    A√±ade un comando {else} al c√≥digo de ejemplo. Haz un bloque de l√≠nea usando sangr√≠a. Haz esto empezando cada l√≠nea con 4 espacios.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øC√≥mo te llamas?'
                    {if} nombre {is} Hedy
                        {print} 'Bienvenido Hedy'
                        {print} '¬°Puedes jugar en tu ordenador!'
                    ```
                start_code: |
                    nombre {is} {ask} '¬øC√≥mo te llamas?'
                    {if} nombre {is} Hedy
                        {print} 'Bienvenido Hedy'
                        {print} '¬°Puedes jugar en tu ordenador!'
            9:
                story_text: |
                    En este nivel tambi√©n puedes poner un comando {if} dentro de otro comando {if}.
                example_code: "continuar = {ask} \"¬øDeseas continuar?\n{if} continuar = s√≠\n    seguro = {ask} '¬øEst√°s seguro?'\n    {if} seguro {is} s√≠\n        {print} 'Continuamos' \n    {else}\n        {print} 'No est√°s seguro'\n{else}\n    {print} 'No deseas continuar'\n"
                start_code: |
                    continuar = {ask} '¬øDeseas continuar?'
                    {if} continuar = s√≠
                        seguro = {ask} '¬øEst√° seguro?'
                        {if} seguro {is} s√≠
                            {print} 'Continuaremos'
                        {else}
                            {print} 'No est√°s seguro'
                    {else}
                        {print} 'No deseas continuar'
    in_command:
        name: '{in}'
        default_save_name: comando_en
        description: Introducci√≥n al comando en
        levels:
            5:
                story_text: |
                    ## Listas
                    Cuando queremos comprobar si algo se encuentra en una lista, podemos usar el comando `{in}`.
                    Este c√≥digo imprime ¬°bonito! si eliges verde o amarillo, y meh en caso contrario.
                example_code: |
                    ```
                    colores_bonitos {is} verde, amarillo
                    color_favorito {is} {ask} '¬øCu√°l es tu color favorito?'
                    {if} color_favorito {in} colores_bonitos {print} '!bonito!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Ejercicio
                    Completa el c√≥digo de ejemplo rellenando los huecos en blanco con los comandos que aprendiste.
                    Cuando completes el c√≥digo, intenta crear por ti mismo un c√≥digo y usa una pregunta que se te haya ocurrido.
                example_code_2: |
                    ```
                    animales es perro, vaca, oveja
                    respuesta es preguntar '¬øCu√°l es tu animal preferido?'
                    _ respuesta _ animales _ '¬°Tambi√©n el m√≠o!'
                    _ _ 'Mis animales preferidos son perros, vacas y ovejas'
                    ```
                start_code: |-
                    colores_bonitos {is} verde, amarillo
                    color_favorito {is} {ask} '¬øCu√°l es tu color preferido?'
                    {if} color_favorito {in} colores_bonitos {print} '¬°bonito!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: comando_es
        description: introducci√≥n al comando es
        levels:
            2:
                story_text: |
                    ## Variables
                    Puedes nombrar una palabra con `{is}`. A esto se le llama **variable**. En este ejemplo creamos una variable llamada nombre y una variable llamada edad. Puedes usar la palabra nombre en cualquier parte de tu c√≥digo y ser√° reemplazada por Hedy, tal que as√≠:
                example_code: |
                    ```
                    nombre {is} Hedy
                    edad {is} 15
                    {print} nombre tiene edad a√±os
                    ```
                story_text_2: |
                    ### Ejercicio
                    ¬°Hora de crear tus propias variables!
                    En el c√≥digo de ejemplo hicimos un ejemplo de la variable `favorite_animals`. En la l√≠nea 1 se crea la variable, y en la l√≠nea 2 usamos la variable en un comando `{print}`.
                    Lo primero de todo, termina nuestro ejemplo rellenando tu animal favorito en el hueco en blanco. Despu√©s haz 3 c√≥digos como estos por ti mismo. Elige una variable, y establece la variable con el comando `{is}`. Entonces √∫sala con un comando `{print}`, como hicimos.
                example_code_2: |
                    ```
                    animales_favoritos {is} _
                    {print} me gusta animales_favoritos
                    ```
                start_code: |-
                    nombre {is} Hedy
                    edad {is} 15
                    {print} nombre tiene edad a√±os
            6:
                story_text: |
                    ¬°Tambi√©n hacemos un cambio al almacenar una palabra en una variable! Ahora se puede utilizar `=` en lugar de `{is}` cuando almacenamos un nombre o un n√∫mero en una variable, as√≠:
                example_code: |
                    ```
                    nombre = Hedy
                    respuesta = 20 + 4
                    ```
                start_code: |
                    nombre = Hedy
                    respuesta = 20 + 4
            14:
                story_text: |
                    Vamos a aprender m√°s cosas nuevas. Quiz√° ya las conozcas de matem√°ticas, el `<` y `>`.
                    El `<` comprueba si el primer n√∫mero es menor que el segundo, por ejemplo edad `<` 12 comprueba si edad es menor que 12.
                    Si quieres comprobar si el primer n√∫mero es menor o igual que el segundo, puedes usar `<=`, por ejemplo edad `<=` 11.
                    El `>` comprueba si el primer n√∫mero es mayor que el segundo, por ejemplo puntos `>` 10 comprueba si puntos es mayor que 10.
                    Si quieres comprobar si el primer n√∫mero es mayor o igual que el segundo, puedes usar `>=`, por ejemplo puntos `>=` 11.
                    Usa estas comparaciones en un `{if}`, tal que as√≠:
                example_code: |
                    ```
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {if} edad > 12
                        {print} '¬°Eres mayor que yo!'
                    ```
                story_text_2: |
                    A partir de este nivel, si quieres comparar exactamente, puedes usar dos signos de igualdad. Esto es lo que hacen la mayor√≠a de los lenguajes de programaci√≥n:
                example_code_2: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre == 'Hedy'
                        {print} '¬°C√≥mo molas!'
                    ```
                story_text_3: |
                    Tambi√©n puedes comparar si algo *no* es igual a otra cosa usando `!=` tal que as√≠:
                example_code_3: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre != 'Hedy'
                        {print} 'Tu no eres Hedy'
                    ```
                start_code: |-
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {if} edad < 13
                        {print} '¬°Eres m√°s joven que yo!'
                    {else}
                        {print} '¬°Eres mayor que yo!'
    language:
        name: Idioma
        default_save_name: Idioma
        description: Practica palabras en otro idioma
        levels:
            5:
                story_text: |
                    Haz tu propio programa para practicar tu vocabulario en un nuevo idioma.

                    ### Ejercicio
                    Haz tu c√≥digo m√°s largo a√±adiendo al menos 3 palabras m√°s para que las aprenda el jugador.
                    **Extra** Por supuesto, puedes elegir un idioma distinto al franc√©s. Puedes cambiar tu c√≥digo a cualquier idioma que te gustar√≠a aprender.
                example_code: |
                    ```
                    {print} '¬°Aprende Franc√©s!'
                    gato {is} {ask} 'üê±'
                    {if} gato {is} chat {print} '¬°Muy bien!'
                    {else} {print} 'No, gato es chat'
                    rana {is} {ask} 'üê∏'
                    {if} rana {is} granillo {print} '¬°Guau! ¬°Genial!'
                    {else} {print} 'No, rana es granillo'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            16:
                story_text: |
                    Crea tu propio programa para practicar tu vocabulario en un idioma nuevo.
                example_code: |
                    ```
                    palabras_francesas = ['bonjour', 'ordinateur', 'pomme de terre']
                    traducci√≥n = ['hola', 'computadora', 'papa']
                    puntuaci√≥n = 0
                    {for} i {in} {range} 1 {to} 3
                        respuesta = {ask} '¬øQu√© significa ' palabras_francesas[i] '?'
                        correcta = traducci√≥n[i]
                        {if} respuesta == correcta
                            {print} '¬°Correcto!'
                            puntuaci√≥n = puntuaci√≥n + 1
                        {else}
                            {print} 'No, ' palabras_francesas[i] ' significa ' traducci√≥n[i]
                    {print} 'Tuviste ' puntuaci√≥n ' respuestas correctas.'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    maths:
        name: c√°lculos
        default_save_name: c√°lculos
        description: Introducci√≥n a c√°lculos
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    En este nivel aprender√°s algo nuevo: ahora tambi√©n puedes calcular.

                    La suma es f√°cil, se escribe como en matem√°ticas: `5 + 5` por ejemplo. La resta funciona igual, es `5 - 5`.

                    La multiplicaci√≥n es un poco diferente, porque no hay s√≠mbolo de multiplicar en tu teclado. 'S√≥lo busca, no hay realmente!
                    Eso es porque multiplicamos con el asterisco sobre el 8: `5 * 5`. L√©elo como "5 veces 5" para recordarlo mejor.
                example_code: |
                    ```
                    {print} '5 m√°s 5 es ' 5 + 5
                    {print} '5 menos 5 es ' 5 - 5
                    {print} '5 veces 5 es ' 5 * 5
                    {print} '5 dividido por 5 es ' 5 / 5
                    ```
                start_code: |
                    {print} '5 m√°s 5 es ' 5 + 5
                    {print} '5 menos 5 es ' 5 - 5
                    {print} '5 veces 5 es ' 5 * 5
                    {print} '5 dividido por 5 es ' 5 / 5
            12:
                story_text: |-
                    **N√∫meros decimales**
                    Hasta ahora, Hedy no permit√≠a n√∫meros decimales como 1.5, pero ahora permitimos eso. Ten en cuenta que los ordenadores usan el `.` para los n√∫meros decimales.
                example_code: |
                    ```
                    {print} 'Dos y media m√°s dos y medio es...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'los n√∫meros decimales ahora tienen que usar un punto'
                    {print} 2.5 + 2.5
    parrot:
        name: Loro
        default_save_name: Loro
        description: ¬°Crea tu propia mascota loro que copiar√° lo que digas!
        levels:
            1:
                story_text: |
                    ¬°Crea tu propia mascota online, un loro que copiar√° lo que digas!
                example_code: |
                    ```
                    {print} Soy Hedy la lora
                    {ask} ¬øCu√°l es tu nombre?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Desaf√≠o
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada haciendo clic al bot√≥n amarillo.
                    Haz que el p√°jaro haga una pregunta diferente. ¬°Llena los espacios en el ejemplo!
                    **Extra** Tambi√©n puedes dejar que el p√°jaro hagas mas de una pregunta . Escribe mas l√≠neas de c√≥digo debajo de tu propio c√≥digo.
                example_code_2: |
                    ```
                    {print} Soy Hedy el loro
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Soy Hedy el loro
                    {ask} ¬øC√≥mo te llamas?
                    {echo}
                    {echo}
            2:
                story_text: |
                    En el nivel anterior has hecho un loro que repetir√° todo despu√©s de ti. En este nivel har√°s que el loro interactivo usando una variable y el comando `{ask}`.
                    Tambi√©n haremos el loro m√°s realista a√±adiendo comandos `{sleep}` despu√©s de que diga algo.
                example_code: |
                    ```
                    {print} Soy Hedy el loro
                    nombre _ _ ¬°c√≥mo te llamas?
                    {print} nombre
                    _
                    {print} graznido
                    _
                    {print} nombre
                    ```
                story_text_2: |
                    ### Ejercicio
                    Lo primero de todo, acaba la l√≠nea 2 con un comando `{is}` y un `{ask}`.
                    Despu√©s pon un comando `{sleep}` en la l√≠nea 4 y 6 para dejar al loro tranquilo durante un rato.

                    **Extra** ¬øPuedes hacer que el loro pregunte algo m√°s que tu nombre a√±adiendo m√°s l√≠neas de c√≥digo?
                start_code: '{print} ¬°Soy Hedy el loro!'
            3:
                story_text: |
                    Ense√±a a tu loro una nueva palabra con `{add}`.
                    ### Ejercicio
                    ¬øPuedes a√±adir el comando`{add} {to}` para hacer que el c√≥digo funcione?
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} ¬°Entrena a tu loro!
                    nueva_palabra {is} {ask} ¬øQu√© palabra le quieres ense√±ar?
                    _ nueva_palabra _ palabras
                    {print} üßí Di nueva_palabra, Hedy!
                    {print} ü¶ú palabras {at} {random}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            4:
                story_text: |
                    En este nivel, tenemos que usar comillas con los comandos `{ask}` y`{print}`.
                    ### Ejercicio
                    Completa el c√≥digo poniendo comillas en los espacios.
                example_code: |
                    ```
                    palabras {is} gru√±ir, Hedy
                    {print} _ ¬°Entrena a tu loro! _
                    nueva_palabra {is} {ask} _ ¬øQu√© palabra le quieres ense√±ar? _
                    {add} nueva_palabra {to_list} palabras
                    {print} _ üßí ¬°Di _ nueva_palabra _, Hedy!_
                    {print} _ ü¶ú _ palabras {at} {random}
                    ```
                start_code: '# Escribe tu c√≥digo aqu√≠'
            5:
                story_text: |
                    ¬°Recompensa tu loro si dice la ¬°palabra correcta!

                    ### Ejercicio
                    Finaliza el c√≥digo llenando los 4 comandos que faltan.
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} '¬°Entrena a tu lora'
                    nueva_palabra {is} {ask} '¬øQue palabra le quieres ense√±ar?'
                    {add} nueva_palabra {to_list} palabras
                    palabra_dicha {is} palabras {at} {random}
                    {print} 'üßí Di ' nueva_palabra ', Hedy!'
                    {print} 'ü¶ú ' palabra_dicha
                    _ palabra_dicha {is} nueva_palabra _ 'üßí ¬°Gran trabajo, Hedy!üç™'
                    _ _ 'üßí No, Hedy, di ' nueva_palabra
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    piggybank:
        name: Cerdito hucha
        default_save_name: Cerdito hucha
        description: ¬°Cuenta tu dinero!
        levels:
            12:
                story_text: |
                    En esta aventura aprender√°s como hacer una hucha virtual.

                    ### Ejercicio
                    Termina el c√≥digo para calcular cu√°nto dinero tienes y cuando tiempo debes ahorrar ¬°para comprar lo que quieres!
                    **Extra** ¬øQuiz√°s ya hayas ahorrado algo de dinero? R√©stalo de la cantidad que tendr√°s que ahorrar.
                example_code: |
                    ```
                    {print} '¬°La hucha virtual!'
                    deseo = {ask} '¬øQu√© quieres comprar?'
                    precio = {ask} '¬øCu√°nto cuesta?'
                    ahorrado = {ask} '¬øCu√°nto dinero tienes ahorrado?'
                    paga = {ask} '¬øCu√°nto dinero obtienes por semana?'
                    a_ahorrar = precio - ahorrado
                    semanas = a_ahorrar / paga
                    {print} 'Podr√°s comprar un ' _ ' en ' _ ' semanas.'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            14:
                story_text: |
                    ¬°En este nivel puedes hacer que Hedy te diga si has ahorrado suficiente dinero!
                example_code: |
                    ```
                    dinero = {ask} '¬øCu√°nto dinero has ahorrado?'
                    deseo = {ask} '¬øCu√°nto dinero necesitas?'
                    pagar = {ask} '¬øCu√°nto dinero de bolsillo recibes cada semana?'
                    para_ahorrar = deseo - dinero
                    semanas = para_ahorrar / pagar
                    {if} deseo > dinero
                        {print} '¬°Tienes que ahorrar un poco m√°s!'
                        {print} 'Necesitar√°s ' semanas ' m√°s semanas.'
                    {else}
                        {print} '¬°Genial! Ya tienes suficiente'
                        {print} '¬°Vamos de compras!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    pressit:
        name: Presi√≥nalo
        default_save_name: Presionado
        description: ¬°Intenta vincular una tecla del teclado a un comando!
        levels:
            5:
                story_text: |
                    ¬°En este nivel hay otra nueva palabra clave: `{pressed}`!
                    Con `{pressed}` puedes usar las teclas de tu teclado para controlar qu√© l√≠neas se usar√°n.

                    ### Desaf√≠o
                    Mira el ejemplo y agrega una l√≠nea m√°s de c√≥digo que reaccione al presionar una tecla.
                example_code: |
                    ```
                    {print} '¬øQuieres un final bueno (g) o malo (b)?'
                    {if} g {is} {pressed} {print} 'Vivieron felices para siempre ‚ù§'
                    {else} {print} 'El pr√≠ncipe fue comido por un hipop√≥tamo üò≠'
                    ```
                story_text_2: |
                    Tambi√©n puedes enlazar los comandos de la tortuga a teclas del teclado.

                    ### Desaf√≠o
                    Copia las l√≠neas varias veces para que as√≠ puedas hacer un dibujo m√°s grande.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            7:
                story_text: |
                    Ahora que ya has aprendido acerca de `{repeat}`, podemos presionar las teclas m√∫ltiples veces.
                    Puedes usarlo para hacer que la tortuga camine hacia adelante y gire.

                    ### Ejercicio
                    El c√≥digo que viste en el nivel 5 solamente comprueba la tecla una sola vez. Copia el c√≥digo de ejemplo y agr√©gale un `{repeat}`, as√≠ podr√°s presionar la tecla m√∫ltiples veces.
                    Usa este c√≥digo para dibujar algo bonito.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            9:
                story_text: |
                    Ahora que sabes como combinar sentencias, puedes crear una herramienta de mecanograf√≠a con `{pressed}`

                    ### Ejercicio
                    Completa el c√≥digo. Cada vez se elegir√° una letra al azar, que deber√°s pulsar. Obtienes un punto cuando presionas la tecla correcta, y una deducci√≥n de dos puntos cuando presionas una tecla equivocada.
                    **Extra** Limpia la pantalla tras cada letra, y muestra al usuario cu√°ntos puntos han obtenido.
                example_code: |
                    ```
                    puntos = 0
                    letras = a, b, c, d, e
                    {repeat} 10 {times}
                        letra = _ _ _
                        {print} 'Presiona la letra ' letra
                        {if} letra {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    print_command:
        name: '{print}'
        default_save_name: imprimir
        description: Introducci√≥n al comando imprimir
        levels:
            1:
                story_text: |
                    ## El comando imprimir
                    Puedes imprimir texto por pantalla usando el comando `{print}`.
                example_code: |
                    ```
                    {print} ¬°Hola, programador!
                    {print} ¬°Bienvenido a Hedy!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En Hedy puedes encontrar ejercicios en cada aventura. Un ejercicio te permite practicar los nuevos comandos y conceptos, y te permite darle tu propio toque a los c√≥digos de ejemplo.
                    En este ejercicio ver√°s un espacio en blanco rosa. Tienes que rellenar algo en el lugar del espacio en blanco antes de que se pueda ejecutar tu c√≥digo.

                    Rellena el comando `{print}` en el espacio en blanco y despu√©s a√±ade cinco l√≠neas de c√≥digo. Cada l√≠nea tiene que empezar con un comando `{print}`.
                    ¬°Divi√©rtete!
                example_code_2: |
                    ```
                    _ ¬°Hola!
                    ```
                start_code: |
                    {print} ¬°Bienvenido a Hedy!
            18:
                story_text: |-
                    ¬°Hemos llegado a c√≥digo real de Python! Eso significa que tendremos que usar par√©ntesis con `{print}` y `{range}` de ahora en adelante.
                    Tambi√©n significa que puedes usar el c√≥digo de Hedy desde este nivel en cualquier entorno de Python mientras uses comandos en ingl√©s. Si hasta ahora no lo has hecho, puedes cambiar el interruptor en el men√∫ de comandos para hacerlo.
                example_code: |
                    ```
                    {print}('¬°Hola!')
                    {for} i {in} {range}(1, 10):
                        {print}('Esta es la l√≠nea ', i)
                    ```
                story_text_2: Si quieres imprimir m√°s de una l√≠nea, tienes que separarla por comas.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Hay ', temperatura, ' grados fuera')
                    ```
                story_text_3: El √∫ltimo cambio que tenemos que hacer para conseguir el c√≥digo en Python es cambiar `{ask}` por `{input}`.
                example_code_3: |
                    ```
                    {print}('¬°Mi nombre es Hedy!')
                    nombre = {input}('¬øC√≥mo te llamas?')
                    {print}('As√≠ que te llamas ', nombre)
                    ```
                start_code: |-
                    nombre = 'Hedy'
                    {print}('Mi nombre es ', nombre)
    quizmaster:
        name: Presentador
        default_save_name: Presentador
        description: ¬°Haz tu propio cuestionario!
        levels:
            14:
                story_text: |
                    ¬°En esta aventura puedes hacer tu propio cuestionario! Llena los espacios vac√≠os, ¬°a√±ade m√°s preguntas y disfruta!
                    Puedes hacer un cuestionario sobre lo que quieras: una afici√≥n, tu animal favorito, tu libro favorito o ¬°cualquier otra idea que tengas!
                example_code: |
                    ```
                    {print} 'Haz tu propio cuestionario'
                    puntos_a = 0
                    puntos_b = 0
                    {print} 'Pregunta'
                    {print} 'Respuesta Opci√≥n A'
                    {print} 'Respuesta Opci√≥n A'
                    respuesta = {ask} '¬øCual es la respuesta?'
                    {if} respuesta == 'A'
                        puntos_a = puntos_a + 1
                    {if} respuesta == 'B'
                        puntos_b = puntos_b + 1
                    {print} '¬°Termin√≥ el cuestionario!'
                    {print} '¬°Veamos los resultados!'
                    {if} puntos_a > puntos_b
                        {print} '¬°Perteneces al club A!'
                    {if} puntos_b > puntos_a
                        {print} '¬°Perteneces al club B!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    quotation_marks:
        name: '''comillas'''
        default_save_name: comillas
        description: Introducci√≥n a las comillas
        levels:
            4:
                story_text: |
                    ## 'Comillas'
                    En el nivel 4 `{ask}` y `{print}` han cambiado.
                    Debes poner el texto que quieras imprimir entre comillas.
                    Esto es √∫til, porque puedes imprimir todas las palabras que quieras. Tambi√©n las palabras que sol√≠as almacenar algo con `{is}`.
                    La mayor√≠a de los lenguajes de programaci√≥n tambi√©n usan comillas al imprimir, as√≠ que nos estamos acercando ¬°a la programaci√≥n real!
                example_code: |
                    ```
                    {print} '¬°A partir de ahora tienes que usar las comillas!'
                    respuesta {is} {ask} '¬øQu√© tienes que usar a partir de ahora?'
                    {print} 'Tenemos que usar ' respuesta
                    ```
                story_text_2: |
                    ## Contracciones
                    ¬°Importante! Ten en cuenta que estamos usando comillas, Hedy se confundir√° cuando uses el ap√≥strofe para contracciones como I'm o What's.
                    Aseg√∫rate de eliminar esos ap√≥strofes y cambia la ortograf√≠a a I am o What is.
                    Comprueba el c√≥digo de ejemplo para ver la forma incorrecta de usar los ap√≥strofes.
                example_code_2: |
                    ```
                    _ Esta es la manera incorrecta de usar ap√≥strofes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} '¬°Debes usar comillas a partir de ahora!'
                    answer {is} {ask} '¬øQu√© tenemos que usar a partir de ahora?'
                    {print} 'Necesitamos usar ' answer 'de ahora en adelante'
            12:
                story_text: |
                    **Todos los textos tienen que ir entre comillas**
                    Para este nivel tambi√©n tendr√°s que usar comillas cuando almacenes un texto con `=`:
                example_code: |
                    ```
                    nombre = 'El Robot Hedy'
                    {print} 'Hola ' nombre
                    ```
                story_text_2: |
                    **Todos los objetos en las listas tambi√©n necesitan comillas**
                    Las listas son textos, as√≠ que tambi√©n necesitan comillas. Ten en cuenta que cada objeto en la lista tiene comillas.
                    Esto te permite guardar dos palabras como un objeto en la lista, por ejemplo 'Iron Man'.
                example_code_2: |
                    ```
                    superh√©roes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superh√©roes {at} {random}
                    ```
                story_text_3: |
                    **Todos los textos tras las comparaciones `{if}` tambi√©n necesitan comillas**
                example_code_3: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    {if} nombre = 'El Robot Hedy'
                        {print} '¬°Hola!'
                    ```
                story_text_4: |
                    **Los n√∫meros no necesitan comillas**
                    Para los n√∫meros, no utilizas comillas en el `=`:
                example_code_4: |
                    ```
                    puntuaci√≥n = 25
                    {print} 'Obtuviste ' puntuaci√≥n
                    ```
                start_code: |-
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    {if} nombre = 'El Robot Hedy'
                        {print} '¬°Hola!'
    random_command:
        name: '{random}'
        default_save_name: comando_aleatorio
        description: introducci√≥n al comando aleatorio
        levels:
            3:
                story_text: |
                    ## En aleatorio
                    En este nivel puedes hacer una lista usando el comando `{is}`. Puedes dejar que el ordenador elija un objeto aleatorio de esa lista. Esto se hace con `{at} {random}`.
                example_code: |
                    ```
                    animales {is} perros, gatos, canguros
                    {print} animales {at} {random}
                    ```
                story_text_2: |
                    Tambi√©n puedes usar el comando `{at} {random}` en una frase.
                example_code_2: |
                    ```
                    comida {is} s√°ndwich, trozo de pizza, ensalada, burrito
                    {print} Voy a tomar un/a comida {at} {random} para comer.
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba el comando `{at} {random}` haciendo tu propio espect√°culo (como los de la tele) donde eliges una puerta o maleta y ¬°tendr√° un gran premio!
                    ¬øPuedes hacerlo? Ya hemos puesto las primeras l√≠neas en el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    {print} ¬°El gran espect√°culo!
                    {print} Hay 3 maletas delante tuyo...
                    elegida {is} {ask} ¬øQu√© maleta eliges?
                    premios {is} _
                    _
                    ```
                start_code: |
                    animales {is} perro, gato, canguro
                    {print} animales {at} {random}
            16:
                story_text: |-
                    Vamos a hacer listas a la manera de Python, con corchetes alrededor de las listas! Tambi√©n mantendremos las comillas en cada objeto como hemos aprendido en los niveles anteriores.
                    Usamos corchetes para se√±alar una posici√≥n en una lista. El comando {at} {random} ya no se puede utilizar.
                example_code: |
                    ```
                    amigos = ['Ahmed', 'Ben', 'Cayden']
                    numeros_suerte = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'el n√∫mero de la suerte de ' amigos[i]
                        {print} 'es ' numeros_suerte[i]
                    ```
                start_code: |-
                    amigos = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'el n√∫mero de la suerte de tus ' amigos[i]
                        {print} 'es ' lucky_numbers[i]
    repeat_command:
        name: '{repeat}'
        default_save_name: comando_repetir
        description: comando repetir
        levels:
            7:
                story_text: |
                    ## ¬°Repetir! ¬°Repetir! ¬°Repetir!
                    El nivel 7 a√±ade el comando `{repeat}`.  `{repeat}` se puede usar para ejecutar una l√≠nea de c√≥digo varias veces. Tal que as√≠:

                    ### Ejercicio
                    Juega con el comando repetir. ¬øPuedes ahora hacer la canci√≥n de cumplea√±os feliz en s√≥lo 3 l√≠neas de c√≥digo en vez de en 4?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} '¬°Hedy es divertido!'
                    ```
                start_code: |
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz querido Hedy'
                    {print} 'cumplea√±os feliz'
            8:
                story_text: |
                    ### Repetir comandos y sangr√≠a
                    En este nivel puede repetir varias l√≠neas de c√≥digo con s√≥lo 1 comando repetir.
                    Haz esto haciendo un bloque de l√≠neas que quieras repetir.
                    Las l√≠neas en este bloque necesitar√°n **sangr√≠a** .
                    Eso significa poner cuatro espacios al inicio de cada l√≠nea. Tambi√©n tendr√°s que sangrar cuando quieras crear un bloque de una sola l√≠nea.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hola a todos'
                        {print} 'Todo esto se repite 5 veces'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hola a todos'
                        {print} 'Esto se imprimir√° 5 veces'
            9:
                story_text: |
                    En este nivel no puedes usar varias l√≠neas s√≥lo con `{if}` y `{repeat}`, ¬°pero si puedes juntarlas!
                    En este ejemplo ves un comando `{if}` dentro de un comando `{repeat}`. Tambi√©n se permite lo contrario, y tambi√©n un `{if}` se permite en un `{if}` y un `{repeat}` en un `{repeat}`.
                    ¬°Pru√©balo!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        comida = {ask} '¬øQu√© quieres?'
                        {if} comida {is} pizza
                            {print} '¬°genial!'
                        {else}
                            {print} 'la pizza es mejor'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        comida = {ask} '¬øQu√© quieres?'
                        {if} comida {is} pizza
                            {print} '¬°genial!'
                        {else}
                            {print} 'la pizza es mejor'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: comando_repetir_2
        description: comando repetir 2
        levels:
            7:
                story_text: |
                    ## Repetir con otros comandos y variables
                    Ahora has practicado el comando `{repeat}` en combinaci√≥n con el comando `{print}`, pero ¬øsab√≠as que tambi√©n puedes usar otros comandos con `{repeat}` ?
                    En este ejemplo puedes ver que `{repeat}` tambi√©n se puede usar con un comando `{ask}`, `{if}` o `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} respuesta = {ask} '¬øSab√≠as que puedes hacer una pregunta varias veces?'
                    {if} respuesta {is} s√≠ {repeat} 2 {times} {print} '¬°Ya lo sab√≠as!'
                    {else} {repeat} 3 {times} {print} '¬°Has aprendido algo nuevo!'
                    ```
                story_text_2: |
                    Otra cosa interesante que puedes hacer con el comando `{repeat}` es usar variables para establecer las veces que algo deber√≠a repetirse. En el c√≥digo de ejemplo puedes ver que primero preguntamos a la persona qu√© edad tiene.
                    Entonces, en la l√≠nea 3, la pregunta se repite 'edad' veces. As√≠ que hemos usado la variable 'edad' con el comando `{repeat}`.
                example_code_2: |
                    ```
                    {print} '¬°Viva! ¬°Es tu cumplea√±os!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {repeat} edad {times} {print} '¬°Hip Hip Hurra!'
                    ```
                start_code: |-
                    {repeat} 2 {times} respuesta = {ask} '¬øSab√≠as que puedes hacer una pregunta varias veces?'
                    {if} respuesta {is} s√≠ {repeat} 2 {times} {print} '¬°Ya lo sab√≠as!'
                    {else} {repeat} 3 {times} {print} '¬°Has aprendido algo nuevo!'
            8:
                story_text: |
                    ### ¬øEn el bloque o no?
                    En este nivel tienes que pensar con cuidado que l√≠neas de c√≥digo deben ir en el bloque y cuales no.
                    Por ejemplo: Si quieres cantar la canci√≥n *el hombre magdalena*. S√≥lo quieres que la l√≠nea con 'el hombre magdalena' se repita dos veces.
                    Esto significa que la √∫ltima l√≠nea no debe comenzar con sangr√≠a ya que no pertenece al bloque.
                    Si comienzas la √∫ltima l√≠nea con sangr√≠a la canci√≥n ser√° incorrecta.

                    ## Ejercicio
                    Cada l√≠nea en el ejemplo empieza con un espacio en blanco. Elimina los espacios en blanco e intenta averiguar qu√© l√≠nea necesita sangr√≠a y cual no para hacer la canci√≥n del hombre magdalena.
                example_code: |
                    ```
                    _ {print} '¬øConoces al hombre magdalena?'
                    _ {repeat} 2 {times}
                    _ {print} 'El hombre magdalena'
                    _ {print} '¬øConoces al hombre magdalena, que vive en la Calle Drury?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'Esta l√≠nea se repetir√°...'
                        {print} 'Esta tambi√©n...'
                    {print} '¬°pero esta no!'
    restaurant:
        name: Restaurante
        default_save_name: Restaurante
        description: Crea tu propio restaurante virtual
        levels:
            1:
                story_text: |
                    En nivel 1 puedes hacer tu propio restaurante virtual y tomar los pedidos de tus invitados.
                example_code: |
                    ```
                    {print} Bienvenido al restaurante Hedy's
                    _ ¬øQu√© te gustar√≠a pedir?
                    {echo} As√≠ que te gustar√≠a ordenar
                    {print} ¬°Gracias por su pedido!
                    {print} ¬°Est√° en camino!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu entrada en pantalla haciendo clic en el bot√≥n amarillo.
                    Primero, completa el comando correcto en los huecos en blanco para hacer que tu c√≥digo funcione correctamente.
                    Despu√©s a√±ade al menos 4 l√≠neas m√°s de c√≥digo al programa del restaurante.
                    Pregunta a los clientes qu√© les gustar√≠a beber y pregunta si quieren pagar en efectivo o con tarjeta.
                    Por √∫ltimo, piensa una manera adecuada de despedirte de tus clientes.
                start_code: '# pon tu c√≥digo aqu√≠'
            2:
                story_text: |
                    En el nivel 2 puedes ampliar su restaurante usando variables. En el nivel 1 Hedy s√≥lo pod√≠a `{echo}` la orden una vez y s√≥lo pod√≠a recordar lo √∫ltimo que se le pidi√≥.
                    ¬°Ahora puedes usar variables y Hedy puede recordar tanto la comida como los ingredientes!
                example_code: |
                    ```
                    {print} ¬°Bienvenido al restaurante Hedy's!
                    {print} Hoy estamos sirviendo pizza o lasa√±a.
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Muy buena elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o verduras en eso?
                    {print} ¬°La comida con cobertura est√° en camino!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia tu propio c√≥digo del restaurante del nivel anterior a la pantalla de entrada de abajo.
                    Corrige el c√≥digo reemplazando los comandos `{ask}` y  `{echo}` y usando variables, como las que has aprendido en este nivel.

                    Ahora que tu c√≥digo funciona otra vez, es hora de a√±adir m√°s cosas.
                    Observa la √∫ltima l√≠nea de c√≥digo del ejemplo: ¬°Marchando la comida `{print}` con cobertura!
                    En esta l√≠nea se han usado 2 variables para crear un resumen de tu pedido.
                    Ahora a√±ade tu propio resumen de la comida y las bebidas pedidas por el cliente.

                    **Extra** Ahora que has aprendido a usar variables, puedes usar tantas variables como quieras en una l√≠nea de c√≥digo. ¬øPuedes a√±adir m√°s variables a tu c√≥digo, como comer aqu√≠ o para llevar, efectivo o tarjeta, con o sin pajita etc.?
                start_code: '# pon tu c√≥digo aqu√≠'
            3:
                story_text: |
                    ¬øTienes problemas para decidir qu√© quieres cenar? ¬°Puedes dejar que Hedy elija por ti!
                    Simplemente agregue listas de sus favoritos (o menos favorito) comidas y Hedy puede elegir al azar su cena.
                    Tambi√©n puedes divertirte un poco, ¬°dejando que Hedy elija el precio de su cena tambi√©n! ¬øQu√© vas a conseguir?
                example_code: |
                    ```
                    platos {is} espaguetis, coles de Bruselas, hamburguesas
                    {print} ¬°Te servir√°n platos {at} {random} esta noche!
                    precio {is} 1 euro, 10 euros, 100 euros
                    {print} Ser√°n precio {at} {random} por favor.
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora haz tu propia versi√≥n del restaurante al azar.
                    Haz t√∫ mismo una lista de entrantes, platos principales, postres, bebidas y precios.
                    Despu√©s usa los comandos `{print}` y `{at} {random}` para decirle los clientes qu√© habr√° en su men√∫ esta noche.
                example_code_2: |
                    ```
                    {print} ¬°Bienvenido a tu propio restaurante aleatorio!
                    entrantes {is} _
                    platos principales {is} _
                    postres {is} _
                    bebidas {is} _
                    precios {is} _
                    _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            4:
                story_text: |
                    En este nivel tienes que usar comillas cuando uses los comandos `{print}` o `{ask}`.

                    ### Ejercicio
                    ¬°A√±ade las comillas a este c√≥digo para hacerlo funcionar! Ten cuidado: las variables no deben ir entre comillas.
                    Despu√©s, usa el comando `{clear}` para s√≥lo mostrar una l√≠nea cada vez en tu pantalla de salida.

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu restaurante. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en el lugar correcto y a√±ade varios comandos `{clear}`.
                example_code: |
                    ```
                    _ Agrega comillas a este c√≥digo_
                    {print} ¬°Bienvenido al restaurante Hedys!
                    {print} Hoy estamos sirviendo pizza o lasa√±a
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Gran elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o vegetales encima de eso?
                    {print} comida con cobertura est√° en camino!
                    bebidas {is} {ask} ¬øQu√© te gustar√≠a para beber?
                    {print} Gracias por tu orden.
                    {print} Tu comida y bebidas ya van a estar!
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            5:
                story_text: |
                    ### Ejercicio
                    El c√≥digo de ejemplo te ense√±a como podr√≠as programar que te has quedado sin una opci√≥n del men√∫ en tu restaurante.
                    Copia tu propio c√≥digo del restaurante de los niveles anteriores. Crea un problema en tu restaurante y a√±ade el c√≥digo, como el c√≥digo de ejemplo que hiciste.
                    Por ejemplo, tambi√©n puedes quedarte sin una opci√≥n del men√∫, o no aceptar tarjetas de cr√©dito, o que la m√°quina del helado est√© rota.

                    **Extra** ¬øHas programado el problema y las respuestas apropiadas? Entonces intenta a√±adir m√°s comandos `{if}` y `{else}` a tu c√≥digo.
                    ¬°Intenta a√±adir un `{if}` tras cada comando`{ask}` en tu c√≥digo para hacer el c√≥digo tan interactivo como sea posible!
                example_code: |
                    ```
                    bebidas_disponibles {is} agua, limonada, refresco de cola, zumo de naranja
                    bebida {is} {ask} '¬øQu√© quieres beber?'
                    {if} bebida {in} bebidas_disponibles {print} '¬°Una ' bebida 'de camino!'
                    {else} {print} 'Lo siento, no servimos eso'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            6:
                story_text: |
                    En este nivel puedes usar las matem√°ticas para calcular el precio total del pedido de tus clientes, que puede hacer tu restaurante virtual m√°s realista.
                    Pero tambi√©n puedes a√±adir m√°s cosas a tu restaurante virtual, por ejemplo m√°s platos.

                    ### Ejercicio
                    Puedes a√±adir m√°s cosas a tu restaurante virtual. Por ejemplo, puedes...
                    - ¬øpreguntar cuanta gente va a venir y multiplicar el precio por esa cantidad?
                    - ¬øa√±adir otro plato?
                    - ¬øhacer un descuento cuando introduzcan un cup√≥n de descuento (secreto)?
                    - ¬øa√±adir un men√∫ infantil?
                    - ¬øpiensa en otras cosas divertidas para a√±adir?
                example_code: |
                    Puedes hacer un c√≥digo de restaurante simple, como este:
                    ```
                    {print} 'Bienvenido al restaurante Casa Hedy'
                    {print} 'Aqu√≠ est√° nuestro men√∫:'
                    {print} 'Nuestros platos principales son pizza, lasa√±a o espaguetis'
                    plato_principal = {ask} '¬øQu√© plato principal te gustar√≠a?'
                    precio = 0
                    {if} plato_principal {is} pizza precio = 10
                    {if} plato_principal {is} lasa√±a precio = 12
                    {if} plato_principal {is} espaguetis precio = 8
                    {print} 'Has pedido ' plato_principal
                    {print} 'Eso ser√° ' precio ' d√≥lares, por favor'
                    {print} '¬°Gracias, que aproveche!'
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            7:
                story_text: |
                    En este nivel aprendiste a usar el comando `{repeat}` para repetir una l√≠nea de c√≥digo un n√∫mero de veces
                    Puedes usar eso en tu restaurante para `{ask}` a varias personas qu√© les gustar√≠a ver.

                    ### Ejercicio
                    ¬øPuedes acabar el c√≥digo? Hedy necesita repetir esta pregunta tantas veces como gente haya. As√≠ que si hay 5 personas, tiene que hacer la pregunta 5 veces.
                    **Extra** Ampl√≠a tu c√≥digo con mas preguntas, por ejemplo sobre bebidas o salsas.
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedys!'
                    personas = {ask} '¬øCu√°ntas personas se unen a nosotros hoy?'
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            8:
                story_text: |
                    En este nivel puedes hacer tu restaurant m√°s complejo repitiendo m√∫ltiples l√≠neas de c√≥digo. As√≠:
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas ser√°n hoy?'
                    {print} '¬°Genial!'
                    {repeat} personas {times}
                        comida = {ask} '¬øQue les gustar√≠a pedir?'
                        {print} comida
                    {print} '¬°Gracias por pedir!'
                    {print} '¬°Disfruten su comida!'
                    ```
                story_text_2: |
                    ### Ejercicio
                    Este c√≥digo puede ampliarse con m√°s cosas en el men√∫, por ejemplo ofreciendo bebidas, y/o varios platos o postres. A√±ade al menos una cosa m√°s.
                    **Extra** A√±ade incluso m√°s cosas, ¬°tantas opciones como quieras!
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            9:
                story_text: "¬°En este nivel puedes usar anidaci√≥n para hacer tu restaurant m√°s realista y divertido!\n\n### Ejercicio\nSe ha eliminado la sangr√≠a en el c√≥digo de ejemplo. \n¬øPuedes averiguar cu√°nta sangr√≠a necesita cada l√≠nea para que el c√≥digo funcione correctamente?\nSi el cliente pide\
                    \ pizza, Hedy no deber√≠a preguntarle al cliente qu√© salsa quiere.\n\n**Extra** Un restaurante no almacena todas las salsas. Haz una lista de las salsas disponibles y da una respuesta con cada pedido si lo vendes. <br>\n**Extra** Las pizzas tienen ingredientes. Pregunta al cliente cu√°l\
                    \ quieren.<br>\n**Extra** ¬øLos clientes quieren una bebida? ¬°Preg√∫ntaselo tambi√©n! <br>\n"
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas se nos van a unir hoy?'
                    {print} '¬°Genial!'
                    precio = 0
                    {repeat} persona {times}
                    _ comida = {ask} '¬øQue le gustar√≠a pedir?'
                    _ {print} comida
                    _ {if} comida {is} patatas fritas
                    _ precio = precio + 3
                    _ salsa = {ask} '¬øQu√© salsa le gustar√≠a con sus patatas fritas?'
                    _ {if} salsa {is} no
                    _ {print} 'sin salsa'
                    _ {else}
                    _ precio = precio + 1
                    _ {print} 'con ' salsa
                    _ {if} comida {is} pizza
                    _ precio = precio + 4
                    {print} 'Ser√°n ' precio ' d√≥lares'
                    {print} '¬°Disfruta tu comida!'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            10:
                story_text: |
                    En este nivel aprender√°s c√≥mo preguntar los pedidos f√°cilmente para los diferentes platos.

                    ### Ejercicio 1
                    Completa el c√≥digo con un `{ask}` en los espacios en blanco para que se le pregunte al cliente qu√© quieren comer en cada plato.
                example_code: "```\nplatos = aperitivo, principal, postre\n{for} plato {in} platos\n    {print} '¬øCu√°l es su pedido de ' platos '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ejercicio
                    Por supuesto, ¬°tambi√©n puedes pedir para varias personas!
                    ¬øPuedes agregar la cantidad correcta de sangr√≠a a cada l√≠nea para hacer funcionar el c√≥digo correctamente?
                    Consejo: algunas l√≠neas no necesita tener sangr√≠a.
                example_code_2: |
                    ```
                    _ platos = aperitivo, plato principal, postre
                    _ nombres = Jes√∫s, G√©nesis
                    _ {for} nombre {in} nombres
                    _ {for} plato {in} platos
                    _ comida = {ask} '¬øQue te gustar√≠a ordenar como tu ' plato '?'
                    _ {print} nombre ' orden√≥ ' comida ' como su ' plato
                    ```
                start_code: platos = aperitivo, plato principal, postre
            11:
                story_text: |
                    Podemos usar el `{for}` con `{range}` para imprimir los pedidos de varios clientes de manera ordenada.

                    ### Ejercicio
                    Completa el c√≥digo del restaurante, as√≠ podr√°s preguntar el pedido a varias personas. Imprime el n√∫mero de pedido cada vez: 'Pedido 1', 'Pedido 2', etc.
                    ¬øEst√°s seguro como va esto? Echa un vistazo a tu c√≥digo del nivel 8.

                    **Extra** En el nivel 9 el restaurante tambi√©n us√≥ precios. ¬°Tambi√©n puedes a√±adir eso aqu√≠!
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedy!'
                    personas = {ask} '¬øPara cuanta gente le gustar√≠a pedir?'
                    {print} 'As√≠ que quieres pedir para ' personas ' personas.'
                    {print} "¬°Vamos!"
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            12:
                story_text: |
                    A partir de este nivel puedes usar n√∫meros decimales para hacer que tu men√∫ sea m√°s realista.

                    ### Ejercicio
                    ¬øPuedes pensar en un c√≥digo para darle a tus amigos y familiares un 15% de descuento?
                example_code: |
                    ```
                    precio = 0.0
                    comida = {ask} '¬øQu√© te gustar√≠a pedir?'
                    bebida = {ask} '¬øQue te gustar√≠a beber?'
                    {if} comida {is} 'hamburguesa'
                        precio = precio + 6.50
                    {if} comida {is} 'pizza'
                        precio = precio + 5.75
                    {if} bebida {is} 'agua'
                        precio = precio + 1.20
                    {if} bebida {is} 'refresco'
                        precio = precio + 2.35
                    {print} 'Ser√°n ' precio ' d√≥lares, por favor'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            13:
                story_text: |
                    En este nivel aprender√°s nuevos comandos para ampliar tu c√≥digo mucho m√°s.

                    ### Ejercicio 1
                    Coloca un `{and}` y un `{or}` en la parte l√≥gica del programa.

                    ### Ejercicio 2
                    Amplia tu restaurante con al menos un `{and}` y un `{or}` m√°s.
                    Por ejemplo, crea un cup√≥n de descuento especial que s√≥lo se aplique a la pizza, o dale una bebida gratis a tu cliente
                    con sus patatas y tortitas. ¬°O por supuesto algo completamente diferente!
                example_code: |
                    ```
                    precio = 10
                    comida = {ask} ¬øQu√© te gustar√≠a comer?
                    bebidas = {ask} ¬øQu√© quieres beber?
                    {if} comida {is} 'sandwich' _ bebida {is} 'zumo'
                        {print} 'Este es nuestro men√∫ de descuentos'
                        precio = precio - 3
                    {if} bebidas {is} 'agua' _ bebidas {is} 'zumo'
                        {print} 'Esa es una opci√≥n saludable'
                    {print} 'Eso ser√° ' precio ' d√≥lares'
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            15:
                story_text: |
                    Con el comando `{while}` puedes asegurarte que tus clientes sigan agregando ordenes hasta que gusten.
                example_code: |
                    ```
                    {print} 'Bienvenido a McHedy'
                    m√°s = 's√≠'
                    {while} m√°s == 's√≠'
                        pedido = {ask} '¬øQu√© te gustar√≠a ordenar?'
                        {print} pedido
                        m√°s = {ask} '¬øTe gustar√≠a pedir algo m√°s?'
                    {print} '¬°Gracias!'
                    ```
                start_code: '# pon tu c√≥digo'
    rock:
        name: Piedra, papel o tijera
        default_save_name: Piedra_2
        description: Crea tu propio juego de piedra, papel y tijera
        levels:
            1:
                story_text: |
                    En el nivel 1 comenzamos el juego de piedra, papel o tijera.

                    Con `{ask}` puedes tomar una opci√≥n, y con `{echo}` puedes repetir la opci√≥n elegida.
                example_code: |
                    ```
                    {print} ¬øQu√© eliges?
                    {ask} elige piedra, papel o tijera
                    {echo} has elegido:
                    ```
                story_text_2: |
                    ### Ejercicio
                    En lugar de usar palabras, puedes tambi√©n usar emojis: ‚úä‚úã‚úå
                    ¬øPuedes hacer el c√≥digo usando emojis?
                example_code_2: |
                    ```
                    {print} ¬øQu√© escoges?
                    {ask} escoge _
                    {echo} tu elecci√≥n fue
                    ```
                start_code: |
                    {print} ¬°Bienvenido a tu propio piedra, papel o tijera!
                    {ask} ?Que escoges?
            2:
                story_text: |
                    En este nivel puedes practicar usando las variables, ¬°as√≠ puedes hacer un juego de piedra, papel o tijeras en el pr√≥ximo nivel!
                    ### Ejercicio
                    Completa el c√≥digo poniendo la **variable** en los huecos en blanco.
                    Este juego no es muy interactivo, ¬°pero no te preocupes! !En la siguiente pesta√±a aprender√°s como usar las variables con el comando `{ask}` para hacer tu juego interactivo!
                example_code: |-
                    ```
                    opci√≥n {is} piedra
                    {print} Yo elijo _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            3:
                story_text: |
                    ¬°Puedes usar el comando `{at} {random}` para dejar que el ordenador elija piedra, papel o tijeras!

                    ### Ejercicio
                    Completa el c√≥digo usando el comando `{at} {random}`.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} opciones _
                    ```
                story_text_2: |
                    **Extra** Haz un juego de dos jugadores. Lo primero, pregunta a los dos jugadores que pongan sus nombres. Despu√©s, deja que el ordenador elija aleatoriamente sus opciones.
                example_code_2: |
                    ```
                    opciones {is} piedra, papel o tijera
                    jugador_1 {is} {ask} Nombre del jugador 1:
                    _
                    ```
                start_code: '{print} ¬°Bienvenido a tu propio piedra papel o tijera!'
            4:
                story_text: |
                    En este nivel podemos programar el juego de piedra, papel, tijera. Pero si quieres a√±adir texto, aqu√≠ tambi√©n tienes que usar comillas.
                    ### Ejercicio
                    Copia el c√≥digo del nivel anterior y haz que funcione usando comillas despu√©s de cada comando `{print}` o `{ask}`.
                start_code: '{print} ''Bienvenido a tu propio piedra, papel o tijera!'''
            5:
                story_text: |
                    En este nivel podemos determinar si es un empate o no. Para ello necesitas el nuevo c√≥digo `{if}`.

                    ### Ejercicio
                    Completa el c√≥digo rellenando los huecos en blanco:
                    * Deja que el ordenador elija un opci√≥n al azar
                    * Pregunta al jugador qu√© quieren elegir
                    * Rellena las variables correctas en las l√≠neas 4 y 5
                    * Completa la l√≠nea 6 para que Hedy pueda comprobar si es un empate o no.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijeras
                    opci√≥n_ordenador {is} _
                    opci√≥n {is} _
                    {print} 'Elegiste ' _
                    {print} 'El ordenador eligi√≥ ' _
                    {if} _ {is} _ {print} '¬°empate!' {else} {print} 'no hay empate'
                    ```

                    Rellena el c√≥digo correcto en los huecos en blanco para ver si es un empate.
                start_code: '{print} ''Bienvenido a tu propio piedra, papel o tijera!'''
            9:
                story_text: "En este nivel puedes programar el juego completo de piedra, papel, tijeras anidando los comandos `{if}`. \n\n### Ejercicio\n¬øPuedes completar el c√≥digo? El programa debe decir quien ha ganado para cada combinaci√≥n.\n \n**Extra** ¬øQuieres jugar m√°s de una partida? Amplia el\
                    \ c√≥digo para que puedas jugar varias rondas. Incluso puedes usar un `{ask}` para preguntar al usuario cuantas rondas quieren jugar.\n"
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    tu_opci√≥n {is} {ask} '¬øQue escoges?'
                    {print} 'Escogiste ' tu_opci√≥n
                    opci√≥n_computadora {is} opciones {at} {random}
                    {print} 'La computadora escogi√≥ ' opci√≥n_computadora
                    {if} opci√≥n_computadora {is} tu_opci√≥n
                        {print} 'Empate'
                    {if} opci√≥n_computadora {is} piedra
                        {if} tu_opci√≥n {is} papel
                            {print} '¬°Ganaste!'
                        {if} tu_opci√≥n {is} tijera
                            {print} '¬°Perdiste!'
                    # termina este c√≥digo
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            10:
                story_text: |
                    ### Ejercicio
                    En los niveles anteriores hiciste tu propio juego de piedra, papel, tijeras. ¬øPuedes completar el c√≥digo y usar el comando {for} adecuadamente para hacer que el juego funcione?
                example_code: |
                    ```
                    opciones = _
                    jugadores = _
                    {for} _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            13:
                story_text: |
                    ¬°Con el comando `{and}` puedes reducir tu c√≥digo del juego de piedra, papel o tijera! Mira el ejemplo de abajo e intenta terminarlo.

                    ### Ejercicio
                    Completa tu c√≥digo de manera que siempre se elija un ganador. Ejecuta tu c√≥digo un par de veces para verificar que siempre se muestra un ganador.
                example_code: |
                    ```
                    opciones = 'piedra', 'papel', 'tijera'
                    tu_opcion = {ask} '¬øQu√© quieres escoger?'
                    opcion_computadora = opciones {at} {random}
                    {print} 'Escogiste ' tu_opcion
                    {print} 'La computadora escoge ' opcion_computadora
                    {if} opcion_computadora {is} tu_opcion
                        {print} 'Empate'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'papel'
                        {print} 'You win!'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'tijera'
                        {print} '¬°La computadora gan√≥!'
                    _
                    ```
                start_code: '# pon t√∫ c√≥digo aqu√≠'
            15:
                story_text: |
                    ¬°Juega hasta que le ganes a la computadora! Pero primero termina el c√≥digo de ejemplo...
                example_code: |
                    ```
                    gan√≥ = 'no'
                    opciones = 'piedra', 'papel', 'tijeras'
                    {while} gan√≥ == 'no'
                        tu_opcion = {ask} '¬øQue escoges?'
                        opcion_computadora = opciones {at} {random}
                        {print} 'Escogiste ' tu_opcion
                        {print} 'La computadora escogi√≥ ' opcion_computadora
                        {if} opcion_computadora == tu_opcion
                            {print} '¬°Empate!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'tijera'
                            {print} '¬°Perdiste!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'papel'
                            {print} '¬°Ganaste!'
                            gan√≥ = 's√≠'
                    _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    rock_2:
        name: Piedra, papel, tijeras 2
        default_save_name: piedra_2
        description: Parte 2 de piedra, papel, tijeras
        levels:
            2:
                story_text: |
                    Ahora que has aprendido a utilizar el comando `{ask}`, ¬°tambi√©n puedes hacer que tu c√≥digo de piedra, papel o tijera sea interactivo!

                    ### Ejercicio
                    Haz que el c√≥digo de piedra, papel o tijera sea interactivo a√±adiendo el comando `{ask}` y una pregunta a tu c√≥digo de piedra, papel o tijera.
                example_code: |
                    ```
                    opci√≥n {is} _
                    {print} Yo elijo opci√≥n
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    secret:
        name: Super Esp√≠a
        default_save_name: Super Esp√≠a
        description: Haz tu propio c√≥digo esp√≠a
        levels:
            12:
                story_text: |
                    En esta aventura podr√°s crear tu propio c√≥digo secreto. Codifica un mensaje que solo la persona correcta podr√° descifrar.
                    Si el enemigo intenta descifrar el c√≥digo, obtendr√°n un mensaje falso para hacerles perder el tiempo.

                    ### Ejercicio 1
                    Crea tu propio c√≥digo secrete para tu super esp√≠a. ¬øPuedes hacer que use a√∫n m√°s variables?

                    ### Ejercicio 2
                    A√±ade un tercer componente al c√≥digo, como una prenda de ropa o un objeto.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øCu√°l es tu nombre?'
                    if nombre {is} '_'
                        a {is} 'Ve al aeropuerto '
                    {else}
                        a {is} 'Ve a la estaci√≥n de trenes '
                    contrase√±a {is} {ask} '¬øCu√°l es la contrase√±a?'
                    {if} contrase√±a {is} _
                        b {is} 'ma√±ana a las 02.00'
                    {else}
                        b {is} 'hoy a las 10.00'
                    {print} _ _ _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            13:
                story_text: |
                    Podemos simplificar el c√≥digo superesp√≠a con `{and}`, entonces s√≥lo necesitamos un `{if}`.

                    ### Ejercicio 1
                    Completa el c√≥digo rellenando el comando correcto en el hueco en blanco. Consejo: El superesp√≠a tiene que responder a AMBAS preguntas correctamente, ¬°antes de que consigan la informaci√≥n confidencial!

                    ### Ejercicio 2
                    ¬°Queremos confundir a√∫n m√°s al enemigo! Crea una lista con respuestas falsas y selecciona una al azar cuando den una respuesta incorrecta.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øCu√°l es tu nombre?'
                    contrase√±a {is} {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre {is} 'Agente007' _ contrase√±a {is} 'SUPERSECRETO'
                        {print} 'Ve al aeropuerto a las 02.00'
                    {else}
                        {print} 'Ve a la estaci√≥n de tren a las 10.00'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    sleep_command:
        name: '{sleep}'
        default_save_name: comando_dormir
        description: introducci√≥n al comando dormir
        levels:
            2:
                story_text: |
                    Otro comando nuevo en este nivel es `{sleep}`, el cual pausa tu programa durante un segundo. Si escribes un n√∫mero despu√©s del comando {sleep}, el programa se pausa por esa cantidad de segundos.

                    ### Ejercicio
                    Practica este nuevo comando haciendo un c√≥digo por ti mismo en que uses el comando {sleep} al menos 3 veces. En cada comando {sleep} el tiempo de pausa debe ser diferente.
                example_code: |
                    ```
                    {print} Mi color favorito es...
                    {sleep} 2
                    {print} ¬°verde!
                    ```
                start_code: |-
                    {print} Mi color favorito es...
                    {sleep} 2
                    {print} ¬°verde!
    songs:
        name: ¬°Canta una canci√≥n!
        default_save_name: Canci√≥n
        description: Imprime una canci√≥n
        levels:
            6:
                story_text: |
                    En las canciones hay a menudo mucha repetici√≥n. Algunas veces la repetici√≥n se basa tambi√©n en contar.
                    Por ejemplo, en la canci√≥n el elefante se balancea en la tela de una ara√±a. Puedes programar esta canci√≥n con un poco de matem√°ticas.

                    Consejo: ¬°Utiliza la funci√≥n de "leer en voz alta" para que Hedy te cante la canci√≥n!

                    ### Desaf√≠o
                    Puedes repetir las l√≠neas 2 a 7 cuantas veces quieras copiando las l√≠neas.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    {sleep}
                    ```
                story_text_2: |
                    Esta canci√≥n de ni√±os cuenta desde 5 monos hasta un mono.
                    ¬°Si copias las l√≠neas 2 a 7 debajo del c√≥digo, puedes cantar toda la canci√≥n!
                example_code_2: |
                    ```
                    n√∫mero = 6
                    n√∫mero = n√∫mero - 1
                    {print} n√∫mero 'peque√±os monos saltando en la cama'
                    {print} 'Uno se cay√≥ y se golpe√≥ la cabeza'
                    {print} 'Mam√° llam√≥ al doctor y el doctor dijo'
                    {print} '¬°NO M√ÅS MONOS SALTANDO EN LA CAMA!'
                    {sleep}
                    ```
                start_code: '{print} ''¬°Vamos a cantar!'''
            7:
                story_text: |
                    Las canciones suelen tener mucha repetici√≥n. Por ejemplo... ¬°Baby Shark! Si la cantas, dir√°s una y otra vez lo mismo:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Desaf√≠o
                    Puedes acortar Baby Shark con un `{repeat}`. Acaba el c√≥digo rellenando los espacios vac√≠os.
                    **Extra** Tras Baby Shark puedes, por supuesto, programar otras canciones. ¬°Hay muchas con repetici√≥n!
                    ¬øPuedes pensar en alguna y programarla tambi√©n?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
                start_code: '{print} ''Baby Shark'''
            8:
                story_text: |
                    En un nivel anterior programamos la canci√≥n de los elefantes. Pero sin el comando `{repeat}` tuvimos que copiar los versos muchas veces.
                    En este nivel puedes repetir la canci√≥n 99 veces, simplemente a√±adiendo una l√≠nea.

                    ### Desaf√≠o
                    A√±ade el comando correcto en los espacios en blanco y sangra el c√≥digo correctamente.
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            10:
                story_text: |
                    Con `{for}` puedes hacer la canci√≥n completa de baby shark (incluyendo a todos los tiburones de la familia) en solo 6 l√≠neas!

                    ### Ejercicio 1
                    Puedes hacer el c√≥digo para baby shark a√∫n mas corto usando un comando `{for}`? Termina el c√≥digo de ejemplo.
                example_code: "```\nfamilia = beb√©, mam√°, pap√°, abuela, abuelo\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ejercicio 2
                    Escribe la canci√≥n Cinco monitos saltando en la cama. Mira el texto si no lo recuerdas.

                    **Extra** Escribe la canci√≥n El viejo MacDonald ten√≠a una granja, y aseg√∫rate que todos los animales hagan sonidos diferentes usando `{if}`.
                example_code_2: |
                    ```
                    monos = 5, 4, 3, 2, 1
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            11:
                story_text: |
                    En este nivel, podr√°s usar el comando `{for}` con `{range}` para crear canciones que utilizan cuentas, como cinco peque√±os monitos.

                    ### Ejercicio 1
                    ¬°Rellena los espacios y haz que el c√≥digo funcione! Si no recuerdas la letra de la canci√≥n, ¬°b√∫scala!

                    ### Ejercicio 2
                    La ultima l√≠nea de la canci√≥n es diferente de las dem√°s. Escribe esta l√≠nea dentro de `{for}`, y usa `{if}` para hacer que funcione correctamente.
                example_code: |
                    ```
                    _monos _ _ _ 5 _ 1
                        {print} i ' peque√±os monitos saltando en la cama'
                        _
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            12:
                story_text: |
                    En esta canci√≥n podemos hacer a√∫n m√°s f√°cil programar 'si eres feliz y lo sabes, aplaude'. Porque podemos poner todas las acciones en una variable, compru√©balo:

                    ### Ejercicio
                    ¬øPuedes a√±adir la cantidad correcta de sangr√≠a a cada l√≠nea para que la canci√≥n se reproduzca correctamente?
                    Nota: No todas las l√≠neas necesitan sangr√≠a
                example_code: |
                    ```
                    _ acciones = 'aplaude', 'mueve los pies as√≠', '¬°grita hurra!'
                    _ {for} acci√≥n {in} acciones
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    _ {print} 'Si en verdad estas contento tu sonrisa es el reflejo'
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            16:
                story_text: |
                    En este nivel puedes programar una canci√≥n como la del Viejo McDonald incluso m√°s r√°pido. Puedes conectar el animal con el sonido correcto simplemente poni√©ndolos en el mismo lugar en la lista.
                    El Marinero Borracho tambi√©n se puede hacer r√°pidamente en este nivel. Solo necesitas 8 l√≠neas de c√≥digo para toda la canci√≥n, ¬°mira!
                example_code: |
                    ```
                    animales = ['cerdo', 'perro', 'vaca']
                    sonidos = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animales[i]
                        sonido = sonidos[i]
                        {print} 'Old McDonald ten√≠a una granja'
                        {print} 'E I E I O!'
                        {print} 'y en esa granja √©l ten√≠a ' animal
                        {print} 'E I E I O!'
                        {print} 'con un ' sonido sonido ' aqu√≠'
                        {print} 'y un ' sonido sonido ' all√≠'
                        {print} 'aqu√≠ un ' sonido
                        {print} 'hay un ' sonido
                        {print} 'en todos lados un ' sonido sonido
                    ```

                    ```
                    l√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']
                    {for} l√≠nea {in} l√≠neas
                        {for} i {in} {range} 1 {to} 3
                            {print} l√≠nea
                        {print} 'pronto por la ma√±ana'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Ella se levanta de un camino de heno'
                        {print} 'pronto por la ma√±ana'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            18:
                story_text: |
                    En el nivel 16 hicimos canciones usando listas. Sin embargo estos programas no funcionan bien en este nivel. Los dos puntos del nivel 17 y los par√©ntesis del nivel 18 a√∫n se tienen que ser a√±adir.

                    ### Ejercicio 1
                    Se da la canci√≥n del Marinero borracho como ejemplo, pero todav√≠a no funciona.
                    ¬øPuedes asegurarte de que todo funciona de nuevo? Para ayudarte, hemos puesto _ en los lugares de _algunos_ errores.

                    ### Ejercicio 2
                    Ahora tambi√©n busca tu canci√≥n de Old MacDonald del nivel 16, y corr√≠gela.
                example_code: "```\nl√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']\n{for} l√≠nea {in} l√≠neas _ \n    {for} i {in} {range} 1 {to} 3 _ \n        {print} _ l√≠nea _ \n    {print} 'pronto por\
                    \ la ma√±ana'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Ella se levanta de un camino de heno'\n    {print} 'pronto por la ma√±ana'\n```\n"
                start_code: '# pon tu c√≥digo aqu√≠'
    tic:
        name: Tres en raya
        default_save_name: Tres en raya
        description: ¬°Juega al Tres en raya!
        levels:
            13:
                story_text: |
                    En esta aventura podr√°s programar el juego Tres en Raya. Puedes jugar con dos personas. En turnos, eliges un n√∫mero (1-9) del sitio donde quieres poner tu se√±al (x u o).
                    ¬°El primer jugador que obtenga tres en l√≠nea (horizontal, vertical o en diagonal) gana!

                    ### Ejercicio 1
                    El juego funciona, pero tiene algunos errores. Por ejemplo, cualquier jugador puede elegir cualquier casilla, ¬°incluso si ya estaba elegida! Usa un `{if}` all√° donde la casilla est√© tomada, y si lo est√°, avisa al jugador.

                    ### Ejercicio 2
                    El juego tampoco decide qui√©n ha ganado. Tienes que a√±adir esto comprobando si las 3 casilla en fila tienen el mismo s√≠mbolo.

                    ### Ejercicio 3 Extra
                    No siempre tienes un amigo con el que jugar. ¬øPuedes crear un rival inform√°tico?
                example_code: |
                    ```
                    jugador = 'x'
                    campo = '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'

                    {for} i {in} {range} 1 {to} 9
                        elecci√≥n = {ask} 'Jugador ' jugador ' ¬øqu√© lugar eliges?'
                        campo {at} elecci√≥n = jugador
                        {clear}
                        {print} campo {at} 1 campo {at} 2 campo {at} 3
                        {print} campo {at} 4 campo {at} 5 campo {at} 6
                        {print} campo {at} 7 campo {at} 8 campo {at} 9
                        {if} jugador = 'x'
                            player = 'o'
                        {else}
                            player = 'x'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            14:
                story_text: |
                    En los niveles anteriores has hecho un juego de tres en raya. Ahora hemos aprendido como usar los s√≠mbolos =, == y !=.
                    Puedes usar este nuevo conocimiento en tu juego as√≠:
                example_code: |
                    ```
                    s√≠mbolo = 'x'
                    casillas_disponibles = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    juego = 'en marcha'
                    casilla_1 = '.'
                    casilla_2 = '.'
                    casilla_3 = '.'
                    casilla_4 = '.'
                    casilla_5 = '.'
                    casilla_6 = '.'
                    casilla_7 = '.'
                    casilla_8 = '.'
                    casilla_9 = '.'
                    {print} '¬°Tres en raya!'
                    {print} casilla_1 casilla_2 casilla_3
                    {print} casilla_4 casilla_5 casilla_6
                    {print} casilla_7 casilla_8 casilla_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} juego != 'terminado'
                            elecci√≥n = {ask} 'Jugador ' s√≠mbolo ', ¬øqu√© casilla quieres tomar?'
                            {if} elecci√≥n {in} casillas_disponibles
                                {remove} elecci√≥n {from} casillas_disponibles
                                {if} elecci√≥n == 1
                                    casilla_1 = s√≠mbolo
                                {if} elecci√≥n == 2
                                    casilla_2 = s√≠mbolo
                                {if} elecci√≥n == 3
                                    casilla_3 = s√≠mbolo
                                {if} elecci√≥n == 4
                                    casilla_4 = s√≠mbolo
                                {if} elecci√≥n == 5
                                    casilla_5 = s√≠mbolo
                                {if} elecci√≥n == 6
                                    casilla_6 = s√≠mbolo
                                {if} elecci√≥n == 7
                                    casilla_7 = s√≠mbolo
                                {if} elecci√≥n == 8
                                    casilla_8 = s√≠mbolo
                                {if} elecci√≥n == 9
                                    casilla_9 = s√≠mbolo
                            {else}
                                {print} 'Esa casilla ya est√° tomada'
                            {print} casilla_1 casilla_2 casilla_3
                            {print} casilla_4 casilla_5 casilla_6
                            {print} casilla_7 casilla_8 casilla_9
                            {print} ' '
                            ganador = {ask} '¬øGanaste?'
                            {if} ganador == 'yes'
                                {print} '¬°Bien hecho, jugador ' s√≠mbolo '!'
                                juego = 'terminado'
                            {else}
                                {if} s√≠mbolo == 'x'
                                    s√≠mbolo = 'o'
                                {else}
                                    s√≠mbolo = 'x'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            15:
                story_text: |
                    En este nivel puedes mejorar tu juego de tres en raya con el bucle {while}. Con este bucle puedes combinar el juego `{if} game != 'over'` y el `{for} i {in} {range} 1 {to} 9` en una sola l√≠nea.
                    Compru√©balo:
                example_code: |
                    ```
                    s√≠mbolo = 'x'
                    casillas_disponibles = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    juego = 'en marcha'
                    casilla_1 = '.'
                    casilla_2 = '.'
                    casilla_3 = '.'
                    casilla_4 = '.'
                    casilla_5 = '.'
                    casilla_6 = '.'
                    casilla_7 = '.'
                    casilla_8 = '.'
                    casilla_9 = '.'
                    {print} '¬°Tres en raya!'
                    {print} casilla_1 casilla_2 casilla_3
                    {print} casilla_4 casilla_5 casilla_6
                    {print} casilla_7 casilla_8 casilla_9
                    {print} ' '
                    {while} juego != 'terminado'
                        elecci√≥n = {ask} 'Jugador ' s√≠mbolo ', ¬øqu√© casilla quieres tomar?'
                        {if} elecci√≥n {in} casillas_disponibles
                            {remove} elecci√≥n {from} casillas_disponibles
                            {if} elecci√≥n == 1
                                casilla_1 = s√≠mbolo
                            {if} elecci√≥n == 2
                                casilla_2 = s√≠mbolo
                            {if} elecci√≥n == 3
                                casilla_3 = s√≠mbolo
                            {if} elecci√≥n == 4
                                casilla_4 = s√≠mbolo
                            {if} elecci√≥n == 5
                                casilla_5 = s√≠mbolo
                            {if} elecci√≥n == 6
                                casilla_6 = s√≠mbolo
                            {if} elecci√≥n == 7
                                casilla_7 = s√≠mbolo
                            {if} elecci√≥n == 8
                                casilla_8 = s√≠mbolo
                            {if} elecci√≥n == 9
                                casilla_9 = s√≠mbolo
                        {else}
                            {print} 'Esa casilla ya est√° tomada'
                        {print} casilla_1 casilla_2 casilla_3
                        {print} casilla_4 casilla_5 casilla_6
                        {print} casilla_7 casilla_8 casilla_9
                        {print} ' '
                        ganador = {ask} '¬øGanaste?'
                        {if} ganador == 'yes'
                            {print} '¬°Bien hecho, jugador ' s√≠mbolo '!'
                            juego = 'terminado'
                        {else}
                            {if} s√≠mbolo == 'x'
                                s√≠mbolo = 'o'
                            {else}
                                s√≠mbolo = 'x'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            17:
                story_text: |
                    En los niveles anteriores el juego Tres en raya ten√≠a un comportamiento algo molesto. Despu√©s de cada movimiento, ten√≠as que decidir t√∫ mismo si hab√≠as ganado o no.
                    De esta forma se pod√≠a jugar, pero era algo lento. En este nivel hemos aprendido el comando `{elif}`, que podemos utilizarlo para solucionar el problema.
                    Usar el {elif} para que Hedy pueda comprobar si el jugador ha ganado o no es divertido, pero tambi√©n requiere unas cuantas l√≠neas de c√≥digo extra.

                    En el c√≥digo de ejemplo ver√°s que hemos a√±adido los requisitos para ganar (3 casillas en l√≠nea, en horizontal, vertical o diagonal).
                    Puedes encontrarlas en las l√≠neas 46 a 69. Puedes comprobar que cada vez que se cumple el requisito el jugador a ganado y la variable juego se actualiza a 'fin'.
                    Eso significa que el bucle `{while}` terminar√° y el juego se acabar√°.
                example_code: |
                    ```
                    s√≠mbolo = 'x'
                    casillas_disponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    juego = 'en marcha'
                    casilla_1 = '.'
                    casilla_2 = '.'
                    casilla_3 = '.'
                    casilla_4 = '.'
                    casilla_5 = '.'
                    casilla_6 = '.'
                    casilla_7 = '.'
                    casilla_8 = '.'
                    casilla_9 = '.'
                    {print} '¬°Tres en raya!'
                    {print} casilla_1 casilla_2 casilla_3
                    {print} casilla_4 casilla_5 casilla_6
                    {print} casilla_7 casilla_8 casilla_9
                    {print} ' '
                    {while} juego != 'terminado':
                        elecci√≥n = {ask} 'Jugador ' s√≠mbolo ', ¬øqu√© casilla quieres tomar?'
                        {if} elecci√≥n {in} casillas_disponibles:
                            {remove} elecci√≥n {from} casillas_disponibles
                            {if} elecci√≥n == 1:
                                casilla_1 = s√≠mbolo
                            {if} elecci√≥n == 2:
                                casilla_2 = s√≠mbolo
                            {if} elecci√≥n == 3:
                                casilla_3 = s√≠mbolo
                            {if} elecci√≥n == 4:
                                casilla_4 = s√≠mbolo
                            {if} elecci√≥n == 5:
                                casilla_5 = s√≠mbolo
                            {if} elecci√≥n == 6:
                                casilla_6 = s√≠mbolo
                            {if} elecci√≥n == 7:
                                casilla_7 = s√≠mbolo
                            {if} elecci√≥n == 8:
                                casilla_8 = s√≠mbolo
                            {if} elecci√≥n == 9:
                                casilla_9 = s√≠mbolo
                        {else}:
                            {print} 'Esa casilla ya est√° tomada'
                        {print} casilla_1 casilla_2 casilla_3
                        {print} casilla_4 casilla_5 casilla_6
                        {print} casilla_7 casilla_8 casilla_9
                        {print} ' '
                        {if} casilla_1 == casilla_2 {and} casilla_2 == casilla_3 {and} casilla_1 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_4 == casilla_5 {and} casilla_5 == casilla_6 {and} casilla_4 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_7 == casilla_8 {and} casilla_8 == casilla_9 {and} casilla_7 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_1 == casilla_4 {and} casilla_4 == casilla_7 {and} casilla_1 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_2 == casilla_5 {and} casilla_5 == casilla_8 {and} casilla_2 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_3 == casilla_6 {and} casilla_6 == casilla_9 {and} casilla_3 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_1 == casilla_5 {and} casilla_5 == casilla_9 {and} casilla_1 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {elif} casilla_3 == casilla_5 {and} casilla_5 == casilla_7 {and} casilla_3 != '.':
                            {print} '¬°Jugador ' s√≠mbolo ' gana!'
                            juego = 'terminado'
                        {else}:
                            {if} s√≠mbolo == 'x':
                                s√≠mbolo = 'o'
                            {else}:
                                s√≠mbolo = 'x'
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
    turtle:
        name: La tortuga
        default_save_name: Tortuga
        description: Haz tu propio dibujo
        levels:
            1:
                story_text: |
                    En nivel 1 tambi√©n puedes usar Hedy para dibujar. Combinando giros y l√≠neas, ¬°puede hacer un cuadrado o una escalera!

                    Usando `{forward}` dibujas una l√≠nea hacia adelante. El numero detr√°s del comando determina qu√© tan lejos caminar√° la tortuga. `{turn} {right}` gira un cuarto de vuelta en el sentido de las agujas del reloj, `{turn} {left}` gira en sentido contrario a las agujas del reloj.

                    Si quieres ir hacia atr√°s, puedes utilizar el comando `{forward}` pero con un n√∫mero negativo. Por ejemplo `{forward} -100`

                    ### Ejercicio
                    Este es el principio de una peque√±a escalera, ¬øPuedes hacer 5 escalones m√°s?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    En este nivel puedes utilizar variables para hacer tu tortuga interactiva. Por ejemplo, puedes preguntar al jugador cuantos pasos dar√° la tortuga.
                example_code: |
                    ```
                    respuesta {is} {ask} ¬øCu√°ntos pasos deber√≠a dar la tortuga?
                    {forward} respuesta
                    ```
                story_text_2: |
                    Adem√°s, en el nivel 1 la tortuga solo pod√≠a girar a la derecha o a la izquierda. ¬°Qu√© aburrido!
                    En el nivel 2 la tortuga puede apuntar su nariz en todas las direcciones.

                    Utiliza 90 para girar un cuarto. Lo llamamos grados, un giro completo son 360 grados.

                    ### Ejercicio
                    ¬øPuedes hacer una figura con este c√≥digo? ¬øQuiz√° un triangulo o un c√≠rculo?
                example_code_2: |
                    ```
                    {print} Dibujando figuras
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                start_code: |-
                    {print} ¬°Carrera de tortugas!
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
            3:
                story_text: |
                    En este nivel, puedes utilizar `{at} {random}` con la tortuga que dibuja. Una elecci√≥n aleatoria hace que la tortuga camine por un camino diferente cada vez.
                    Utiliza `{at} {random}` para elegir un valor de una lista.
                    ### Ejercicio
                    ¬øPuedes copiar y pegar las l√≠neas 2 y 3 para crear un camino m√°s largo?
                example_code: |
                    ```
                    √°ngulos {is} 10, 50, 90, 150, 250
                    {turn} √°ngulos {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    angulo {is} 10, 50, 90, 150, 250
                    {turn} angulo {at} {random}
                    {forward} 25
            4:
                story_text: |
                    En nivel 3 tienes que usar comillas con `{print}` y `{ask}`. ¬°Tambi√©n al dibujar!
                example_code: |
                    ```
                    {print} _ Dibujando figuras _
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    Tambi√©n puedes cambiar los colores de las l√≠neas con el comando `{color}`. Mira el ejemplo.
                    Puedes utilizar el comando `{color} {white}` para hacer l√≠neas "invisibles". Puedes usar estas l√≠neas blancas para mover la tortuga done quieras en la pantalla antes de empezar a dibujar.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Dibujando figuras'
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
            5:
                story_text: |
                    En nivel 5 puede elegir con `{if}`. Por ejemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¬øQuieres un cuadrado o un tri√°ngulo?'
                    {if} figura {is} tri√°ngulo √°ngulo {is} 120
                    {else} √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ejercicio
                    Pon los n√∫meros correctos en este c√≥digo para hacerlo funcionar.
                    Despu√©s de hacer eso, puedes intentar a√±adir la opci√≥n al rev√©s.

                    **Extra** En vez de usar 'derecha' e 'izquierda', haz el programa otra vez usando norte, sur, este, oeste.
                    De esta manera podr√°s agregar mas direcciones como suroeste, noroeste, etc.
                example_code_2: |
                    ```
                    direcci√≥n {is} {ask} 'Quieres ir a la izquierda, a la derecha o seguir derecho?'
                    {if} direcci√≥n {is} derecha {turn} _
                    {if} direcci√≥n {is} izquierda {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¬øQuieres un cuadrado o un tri√°ngulo?'
                    {if} figura {is} tri√°ngulo √°ngulo {is} 120 {else} √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
            6:
                story_text: |
                    En nivel 5 puede usar c√°lculos para dibujar diferentes figuras.
                    Es posible que haya aprendido en la escuela que girar un c√≠rculo completo es de 360 grados. Si no, ¬°ahora ya lo sabes!
                    Es por eso que tambi√©n usas 90 grados para un cuadrado. 360 dividido por 4 es 90.
                    Ahora que podemos hacer matem√°ticas con Hedy, ¬°podemos dibujar todas las figuras que queramos!
                example_code: |
                    ```
                    √°ngulos = {ask} '¬øCu√°ntos √°ngulos quieres?'
                    √°ngulo = 360 / √°ngulos
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    ```
                start_code: '{print} ''Dibujando figuras'''
            8:
                story_text: |
                    Ahora que podemos repetir varias l√≠neas, podemos hacer figuras mas f√°cil.
                    Solo tenemos que poner el √°ngulo una vez y usar la variable `{repeat}`.

                    ### Ejercicio 1
                    El c√≥digo de ejemplo crea un cuadrado. Cambia el c√≥digo para que cree otra figura, como un triangulo o un hex√°gono.
                    Esto requiere cambiar dos l√≠neas de c√≥digo.
                    Consejo: Un circulo completo son 360 grados.

                    ### Ejercicio 2
                    Ahora crea un dibujo que consista en m√≠nimo 2 pol√≠gonos
                example_code: |
                    ```
                    √°ngulo = 90
                    {repeat} 4 {times}
                        {turn} √°ngulo
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Podemos mejorar el programa que dibuja diferentes figuras. Completa el c√≥digo y ¬°puedes dibujar cualquier pol√≠gono que te guste!
                example_code_2: |
                    ```
                    √°ngulos = {ask} '¬øCu√°ntos √°ngulos debo dibujar?'
                    √°ngulo = 360 / figura
                    {repeat} figura {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: figura = {ask} '¬øCu√°ntos √°ngulos debo dibujar?'
            9:
                story_text: |
                    Ahora que podemos usar un `{repeat}` dentro de otro `{repeat}`, podemos crear figuras m√°s complejas

                    ### Ejercicio 1
                    Este c√≥digo crea tres tri√°ngulos negros, c√°mbialo a cinco cuadrados rosados.

                    **Extra** Crea una figura de tu elecci√≥n que consista de al menos dos tipos diferentes de formas.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# pon tu c√≥digo aqu√≠'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distancias = 10, 20, 30, 40, 50, 60
                    {for} distancia {in} distancias
                        {forward} distancia
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: comando_mientras
        description: mientras
        levels:
            15:
                story_text: |-
                    Vamos a aprender un nuevo bucle, ¬°el bucle `{while}`! Continuamos el bucle mientras la sentencia sea verdadera.
                    As√≠ que no olvides cambiar el valor en el bucle.

                    En el c√≥digo de ejemplo, continuamos hasta que se de una respuesta verdadera.
                    Si nunca se da la respuesta correcta, 'el bucle nunca termina!
                example_code: |
                    ```
                    respuesta = 0
                    {while} respuesta != 25
                        respuesta = {ask} '¬øCu√°nto es 5 veces 5?'
                    {print} 'La respuesta es correcta'
                    ```
                start_code: |-
                    respuesta = 0
                    {while} respuesta != 25
                        respuesta = {ask} '¬øCu√°nto es 5 veces 5?'
                    {print} 'La respuesta es correcta'
    years:
        name: A√±o Nuevo
        default_save_name: Cuenta atr√°s para el A√±o Nuevo
        description: ¬°Cuenta regresiva para el a√±o nuevo!
        levels:
            11:
                story_text: |
                    En este nivel puedes usar el comando `{for}` numero `{in}` `{range}` para la cuenta regresiva al a√±o nuevo.

                    ### Ejercicio
                    ¬°Rellena los espacios en blanco y haz que el c√≥digo funcione!
                example_code: |
                    ```
                    {for} numero {in}{range}_{to}_
                             {print} numero
                    {print} 'Feliz a√±o nuevo!
                    ```
                start_code: '# ponga su c√≥digo aqu√≠'
