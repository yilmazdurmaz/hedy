adventures:
    story:
        name: Geschichte
        default_save_name: Geschichte
        description: Geschichte
        levels:
            1:
                story_text: |
                    In Level 1 kannst du die Hauptfigur deiner Geschichte √§ndern, indem du ihren Namen selbst eingibst.

                    Nutze `{ask}` in der ersten Zeile um zu fragen, wer der Hauptcharakter der Geschichte sein soll.

                    Beginne anschlie√üend eine Zeile mit `{print}`, wenn ein Satz ausgegeben werden soll.
                    Nutze `{echo}`, wenn du m√∂chtest, dass der Name deiner Hauptfigur am Ende des Satzes steht.
                example_code: |
                    ```
                    {ask} Der Name der Hauptfigur lautet
                    {print} Die Hauptfigur l√§uft nun durch einen dunklen Wald
                    {echo} Er ist etwas ver√§ngstigt,
                    {print} Er h√∂rt √ºberall seltsame Ger√§usche
                    {print} Er bef√ºrchtet, dass es in diesem Wald spukt
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Geschichte aus mindestens 6 Zeilen Code.
                    Diese Geschichte soll nicht die gleiche sein wie im Beispiel-Code.
                    Benutze mindestens einen `{ask}` und einen `{echo}` Befehl.
                    Du kannst das Thema frei w√§hlen.
                    Wenn dir kein Thema einf√§llt, nimm eines der folgenden: ins Kino gehen, ein Sportwettkampf oder ein Tag im Zoo.
                start_code: '{print} Deine Geschichte beginnt hier'
            2:
                story_text: |
                    In Level 2 kannst du deine Geschichte noch etwas spannender machen. Der Name deiner Hauptfigur kann nun an jeder Stelle im Satz auftauchen.

                    Daf√ºr musst du aber auch ein kleines bisschen mehr programmieren. Du musst dir jetzt seinen oder ihren Namen richtig merken.

                    Daf√ºr kannst du den Namen irgendwo im Satz verwenden.
                example_code: |-
                    ```
                    Name {is} {ask} Wie lautet der Name der Hauptfigur?
                    {print} Name l√§uft nun durch einen dunklen Wald.
                    {print} Name hat etwas Angst.
                    {print} Pl√∂tzlich ert√∂nen seltsame Ger√§usche...
                    {sleep}
                    {print} Name hat Angst, dass es in diesem Wald spukt.
                    ```
                story_text_2: |
                    ### √úbung
                    Nun ist es an der Zeit Variablen zu deiner eigenen Geschichte aus dem vorigen Level hinzu zu f√ºgen.
                    Gehe zu "Meine Programme", suche dein Level 1 Geschichten-Abenteuer und kopiere den Code. F√ºge den Code in den Eingabebereich in diesem Level ein.

                    Dieser Code wird nicht funktionieren, weil du noch keine Variablen benutzt hast.
                    Bringe den `{ask}` Befehl und den `{echo}` Befehl in deinem Code in die richtige Form, die du in diesem Level gelernt hast.

                    **Extra** F√ºge deinem Code den `{sleep}`-Befehl hinzu, um Spannung in deiner Geschichte aufzubauen.
                start_code: '{print} Deine Geschichte'
            3:
                story_text: |
                    In Level 3 wird es etwas witziger. Du kannst nun etwas ganz zuf√§lliges zu Deiner Geschichte hinzuf√ºgen. Ein beliebiges Monster, ein Tier oder ein Hindernis. Das funktioniert so:
                example_code: |
                    ```
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Er h√∂rt jetzt ein Tierger√§usch von Tiere {at} {random}
                    ```
                story_text_2: |
                    Der Befehl `{add}` k√∂nnte auch n√ºtzlich werden in deiner Geschichte.
                example_code_2: |
                    ```
                    {print} Er h√∂rt ein Ger√§usch
                    Tiere {is} üêø, ü¶î, ü¶á, ü¶â
                    Tier {is} {ask} Was denkst du ist es?
                    {add} Tier {to_list} Tiere
                    {print} Es war das Tiere {at} {random}
                    ```
                story_text_3: |
                    Das ist ein Beispiel f√ºr den `{remove}` Befehl in deiner Geschichte

                    ### √úbung
                    Kopiere deine Geschichte aus den vorigen Leveln in dieses Level.
                    In diesem Level hast du 3 neue Befehle gelernt: `{at} {random}` , `{add} {to}` und `{remove} {from}`.
                    F√ºge neue Zeilen Code zu deiner Geschichte hinzu, sodass alle neuen Befehle mindestens ein Mal in deiner Geschichte vorkommen.
                example_code_3: |
                    ```
                    {print} Sein Ruck sack wurde viel zu schwer.
                    {print} Drinnen waren eine Flasche Wasser, eine Taschenlampe und ein Ziegelstein.
                    Rucksack {is} Wasser, Taschenlampe, Ziegelstein
                    rauswerfen {is} {ask} Welchen Gegenstand soll er rauswerfen?
                    {remove} rauswerfen {from} Rucksack
                    ```
                start_code: '{print} Deine Geschichte'
            4:
                story_text: |
                    Vielleicht ist dir aufgefallen, dass es in den vorigen Leveln noch ein Problem gab. Hast du versucht, einen Satz mit dem Wort Name zu schreiben? Z.B. `{print}` mein Name ist Name.
                    In diesem Level kannst du das l√∂sen. Du musst alles, was du ausgeben m√∂chtest, in einfache Anf√ºhrungszeichen setzen.

                    ### √úbung
                    Kopiere den Beispielcode und f√ºge die Anf√ºhrungszeichen in die Zeilen ein.

                    ### √úbung 2
                    Gehe zur√ºck zum vorherigen Level und kopiere deinen Storycode. Bringe den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen einf√ºgst.
                    Beachte: Die Variablen in deiner eigenen Geschichte sollten au√üerhalb der Anf√ºhrungszeichen stehen. So wie in der zweiten Zeile des Beispielcodes. In dieser Zeile wird der Variablenname au√üerhalb der Anf√ºhrungszeichen gesetzt.
                example_code: |
                    ```
                    Name {is} {ask} _ Was ist dein Name? _
                    {print}  _ Der Name der Hauptfigur lautet _ Name
                    {print} Name  _ l√§uft nun in den Wald hinein _
                    {print} Name _ f√ºrchtet sich ein wenig _
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Da h√∂rt er pl√∂tzlich ein _ Tiere {at} {random}
                    {print} Name _ erschrickt. Es spukt in diesem Wald _
                    ```
                start_code: '{print} ''Deine Geschichte wird hier gedruckt!'''
            5:
                story_text: |
                    In diesem Level programmierst Du unterschiedliche Enden, was Deine Geschichte noch spannender werden l√§sst.
                    Im Beispielcode kannst du sehen, wie man zwei verschiedene Enden machen kann.

                    ### √úbung 1
                    Schreibe eine neue Kurzgeschichte von mindestens sechs Codezeilen √ºber ein Thema deiner Wahl.
                    Keine Inspiration? W√§hle eines der folgenden Themen: ein Superheld, ein langweiliger Schultag, gestrandet auf einer einsamen Insel.

                    Gib der Spielerin nun die M√∂glichkeit, ein gutes oder schlechtes Ende zu w√§hlen, genau wie im Beispielcode.
                    Programmiere beide Enden.

                    ### √úbung 2
                    Kopiere die Geschichte, die du in deinem eigenen Abenteuer in den vorherigen Levels erstellt hast.
                    Finde einen Weg, um mindestens zwei `{if}` und `{else}` Befehle in deine Geschichte einzubauen.
                    Dies kann mit einem guten oder schlechten Ende geschehen, aber du kannst auch andere M√∂glichkeiten finden, die Befehle einzubauen.
                example_code: |
                    ```
                    name {is} {ask} 'Wer l√§uft durch den Wald?'
                    {print} name ' l√§uft durch den Wald.'
                    {print} name ' begegnet einem Monster.'
                    ende {is} {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} ende {is} gut {print} name ' zieht ihr Schwert und das Monster ergreift die Flucht.'
                    {else} {print} 'Das Monster frisst ' name '.'
                    ```
                start_code: '{print} ''Deine Geschichte beginnt genau hier.'''
            7:
                story_text: |
                    In einer Geschichte kommt es manchmal vor, dass jemand ein Wort mehrmals hintereinander sagt. So zum Beispiel, wenn jemand um Hilfe ruft, oder etwas singt.
                    Solche Wiederholungen kannst du mit dem Befehl `{repeat}` in diesem Level in deine Geschichte einf√ºgen.

                    ### √úbung
                    F√ºge Wiederholungen zu deiner eigenen Geschichte hinzu. Gehe zur√ºck zu deinen gespeicherten Programmen, w√§hle dein Geschichte-Programm aus Level 6 aus und
                    finde eine Zeile die `{print}` enth√§lt und wiederhole sie.
                example_code: |
                    ```
                    {print} 'Der Prinz rief immer wieder um Hilfe.'
                    {repeat} 5 {times} {print} 'Hilfe!'
                    {print} 'Warum hilft mir niemand?'
                    ```
                start_code: '{repeat} 5 {times} {print} ''Hilfe!'''
            8:
                story_text: |
                    In diesem Level kannst du mehrere Zeilen zu einem `{if}`-Befehl hinzuf√ºgen. So kannst du deine guten und schlechten Enden etwas erweitern.

                    ### √úbung 1
                    Der Beispiel-Code zeigt zwei verschiedene Enden; eines bei dem die Figuren in eine Zeitmaschine springen und eines wo sie es nicht tun.
                    Vervollst√§ndige die L√ºcken mit mindestens einem Satz pro Ende.
                    **(extra)** Mach die Geschichte l√§nger. Was passiert in der Geschichte? Du kannst auch ein zweites `{ask}` mit verschiedenen Auswahlm√∂glichkeiten hinzuf√ºgen.

                    ### √úbung 2
                    Gehe zur√ºck zu deinen gespeicherten Programmen und w√§hle deine Geschichte-Programm aus Level 5 aus. Schreibe nun ein gutes und ein schlechtes Ende mit jeweils mindestens drei Zeilen L√§nge!
                example_code: |
                    ```
                    {print} 'OH NEIN! Der T-Rex kommt immer n√§her!'
                    Ende = {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} Ende {is} gut
                        {print} 'Richard springt gerade noch rechtzeitig zur√ºck in seine Zeitmaschine.'
                        {print} _
                    {else}
                        {print} 'Oh nein! Richard ist zu langsam...'
                        {print} _
                    ```
                start_code: '# setze hier deinen Code hin'
            9:
                story_text: |
                    In diesem Level kannst du `{if}` und `{repeat}` innerhalb anderer `{if}` und `{repeat}` Befehle verwenden.
                    Das er√∂ffnet dir viele M√∂glichkeiten und hilft dir, deine Geschichte wirklich interaktiv werden zu lassen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, damit das `{if}` korrekt funktioniert.

                    ### √úbung 2
                    F√ºge ein `{if}` und `{else}` in den Teil der Geschichte hinzu, wo Robin auch nach Hause geht.

                    ### √úbung 3
                    Gehe zur√ºck zu deiner Geschichte aus Level 8 und benutze mindestens zwei `{if}`s innerhalb eines anderen `{if}`.
                example_code: |
                    ```
                    {print} 'Robin l√§uft durch die Innenstadt.'
                    Ort = {ask} 'Geht Robin in ein Gesch√§ft oder nach Hause?'
                    {if} Ort {is} Gesch√§ft
                        {print} 'Sie betritt ein Gesch√§ft.'
                        {print} 'Robin sieht ein interessant aussehendes Buch'
                        Buch = {ask} 'Kauft Robin das Buch?'
                        {if} Buch {is} ja
                        _ {print} 'Robin kauft das Buch und geht nach Hause.'
                        _ {else}
                        _ {print} 'Robin verl√§sst das Gesch√§ft und geht nach Hause.'
                    {else}
                        {print} 'Robin geht nach Hause.'
                    ```
                start_code: '# setze hier deinen Code hin'
            10:
                story_text: |
                    In diesem Level kannst du den {for} Befehl f√ºr deine Geschichte nutzen. Damit kannst du zum Beispiel ganz einfach das Kinderbuch "Brauner B√§r, wen siehst denn Du?" programmieren.

                    ### √úbung

                    Schau dir <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">die Geschichte</a> an, falls du sie nicht kennst und stelle sicher, dass es wie im Buch ausgegeben wird.
                example_code: "```\ntiere = _ , _ , _ \n{print} 'Brauner B√§r'\n{print} 'Was siehst du?'\n```\n"
                start_code: '# setze hier deinen Code hin'
            12:
                story_text: |-
                    In diesem Level werden Anf√ºhrungszeichen ben√∂tigt, um mehrere W√∂rter in einer Variablen zu speichern.

                    ### √úbung

                    Finde eine Geschichte aus einem beliebigen vorherigen Level. Stelle sicher, dass Anf√ºhrungszeichen an den richtigen Stellen hinzugef√ºgt werden.
                example_code: |
                    ```
                    Name = 'Die K√∂nigin von England'
                    {print} Name ' a√ü ein St√ºck Kuchen, als pl√∂tzlich...'
                    ```
                start_code: '# setze hier deinen Code hin'
            13:
                story_text: |
                    Durch die Verwendung der Befehle `{and}` und `{or}` kannst du deine Geschichten vielseitiger gestalten. Du kannst zwei Fragen stellen und auf die Kombination der Antworten antworten.

                    ### √úbung 1
                    Sieh dir den Beispiel-Code an und vervollst√§ndige ihn. F√ºge dann mindestens 2 weitere `{if}` Befehle mit `{and}` oder `{or}` hinzu.

                    ### √úbung 2
                    Suche eine Geschichte aus einem vorherigen Level und f√ºge ein `{and}` oder ein `{or}` hinzu.
                example_code: |
                    ```
                    {print} 'Unser Held geht durch den Wald'
                    {print} 'Der Pfad teilt sich in zwei Wege'
                    path = {ask} 'Welchen Weg soll sie w√§hlen?'
                    weapon = {ask} 'Welche Waffe zieht sie?'
                    {if} Pfad {is} 'links' {and} Waffe {is} 'Schwert'
                        _
                    ```
                start_code: '# setze hier deinen Code hin'
            15:
                story_text: |
                    Mit der `{while}`-Schleife kannst du deine Geschichten noch interessanter gestalten. So kannst du zum Beispiel mit `{while} Spiel {is} 'l√§uft'` dein Spiel so lange laufen lassen, bis es tats√§chlich vorbei ist.
                    Oder du l√§sst die Spieler mit `{while} Schwert {is} 'verloren'` so lange weiter suchen, bis sie etwas finden.
                example_code: |
                    ```
                    Schl√ºssel = 'verloren'
                    {print} 'Du stehst in Deinem Garten, hast jedoch Deine Schl√ºssel verloren.'
                    {print} 'Wo willst Du nach ihnen suchen?'
                    {print} 'W√§hle zwischen: Baum, Blumenbeet, Stein, Briefkasten'
                    {while} Schl√ºssel == 'verloren'
                        Ort = {ask} 'Wo willst Du suchen?'
                        {if} Ort == 'Blumenbeet'
                            {print} 'Ah, hier sind sie!'
                            Schl√ºssel = 'gefunden'
                        {else}
                            {print} 'Nope, sie sind nicht beim ' Ort '.'
                    {print} 'Jetzt kannst Du ins Haus!'
                    ```
                start_code: '# setze hier deinen Code hin'
            18:
                story_text: |
                    Wir werden eine andere Geschichte ausgeben, aber nun m√ºssen wir Klammern mit `{print}` benutzen.

                    ### √úbung 1
                    Erstelle eine Geschichte mit mindestens 5 S√§tzen. Du musst 'name' noch nicht benutzen.
                example_code: |
                    ```
                    {print}('Willkommen in dieser Geschichte!')
                    ```
                story_text_2: |
                    ### √úbung 2
                    Wir haben bereits einen `{input}` Befehl f√ºr dich vorbereitet. Benutze zuerst die `name` Variable in deiner Geschichte.
                    F√ºge dann einen zweiten `{ask}` Befehl hinzu und benutze diese Variable ebenfalls.
                    Tipp: Denke an die Kommas im `{print}` Befehl zwischen Text und Variablen!
                example_code_2: |
                    ```
                    name = {input}("Wie ist dein Name?")
                    {print}('Willkommen in dieser Geschichte!')
                    ```
                start_code: '# platziere deinen Code hier'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## Remove from
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: |-
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and or
        description: introducing and or
        levels:
            13:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.

                    If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du den  `{print}` Befehl verwenden kannst, bist du bereit, den n√§chsten Befehl zu lernen:  `{ask}`. Mit dem `{ask}` Befehl kannst du Fragen stellen. Probiere es aus:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## Der echo Befehl
                    Wenn du m√∂chtest, dass der Computer die Antwort f√ºr dich wiederholt, kannst du den `{echo}` Befehl verwenden. Beachte, dass die Antwort am Ende des Satzes wiederholt wird - also in diesem Beispiel nach hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere die `{ask}` und `{echo}` Befehle aus. Zuerst f√ºlle die L√ºcken, damit das Programm funktioniert.
                    Dann frage 2 weitere Fragen mit dem `{ask}` Befehl. Nach jedem `{ask}` benutze ein `{echo}` um die Antwort auf dem Bildschirm auszugeben.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
                start_code: |
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
            2:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du **Variablen** in deinen Programmen benutzen kannst, brauchen wir den `{echo}` Befehl nicht mehr.
                    Wir k√∂nnen Variablen verwenden, um die Antworten auf unsere Fragen zu speichern. Dadurch k√∂nnen wir die Antwort an mehreren Stellen im Code verwenden.
                    Probiere es aus:

                    Damit wird dein Code viel interaktiver!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### √úbung
                    In vorherigen √úbung hast du das Setzen von Variablen mit dem `{is}` Befehl ge√ºbt.
                    Du hast mindestens 3 Variablen definiert und sie im print Befehl verwendet.
                    Jetzt wollen wir die Variablen wie unserem Beispiel interaktiv machen, statt sie zu setzen.

                    Kopiere den Code der vorherigen √úbung hierher und mache sie mit `{ask}` Befehlen interaktiv.
                example_code_2: |
                    ```
                    favorite_animals is ask What is your favorite animal?
                    print I like favorite_animals
                    ```
                start_code: |-
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Versuche, so nah wie m√∂glich an die 21 heran zu kommen
        levels:
            17:
                story_text: |
                    Blackjack ist ein einfaches Kartenspiel, bei dem du so nahe wie m√∂glich an die 21 herankommen musst. Du bekommst zwei Karten. Jede Karte hat den Wert ihrer abgebildeten zahl und die Karten mit Bildern (Bube, Dame, K√∂nig) sind 10 Punkte Wert.
                    Das Ass is entweder 1 oder 11 Punkte wert (das kannst du dir aussuchen). Der Kartengeber, dein Gegner, erh√§lt auch zwei Karten.
                    Wenn du m√∂chtest, kannst du noch eine Karte ziehen und ihre Punkte werden zu deinen dazugerechnet. Der Kartengeber darf auch noch eine Karte ziehen.
                    Aber pass auf, dass du nicht mehr als 21 Punkte bekommst, denn dann verlierst du!
                    Der Spieler, der am n√§chsten an 21 herankommt ohne sie zu √ºberschreiten, gewinnt!

                    Viel Spa√ü!
                example_code: |
                    ```
                    {print} 'BLACKJACK'
                    karten = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Bube', 'Dame','K√∂nig', 'As']
                    punkte = 0
                    geber_punkte = 0
                    karte_1 = karten[{random}]
                    karte_2 = karten[{random}]
                    karte_3 = karten[{random}]
                    geber_karte_1 = karten[{random}]
                    geber_karte_2 = karten[{random}]
                    geber_karte_3 = karten[{random}]
                    # Punkte f√ºr Karte 1
                    {if} karte_1 == 'Bube' {or} karte_1 == 'Dame' {or} karte_1 == 'K√∂nig':
                        punkte = punkte + 10
                    {elif} karte_1 == 'As':
                        punkte = punkte + 11
                    {else}:
                        punkte = punkte + karte_1
                    # Punkte f√ºr Karte 2
                    {if} karte_2 == 'Bube' {or} karte_2 == 'Dame' {or} karte_2 == 'K√∂nig':
                        punkte = punkte + 10
                    {elif} karte_2 == 'As':
                        punkte = punkte + 11
                    {else}:
                        punkte = punkte + karte_2
                    # Punkte f√ºr Geberkarte 1
                    {if} geber_karte_1 == 'Bube' {or} geber_karte_1 == 'Dame' {or} geber_karte_1 == 'K√∂nig':
                        geber_punkte = geber_punkte + 10
                    {elif} geber_karte_1 == 'As':
                        geber_punkte = geber_punkte + 11
                    {else}:
                        geber_punkte = geber_punkte + geber_karte_1
                    # Punkte f√ºr Geberkarte 2
                    {if} geber_karte_2 == 'Bube' {or} geber_karte_2 == 'Dame' {or} geber_karte_2 == 'K√∂nig':
                        geber_punkte = geber_punkte + 10
                    {elif} geber_karte_2 == 'As':
                        geber_punkte = geber_punkte + 11
                    {else}:
                        geber_punkte = geber_punkte + geber_karte_2
                    # Zwei As
                    {if} card_1 == 'As' {and} card_2 == 'As':
                        punkte = 12
                    {if} geber_karte_1 == 'As' {and} geber_karte_2 == 'As':
                        geber_punkte = 12
                    # Zwischenstand
                    {print} 'Du hast ' karte_1 ' und ' karte_2 ' (' punkte ' Punkte)'
                    {print} 'Der Geber hat ' geber_karte_1 ' und ' geber_karte_2 ' (' geber_punkte ' Punkte)'
                    # Extra Karte f√ºr den Spieler
                    extra = {ask} 'M√∂chtest du eine extra Karte?'
                    {if} extra == 'ja':
                        {if} karte_3 == 'Bube' {or} karte_3 == 'Dame' {or} karte_3 == 'K√∂nig':
                            punkte = punkte + 10
                        {elif} karte_3 == 'Ace':
                            {if} punkte > 11:
                                punkte = punkte + 11
                            {else}:
                                punkte = punkte + 1
                        {else}:
                            punkte = punkte + karte_3
                        {print} 'Du hast extra ' karte_3 ' (' punkte ' Punkte)'
                    {else}:
                        {print} 'Keine extra Karten'
                    # Gewinner
                    {if} punkte > 21 {or} geber_punkte > punkte {or} geber_punkte == 21:
                        {print} 'Du verlierst'
                    {elif} geber_punkte < 17:
                        {print} 'Der Geber nimmt eine extra Karte. Es ist eine... ' geber_karte_3
                        {if} geber_karte_3 == 'Bube' {or} geber_karte_3 == 'Dame' {or} geber_karte_3 == 'K√∂nig':
                            geber_punkte = geber_punkte + 10
                        {elif} geber_karte_3 == 'As':
                            {if} geber_punkte < 11:
                                geber_punkte = geber_punkte + 11
                            {else}:
                                geber_punkte = geber_punkte + 1
                        {else}:
                            geber_punkte = geber_punkte + geber_karte_3
                        {print} 'Der Geber hat jetzt ' geber_punkte ' Punkte'
                        {if} geber_punkte < 21 {and} geber_punkte > punkte:
                            {print} 'Du verlierst'
                        {else}:
                            {print} 'Du gewinnst'
                    {elif} punkte > geber_punkte {and} punkte < 21:
                        {print} 'Du gewinnst!'
                    ```
                start_code: '# Schreibe deinen Code hier'
    calculator:
        name: Taschenrechner
        default_save_name: Taschenrechner
        description: Programmiere einen Taschenrechner
        levels:
            6:
                story_text: |
                    Nun da du die Mathematik beherrscht, kannst du selbst einen Taschenrechner erstellen!
                example_code: |
                    ```
                    nummer1 {is} {ask} 'Gib die erste Zahl ein:'
                    nummer2 {is} {ask} 'Gib die zweite Zahl ein:'
                    richtige_antwort = nummer1 * nummer2
                    {print} nummer1 ' mal ' nummer2 ' ist ' richtige_antwort
                    ```
                story_text_2: |
                    ### √úbung
                    Der Taschenrechner oben berechnet die Antwort f√ºr dich, aber du kannst auch ein Programm erstellen, um deine mathematischen F√§higkeiten zu testen, so wie dieses:
                    F√ºlle die L√ºcken aus, um es zu vervollst√§ndigen!
                example_code_2: |
                    ```
                    richtige_antwort = 11 * 27
                    antwort = {ask} 'Wie viel ist 11 mal 27?'
                    {if} antwort {is} _ {print} 'Gut gemacht!'
                    {else} {print} 'Falsch! Es war ' _
                    ```
                story_text_3: |
                    Du kannst den Computer auch allein zuf√§llige Summen rechnen lassen, indem du zuf√§llig benutzt.
                    So w√§hlst du einige Tabellen zum √úben, und daraus erh√§ltst du immer eine andere Summe.
                start_code: '{print} ''Willkommen bei diesem Taschenrechner!'''
            9:
                story_text: |
                    In Level 6 hast du einen Taschenrechner erstellt. In diesem Level kannst du den Code erweitern, so dass er mehrere Fragen stellt.

                    ### √úbung 1
                    Kannst du Zeile 10 vervollst√§ndigen, damit das Programm funktioniert?

                    ### √úbung 2
                    Gib dem Spieler eine R√ºckmeldung, wenn sie eine richtige oder falsche Antwort eingegeben haben. Um das zu erreichen, erweitere dein Programm mit einem `{else}`.
                example_code: |
                    ```
                    Punkte = 0
                    {repeat} 10 {times}
                        Nummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        Nummer1 = Nummern {at} {random}
                        Nummer2 = Nummern {at} {random}
                        richtige_antwort = Nummer1 * Nummer2
                        {print} 'Was ist ' Nummer1 ' mal ' Nummer2 '?'
                        Antwort = {ask} 'Tippe deine Antwort hier ein...'
                        {print} 'Deine Antwort ist' Antwort
                        {if} _ {is} _
                            Punkte = Punkte + 1
                    {print} 'Gro√üartig gemacht! Dein Punktestand ist... ' Punkte ' von 10!'
                    ```
                start_code: '{print} ''Welcome to this calculator!'''
            10:
                story_text: |
                    Dieses Taschenrechnerspiel hilft dir deine Multiplikationstabellen zu √ºben!
                    ### √úbung
                    Kannst du mehr Nummern zur Liste hinzuf√ºgen, um alle Malfolgen bis 10 zu √ºben?
                example_code: |
                    ```
                    nummern = 1, 2, 3
                    {for} nummer1 {in} nummern
                        {for} nummer2 {in} nummern
                            antwort = {ask} 'Wie viel ist ' nummer2 ' mal ' nummer1 '?'
                            richtig = nummer1 * nummer2
                            {if} antwort {is} richtig
                                {print} 'Gut gemacht!'
                            {else}
                                {print} 'Das ist falsch. Die richtige Antwort ist ' richtig
                    ```
                start_code: '# setze hier deinen Code hin'
            11:
                story_text: |
                    Mit einem `{for}` kannst du das Multiplikationsprogramm vereinfachen.

                    ### √úbung 1
                    Verbessere den Beispiel-Code, sodass es eine nette Multiplikationstabelle ausgibt: "1 mal 10 is 10", "2 mal 10 ist 20", usw.

                    ### √úbung 2
                    Gehe zur√ºck zu deinem Level 10 Multiplikations-Code und ver√§ndere ihn, sodass er ein `{for}` und `{range}` benutzt.
                example_code: |
                    ```
                    zahl = 10
                    {for} i {in} {range} 1 bis 10
                        {print} i * zahl
                    ```
                start_code: '# platziere deinen Code hier'
            12:
                story_text: |
                    In diesem Level kannst du einen Taschenrechner bauen, der mit Dezimalzahlen arbeitet.

                    ### √úbung 1
                    F√ºlle die L√ºcken aus, um den Taschenrechner zu vervollst√§ndigen. Denke daran, f√ºr Dezimalzahlen einen Punkt und kein Komma zu verwenden.

                    ### √úbung 2
                    Erstelle ein neues Mathematik-√úbungsprogramm, aber verwenden jetzt Dezimalzahlen.
                    Erstelle eine Liste von Zahlen, w√§hle zwei zum Multiplizieren aus und lasse die Spielerin antworten.
                    Und nat√ºrlich musst du die Antwort √ºberpr√ºfen! **(extra)** Erh√∂he den Schwierigkeitsgrad, indem du Leben hinzuf√ºgen: Ein Spieler verliert ein Leben f√ºr eine falsche Antwort und nach drei falschen Antworten endet das Spiel.
                example_code: |
                    ```
                    Zahl1 = {ask} 'Was ist die erste Zahl?'
                    Zahl2 = {ask} 'Was ist die zweite Zahl?'
                    Antwort = _
                    {print} Zahl1 ' plus ' Zahl2 ' macht ' _
                    ```
                start_code: '# setze hier deinen Code hin'
            13:
                story_text: |
                      ### √úbung 1
                      Wir wollen das √úbungsprogramm etwas schwieriger gestalten. Der Spieler muss nun zwei Fragen richtig beantworten. F√ºlle die L√ºcken aus, um das Programm zu vervollst√§ndigen.

                      ### √úbung 2 (extra)
                      Manchmal gibt es bei Berechnungen mehrere richtige Antworten. Zum Beispiel kann 10 durch 5 und durch 2 geteilt werden. Die Frage "Welche Zahl teilt 10?" kann also durch 2 und durch 5 beantwortet werden.
                      Frage nach einer Berechnung, die mehrere richtige Antworten hat, bitte die Spielerin, sie zu beantworten, und bestimme mit `{or}`, ob die Antwort richtig ist.
                      Leere das Programmierfeld und erstelle deine eigene L√∂sung.
                example_code: |
                    ```
                    antwort1 = {ask} 'Was ist 10 mal 7?'
                    antwort2 = {ask} 'Was ist 6 mal 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                start_code: '# Schreib deinen Code hier'
            14:
                story_text: |
                    In diesem Level kannst du das Spiel 'Zahlen raten' programmieren
                example_code: |
                    ```
                    {print} 'Rate welche Zahl'
                    Zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    Zahl = Zahlen {at} {random}
                    Spiel = 'l√§uft'
                    {for} i {in} {range} 1 {to} 10
                        {if} Spiel == 'l√§uft'
                            Vermutung = {ask} 'Welche Zahl denkst du ist es?'
                            {if} Vermutung > Zahl
                                {print} 'Niedriger!'
                            {if} Vermutung < Zahl
                                {print} 'H√∂her!'
                            {if} Vermutung == Zahl
                                {print} 'Du hast gewonnen!'
                                Spiel = 'vorbei'
                    ```
                start_code: '# setze hier deinen Code hin'
            15:
                story_text: |
                    Du kannst die `{while}` Schleife zum Taschenrechnerspiel, was du im vorigen Level gelernt hast, hinzuf√ºgen.
                    Dies stellt sicher, dass der Spieler nicht zur n√§chsten Frage weiterkommt, wenn er falsch antwortet.
                example_code: |
                    ```
                    punkte = 0
                    {for} i {in} {range} 0 {to} 9
                        zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        zahl1 = zahlen {at} {random}
                        zahl2 = zahlen {at} {random}
                        korrekt = zahl1 * zahl2
                        antwort = 0
                        {while} antwort != korrekt
                            {print} 'Wie viel ist ' zahl1 ' mal ' zahl2 '?'
                            antwort = {ask} 'Schreibe deine Antwort hier:'
                            {print} 'Deine Antwort ist ' antwort
                        {print} 'Gut gemacht!'
                    {print} 'Du gewinnst!'
                    ```
                start_code: '# setze hier deinen Code hin'
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear command
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!
                example_code: |
                    ```
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
                    ```
                start_code: |
                    print '3'
                    sleep
                    clear
                    print '2'
                    sleep
                    clear
                    print '1'
                    sleep
                    clear
                    print 'SURPRISE!'
    default:
        name: Einf√ºhrung
        default_save_name: Einleitung
        description: Erkl√§rung des Levels
        levels:
            1:
                story_text: |
                    Willkommen bei  Hedy! In Level 1 kannst du anfangen eine Geschichte auszugeben.

                    Probiere den Code selbst mit der gr√ºnen Schaltfl√§che 'Programm ausf√ºhren' unter dem Programmierfeld aus.

                    Bereit? Dann gehe zum n√§chsten Tab um deinen ersten Befehl zu lernen!
                start_code: '{print} Hallo Welt!'
            2:
                story_text: |
                    In Level 2 lernen wir zwei neue Befehle: `{is}` und `{sleep}`.
                    Du kannst ein Wort mit `{is}` benennen. Das nennt man eine Variable. In diesem Beispiel haben wir eine Variable name und eine Variable alter erstellt. Du kannst das Wort name irgendwo in deinem Code verwenden und es wird dann durch Hedy ersetzt, und zwar so:

                    Deswegen ben√∂tigst du den Befehl `{echo}` nicht mehr!
                example_code: |
                    ```
                    name {is} Hedy
                    alter {is} 15
                    {print} name ist alter Jahre alt
                    ```
                story_text_2: |
                    `{print}` funktioniert genauso wie vorher, aber der Befehl `{ask}` hat sich ver√§ndert. Du brauchst jetzt auch f√ºr den Befehl `{ask}` eine Variable. Das sieht so aus:
                start_code: '{print} Hallo Welt!'
            3:
                story_text: |
                    In Level 3 kannst du eine Liste erstellen. Du kannst den Computer etwas zuf√§llig aus der Liste ausw√§hlen lassen. Du machst dies mit `{at} {random}`. Es bedeutet: W√§hle ein Element an zuf√§lliger Stelle in der Liste aus.
                start_code: '{print} Hallo Welt!'
            4:
                story_text: |
                    In Level 4 haben sich `{print}` und `{ask}` ge√§ndert.
                    Du musst Text, den du genau so mit ausgeben m√∂chtest, in Anf√ºhrungszeichen setzen.
                    Das ist n√ºtzlich, denn nun kannst du alle W√∂rter ausgeben, die du m√∂chtest. Auch die W√∂rter, mit denen du etwas mit `{is}` gespeichert hast.
                    Die meisten Programmiersprachen verwenden ebenfalls Anf√ºhrungszeichen bei ihren Ausgabebefehlen, sodass wir dem echten Programmieren einen Schritt n√§her kommen!
                example_code: |
                    ```
                    {print} 'Ab jetzt musst du Anf√ºhrungszeichen verwenden!'
                    antwort {is} {ask} 'Was m√ºssen wir ab jetzt verwenden?'
                    {print} 'Wir m√ºssen ' antwort ' verwenden.'
                    ```
                start_code: '{print} ''Hallo Welt'''
            5:
                story_text: |
                    In Level 5 gibt es etwas Neues, n√§mlich das `{if}`! Mit `{if}` kannst du zwischen zwei verschiedenen M√∂glichkeiten w√§hlen.
                    Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Bl√∂d!', wenn du etwas anderes eingibst.
                    `{ask}` und `{print}` funktionieren immer noch wie in Level 4.
                example_code: |
                    ```
                    name {is} {ask} 'Wie hei√üt du?'
                    {if} name {is} Hedy {print} 'Sch√∂n' {else} {print} 'Buh!'
                    ```
                start_code: |-
                    name {is} {ask} 'Wie heisst du?'
                    {if} name {is} Hedy {print} 'Toll!' {else} {print} 'Bl√∂d'
            6:
                story_text: |
                    In diesem Level lernst du etwas Neues: Du kannst jetzt auch rechnen.

                    Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

                    Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen vorhanden ist. Suche mal, das gibt es wirklich nicht!
                    Deshalb multiplizieren wir mit dem Stern (auf der Tastatur √ºber dem Plus): `5 * 5`. Lies das als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
                example_code: |
                    ```
                    {print} '5 plus 5 macht ' 5 + 5
                    {print} '5 minus 5 macht ' 5 - 5
                    {print} '5 mal 5 macht ' 5 * 5
                    ```
                start_code: '{print} ''5 mal 5 ist '' 5 * 5'
            7:
                story_text: |
                    In Level 7 kommt der Befehl `{repeat}` dazu. Mit `{repeat}` kannst du eine Zeile Code mehrmals ausf√ºhren.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy macht Spa√ü!'
                    ```
                start_code: '{repeat} 3 {times} {print} ''Hedy macht Spa√ü!'''
            8:
                story_text: |
                    `{ask}` und `{print}` funktionieren immer noch wie du es gewohnt bist. Aber `{if}`, `{else}` und `{repeat}` haben sich ver√§ndert!
                    Du kannst jetzt mehrere Zeilen gruppieren, aber du musst den Code daf√ºr *einr√ºcken*.
                    Das bedeutet, dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben m√∂chtest.
                example_code: |
                    Der `{repeat}` Befehl funktioniert jetzt so:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo zusammen'
                        {print} 'Das hier wird f√ºnf Mal wiederholt'
                    ```
                    Die Befehle `{if}` und `{else}` funktionieren jetzt so:

                    ```
                    name {is} {ask} 'Wie hei√üt du?'
                    {if} name {is} Hedy
                        {print} 'Willkommen Hedy'
                        {print} 'Du kannst an deinem Computer spielen'
                    {else}
                        {print} 'EINDRINGLING!'
                        {print} 'Du darfst diesen Rechner nicht benutzen!'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo Leute'
                        {print} 'Das wird 5 mal ausgegeben'
            9:
                story_text: |
                    In diesem Level kannst du nicht nur mehrere Zeilen mit `{if}` und `{repeat}` verwenden, du kannst sie auch kombinieren!
                    Im Beispiel siehst du einen `{if}` Befehl innerhalb eines `{repeat}` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `{if}` innerhalb eines anderen `{if}` Befehls erlaubt, genau wie `{repeat}` in einem anderen `{repeat}` Befehl.
                    Versuch es mal!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        bestellung = {ask} 'Was w√ºrden Sie gerne essen?'
                        {if} bestellung {is} Pizza
                            {print} 'sch√∂n!'
                        {else}
                            {print} 'Pizza ist leckerer'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        essen = {ask} 'Was m√∂chtest du gern?'
                        {if} essen {is} 'Pizza'
                            {print} 'Gut!'
                        {else}
                            {print} 'Pizza ist besser'
            10:
                story_text: |-
                    In diesem Level lernen wir den neuen Befehl `{for}`. Mit `{for}` kannst du eine Liste machen und alle ihre Elemente verwenden.
                    `{for}` erstellt einen Block, so wie `{repeat}` und `{if}`, daher m√ºssen alle Zeilen in dem Block mit Leerzeichen beginnen.
                example_code: |
                    ```
                    tiere {is} Hund, Katze, Kugelfisch
                    {for} tier {in} tiere
                      {print} 'Ich mag ' tier
                    ```
                start_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                      {print} 'Ich mag' tier
            11:
                story_text: |-
                    In diesem Level f√ºgen wir eine neue Form des Befehls `{for}` hinzu. In fr√ºheren Leveln haben wir `{for}` mit Listen benutzt, aber wir k√∂nnen `{for}` auch mit Zahlen verwenden.
                    Dies machen wir, indem wir einen Variablennamen und dann `{in}` `{range}` schreiben. Dahinter schreiben wir die Zahl bei der es losgehen soll, `{to}` und dann die Zahl, wo es aufh√∂rt.

                    Probiere das Beispiel aus, um zu sehen was passiert! In diesem Level musst du wieder Einr√ºckung in den Zeilen unter dem `{for}` anwenden.
                start_code: |-
                    {for} z√§hler {in} {range} 1 {to} 5
                        {print} z√§hler
            12:
                story_text: |-
                    **Dezimalzahlen**
                    Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1,5 verwenden, aber jetzt geht das. Denke jedoch daran, dass Hedy (wie viele andere Programmiersprachen auch) anstatt des Kommas einen Punkt (`.`) verwendet.
                example_code: |
                    ```
                    {print} 'Zweieinhalb plus zweieinhalb macht...'
                    {print} 2.5 + 2.5
                    ```
                start_code: |-
                    {print} 'Dezimalzahlen ben√∂tigen jetzt einen Punkt'
                    {print} 2.5 + 2.5
            13:
                story_text: |-
                    Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben √ºberpr√ºfen willst, musst du nicht zwei Mal `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen.

                    Wenn du `{and}` verwendest, m√ºssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
                example_code: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                    ```
                start_code: |-
                    name = {ask} 'Wie hei√üt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
            14:
                story_text: |
                    Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
                    Das `<` pr√ºft, ob die erste Zahl kleiner ist als die zweite, so √ºberpr√ºft Alter `<` 12 zum Beispiel, ob Alter kleiner als 12 ist.
                    Wenn du √ºberpr√ºfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=` verwenden, zum Beispiel Alter `<=` 11.
                    Das `>` pr√ºft, ob die erste Zahl gr√∂√üer als die zweite ist, so √ºberpr√ºft Punkte `>` 10 zum Beispiel ob Punkte gr√∂√üer als 10 ist.
                    Wenn du √ºberpr√ºfen willst, ob die erste Zahl gr√∂√üer oder gleich der zweiten ist, kannst du `>=` verwenden, also zum Beispiel Punkte `>=` 11.
                    All diese Vergleiche kannst du mit einem `{if}` verwenden, das geht so:
                example_code: |
                    ```
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter > 12
                        {print} 'Du bist √§lter als ich!'
                    ```
                start_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter < 13
                        {print} 'Du bist j√ºnger als ich!'
                    {else}
                        {print} 'Du bist √§lter als ich!'
            15:
                story_text: |-
                    Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
                    Also vergiss nicht den Wert innerhalb der Schleife zu √§ndern.

                    Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
                    Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
                example_code: |
                    ```
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Was macht 5 mal 5?'
                    {print} 'Es wurde eine richtige Antwort abgegeben'
                    ```
                start_code: |-
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Wieviel ist 5 mal 5?'
                        {print} 'Das ist die richtge Antwort!'
            16:
                story_text: |-
                    Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Au√üerdem m√ºssen wir jetzt einfache Anf√ºhrungszeichen (') um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
                    Wir nutzen eckige Klammern um auf eine Stelle in einer Liste zu zeigen. Der {at} Befehl kann nicht mehr benutzt werden.
                example_code: |
                    ```
                    freunde = ['Ahmed', 'Ben', 'Clemens']
                    gl√ºckszahlen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'Die Gl√ºckszahl von ' freunde[i]
                        {print} 'ist ' gl√ºckszahlen[i]
                    ```
                start_code: |-
                    obst = ['Apfel', 'Banane', 'Kirsche']
                    {print} obst
            17:
                story_text: |
                    Jetzt werden wir die Einr√ºckung ein wenig √§ndern. Jedes Mal, wenn wir eine Einr√ºckung ben√∂tigen, brauchen wir `:` in der Zeile vor der Einr√ºckung.

                    In diesem Level kannst du au√üerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abk√ºrzung f√ºr `{else}` `{if}` und du brauchst ihn, wenn du drei (oder mehr!) Optionen machen willst.
                    Probier es mal aus!
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Bereit oder nicht, ich komme!'
            18:
                story_text: |-
                    Wir sind bei echtem Python-Code angekommen! Das bedeutet, dass wir ab jetzt runde Klammern mit den Befehlen `{print}` und `{range}` benutzen m√ºssen.
                    Es bedeutet auch, dass du Hedy-Code aus diesem Level in jeder Python-Umgebung benutzen kannst, solange du die englischen Befehle nutzt. Falls du es bisher noch nicht gemacht hast, kannst du den Schalter im Befehlsmen√º zum Umschalten benutzen.
                start_code: |-
                    name = 'Hedy'
                    {print}('Ich hei√üe ', name)
    dice:
        name: W√ºrfel
        default_save_name: W√ºrfel
        description: Erstelle Deinen eigenen W√ºrfel
        levels:
            3:
                story_text: |
                    In diesem Level k√∂nnen wir von einer Liste w√§hlen. Damit k√∂nnen wir den Computer eine Seite des W√ºrfels w√§hlen lassen.
                    Schaut mal in die Brettspiele in Eurem Schrank zu Hause.
                    Haben einige davon (besondere) W√ºrfel? Die kannst Du auch mit diesem Code nachbauen.
                    Zum Beispiel den W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf.

                    ![W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    W√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} Du warfst _ {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Die W√ºrfel im Beispiel oben sind die W√ºrfel f√ºr ein bestimmtes Spiel. Kannst du normale W√ºrfel machen?
                    Oder andere Spezialw√ºrfel von einem anderen Spiel?
                example_code_2: |
                    ```
                    Auswahlm√∂glichkeiten {is} _
                    ```
                start_code: '{print} Was zeigt der W√ºrfel diesmal?'
            4:
                story_text: |
                    In diesem Level kannst du auch W√ºrfel erstellen. Aber dieses Mal kannst du es selbst versuchen, ohne Beispiel-Code!

                    ### √úbung
                    Erstelle deinen eigenen W√ºrfel in diesem Level.
                    Tipp: Falls du keine Idee hast, wie man einen W√ºrfel erstellt, schau dir deinen W√ºrfel vom vorigen Level an, aber vergiss nicht, Anf√ºhrungszeichen hinzuzuf√ºgen.
                start_code: '{print} ''Was zeigt der W√ºrfel diesmal?'''
            5:
                story_text: |
                    Wir werden die `{if}` und `{else}` Befehle zu unseren W√ºrfeln hinzuf√ºgen!

                    ### √úbung
                    Vervollst√§ndige den Beispiel-Code, sodass der Code sagt "Du kannst aufh√∂ren zu werfen", sobald du einen Regenwurm gew√ºrfelt hast. Er sollte "Du musst nochmal werfen" ausgeben, falls du etwas anderes gew√ºrfelt hast.
                    **Extra** Vielleicht m√∂chtest Du auch einen W√ºrfel aus einem ganz anderen Spiel nachbauen. Das ist auch super! Dann √ºberlege dir selbst eine Reaktion. Zum Beispiel 'ja' bei einer 6 und 'schade' f√ºr alles andere.
                example_code: |
                    ```
                    w√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    wurf {is} w√ºrfelseiten {at} {random}
                    {print} 'Du hast gew√ºrfelt: ' w√ºrfelseiten
                    _ wurf {is} Regenwurm {print} 'Du kannst aufh√∂ren zu w√ºrfeln.'
                    _ {print} 'Du musst nochmal w√ºrfeln!'
                    ```
                start_code: '{print} ''Was zeigt der W√ºrfel diesmal?'''
            6:
                story_text: |
                    Hier kannst Du auch wieder der Regenwurmw√ºrfel erstellen, aber hier kannst Du dazu auch noch berechnen, wie viele Punkte gew√ºrfelt wurden.
                    Vielleicht wei√üt Du ja, dass der Wurm 5 Punkte z√§hlt. Jetzt kannst Du nach jedem Wurf direkt berechnen, wie viele Punkte Du bekommst.
                    Hier ist der Code zur Berechnung der Punkte f√ºr einen W√ºrfel:

                    ### √úbung
                    Kannst du den Code ver√§ndern, um die Gesamtpunktzahl f√ºr 8 W√ºrfel zu bekommen? Um das zu machen musst du einige Zeilen Code kopieren und einf√ºgen.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    Punkte = 0
                    Wurf = W√ºrfelseiten {at} {random}
                    {print} 'Du hast ' Wurf ' gew√ºrfelt.'
                    {if} Wurf {is} Regenwurm Punkte = Punkte + 5 {else} Punkte = Punkte + Wurf
                    {print} 'Jetzt hast Du ' Punkte ' Punkte.'
                    ```
                example_code_2: |
                      Ist es dir gelungen, die Gesamtpunktzahl f√ºr 8 W√ºrfel auszurechnen? Daf√ºr musstest du ganz sch√∂n viel hin und her kopieren, oder?In Level 7 machen wir das einfacher!
                start_code: '{print} ''Was wird der W√ºrfel diesmal anzeigen?'''
            7:
                story_text: |
                    Auch in Level 5 kannst du wieder einen W√ºrfel programmieren. Mit dem Befehl `{repeat}` kannst du ganz einfach eine ganze Handvoll W√ºrfel werfen.

                    ### √úbung
                    Versuche, den Beispiel-Code zu vervollst√§ndigen!   **(extra)** Denke an ein Spiel, das du kennst, bei dem es um W√ºrfel geht und programmiere es mit dem Befehl `{repeat}`.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: '{print} ''Was wird der W√ºrfel diesmal anzeigen?'''
            10:
                story_text: |
                    Brauchen alle zu lange, um zu w√ºrfeln? In diesem Level kannst du Hedy alle W√ºrfel auf einmal werfen lassen.

                    ### √úbung
                    √Ñndere die Namen zu den Namen deiner Freunde oder Familienmitglieder und vervollst√§ndige den Code, sodass sie alle w√ºrfeln.
                example_code: |
                    ```
                    Spielerliste = Ann, John, Jesse
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} Spieler ' w√ºrfelt ' W√ºrfelseiten {at} {random}
                        {sleep}
                    ```
                start_code: '# setze hier deinen Code hin'
            15:
                story_text: |
                    In diesem Spiel musst Du in m√∂glichst wenig Versuchen eine 6 w√ºrfeln.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    {print} 'Wirf so schnell wie m√∂glich eine 6!'
                    Wurf = 0
                    Versuche = 0
                    {while} Wurf != 6
                        Wurf = W√ºrfelseiten {at} {random}
                        {print} 'Du hast eine ' Wurf ' gew√ºrfelt.'
                        Versuche = Versuche + 1
                    {print} 'Ja! Du hast in ' Versuche ' Versuchen eine 6 gew√ºrfelt.'
                    ```
                start_code: '# setze hier deinen Code hin'
    dishes:
        name: Abwasch?
        default_save_name: Abwasch
        description: Nutze den Computer, um zu sehen, wer abw√§scht
        levels:
            3:
                story_text: |
                    Gibt es bei euch zu Hause immer Streit, wer mit dem Abwasch dran ist und wer den M√ºll raus bringen muss?
                    Dann kannst du den Computer v√∂llig fair entscheiden lassen. Das kannst du in diesem Level programmieren!
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} Familienmitglieder {at} {random} muss abwaschen
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle deine eigene Version des Sp√ºlmaschinenprogramms. Erstelle zuerst eine Liste deiner Familienmitglieder.
                    Denke dann an eine Aufgabe, die erledigt werden soll, und lasse den Computer entscheiden, wer die Aufgabe erledigen muss, indem du `{at} {random}` benutzt.

                    **Extra** Keine Lust auf selbst abwaschen? Hacke das Sp√ºlmaschinenprogramm und entferne deinen Namen von der Liste mit dem `{remove}` `{from}` Befehl.
                start_code: '{print} Wer macht den Abwasch?'
            4:
                story_text: |
                    Mit Anf√ºhrungszeichen kannst du dein Abwaschprogramm noch besser machen.

                    ### √úbung
                    F√ºlle zuerst die richtigen Symbole in die L√ºcken, um dieses Beispielprogramm zum Laufen zu bringen.
                    Hast du es hinbekommen? Gro√üartig! Kopiere nun deinen eigenen Code aus den vorigen Leveln und bring ihn in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} _ den Abwasch macht heute _
                    {sleep}
                    {print} Familienmitglieder {at} _
                    ```
                start_code: '{print} ''Wer macht den Abwasch?'''
            5:
                story_text: |
                    Mit dem Befehl `{if}` kannst Du noch etwas mehr Spa√ü haben, wenn Du die Auswahl auswertest. Du kannst Dein Programm auf die Auswahl, die der Computer trifft, reagieren lassen.
                    ### √úbung
                    Kannst Du den Code so vervollst√§ndigen, dass er "So ein Pech" ausgibt, wenn Du dran bist und ansonsten "Zum Gl√ºck!"?
                    Vergiss die Anf√ºhrungszeichen nicht!
                example_code: |
                    ```
                    leute {is} Mama, Papa, Emma, Sophie
                    tellerw√§scher {is} leute {at} {random}
                    _ tellerw√§scher {is} Sophie {print} _ So ein Pech. Ich muss abwaschen. _
                    _ {print} 'Zum Gl√ºck kein Abwasch, weil ' _ ' dran ist.'
                    ```
                start_code: '{print} ''Wer macht den Abwasch?'''
            6:
                story_text: |
                    Wer ist wie oft mit dem Abwasch dran? Ist es gerecht verteilt? In diesem Level kannst Du mitz√§hlen.
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Emmas_Anzahl = 0
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Den Abwasch macht ' Tellerw√§scher
                    {if} Tellerw√§scher {is} Emma Emmas_Anzahl = Emmas_Anzahl + 1
                    {print} 'Emma ist diese Woche ' Emmas_Anzahl ' Mal mit dem Abwasch dran'
                    ```

                    Jetzt kannst Du die Zeilen ein paar Mal kopieren (z.B. weitere 6 Mal f√ºr die ganze Woche), um einen Plan f√ºr die ganze Woche aufzustellen.
                    Kannst Du den Code f√ºr eine ganze Woche schreiben?
                story_text_2: |
                    Wenn Du ganz gro√ües Pech hast, k√∂nnte Dich das vorigen Programm f√ºr die ganze Woche als Abw√§scher bestimmen. Das ist ungerecht!
                    Um das System gerechter zu gestalten, kannst Du mit dem Befehl `{remove}` die ausgew√§hlt Person von der Liste entfernen. Auf diese Weise musst Du nicht nochmal abwaschen, bis jeder einmal dran war.

                    Montag and Dienstag sind schon vorbereitet! Kannst Du den Rest der Woche vervollst√§ndigen?
                    Und... Kannst Du dir etwas einfallen lassen f√ºr den Fall, dass die Liste leer ist?
                example_code_2: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Montag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Dienstag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    ```
                start_code: '{print} ''Wer w√§scht ab?'''
            7:
                story_text: |
                    Mit dem Befehl `{repeat}` kannst du Code-Zeilen wiederholen. Das kannst du nutzen, um f√ºr mehrere Tage zu berechnen, wer abw√§scht.
                    ### √úbung
                    Benutze den `{repeat}` Befehl um zu entscheiden wer die ganze Woche abwaschen muss. Jede L√ºcke muss mit einem Befehl oder einer Zahl gef√ºllt werden!
                    **(extra)** Kannst du an eine andere Aufgabe im Haushalt denken? Passe den Code an, sodass er drei Haushaltsaufgaben entscheidet. Vergiss nicht auszugeben um welche Aufgaben es sich handelt!
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    {repeat} _ _ {print} 'Abgewaschen wird von' _ _ _
                    ```
                start_code: '{print} ''Wer macht den Abwasch?'''
            10:
                story_text: |
                    In diesem Level kannst du einen Ablauf f√ºr die ganze Woche auf eine einfache Art und Weise erstellen!

                    ### √úbung
                    F√ºge eine zweite Hauspflicht hinzu, wie z.B. Staubsaugen oder Aufr√§umen, und stelle sicher, dass sie ebenfalls f√ºr die ganze Woche aufgeteilt ist.
                    <br> **(extra)** Das Programm ist nicht fair, du kannst Pech haben und die ganze Woche abwaschen. Wie k√∂nntest du das Programm fairer machen?
                example_code: |
                    ```
                    tage = Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag
                    namen = Mama, Papa, Emma, Sophie
                    {for} tag {in} tage
                        {print} namen {at} {random} ' ist mit dem Abwasch dran am ' tag
                    ```
                start_code: '# setze hier deinen Code hin'
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
                start_code: |-
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
    for_command:
        name: '{for}'
        default_save_name: for
        description: for command
        levels:
            10:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                start_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
                start_code: |-
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
    fortune:
        name: Wahrsagerin
        default_save_name: Wahrsagerin
        description: Lass Hedy die Zukunft voraussagen
        levels:
            1:
                story_text: |
                    Warst du schon mal auf dem Rummel und hast dir die Zukunft von einer Wahrsagerin vorhersagen lassen? Oder hast du schon mal mit einer magischen schwarzen Kugel gespielt?
                    Dann wei√üt du bestimmt, dass sie nicht wirklich die Zukunft vorhersagen k√∂nnen, aber dass es trotzdem Spa√ü macht.

                    In den n√§chsten Leveln kannst du lernen, wie du deine eigene Wahrsagemaschine erstellst!
                    In Level 1 kannst du einfach anfangen, indem du Hedy sich als Wahrsagerin vorstellen l√§sst und sie die Antwort des Spielers mit `{echo}` ausgibst.
                    So wie hier:
                example_code: |
                    ```
                    _ Hallo, ich bin Hedy, die Wahrsagerin!
                    _ Wer bist du?
                    _ Lass mich in meine Kristallkugel sehen
                    _ Ich sehe... Ich sehe...
                    _ Du hei√üt
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich und f√ºlle die L√ºcken, um den Code zum Laufen zu bringen.
                    **Extra** √Ñndere den Code und lasse die Wahrsagerin nicht nur deinen Namen vorhersagen, sondern auch dein Alter, dein Lieblingssport-Team oder etwas anderes √ºber dich.
                start_code: '# setze hier deinen Code hin'
            3:
                story_text: |
                    Im vorigen Level hast du deine erste Wahrsagemaschine erstellt, aber Hedy konnte nichts wirklich vorhersagen, sonder nur `{echo}`.
                    In diesem Level kannst du Variablen und den `{at} {random}` Befehl benutzen, um Hedy wirklich eine Antwort f√ºr dich ausw√§hlen zu lassen. Schau dir zum Beispiel diesen Code an:
                example_code: |
                    ```
                    {print} Ich bin Hedy, die Wahrsagerin!
                    Frage {is} {ask} Was w√ºrdest du gerne wissen?
                    {print} Das w√ºrdest du gerne wissen: Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Bis hierhin konnte Hedy nur mit ja, nein oder vielleicht antworten. Kannst du Hedy mit zus√§tzlichen Antwortm√∂glichkeiten ausstatten, wie zum Beispiel 'auf jeden Fall' oder 'frag nochmal'?
                start_code: '# setze hier deinen Code hin'
            4:
                story_text: |
                    Dieses Level hat keine neuen Funktionen, aber gibt dir die M√∂glichkeit ein wenig mit Anf√ºhrungszeichen zu √ºben.
                    Du kannst deinen Code aus Level 3 neu machen, aber achte darauf Anf√ºhrungszeichen an den richtigen Stellen hinzuzuf√ºgen!

                    Beachte dass wir in Level 3 das Wort 'Frage' nicht sowohl als Variablenname, als auch als normales Wort das ausgegeben wird, benutzen konnten.
                    Die Anf√ºhrungszeichen in Level 3 machen das m√∂glich!

                    ### √úbung 1
                    Wir haben alle Anf√ºhrungszeichen aus diesem Beispiel-Code entfernt. Kannst du sie alle an der richtigen Stelle hinzuf√ºgen?

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Wahrsagerin-Code. Bring diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge die Anf√ºhrunszeichen in diesen Code ein _
                    {print} Ich bin Hedy die Wahrsagerin!
                    Frage {is} {ask} Was m√∂chtest du wissen?
                    {print} Dies ist deine Frage:  Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen, ob du morgen die Lotterie gewinnst!'
                    Person {is} {ask} 'Wer bist du?'
                    {if} Person {is} Hedy {print} 'Du wirst sicher gewinnen!ü§©' {else} {print} 'Pech gehabt! Jemand anderes wird gewinnen!üò≠'
                    ```
                start_code: '# setze hier deinen Code hin'
            6:
                story_text: |
                    In diesem Level k√∂nnen wir Mathe in deinen Vorhersagen als Wahrsagerin verwenden. Das erm√∂glicht es dir (alberne) Formeln zur Berechnung der Zukunft zu erfinden.
                    Zum Beispiel k√∂nntest du ausrechnen wie reich du einmal wirst oder wie viele Kinder du haben wirst, wenn du erwachsen bist.



                    ### √úbung
                    Kannst du dir deine eigene (alberne) Vorhersagemaschine ausdenken?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen wie viele Kinder du haben wirst!'
                    Alter = {ask} 'Wie alt bist du?'
                    Geschwister = {ask} 'Wie viele Geschwister hast du?'
                    L√§nge = {ask} 'Wie gro√ü bist du in Zentimetern?'
                    Kinder = L√§nge / Alter
                    Kinder = Kinder - Geschwister
                    {print} 'Du bekommst ...'
                    {sleep}
                    {print} Kinder ' Kinder!'
                    ```

                    Wenn das vorige Beispiel dir nicht albern genug war, schau dir dieses an!
                    ```
                    {print} 'Ich bin Hedy die alberne Wahrsagerin!'
                    {print} 'Ich werde vorhersagen wie schlau du bist!'
                    Fu√üball = {ask} 'Auf einer Skala von 1 bis 10, wie sehr magst du Fu√üball?'
                    Bananen = {ask} 'Wie viele Bananen hast du diese Woche gegessen?'
                    Hygiene = {ask} 'Wie viele Male hast du heute deine H√§nde gewaschen?'
                    Ergebnis = Bananen + Hygiene
                    Ergebnis = Ergebnis * Fu√üball
                    {print} 'Du bist ' Ergebnis ' Prozent schlau.'
                    ```
                start_code: '# setze hier deinen Code hin'
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Du kannst 3 Fragen stellen!'
                    {repeat} 3 {times} Frage = {ask} 'Was w√ºrdest du gerne wissen?'
                    Antwort = ja, nein, vielleicht
                    {repeat} 3 {times} {print} 'Meine Kristallkugel sagt... ' Antwort {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            8:
                story_text: |
                    In den vorigen Leveln hast du gelernt `{repeat}` zu nutzen, um die Wahrsagerin 3 Fragen in Folge beantworten zu lassen, aber wir hatten ein Problem die Fragen anzuzeigen.
                    Jetzt ist das Problem gel√∂st, weil wir den neuen Weg den `{repeat}` Befehl zu benutzen nutzen.
                    Im n√§chsten Beispiel kannst du die Wahrsagerin 3 Fragen stellen lassen und sie auch anzeigen!

                    ### √úbung
                    Kannst du den richtigen Befehl in die L√ºcken f√ºllen?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Du kannst mir 3 Fragen stellen.'
                    Antworten = ja, nein, vielleicht
                    _ _ _
                       Frage = {ask} 'Was m√∂chtest du wissen?'
                       {print} Frage
                       {sleep}
                       {print} 'Meine Kristallkugel sagt...' Antworten {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            10:
                story_text: |
                    In diesem Level wirst du lernen, das englische Spiel MASH zu programmieren. In diesem Spiel geht es darum, f√ºr alle Spieler die Zukunft vorauszusagen. Auf Englisch stehen die Buchstaben f√ºr mansion, apartment, shack, und house, was auf Deutsch Schloss, Wohnung, Schuppen und Haus bedeutet.

                    ### √úbung 1
                    F√ºge zwei Namen zur Liste hinzu und sieh wie die Ausgabe des Programms sich ver√§ndert, wenn du es ausf√ºhrst.
                example_code: |
                    ```
                    H√§user = Schloss, Wohnung, Schuppen, Haus
                    Liebe = niemand, eine k√∂nigliche Person, ihr Nachbar, ihre wahre Liebe
                    Haustiere = Hund, Katze, Elefant
                    Namen = Judith, Ralf, Tim
                    {for} Name {in} Namen
                        {print} Name ' lebt in einem ' H√§user {at} {random}
                        {print} Name ' wird ' Liebe {at} {random} ' heiraten.'
                        {print} Name ' wird eine(n) ' Haustiere {at} {random} ' als Haustier haben.'
                        {sleep}
                    ```
                start_code: '# setze hier deinen Code hin'
            12:
                story_text: |-
                    Ab Level 12 musst du auch in Listen Anf√ºhrungszeichen vor und nach jedem Element verwenden.

                    ### √úbung
                    Erg√§nze die Liste um zwei Vorhersagen
                example_code: |
                    ```
                    Schicksale = 'Du wirst auf einer Bananenschale ausrutschen', _
                    {print} 'Ich werde in meine Kristallkugel schauen, um deine Zukunft zu sehen.'
                    {print} 'Ich sehe... Ich sehe...'
                    {sleep}
                    {print} Schicksale {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
    haunted:
        name: Spukhaus
        default_save_name: Spukhaus
        description: Entkomme dem Spukhaus
        levels:
            1:
                story_text: |
                    In diesem Abenteuer arbeiten wir an einem Spiel, in dem du aus einem Geisterhaus entkommen musst, indem du die richtigen T√ºren w√§hlst.
                    Wenn du die richtige T√ºr w√§hlst, √ºberlebst du, aber wenn nicht, k√∂nnte ein schreckliches Monster‚Ä¶

                    In Level 1 beginnen wir mit unserem Spukhaus-Spiel, indem wir uns eine gruselige Geschichte ausdenken und die Spieler fragen, welches Monster sie in unserem Spukhaus finden werden.
                example_code: |
                    ```
                    {print} Wie bin ich hierher gekommen?
                    {print} Ich erinnere mich an meinen Freund, der sagte dass ich in das alte Haus gehen soll...
                    {print} und pl√∂tzlich wurde alles dunkel.
                    {print} Aber warum bin ich jetzt auf dem Boden...?
                    {print} Mein Kopf tut weh als h√§tte mir jemand mit der Pfanne eine √ºbergezogen!
                    {print} Was ist das f√ºr ein Ger√§usch?
                    {print} Oh nein! Ich habe das Gef√ºhl dass ich nicht alleine in diesem Haus bin!
                    {print} Ich muss hier raus!
                    {print} Vor mir sind drei T√ºren...
                    {ask} Durch welche T√ºr soll ich gehen?
                    {echo} Ich nehme T√ºr
                    {print} ...?
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Beende nun die Geschichte, indem du mindestens 5 Zeilen zum Code hinzuf√ºgst.
                    Denke daran, dass du jede Zeile mit einem `{print}` Befehl beginnst.
                start_code: '{print} How did I get here?'
            2:
                story_text: |
                    In diesem Spukhaus kannst du Monster mit Emojis ausw√§hlen. Nat√ºrlich kannst du auch W√∂rter verwenden.
                example_code: |
                    ```
                    Monster_1 {is} üëª
                    Monster_2 {is} ü§°
                    Monster_3 {is} üë∂
                    {print} Du gehst ins Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster_1
                    {print} Du l√§ufst in den anderen Raum, aber ein Monster_2 wartet dort auf dich!
                    {print} Oh nein! Schnell flitzt du in die K√ºche.
                    {print} Aber als du reinkommst greift dich Monster_3 an!
                    ```
                story_text_2: |
                    ### √úbung
                    Im obigen Beispiel sind die Monster vorherbestimmt. Also ist die Ausgabe deines Codes jedes Mal das Gleiche.
                    Kannst du `{ask}` Befehle hinzuf√ºgen, um das Spukhaus interaktiv zu machen und die Spieler die Monster ausw√§hlen zu lassen auf die sie treffen?
                example_code_2: |
                    ```
                    Monster1 {is} _
                    Monster2 {is} _
                    Monster3 {is} _
                    {print} Du betrittst das Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster1
                    {print} Du rennst in den anderen Raum, aber ein Monster2 wartet dort auf dich!
                    {print} Oh nein! Schnell in die K√ºche.
                    {print} Aber als du hineingehst attackiert dich Monster3 !
                    ```
                start_code: monster1 {is} _
            3:
                story_text: |
                    In den vorherigen Leveln hast du eine Einleitung ins Spukhaus-Spiel gemacht, aber wie du vielleicht gemerkt hast war das Ender der Geschichte immer schrecklich.
                    In diesem Level kannst du die Geschichte interaktiver machen, indem du den Ausgang des Spiels √§nderst. Manchmal wirst du gefressen, manchmal kannst du entkommen!
                    Lass Hedy zuf√§llig entscheiden!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
                start_code: '# setze hier deinen Code hin'
            4:
                story_text: |
                    In diesem Level lernst du mit Anf√ºhrungszeichen umzugehen.

                    ### √úbung 1
                    Kannst du dein Spukhaus f√ºr Level 4 fit machen?

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Spukhaus-Code. Bring den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen zu diesem Code hinzu _
                    {print} Entkomme dem Spukhaus!
                    {print} Vor dir sind drei T√ºren...
                    Wahl {is} {ask} Welche T√ºr w√§hlst du?
                    {print} Du nimmst T√ºr ... Wahl
                    Monster {is} ein Zombie, ein Vampir, NICHTS DU BIST ENTKOMMEN
                    {print} Du siehst...
                    {sleep}
                    {print} Monster {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            5:
                story_text: |
                    Bis zu diesem Level hat das Spukaus den Spieler immer gefragt durch welche T√ºr er gehen will, aber wie du vielleicht gemerkt hast, musste der Spieler nicht wirklich richtig antworten.
                    Wenn der Spieler einfach irgendetwas eingeben hat, ging das Spiel trotzdem weiter und der Spieler konnte sogar gewinnen (obwohl er gar keine T√ºr gew√§hlt hat).
                    In diesem Level kannst du nur gewinnen, wenn du die gleiche T√ºr w√§hlst die Hedy zuf√§llig ausgesucht hat.

                    ### √úbung
                    Kannst du die 4 fehlenden W√∂rter finden, um den Code zu vervollst√§ndigen?
                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    {print} 'Es sind 3 T√ºren vor dir...'
                    T√ºren {is} 1, 2, 3
                    Monster {is} Werwolf, Mumie, Vampir, Zombie
                    gew√§hlte_T√ºr {is} {ask} 'Welche T√ºr w√§hlst du?'
                    {print} 'Du w√§hlst T√ºr Nummer...' gew√§hlte_T√ºr
                    {sleep}
                    richtige_T√ºr {is} T√ºren {at} {random}
                    _ _ _ _ {print} 'Gro√üartig! Du bist entkommen!'
                    {else} {print} 'Oh nein! Du wirst gegessen von...' Monster {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            9:
                story_text: |
                    In diesem Level kannst du Verschachtelung verwenden, um das Spukhaus noch interaktiver zu machen!

                    ### √úbung
                    Im Moment ist es ziemlich schwer, das Spiel zu gewinnen. Kannst du es leichter machen?
                    √Ñndere deinen Code, sodass er nur eine falsche T√ºr und zwei richtige T√ºren, anstatt eine richtige und zwei falsche hat.
                    Tipp: Dies bedeutet, dass du die Variablen f√ºr richtige und falsche T√ºren und die Befehle `{if}` und `{else}` tauscht.
                    Und nat√ºrlich kannst du auch die Geschichte nach Belieben ver√§ndern. √Ñndere die Monster oder mach es zu einer fr√∂hlichen Spiel-Show, wo man ein Geschenk bekommt!
                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    Spieler = am_Leben
                    T√ºren = 1, 2, 3
                    Monster = Zombie, Vampir, riesige Spinne
                    {repeat} 3 {times}
                        {if} Spieler {is} am_Leben
                            richtige_T√ºr {is} T√ºren {at} {random}
                            {print} 'Vor dir sind drei T√ºren...'
                            gew√§hlte_T√ºr = {ask} 'Welche T√ºr w√§hlst du?'
                            {if} gew√§hlte_T√ºr {is} richtige_T√ºr
                                {print} 'Hier sind keine Monster!'
                            {else}
                                {print} 'Du wirst gefressen von einem(r) ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} am_Leben
                        {print} 'Gro√üartig! Du hast √ºberlebt'
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            11:
                story_text: |
                    In diesem Level haben wir den `{for}` Befehl ver√§ndert, um dem Spieler zu sagen, wo er ist.

                    ### √úbung 1
                    Vervollst√§ndige das Programm, sodass der Spieler wei√ü in welchem Raum er ist.

                    ### √úbung 2
                    Mache ein Abenteuer aus dem Programm, indem du folgenden Schritten folgst:

                    1. Erstelle eine Liste von Auswahlm√∂glichkeiten (wie k√§mpfe oder fl√ºchte)
                    2. Stelle sicher, dass der Spieler eine M√∂glichkeit ausw√§hlen kann. Nutze `{ask}`
                    3. Ist die Antwort richtig? Dann darf er zum n√§chsten Monster fortfahren. Gibt er eine falsche Antwort? Lass es den Spieler mit `{print}` wissen.

                    **(extra)** Wenn man eine falsche Wahl trifft, wird immer noch ein Monster angezeigt! Wie k√∂nntest du das √§ndern?
                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    monsterliste = Zombie, Vampir, Riesenspinne
                    _
                        {print} 'Raum ' i
                        monster = monsterliste {at} {random}
                    ```
                start_code: '{print} ''Escape from the haunted house!'''
            14:
                story_text: |
                    In diesem Level kannst du die Symbole `<` und `>` verwenden um deinen Spielen Leben hinzuzuf√ºgen.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# setze hier deinen Code hin'
            16:
                story_text: |
                    Dieses Spukhaus-Spiel verwendet die Verbindung zwischen Listen, die du in diesem Level verwenden kannst.
                    Zum Beispiel kommen alle Eigenschaften, die zu Zombies geh√∂ren, als Erstes in der Liste, dann die Hexen und als drittes die Vampire.
                    Schau dir mal den Code an!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# setze hier deinen Code hin'
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
                start_code: |-
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
                start_code: |
                    name {is} {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
                start_code: |
                    continue = ask 'Do you want to continue?'
                    if continue = yes
                        sure = ask 'Are you sure?'
                        if sure is yes
                            print 'We will continue'
                        else
                            print 'You are not sure'
                    else
                        print 'You do not want to continue'
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
                start_code: |-
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variablen
                    Du kannst einem Wort mit `{is}` einen Wert geben. Dieses Wort nennt man eine **Variable**. In diesem Beispiel haben wir eine Variable namens name und eine Variable names age benutzt. Du kannst das Wort name irgendwo in deinem Code verwenden. Es wird von Hedy automatisch ersetzt, wie hier:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### √úbung
                    Es ist Zeit, deine eigenen Variablen zu definieren.
                    Im Beispiel-Code zeigen wir ein Beispiel mit der Variable `favorite_animals`. In Zeile 1 wird die Variable gesetzt, und in Zeile 2 verwenden wir die Variable in einem `{print}` Befehl.
                    Zuerst, vervollst√§ndige unser Beispiel, in dem du dein Lieblingstier in die Leerstelle eintr√§gst. Dann denke dir mindestens 3 eigene Code-Beispiele aus. W√§hle eine Variable und gib der Variable mit dem `{is}` Befehl einen Wert. Dann verwenden den `{print}` Befehl, so wie wir es gezeigt haben.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
                start_code: |-
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
                start_code: |
                    name = Hedy
                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```
                start_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Sprache
        default_save_name: Sprache
        description: √úbe W√∂rter in einer Fremdsprache
        levels:
            5:
                story_text: |
                    Schreibe dein eigenes Programm, um Vokabeln in einer neuen Sprache zu √ºben.

                    ### √úbung
                    Mache das Programm l√§nger, indem du mindestens 3 weitere W√∂rter zum Lernen f√ºr den Spieler hinzuf√ºgst.
                    **Extra** Nat√ºrlich kannst du auch eine andere Sprache als Franz√∂sisch w√§hlen. Du kannst den Code zu jeder beliebigen Sprache √§ndern, die du lernen m√∂chtest.
                example_code: |
                    ```
                    {print} 'Lerne Franz√∂sisch!'
                    Katze {is} {ask} 'üê±'
                    {if} Katze {is} chat {print} 'Gro√üartig!'
                    {else} {print} 'Nein, Katze hei√üt chat'
                    Frosch {is} {ask} 'üê∏'
                    {if} Frosch {is} grenouille {print} 'Super!'
                    {else} {print} 'Nein, Frosch hei√üt grenouille'
                    ```
                start_code: '# setze hier deinen Code hin'
            16:
                story_text: |
                    Schreibe dein eigenes Programm dien Vokabular in einer neuen Sprache zu lernen.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# setze hier deinen Code hin'
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
                start_code: '{print} ''5 times 5 is '' 5 * 5'
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
                start_code: |-
                    {print} 'decimal numbers now need to use a dot'
                    {print} 2.5 + 2.5
    parrot:
        name: Papagei
        default_save_name: Papagei
        description: Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
        levels:
            1:
                story_text: |
                    Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei!
                    {ask} Wie lautet Dein Name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Bringe den Papagei dazu, eine andere Frage zu stellen? F√ºlle die L√ºcken im Beispiel aus!
                    **Extra** Du kannst den Papagei auch mehrere Fragen stellen lassen. Tippe noch ein paar Zeilen Code unter deinen eigenen Code.
                example_code_2: |
                    ```
                    {print} Ich bin Hedy der Papagei
                    {ask} _
                    {echo}
                    {echo}
                start_code: |
                    {print} Ich bin Hedy der Papagei
                    {ask} Was ist dein Name?
                    {echo}
                    {echo}
            2:
                story_text: |
                    Lass Deinen zahmen Papageien noch etwas echter klingen!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei.
                    Name {is} {ask} Wie lautet Dein Name?
                    {print} Name
                    {sleep}
                    {print} Aaaaaak
                    {sleep}
                    {print} Name
                    ```
                story_text_2: |
                    ### √úbung
                    Du kannst Variablen verwenden, damit der Papagei mehr als nur deinen Namen sagt. Kannst du diesen Code vervollst√§ndigen?
                start_code: '{print} Ich bin Hedy der Papagei!'
            3:
                story_text: |
                    Bringe Deinem Papageien mit dem Befehl `{add}` neue W√∂rter bei.
                    ### √úbung
                    Wie kannst Du deinen Papagei dazu bringen, mehrere W√∂rter zu sagen?
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} Bring deinem Papagei etwas bei!
                    neues_Wort {is} {ask} Welches Wort willst du ihm beibringen?
                    {add} neues_Wort {to_list} W√∂rter
                    {print} üßí Sag neues_Wort, Hedy!
                    {print} ü¶ú W√∂rter {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            4:
                story_text: |
                    In diesem Level m√ºssen wir Anf√ºhrungszeichen bei den Befehlen `{ask}` und `{print}` benutzen.
                    ### √úbung
                    Vervollst√§ndige den Code, indem du Anf√ºhrungszeichen in die L√ºcken f√ºllst?
                example_code: |
                    ```
                    w√∂rter {is} kr√§chz, Hedy
                    {print} _ Trainiere deinen Papagei! _
                    neues_wort {is} {ask} _ Welches Wort m√∂chtest du ihm beibringen? _
                    {add} neues_wort {to_list} w√∂rter
                    {print} _ üßí Sage _ neues_wort _, Hedy!_
                    {print} _ ü¶ú _ w√∂rter {at} {random}
                    ```
                start_code: '# Schreibe deinen Code hier'
            5:
                story_text: |
                    Belohne deinen Papagei, wenn er das richtige Wort sagt!

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die 4 fehlenden Befehle erg√§nzt.
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} 'Bring deinem Papagei etwas bei!'
                    neues_Wort {is} {ask} 'Welches Wort willst du ihm beibringen?'
                    {add} neues_Wort {to_list} W√∂rter
                    gesagtes_Wort {is} W√∂rter {at} {random}
                    {print} 'üßí Sag ' neues_Wort ', Hedy!'
                    {print} 'ü¶ú ' gesagtes_Wort
                    _ gesagtes_Wort {is} neues_Wort _ 'üßí Gut gemacht, Hedy! üç™'
                    _ _ 'üßí Nein, Hedy! Sag ' neues_Wort
                    ```
                start_code: '# setze hier deinen Code hin'
    piggybank:
        name: Sparschwein
        default_save_name: Sparschwein
        description: Z√§hle dein Taschengeld!
        levels:
            12:
                story_text: |
                    In diesem Abenteuer lernst du, wie man ein digitales Sparschwein herstellt.

                    ### √úbung
                    Beende den Code, um zu berechnen, wie viel Geld du hast und wie lange du sparen musst, um dir zu kaufen, was du willst!
                    **(extra)** Vielleicht hast du schon etwas Geld gespart? Ziehe das von dem Betrag ab, den du noch sparen musst.
                example_code: |
                    ```
                    {print} 'Das digitale Sparschwein'
                    Wunsch = {ask} 'Was w√ºrdest du dir gerne kaufen?'
                    Preis = {ask} 'Wieviel kostet das?'
                    Gespartes = {ask} 'Wieviel Geld hast du schon gespart?'
                    Taschengeld = {ask} 'Wieviel Taschengeld bekommst du pro Woche?'
                    zu_sparen = Preis - Gespartes
                    Wochen = zu_sparen / Taschengeld
                    {print} 'Du kannst dir ein ' _ ' in ' _ ' Wochen kaufen.'
                    ```
                start_code: '# setze hier deinen Code hin'
            14:
                story_text: |
                    In diesem Level kannst du dir von Hedy sagen lassen, ob du genug Geld gespart hast!
                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# setze hier deinen Code hin'
    pressit:
        name: Tastengedr√ºcke
        default_save_name: Gedr√ºckt
        description: Versuche eine Taste an einen Befehl zu binden!
        levels:
            5:
                story_text: |
                    In diesem Level gibt es ein neues Schl√ºsselwort: `{pressed}`!
                    Mit `{pressed}` kannst du mit den Tasten auf deiner Tastatur steuern, welche Zeilen verwendet werden.

                    ### √úbung
                    Schau dir das Beispiel an und f√ºge eine weitere Zeile hinzu, die auf Tasten reagiert.
                example_code: |
                    ```
                    {print} 'M√∂chtest du ein gutes (g) oder ein b√∂ses (b) Ende?'
                    {if} g {is} {pressed} {print} 'Sie lebten gl√ºcklich bis ans Ende ihrer Tage ‚ù§'
                    {else} {print} 'Der Prinz wurde von einem Nilpferd gefressen üò≠'
                    ```
                story_text_2: |
                    Sie k√∂nnen jeden Code mit einem Schl√ºssel verkn√ºpfen, einschlie√ülich der Zeichenschildkr√∂te.

                    ### √úbung
                    Kopieren Sie die Codezeilen, damit Sie eine gr√∂√üere Zeichnung erstellen k√∂nnen.
                example_code_2: |
                    ```
                    {if} x {is} {pressed} {forward} 50
                    {else} {turn} 90
                    ```
                start_code: '# platziere deinen Code hier'
            7:
                story_text: |
                    Nun da du `{repeat}` kennengelernt hast, k√∂nnen wir Tasten mehrfach dr√ºcken!
                    Du kannst dazu nutzen, die Schildkr√∂te vorw√§rts gehen und sich drehen zu lassen.

                    ### √úbung
                    Der Code, den du in Level 5 gesehen hast, pr√ºft die Taste nur einmal. Kopiere den Beispielcode und f√ºge ein `{repeat}` hinzu, so dass du die Tasten mehrmals dr√ºcken kannst. Benutze diesen Code, um etwas Sch√∂nes zu zeichnen.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: '# Platziere deinen Code hier'
            9:
                story_text: "Da du jetzt wei√üt wie man Befehle kombiniert, kannst du mit Hilfe von `{pressed}` ein Touch-Type-Tool erstellen. \n\n### √úbung\nVervollst√§ndige den Code. Jedes Mal soll ein zuf√§lliger Buchstabe ausgew√§hlt werden. Diesen muss man dr√ºcken. Du bekommst einen Punkt f√ºr die richtige\
                    \ Taste und zwei Punkte Abzug f√ºr die falsche Taste.\n**(extra)** L√∂sche den Bildschirm nach jedem Buchstaben und zeige dem Benutzer, wie viele Punkte er erreicht hat.\n"
                example_code: "```\nPunkte = 0\nBuchstaben = a, b, c, d, e\n{repeat} 10 {times}\n    Buchstabe = _ _ _ \n    {print} 'Dr√ºck den Buchstaben ' Buchstabe\n    {if} Buchstabe {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# platziere deinen Code hier'
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## Der Drucken Befehl
                    Mit Hilfe des  `{print}`  Befehls kannst du den Text auf dem Bildschirm anzeigen.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### √úbung
                    In Hedy findest du √úbungen in jedem Abenteuer. Eine √úbung erlaubt dir, neue Befehle und Konzepte zu √ºben und Beispielprogrammen deinen eigenen Schwung zu geben.
                    In dieser √úbung wirst du eine pinke leere Fl√§che sehen. Du musst die leere Fl√§che mit etwas bef√ºllen, bevor du das Programm ausf√ºhren kannst.

                    F√ºge den `{print}`  Befehl in die leere Fl√§che ein und dann noch f√ºnf weitere Codezeilen. Jede Zeile muss mit dem `{print}` Befehl beginnen.
                    Viel Spa√ü!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
                start_code: |
                    {print} Welcome to Hedy!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
                start_code: |-
                    name = 'Hedy'
                    {print}('My name is ', name)
    quizmaster:
        name: Quizmeister
        default_save_name: Quizmeister
        description: Mache dein eigenes Quiz!
        levels:
            14:
                story_text: |
                    In diesem Abenteuer kannst du dein eigenes Quiz machen! F√ºll alle L√ºcken aus, f√ºge mehr Fragen hinzu und hab Spa√ü bei deinem eigenen Quiz!
                    Du kannst das Quiz machen √ºber was du m√∂chtest: dein Hobby, dein Lieblingstier, dein Lieblingsbuch, eigentlich √ºber alles!
                example_code: |
                    ```
                    {print} 'Erstelle dein eigenes Quiz'
                    punkte_a = 0
                    punkte_b = 0
                    {print} 'Frage'
                    {print} 'Antwortm√∂glichkeit A'
                    {print} 'Antwortm√∂glichkeit B'
                    antwort = {ask} 'Welche Antwort?'
                    {if} antwort == 'A'
                        punkte_a = punkte_a + 1
                    {if} antwort == 'B'
                        punkte_b = punkte_b + 1
                    {print} 'Ende des Quiz!'
                    {print} 'Lasst und die Ergebnisse ansehen!'
                    {if} punkte_a > punkte_b
                        {print} 'Du geh√∂rst zum A-Club'
                    {if} punkte_b > punkte_a
                        {print} 'Du geh√∂rst zum B-Club'
                    ```
                start_code: '# setze hier deinen Code hin'
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
                start_code: |-
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
                start_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## An zuf√§llig
                    In diesem Level kannst du eine Liste mit dem `{is}` Befehl erstellen. Du kannst den Computer einen zuf√§lligen Eintrag aus dieser Liste ausw√§hlen lassen. Das machst du mit `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere den `{at} {random}` Befehl aus und erschaffe deine eigene Spielesendung (wie die im Fernsehen), wo du eine T√ºr order einen Koffer ausw√§hlst und sich dort ein gro√üer Preis versteckt!
                    Kannst du es tun? Wir haben schon mal die ersten Zeilen in den Beispielcode eingef√ºgt.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
                start_code: |
                    animals {is} dog, cat, kangaroo
                    {print} animals {at} {random}
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. The {at} {random} command can not be used anymore.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'the lucky number of ' friends[i]
                        {print} 'is ' lucky_numbers[i]
                    ```
                start_code: |-
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
                start_code: |
                    {print} 'happy birthday to you'
                    {print} 'happy birthday to you'
                    {print} 'happy birthday dear Hedy'
                    {print} 'happy birthday to you'
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This will be printed 5 times'
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
                start_code: |-
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
                start_code: |-
                    {repeat} 3 {times}
                        {print} 'This line will be repeated...'
                        {print} 'This one too...'
                    {print} 'but this one will not!'
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Erstelle dein eigenes virtuelles Restaurant
        levels:
            1:
                story_text: |
                    Im ersten Level kannst du dein eigenes virtuelles Restaurant erstellen, und die Bestellungen deiner G√§ste aufnehmen.
                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant üçü
                    _ Was w√ºrden Sie gerne bestellen?
                    {echo} Sie h√§tten also gerne
                    {print} Danke f√ºr Ihre Bestellung!
                    {print} Kommt sofort!
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in den Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    F√ºlle zuerst die L√ºcken mit den richtigen Befehlen, um den Code zum Laufen zu bringen.
                    F√ºge dann mindestens 4 zus√§tzliche Zeilen zum Restaurant-Programm hinzu.
                    Frage die G√§ste, was sie trinken m√∂chten und frage, ob sie in bar oder mit Karte zahlen m√∂chten.
                    Denke die zum Schluss eine nette Verabschiedung f√ºr deine G√§ste aus.
                start_code: '# setze hier deinen Code hin'
            2:
                story_text: |
                    In Level 2 konntest du dein Restaurant mit Variablen erweitern. In Level 1 konnte Hedy nur die Bestellung einmal wiedergeben (mit `{echo}`) und sich nur das merken, was zuletzt bestellt wurde.
                    Jetzt kannst du Variablen verwenden und Hedy kann sich sowohl das Essen als auch den Belag merken!
                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Das ist mein Lieblingsessen!
                    Belag {is} {ask} H√§tten Sie die gerne mit Fleisch oder mit Gem√ºse?
                    {print} Das Essen mit Belag ist auf dem Weg!
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere deinen eigenen Restaurant-Code aus dem vorigen Level in den unteren Eingabebereich.
                    Repariere den Code, indem du die {ask} und {echo} Befehle ersetzt und Variablen benutzt, wie du in diesem Level gelernt hast.

                    Nun da dein Code wieder l√§uft, ist es Zeit etwas Weiteres hinzu zu f√ºgen.
                    Schau dir die letzte Zeile des Beispiel-Codes an: `{print} essen mit belag ist auf dem Weg!`
                    In dieser einzelnen Zeile wurden 2 Variablen benutzt, um die Bestellung zusammen zu fassen.
                    F√ºge nun deine eigene Zusammenfassung der Essen- und Getr√§nkebestellung deiner G√§ste hinzu.

                    **Extra** Nun da du gelernt hast Variablen zu benutzen, kannst du so viele Variablen in einer Zeile nutzen wie du magst. Kannst du mehr Variablen zu deinem Code hinzuf√ºgen, wie hier essen oder zum Mitnehmen, bar oder Karte, mit oder ohne Strohhalm usw.?
                start_code: '# setze hier deinen Code hin'
            3:
                story_text: |
                    F√§llt es dir schwer zu entscheiden, was du gerne zum Abendessen h√§ttest? Du kannst das Hedy machen lassen!
                    F√ºge einfach Listen deiner Lieblingsgerichte (oder der von dir nicht so gemochten Gerichte) hinzu und Hedy kann zuf√§llig f√ºr dich ein Abendessen ausw√§hlen.
                    Du kannst dir auch einen Spa√ü draus machen, indem du Hedy den Preis f√ºr dein Abendessen ausw√§hlen l√§sst! Was wird wohl rauskommen?
                example_code: |
                    ```
                    gerichte {is} Spaghetti, Rosenkohl, Hamburger
                    {print} Du bekommst gerichte {at} {random} heute abend!
                    preise {is} 1 Euro, 10 Euro, 100 Euro
                    {print} Das macht preise {at} {random} bitte.
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Version des Zufallsrestaurants.
                    Erstelle selbst eine Liste aller Vorspeisen, Hauptgerichte, Nachtische, Getr√§nke und Preise.
                    Nutze dann `{print}` und `{at} {random}` Befehle, um dem Kunden zu sagen, was heute auf seinem Men√º steht.
                example_code_2: |
                    ```
                    {print} Willkommen in deinem eigenen Zufallsrestaurant!
                    vorspeisen {is} _
                    hauptgerichte {is} _
                    nachspeisen {is} _
                    getr√§nke {is} _
                    preise {is} _
                    _
                    ```
                start_code: '# setze hier deinen Code hin'
            4:
                story_text: |
                    In diesem Level musst du Anf√ºhrungszeichen verwenden, wenn du die Befehle `{print}` oder `{ask}`benutzt.

                    ### √úbung 1
                    F√ºge die Anf√ºhrungszeichen zum Code hinzu, um ihn zum Laufen zu bringen! Sei vorsichtig: Variablen sollten nicht in Anf√ºhrungszeichen sein.

                    ### √úbung 2
                    Gehe zur√ºck zum vorigen Level und kopiere deinen Restaurant-Code. Bringe diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen in diesen Code ein _
                    {print} Willkommen im Restaurant Chez Hedy!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Die  Essen  ist mein Favorit!
                    Belag {is} {ask} H√§tten Sie gerne Fleisch oder Gem√ºse als Belag?
                    {print} Essen  mit  Belag  ist auf dem Weg!
                    Getr√§nke {is} {ask} Was w√ºrden Sie gerne dazu trinken?
                    {print} Danke f√ºr Ihre Bestellung.
                    {print} Ihre  Essen  und  Getr√§nke  kommen sofort!
                    ```
                start_code: '# setze hier deinen Code hin'
            5:
                story_text: |
                    In diesem Level erlaubt dir der `{if}`-Befehl deinen Kundinnen oder Kunden Fragen zu stellen (`{ask}`) und verschiedene Antworten zu geben.
                    In dem unteren Beispiel siehst du, dass du die Kundin oder den Kunden fragen (`{ask}`) kannst, ob (`{if}`) sie oder er die Tagesgerichte erfahren m√∂chte, und Hedy kann dementsprechend antworten.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    Tagesgericht {is} {ask} 'W√ºrden Sie gerne das heutige Tagesgericht erfahren?'
                    {if} Tagesgericht {is} ja {print} 'Das Tagesgericht ist Nudeln mit Tomatenso√üe.' {else} {print} 'Ok, kein Problem.'
                    Essen {is} {ask} 'Was w√ºrden Sie gerne essen?'
                    {print} 'Einmal ' Essen ', kommt sofort!'
                    Getr√§nk {is} {ask} 'Was w√ºrden Sie gerne dazu trinken?'
                    {if} Getr√§nk {is} Cola {print} 'Tut mir leid, die Cola ist aus!' {else} {print} 'Gro√üartige Wahl!'
                    etwas {is} {ask} 'H√§tten Sie gerne noch etwas?'
                    {print} 'Lassen Sie mich Ihre Bestellung noch einmal wiederholen...'
                    {print} 'Einmal ' Essen
                    {if} Getr√§nk {is} Cola {print} 'und...' {else} {print} 'Einmal ' Getr√§nk
                    {if} etwas {is} nein {print} 'Das ist alles!' {else} {print} 'Einmal ' etwas
                    {print} 'Danke f√ºr Ihre Bestellung und guten Appetit!'
                    ```
                start_code: '# setze hier deinen Code hin'
            6:
                story_text: |
                    In diesem Level kannst du Mathe verwenden um den Gesamtpreis einer Bestellung auszurechnen. Da macht dein virtuelles Restaurant realistischer.
                example_code: |
                    Du kannst einen einfachen Restaurant Code erstellen. Das geht so:
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    {print} 'Hier ist unsere Karte:'
                    {print} 'Unsere Hauptgerichte sind Pizza, Lasagne oder Spaghetti'
                    haupt = {ask} 'Welches Hauptgericht m√∂chten Sie?'
                    preis = 0
                    {if} haupt {is} Pizza preis = 10
                    {if} haupt {is} Lasagne preis = 12
                    {if} haupt {is} Spaghetti preis = 8
                    {print} 'Sie bestellten ' haupt
                    {print} 'Das kostet ' preis ' Euro, bitte'
                    {print} 'Danke, genie√üen Sie Ihre Mahlzeit!'
                    ```
                start_code: '# setze hier deinen Code hin'
            7:
                story_text: |
                    In diesem Level hast du gelernt, wie du den Befehl `{repeat}` verwenden kannst, um eine Codezeile um eine bestimmte Anzahl zu wiederholen.
                    Du kannst das in deinem Restaurant verwenden um mehrere Leute nach ihren Essensw√ºnschen zu fragen (`{ask}`).

                    ### √úbung
                    Kannst du die L√ºcken f√ºllen? Hedy muss diese Frage so oft wiederholen wie Leute da sind. Wenn also 5 Leute da sind, muss die Frage 5 mal gestellt werden.
                    **(extra)** Erweitere deinen Code mit mehr Fragen, zum Beispiel zu Getr√§nken oder So√üen.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    G√§ste = {ask} 'Wie viele Leute kommen heute zu uns?'
                    ```
                start_code: '# setze hier deinen Code hin'
            8:
                story_text: |
                    In diesem Level kannst du dein virtuelles Restaurant ausbauen, indem du mehrere Zeilen Code wiederholst. Das geht so:
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    G√§ste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'
                    {print} 'Gro√üartig!'
                    {repeat} G√§ste {times}
                        Essen = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Essen
                    {print} 'Danke f√ºr Ihre Bestellung!'
                    {print} 'Guten Appetit!'
                    ```
                story_text_2: |
                    ### √úbung
                    Dieser Code kann mit mehr Gerichten auf der Karte erweitert werden, zum Beispiel einem Getr√§nkeangebot, und/oder mehreren G√§ngen oder Nachtisch. F√ºge mindestens ein Gericht hinzu.
                    **(extra)** F√ºge so viele Gerichte hinzu wie du magst!
                start_code: '# setze hier deinen Code hin'
            9:
                story_text: "In diesem Level kannst du Verschachtelung benutzen, um dein Restaurant realistischer und spa√üiger zu machen!\n\n### √úbung\nDie Einr√ºckung im Beispiel-Code wurde entfernt.\nKannst du herausfinden wie viel Einr√ºckung jede Zeile ben√∂tigt, damit der Code ordentlich funktioniert?\n\
                    Falls der Kunde Pizza bestellt, sollte Hedy nicht fragen, welche So√üe der Kunde m√∂chte.\n\n**(extra)** Ein Restaurant lagert nicht alle m√∂glichen So√üen. Erstelle eine Liste mit verf√ºgbaren So√üen und gib eine Antwort bei jeder Bestellung, ob du sie auf Lager hast. <br>\n**(extra)**\
                    \ Pizzen haben Bel√§ge. Frag die Kunden, was sie m√∂chten.<br>\n **(extra)** M√∂chten die Kunden etwas trinken? Frag sie! <br>                    \n"
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    Leute = {ask} 'Wie viele Leute kommen heute?'
                    {print} 'Gro√üartig!'
                    Preis = 0
                    {repeat} Leute {times}
                    _ Essen = {ask} 'Was m√∂chten Sie bestellen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Preis = Preis + 3
                    _ Sauce = {ask} 'Welche Sauce m√∂chten Sie f√ºr die Fritten?'
                    _ {if} Sauce {is} keine
                    _ {print} 'keine Sauce'
                    _ {else}
                    _ Preis = Preis + 1
                    _ {print} 'mit ' Sauce
                    _ {if} Essen {is} Pizza
                    _ Preis = Preis + 4
                    {print} 'Das macht ' Preis ' Euro'
                    {print} 'Genie√üen Sie Ihre Mahlzeit!'
                    ```
                start_code: '# setze hier deinen Code hin'
            10:
                story_text: |
                    In diesem Level wirst du lernen, wie du leicht nach Bestellungen f√ºr verschiedene G√§nge fragst.

                    ### √úbung 1
                    Vervollst√§ndige den Code mit einem `{ask}` in den L√ºcken, sodass der Kunde f√ºr jeden Gang gefragt wird, was er essen m√∂chte.
                example_code: "```\ng√§nge = Vorspeise, Hauptgericht, Nachtisch\n{for} gang {in} g√§nge\n    {print} 'Was ist Ihre Bestellung als ' gang '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### √úbung
                    Nat√ºrlich kannst auch f√ºr mehrere Personen bestellen!
                    Kannst du die richtige Anzahl an Leerzeichen zur Einr√ºckung vor jeder Zeile hinzuf√ºgen, damit der Code richtig l√§uft?
                    Tipp: manche Zeilen brauchen gar keine Einr√ºckung.
                example_code_2: |
                    ```
                    _ Kurse = Vorspeise, Hauptgericht, Nachtisch
                    _ Namen = Timon, Onno
                    _ {for} Name {in} Namen
                    _ {for} Kurs {in} Kurse
                    _ Essen = {ask} Name ', Was m√∂chten Sie als ' Kurs '?'
                    _ {print} Name ' bestellt ' Essen ' als ' Kurs
                    ```
                start_code: G√§nge = Vorspeise, Hauptspeise, Dessert
            11:
                story_text: |
                    Wir k√∂nnen `{for}` mit `{range}` nutzen, um die Bestellungen mehrerer G√§ste ordentlich auszugeben.

                    ### √úbung
                    Beende den Restaurant-Code, sodass du nach den Bestellungen mehrerer G√§ste fragen kannst. Gib jedes Mal die Bestellnummer aus: 'Bestellung 1', 'Bestellung 2', usw.
                    Bist du dir nicht sicher, wie du das anstellen sollst? Schau dir deinen Level 8 Code an.

                    **(extra)** In Level 9 benutzte das Restaurant auch Preise. Das kannst du hier ebenfalls hinzuf√ºgen!
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Hedy!'
                    Leute = {ask} 'F√ºr wie viele Leute m√∂chten Sie bestellen?'
                    {print} 'Also m√∂chten Sie f√ºr' Leute ' Leute bestellen.'
                    {print} "Los geht's!"
                    ```
                start_code: '# setze hier deinen Code hin'
            12:
                story_text: |
                    Ab diesem Level kannst du Dezimalzahlen verwenden, um deine Speisekarte realistischer zu machen.

                    Kannst du dir Code ausdenken mit dem du deinen Freunden und deiner Familie 15% Rabatt geben kannst?
                example_code: |
                    ```
                    preis = 0.0
                    essen = {ask} 'Was m√∂chten Sie bestellen?'
                    trinken = {ask} 'Was m√∂chten Sie trinken?'
                    {if} essen {is} 'Hamburger'
                        preis = preis + 6.50
                    {if} essen {is} 'Pizza'
                        preis = preis + 5.75
                    {if} trinken {is} 'Wasser'
                        preis = preis + 1.20
                    {if} trinken {is} 'Sprudel'
                        preis = preis + 2.35
                    {print} 'Das macht ' preis ' Euro, bitte'
                    ```
                start_code: '# setze hier deinen Code hin'
            13:
                story_text: |
                    In diesem Level lernst du neue Befehle, mit denen du deinen Code noch weiter ausbauen kannst.

                    ### √úbung 1
                    Setze ein `{and}` und ein `{or}` an die logische Stelle im Programm.

                    ### √úbung 2
                    Erweitere dein Restaurant mit mindestens einem weiteren `{and}` und einem `{or}`.
                    Erstelle zum Beispiel einen speziellen Rabattcoupon, der nur f√ºr Pizza gilt, oder gib deinen Kunden ein kostenloses Getr√§nk
                    mit Pommes und Pfannkuchen. Oder nat√ºrlich etwas ganz anderes!
                example_code: |
                    ```
                        {print} 'Das ist unser Rabattmen√º'
                        preis = preis - 3
                    {if} getr√§nk {is} 'Wasser' _ getr√§nk {is} 'Saft'
                        {print} 'Das ist eine gesunde Wahl'
                    {print} 'Das kostet dann ' preis '  Euro'
                    ```
                start_code: '# setze hier deinen Code hin'
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ```
                    {print} 'Willkommen bei McHedy'
                    mehr = 'ja'
                    {while} mehr == 'ja'
                        Bestellung = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Bestellung
                        mehr = {ask} 'W√ºrden Sie gerne noch etwas bestellen?'
                    {print} 'Dankesch√∂n!'
                    ```
                start_code: '# setze hier deinen Code hin'
    rock:
        name: Schere, Stein, Papier
        default_save_name: Stein
        description: Mache dein eigenes Schere, Stein, Papier-Spiel
        levels:
            1:
                story_text: |
                    In Level 1 kannst du mit einem Schere, Stein, Papier-Spiel beginnen.

                    Mit `{ask}` kannst du eine Wahl treffen und mit `{echo}` kannst du diese Wahl wiederholen.
                example_code: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus Stein, Schere oder Papier
                    {echo} Also war deine Wahl:
                    ```
                story_text_2: |
                    ### √úbung
                    Anstelle von W√∂rtern kannst du auch Emoji benutzen ‚úä‚úã‚úå
                    Kannst du Code erstellen, der Emoji benutzt?
                example_code_2: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus _
                    {echo} Also war deine Wahl:
                    ```
                start_code: |
                    {print} Willkommen bei deinem eigenen Stein Schere Papier!
                    {ask} Was w√§hlst du?
            2:
                story_text: |
                    In diesem Level kannst du √ºben, Variablen zu benutzen, damit du im n√§chsten Level das Spiel Schere, Stein, Papier machen kannst!
                example_code: |
                    ```
                    _ {is} {ask} Stein, Schere oder Papier?
                    {print} Ich w√§hle
                    ```
                start_code: '# setze hier deinen Code hin'
            3:
                story_text: |
                    You can use the `{at} {random}` command to let the computer pick rock, paper or scissors!

                    ### Exercise
                    Finish the code by using the `{at} {random}` command.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code und f√ºlle die L√ºcken, um einen extra Spieler zu diesem Spiel hinzu zu f√ºgen.

                    **Extra** Gerade hei√üen die Spieler nur Spieler 1 und Spieler 2. Kannst du frage-Befehle hinzuf√ºgen (mit Variablen nat√ºrlich), um die Spielernamen zu erfragen?
                    Auf diese Weise kannst du z.B. folgende Ausgabe erzeugen: `James w√§hlt... Papier`
                example_code_2: |
                    ```
                    Auswahl {is} Stein, Schere, Papier
                    {print} Spieler 1 w√§hlt... Auswahl {at} {random}
                    {print} Spieler 2 _
                    ```
                start_code: '{print} Welcome to your own rock scissors paper!'
            4:
                story_text: |
                    In diesem Level k√∂nnen wir Stein Schere Papier weiter programmieren. Aber wenn du Text hinzuf√ºgen m√∂chtest, musst du auch hier Anf√ºhrungszeichen verwenden.
                    ### √úbung
                    Kopiere deinen Code aus dem vorigen Level und bring ihn mit Hilfe von Anf√ºhrungszeichen nach jedem `{print}` oder `{ask}` Befehl zum Laufen.
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            5:
                story_text: |
                    In diesem Level k√∂nnen wir bestimmen, ob es unentschieden war oder nicht. Daf√ºr brauchst du den neuen `{if}` Code.

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst.
                    * Lass den Computer eine zuf√§llige Wahl treffen
                    * Frage den Spieler, was er w√§hlt
                    * F√ºlle die korrekten Variablen in Zeile 4 und 5
                    * Programmiere Zeile 6 so, dass Hedy pr√ºfen kann, ob es unentschieden war oder nicht
                example_code: |
                    ```
                    auswahl {is} Schere, Stein, Papier
                    computer_wahl {is} _
                    deine_wahl {is} _
                    {print} 'Du w√§hlst ' _
                    {print} 'Der Computer w√§hlte ' _
                    {if} _ {is} _ {print} 'Unentschieden!' {else} {print} 'kein Unentschieden'
                    ```

                    Ersetze die Unterstriche (_) mit dem richtigen Code, um zu sehen, ob das Spiel unentschieden ausgeht.
                start_code: '{print} ''Welcome to your own rock scissors paper!'''
            9:
                story_text: |
                    In diesem Level kannst du das ganze Stein-Schere-Papier-Programm programmieren, indem du `{if}` Befehle verschachtelst.

                    ### √úbung
                    Kannst du den Code vervollst√§ndigen? Das Programm muss f√ºr jede Kombination sagen, wer gewonnen hat.

                    **(extra)** M√∂chtest du mehr als eine Runde spielen? Erweitere den Code, sodass du mehrere Runden spielen kannst. Du kannst sogar ein `{ask}` verwenden, um die Nutzer zu fragen, wie viele Runden sie spielen m√∂chten.
                example_code: |
                    ```
                    Auswahl {is} Schere, Stein, Papier
                    deine_Wahl {is} {ask} 'Was w√§hlst du?'
                    {print} 'Du w√§hlst ' deine_Wahl
                    Computer_Wahl {is} Auswahl {at} {random}
                    {print} 'Der Computer w√§hlt ' Computer_Wahl
                    {if} Computer_Wahl {is} deine_Wahl
                        {print} 'Unentschieden'
                    {if} Computer_Wahl {is} 'Stein'
                        {if} deine_Wahl {is} 'Papier'
                            {print} 'Du gewinnst!'
                        {if} deine_Wahl {is} 'Schere'
                            {print} 'Du verlierst!'
                    # mach den Beispiel-Code fertig
                    ```
                start_code: '# setze hier deinen Code hin'
            10:
                story_text: |
                    Bist du zu faul, um das Spiel selbst zu spielen? Lass Hedy es f√ºr dich spielen!
                    Du musst nur die Namen der Spieler ausf√ºllen und sie bekommen eine zuf√§llige Auswahl.

                    ### √úbung 1
                    Vervollst√§ndige das Programm, indem du eine Liste von Namen ausf√ºllst.

                    ### √úbung 2
                    F√ºge einen Computerspieler hinzu, der mit jedem Spieler ausw√§hlt.

                    **(extra)** Gehe zur√ºck zu deinem Code und entscheide, wer in jeder Runde gewinnt: der Computer oder die benannte Person.
                example_code: |
                    ```
                    Auswahl = rock, paper, scissors
                    Personen = _
                    {for} Spieler {in} Personen
                         {print} Spieler ' w√§hlt ' Auswahl {at} {random}
                    ```
                start_code: '# setze hier deinen Code hin'
            13:
                story_text: |
                    Mit dem Befehl `{and}` kannst du deinen Schere, Stein, Papier Code k√ºrzen! Sieh dir den Beispielcode an.

                    ### √úbung
                    Beende den Code so, dass immer ein Gewinner ermittelt wird. F√ºhre dein Code ein paar Mal aus, um zu √ºberpr√ºfen, ob immer ein Gewinner ausgegeben wird.
                example_code: |
                    ```
                    Optionen = 'Stein', 'Papier', 'Schere'
                    deine_auswahl = {ask} 'Was w√§hlst du?'
                    computer_auswahl = Optionen {at} {random}
                    {print} 'Du w√§hlst ' deine_auswahl
                    {print} 'Der Computer w√§hlt ' computer_auswahl
                    {if} computer_auswahl {is} deine_auswahl
                        {print} 'Unentschieden'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Papier'
                        {print} 'Du gewinnst!'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Schere'
                        {print} 'Der Computer gewinnt!'
                    _
                    ```
                start_code: '# setze hier deinen Code hin'
            15:
                story_text: |
                    Spiele, bis du den Computer besiegst! Aber mach zuerst den Beispiel-Code fertig...
                example_code: |
                    ```
                    gewonnen = 'nein'
                    Auswahl = 'Schere', 'Stein', 'Papier'
                    {while} gewonnen == 'nein'
                        deine_Wahl = {ask} 'Was w√§hlst du?'
                        Computer_Wahl = Auswahl {at} {random}
                        {print} 'Du w√§hltest ' deine_Wahl
                        {print} 'Der Computer w√§hlte ' Computer_Wahl
                        {if} Computer_Wahl == deine_Wahl
                            {print} 'Unentschieden!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Schere'
                            {print} 'Du hast verloren!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Papier'
                            {print} 'Du hast gewonnen!'
                            gewonnen = 'ja'
                    _
                    ```
                start_code: '# setze hier deinen Code hin'
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Jetzt, da du gelernt hast, wie man den `{ask}` Befehl einsetzt, kannst du den Stein, Schere, Papier Code auch interaktiv machen!

                    ### √úbung
                    Mache den Stein, Schere, Papier Code interaktiv, in dem du den `{ask}` Befehl und eine Frage zu deinem Stein, Schere, Papier Code hinzuf√ºgst.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
    secret:
        name: Superspion
        default_save_name: Sprache
        description: Schreibe deinen eigenen Spion-Code
        levels:
            12:
                story_text: |
                    In diesem Abenteuer kannst du deinen eigenen Superspion-Code erstellen. Verschl√ºssele eine Nachricht, die nur der richtige Agent entschl√ºsseln kann.
                    Wenn der Feind versucht, den Code zu knacken, wird er falsche Informationen erhalten, um seine Zeit zu verschwenden.

                    ### √úbung 1
                    Erstelle deinen eigenen Geheimcode f√ºr deinen Superspion und gib beide Teile nur an den echten Spion zur√ºck.

                    ### √úbung 2
                    F√ºge dem Code eine dritte Komponente hinzu, zum Beispiel ein Kleidungsst√ºck oder einen Gegenstand.
                example_code: |
                    ```
                    Name {is} {ask} 'Wie hei√üt du?'
                    if Name {is} '_'
                        a {is} 'Geh zum Flughafen '
                    {else}
                        a {is} 'Geh zum Bahnhof '
                    Passwort {is}  {ask} 'Wie lautet das Passwort?'
                    {if} Passwort {is} _
                        b {is} 'Morgen um 2 Uhr'
                    {else}
                        b {is} 'Morgen um 10 Uhr'
                    {print} _ _ _
                    ```
                start_code: '# setze hier deinen Code hin'
            13:
                story_text: |
                    Wir k√∂nnen den Superspy-Code mit `{and}` vereinfachen, so dass wir nur einen `{if}` ben√∂tigen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, indem du den richtigen Befehl in das leere Feld eintr√§gst. Tipp: Der Superspion muss BEIDE Fragen richtig beantworten, bevor er die vertraulichen Informationen erh√§lt!

                    ### √úbung 2
                    Wir wollen den Gegner noch mehr verwirren! Erstelle eine Liste mit falschen Antworten und w√§hle eine zuf√§llig aus, wenn eine falsche Antwort gegeben wird.
                example_code: |
                    ```
                    Name {is} {ask} 'Wie hei√üt du?'
                    Passwort {is} {ask} 'Wie lautet dein Passwort?'
                    {if} Name {is} 'Agent007' _ Passwort {is} 'STRENGGEHEIM'
                        {print} 'Gehe um 2 Uhr zum Flughafen'
                    {else}
                        {print}  'Gehe um 10 Uhr zum Bahnhof'
                    ```
                start_code: '# setze hier deinen Code hin'
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    Ein weiterer neuer Befehl in diesem Level ist der `{sleep}` Befehl. Er pausiert dein Programm f√ºr eine Sekunde. Wenn du eine Zahl hinter den {sleep} Befehl schreibst, pausiert dein Programm f√ºr diese Anzahl an Sekunden.

                    ### √úbung
                    √úbe den neuen Befehl, in dem du dir eigenen Code ausdenkst, der mindestens 3 mal den Befehl {sleep} verwendet. Mit jeden {sleep} Befehl soll die Pausierzeit anders sein.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
                start_code: |-
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
    songs:
        name: Singe ein Lied!
        default_save_name: Song
        description: Gib einen Songtext aus
        levels:
            6:
                story_text: |
                    In Liedern wiederholt sich oft einiges. Manchmal basiert die Wiederholung auch darauf, dass etwas gez√§hlt wird.
                    So zum Beispiel im Lied √ºber die Bierflaschen. Dies ist eigentlich ein englisches Lied und hat den Titel "99 bottles of beer". Dieses Lied kannst du mit ein klein wenig Mathematik programmieren.

                    Tipp: Nutze die Laut-Vorlesen-Funktion um Hedy das Lied f√ºr dich singen zu lassen.

                    ### √úbung
                    Du kannst nun die Zeilen 2 bis 7 so oft wie du m√∂chtest wiederholen, indem du sie kopierst.
                example_code: |
                    ```
                    Strophe = 99
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {sleep}
                    ```
                story_text_2: |
                    Dieses Kinderlied z√§hlt runter, von 5 kleinen Affen bis zu 1 Affe.
                    Wenn du die Zeilen 2 bis 7 kopierst und unter dem Code einf√ºgst, kannst du das ganze Lied singen!
                example_code_2: |
                    ```
                    nummer = 6
                    nummer = nummer - 1
                    {print} nummer ' kleine Affen springen auf dem Bett'
                    {print} 'Einer fiel runter und stie√ü sich den Kopf'
                    {print} 'Mama rief den Arzt und der Arzt sagte'
                    {print} 'KEINE KLEINEN AFFEN SPRINGEN MEHR AUF DEM BETT!'
                    {sleep}
                    ```
                start_code: '{print} ''Lass uns singen!'''
            7:
                story_text: "In Liedern wiederholt sich oft einiges. So auch im Lied \"Baby Hai\"! Wenn du es singst, singst du eigentlich immer das gleiche:\n\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai \n\n### √úbung\nKannst du das Lied mit Hilfe des\
                    \ `{repeat}` Befehls ausgeben? Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst!\n **Extra** Nach dem Baby-Hai kannst du nat√ºrlich auch andere Lieder programmieren. Es gibt viele Lieder mit Wiederholung!\nKannst du an ein weiteres Lied denken und es ausgeben?\n"
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Hai tututudutudu'
                    {print} 'Baby Hai'
                    ```
                start_code: '{print} ''Baby Hai'''
            8:
                story_text: |
                    In einem vorigen Level hast du das Lied √ºber die Bierflaschen programmiert. Aber ohne den `{repeat}` Befehl musstest du die Strophen viele Male kopieren.
                    In diesem Level kannst du das Lied 99 mal wiederholen, indem du nur eine einfache Zeile hinzuf√ºgst!

                    ### √úbung
                    F√ºge den richtigen Befehl in die L√ºcken ein und r√ºcke den Code korrekt ein.
                example_code: |
                    ```
                    Strophe = 99
                    _ 99 {times}
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    ```
                start_code: '# setze hier deinen Code hin'
            10:
                story_text: |
                    Mit `{for}` kannst du den ganzen Babyhai-Song (inklusive aller anderen Haie in der Familie) in nur 6 Zeilen Code ausgeben.

                    ### √úbung 1
                    Kannst du den Babyhai-Code noch k√ºrzer machen, indem du `{for}` verwendest? Vervollst√§ndige den Beispiel-Code.
                example_code: "```\nfamilie = Baby, Mami, Papi, Omi, Opi\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### √úbung 2
                    Gib das Lied F√ºnf kleine Affen springen auf dem Bett aus. Schlag den Text nach, falls du dich nicht daran erinnerst.

                    **(extra)** Gib das Lied Old MacDonald hat 'ne Farm aus und stelle sicher, dass alle Tiere ein unterschiedliches Ger√§usch machen, indem du `{if}` benutzt.
                example_code_2: |
                    ```
                    affen = 5, 4, 3, 2, 1
                    ```
                start_code: '# setze hier deinen Code hin'
            11:
                story_text: |
                    In diesem Level nutzt du den Befehl `{for}` mit `{range}` f√ºr Lieder, in denen gez√§hlt wird, wie z.B. bei 'F√ºnf kleine Affen'.

                    ### √úbung 1
                    F√ºlle die L√ºcken und mach, dass der Code funktioniert. Falls du den Liedtext nicht kennst, schlage ihn selbst nach.

                    ### √úbung 2
                    Die letzte Zeile des Liedes unterscheidet sich von den anderen. Gib diese Zeile innerhalb eine `{for}` Befehls aus und nutze `{if}` um es korrekt zum Laufen zu bringen.
                example_code: |
                    ```
                    _ affen _ _ 5 _ 1
                        {print} affen ' kleine Affen springen auf dem Bett'
                        _
                    ```
                start_code: '# setze hier deinen Code hin'
            12:
                story_text: |
                    Jetzt machen wir es uns richtig einfach und programmieren 'Wenn du gl√ºcklich bist, dann klatsche in die Hand'. Alles, was wir tun m√∂chten, wenn wir gl√ºcklich sind, speichern wir in einer Variablen. Sieh es dir an:

                    ### √úbung
                    Kannst du die richtige Anzahl Leerzeichen zum Einr√ºcken hinzuf√ºgen, damit das Lied richtig spielt?
                    Tipp: Nicht jede Zeile braucht Einr√ºckung.
                example_code: |
                    ```
                    Aktionen = 'klatsche in die Hand', 'stampfe mit dem Fu√ü', 'ruf Hurra'
                    _ {for} Aktion {in} Aktionen
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    _ {print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist.'
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    ```
                start_code: '# setze hier deinen Code hin'
            16:
                story_text: |
                    In diesem Level kannst Du 'Old MacDonald hat ne Farm' sogar noch schneller programmieren. Du kannst jedem Tier das richtige Ger√§usch zuordnen, indem Du sie an die selbe Stelle einer Liste speicherst.
                    Vielleicht kennst Du ja auch schon das englischsprachige Lied 'The Drunken Sailor'. Hierf√ºr ben√∂tigst Du nur 8 Zeilen Code. Sieh es Dir an!
                example_code: |
                    ```
                    Tiere = ['Schweine', 'Hunde', 'K√ºhe']
                    Ger√§usche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        Tier = Tiere[i]
                        Ger√§usch = Ger√§usche[i]
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Ger√§usch Ger√§usch ' hier'
                        {print} 'und nem ' Ger√§usch Ger√§usch ' da'
                        {print} 'hier ein ' Ger√§usch
                        {print} 'dort ein ' Ger√§usch
                        {print} '√ºberall ein ' Ger√§usch Ger√§usch
                    ```

                    ```
                    Zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} Zeile {in} Zeilen
                        {for} i {in} {range} 1 {to} 3
                            {print} Zeile
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# setze hier deinen Code hin'
            18:
                story_text: |
                    In Level 16 haben wir Lieder mit Listen gemacht. Diese Programme funktionieren jedoch nicht mehr ganz in diesem Level. Die Doppelpunkte aus Level 17 und die Klammern aus Level 18 m√ºssen noch hinzugef√ºgt werden.

                    ### √úbung 1
                    Das Drunken sailor Lied ist im Beispiel-Code, aber es funktioniert noch nicht.
                    Kannst du sicherstellen, dass alles wieder funktioniert? Um dir zu helfen haben wir _ an die Stellen _einiger_ Fehler gesetzt.

                    ### √úbung 2
                    Schau auch deinen Old MacDonald Song aus Level 16 nach und korrigiere ihn.
                example_code: |
                    ```
                    zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} zeile {in} zeilen _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ zeile _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# Schreibe deinen Code hier'
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Spiele ein Spiel Tic Tac Toe!
        levels:
            13:
                story_text: |
                    In diesem Abenteuer kannst du ein Spiel Tic Tac Toe programmieren. Du kannst mit zwei Personen spielen. Abwechselnd w√§hlst du die Nummer des Feldes (1 - 9), auf das du dein Zeichen (x oder o) setzen willst.
                    Der erste Spieler, der drei in einer Reihe (waagerecht, senkrecht oder diagonal) hat, gewinnt!

                    ### √úbung 1
                    Das Spiel funktioniert, aber es hat einige Probleme. Zum Beispiel kann sich jede Spielerin ein beliebiges Feld aussuchen, sogar ein bereits besetztes! Verwende `{if}`, um festzustellen, ob das Feld schon besetzt ist, und wenn ja, warne die Spielerin.

                    ### √úbung 2
                    Das Spiel entscheidet auch nicht, wer gewonnen hat. Du musst dies hinzuf√ºgen, indem du pr√ºfst, ob drei Felder in einer Reihe das gleiche Symbol haben.

                    ### √úbung 3 (extra)
                    Du hast nicht immer einen Freund, mit dem du spielen kannst. Kannst du einen Computergegner erstellen?
                example_code: |
                    ```
                    spieler = 'x'
                    feld = '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'

                    {for} i {in} {range} 1 {to} 9
                        wahl = {ask} 'Spieler ' spieler ' welchen Platz w√§hlst du?'
                        feld {at} wahl = spieler
                        {clear}
                        print feld {at} 1 feld {at} 2 feld {at} 3
                        drucke feld {at} 4 feld {at} 5 feld {at} 6
                        print feld {at} 7 feld {at} 8 feld {at} 9
                        {if} spieler = 'x'
                            spieler = 'o'
                        {else}
                            spieler = 'x'
                    ```
                start_code: '# Schreib deinen Code hier'
            14:
                story_text: |
                    In den vorigen Levels hast du ein Tic Tac Toe-Spiel kreiert. Jetzt wei√üt du, wie du das =-Symbol, das ==-Symbol und das !=-Symbol nutzen kannst.
                    Du kannst dieses Wissen in deinem neuen Tic Tac Toe-Spiel zum Beispiel so anwenden:
                example_code: |
                    ```
                    zeichen = 'x'
                    offene_stellen = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spiel = 'an'
                    stelle_1 = '.'
                    stelle_2 = '.'
                    stelle_3 = '.'
                    stelle_4 = '.'
                    stelle_5 = '.'
                    stelle_6 = '.'
                    stelle_7 = '.'
                    stelle_8 = '.'
                    stelle_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} stelle_1 stelle_2 stelle_3
                    {print} stelle_4 stelle_5 stelle_6
                    {print} stelle_7 stelle_8 stelle_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} spiel != 'aus'
                            wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'
                            {if} wahl {in} offene_stellen
                                {remove} wahl {from} offene_stellen
                                {if} wahl == 1
                                    stelle_1 = zeichen
                                {if} wahl == 2
                                    stelle_2 = zeichen
                                {if} wahl == 3
                                    stelle_3 = zeichen
                                {if} wahl == 4
                                    stelle_4 = zeichen
                                {if} wahl == 5
                                    stelle_5 = zeichen
                                {if} wahl == 6
                                    stelle_6 = zeichen
                                {if} wahl == 7
                                    stelle_7 = zeichen
                                {if} wahl == 8
                                    stelle_8 = zeichen
                                {if} wahl == 9
                                    stelle_9 = zeichen
                            {else}
                                {print} 'Die Stelle ist schon besetzt'
                            {print} stelle_1 stelle_2 stelle_3
                            {print} stelle_4 stelle_5 stelle_6
                            {print} stelle_7 stelle_8 stelle_9
                            {print} ' '
                            gewinner = {ask} 'Hast du gewonnen?'
                            {if} gewinner == 'ja'
                                {print} 'Gut gemacht, Spieler ' zeichen '!'
                                spiel = 'aus'
                            {else}
                                {if} zeichen == 'x'
                                    zeichen = 'o'
                                {else}
                                    zeichen = 'x'
                    ```
                start_code: '# Schreibe deinen Code hier'
            15:
                story_text: |
                    In diesem Level kannst du dein Tic Tac Toe-Spiel mit der {while}-Schleife verbessern. Mit dieser Schleife kannst du `{if} game != 'over'` und `{for} i {in} {range} 1 {to} 9` in eine einfache Zeile zusammenf√ºhren.
                    Probiere es gleich aus:
                example_code: |
                    ```
                    zeichen = 'x'
                    offene_stellen = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    spiel = 'an'
                    stelle_1 = '.'
                    stelle_2 = '.'
                    stelle_3 = '.'
                    stelle_4 = '.'
                    stelle_5 = '.'
                    stelle_6 = '.'
                    stelle_7 = '.'
                    stelle_8 = '.'
                    stelle_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} stelle_1 stelle_2 stelle_3
                    {print} stelle_4 stelle_5 stelle_6
                    {print} stelle_7 stelle_8 stelle_9
                    {print} ' '
                    {while} spiel != 'aus'
                        wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'
                        {if} wahl {in} offene_stellen
                            {remove} wahl {from} offene_stellen
                            {if} wahl == 1
                                stelle_1 = zeichen
                            {if} wahl == 2
                                stelle_2 = zeichen
                            {if} wahl == 3
                                stelle_3 = zeichen
                            {if} wahl == 4
                                stelle_4 = zeichen
                            {if} wahl == 5
                                stelle_5 = zeichen
                            {if} wahl == 6
                                stelle_6 = zeichen
                            {if} wahl == 7
                                stelle_7 = zeichen
                            {if} wahl == 8
                                stelle_8 = zeichen
                            {if} wahl == 9
                                stelle_9 = zeichen
                        {else}
                            {print} 'Die Stelle ist bereits belegt'
                        {print} stelle_1 stelle_2 stelle_3
                        {print} stelle_4 stelle_5 stelle_6
                        {print} stelle_7 stelle_8 stelle_9
                        {print} ' '
                        gewinner = {ask} 'Hast du gewonnen?'
                        {if} gewinner == 'ja'
                            {print} 'Gut gemacht, Spieler ' zeichen '!'
                            spiel = 'aus'
                        {else}
                            {if} zeichen == 'x'
                                zeichen = 'o'
                            {else}
                                zeichen = 'x'
                    ```
                start_code: '# f√ºge hier deinen Code ein'
            17:
                story_text: |
                    In den vorigen Leveln hatte das Tic-Tac-Toe-Spiel ein nerviges Verhalten. Nach jedem Zug musstest du selbstst√§ndig eintragen, ob du gewonnen hast oder nicht.
                    Dies hat das Spiel spielbar gemacht, aber auch recht langsam. In diesem Level haben wir gelernt, wie wir den `{elif}`-Befehl nutzen k√∂nnen, um dieses Problem zu l√∂sen.
                    Den `{elif}`-Befehl so zu nutzen, um Hedy feststellen zu lassen, ob eine Spielerin oder ein Spieler gewonnen hat, ist spa√üig, braucht aber auch eine gewisse Anzahl an zus√§tzlichen Zeilen.

                    Im Beispielcode kannst du sehen, dass wir Siegesbestimmungen hinzugef√ºgt haben (3 Felder in einer horizontalen, vertikalen oder diagonalen Reihe).
                    Du kannst diese in den Zeilen 46 bis 69 finden. Du kannst ebenso sehen, dass jedes Mal, wenn die Bestimmungen erf√ºllt sind (also, wenn jemand gewonnen hat), die Variable spiel auf 'aus' gesetzt wird.
                    Das bedeutet, dass die `{while}`-Schleife gestoppt wird und das Spiel zu Ende ist.
                example_code: |
                    ```
                    zeichen = 'x'
                    offene_stellen = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    spiel = 'an'
                    stelle_1 = '.'
                    stelle_2 = '.'
                    stelle_3 = '.'
                    stelle_4 = '.'
                    stelle_5 = '.'
                    stelle_6 = '.'
                    stelle_7 = '.'
                    stelle_8 = '.'
                    stelle_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} stelle_1 stelle_2 stelle_3
                    {print} stelle_4 stelle_5 stelle_6
                    {print} stelle_7 stelle_8 stelle_9
                    {print} ' '
                    {while} spiel != 'aus':
                        wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'
                        {if} wahl {in} offene_stellen:
                            {remove} wahl {from} offene_stellen
                            {if} wahl == 1:
                                stelle_1 = zeichen
                            {if} wahl == 2:
                                stelle_2 = zeichen
                            {if} wahl == 3:
                                stelle_3 = zeichen
                            {if} wahl == 4:
                                stelle_4 = zeichen
                            {if} wahl == 5:
                                stelle_5 = zeichen
                            {if} wahl == 6:
                                stelle_6 = zeichen
                            {if} wahl == 7:
                                stelle_7 = zeichen
                            {if} wahl == 8:
                                stelle_8 = zeichen
                            {if} wahl == 9:
                                stelle_9 = zeichen
                        {else}:
                            {print} 'Diese Stelle ist bereits belegt'
                        {print} stelle_1 stelle_2 stelle_3
                        {print} stelle_4 stelle_5 stelle_6
                        {print} stelle_7 stelle_8 stelle_9
                        {print} ' '
                        {if} stelle_1 == stelle_2 {and} stelle_2 == stelle_3 {and} stelle_1 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_4 == stelle_5 {and} stelle_5 == stelle_6 {and} stelle_4 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_7 == stelle_8 {and} stelle_8 == stelle_9 {and} stelle_7 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_1 == stelle_4 {and} stelle_4 == stelle_7 {and} stelle_1 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_2 == stelle_5 {and} stelle_5 == stelle_8 {and} stelle_2 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_3 == stelle_6 {and} stelle_6 == stelle_9 {and} stelle_3 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_1 == stelle_5 {and} stelle_5 == stelle_9 {and} stelle_1 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {elif} stelle_3 == stelle_5 {and} stelle_5 == stelle_7 {and} stelle_3 != '.':
                            {print} 'Spieler ' zeichen ' gewinnt!'
                            spiel = 'aus'
                        {else}:
                            {if} zeichen == 'x':
                                zeichen = 'o'
                            {else}:
                                zeichen = 'x'
                    ```
                start_code: '# gib deinen Code hier ein'
    turtle:
        name: Schildkr√∂te
        default_save_name: Schildkr√∂te
        description: Mal dein eigenes Bild
        levels:
            1:
                story_text: |
                    Du kannst mit Hedy auch zeichnen. Indem Du Drehungen und Linien kombinierst, kannst Du ein Quadrat oder eine Treppe zeichnen.

                    Mit `{forward}` ziehst Du eine Linie vorw√§rts. Die Zahl dahinter legt fest, wie weit die Schildkr√∂te wandert. Mit `{turn} {right}` ("drehe Dich nach rechts") macht sie eine Viertelumdrehung im Uhrzeigersinn, mit `{turn} {left}` ("drehe Dich nach links") entgegen dem Uhrzeigersinn.

                    Wenn du zur√ºck laufen m√∂chtest, benutzt du den `{forward}`-Befehl mit einer negativen Zahl., wie zum Beispiel `{forward} -100`.

                    ### √úbung
                    Das ist der Anfang einer kleinen Treppe. Kannst Du sie so zeichnen, dass sie 5 Stufen hat?
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    In diesen level kann du Variablen nutzen, um die Schildkr√∂te interaktiv zu machen. Du kannst zum Beispiel die Spieler fragen, wie viele Schritte die Schildkr√∂te machen soll.
                example_code: |
                    ```
                    antwort {is} {ask} Wie viele Schritte soll die Schildkr√∂te machen?
                    {forward} antwort
                    ```
                story_text_2: |
                    In Level 1 konnte sich die Schildkr√∂te au√üerdem nur nach links oder rechts drehen. Das ist ein bisschen langweilig!
                    In level 2 kann sie ihre Nase in alle Richtungen strecken.

                    Benutze 90 f√ºr eine Vierteldrehung. Dies wird Grad genannt. Eine komplette Drehung sind 360 Grad.

                    ### √úbung
                    Kannst du mit diesem Code eine Form gestalten? Vielleicht ein Dreieck oder einen Kreis?
                example_code_2: |
                    ```
                    {print} Figuren werden gezeichnet
                    winkel {is} 90
                    {turn} winkel
                    {forward} 25
                    {turn} winkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} Schildkr√∂tenrennen!
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
            3:
                story_text: |
                    In diesem Level kannst Du `{at} {random}` nutzen, w√§hrend die Schildkr√∂te etwas zeichnet. Durch eine zuf√§llige Wahl nimmt die Schildkr√∂te jedes Mal einen anderen Weg.
                    Nutze `{at} {random}` um einen zuf√§lligen Wert aus einer Liste zu w√§hlen.
                    ### √úbung
                    Kannst du die Zeilen 2 und 3 kopieren und wieder einf√ºgen, um einen l√§ngeren, zuf√§lligen Pfad zu erzeugen?
                example_code: |
                    ```
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
            4:
                story_text: |
                    In Level 4 musst Du bei `{print}` und `{ask}` Anf√ºhrungszeichen nutzen. Das gilt auch f√ºr's Zeichnen!
                example_code: |
                    ```
                    {print} _ Formen zeichnen _
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kannst auch die Farben der Linien mit dem Befehl `{color}` √§ndern. Sieh dir das Beispiel an.
                    Du kannst auch den Befehl `{color} {white}` benutzen, um unsichtbare Linien zu ziehen. Du kannst diese wei√üen Linien nutzen, um die Schildkr√∂te irgendwo auf dem Bildschirm hin zu bewegen bevor du zu malen anf√§ngst.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
            5:
                story_text: |
                    In Level 5 kannst Du mit dem Befehl `{if}` Entscheidungen treffen. Du kannst Dich zum Beispiel zwischen verschiedenen Formen entscheiden.
                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'M√∂chtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120
                    {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### √úbung
                    F√ºlle die richtigen Zahlen in die L√ºcken in diesem Code, um ihn zum Laufen zu bringen.
                    Nachdem du das getan hast, kannst du versuchen die Option r√ºckw√§rts hinzuzuf√ºgen.

                    **Extra** Anstelle von "links" und "rechts", √§ndere das Programm so, dass es Nord, Ost, S√ºd und West benutzt.
                    Auf diese Weise kannst du sogar noch mehr Richtungen, wie z.B. Nordost und S√ºdwest, hinzuf√ºgen.
                example_code_2: |
                    ```
                    richtung {is} {ask} 'M√∂chtest du links, rechts oder geradeaus gehen?'
                    {if} richtung {is} left {turn} _
                    {if} richtung {is} right {turn} _
                    {forward} 100
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'M√∂chtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120 {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
            6:
                story_text: |
                    In diesem Level nutzen wir Berechnungen, um verschiedene Formen zu zeichnen.
                    Du hast vielleicht schon gelernt, dass eine komplette Umdrehung 360¬∞ sind. Falls nicht, dann wei√üt Du es jetzt!
                    Deswegen benutzen wir immer 90¬∞ f√ºr ein Rechteck. 360 geteilt durch 4 ist 90.
                    Jetzt, da wir wissen wie Mathe mit Hedy geht, k√∂nnen wir alle Formen zeichnen, die wir wollen!
                example_code: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    ```
                start_code: '{print} ''Formen zeichnen'''
            8:
                story_text: |
                    Jetzt, da wir einzelne Linien wiederholen k√∂nnen, f√§llt uns das Zeichnen einzelner Formen leichter.
                    Wir setzen den Winkel einmalig und nutzen dann die Variable im `{repeat}`.

                    ### √úbung 1
                    Der Beispiel-Code erstellt ein Quadrat. √Ñndere den Code, sodass er eine andere Figur erstellt, wie ein Dreieck oder ein Sechseck.
                    Dies bedarf einer √Ñnderung in zwei Zeilen Code.
                    Tipp: Ein voller Kreis hat 360 Grad.

                    ### √úbung 2
                    Erstelle nun eine Zeichnung aus mindestens zwei Polygonen.
                example_code: |
                    ```
                    Winkel = 90
                    {repeat} 4 {times}
                        {turn} Winkel
                        {forward} 50
                    ```
                story_text_2: |
                    **(extra)**Wir k√∂nnen auch das Programm verbessern, das verschiedene Formen zeichnet. Vervollst√§ndige den Code und du kannst jedes Vieleck zeichnen, das du m√∂chtest!
                example_code_2: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {repeat} Ecken {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
            9:
                story_text: |
                    Nun da wir ein `{repeat}` innerhalb eines `{repeat}` verwenden k√∂nnen, ist es m√∂glich, komplexere Figuren zu erstellen.

                    ### √úbung 1
                    Dieser Code erzeugt drei schwarze Dreiecke, √§ndere dies zu f√ºnf pinken Quadraten.

                    **(extra)** Erstelle eine Figur deiner Wahl, die aus mindestens zwei verschiedenen Formtypen besteht.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                start_code: '# schreibe deinen Code hier'
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                start_code: '# Write your code here'
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
                start_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    years:
        name: Neujahr
        default_save_name: Neujahrs-Countdown
        description: Runterz√§hlen zum neuen Jahr!
        levels:
            11:
                story_text: |
                    In diesem Level kannst du den Befehl `{for}` Zahl `{in}` `{range}` benutzen, um zum neuen Jahr runterzuz√§hlen.

                    ### √úbung
                    F√ºlle die L√ºcken und bring den Code zum Laufen!
                example_code: |
                    ```
                    {for} Zahl {in} {range} _ {to} _
                        {print} Zahl
                    {print} 'Frohes neues Jahr!'
                    ```
                start_code: '# Platziere deinen Code hier'
