title: 海蒂（Hedy）文档
home-sections:
-   title: 文本编程变得更容易!
    text: |-
        学习编程是一件很难的事情。不是说编程本身很难! 而是你需要记住很多规则，就像你刚刚开始学习英语时一样。
        同样的，你也需要通过做大量练习题来学习编程。

        当然你现在可以轻松地读懂这段话。但你还记得你小时候是怎么学习阅读的吗？你那时候学习每个字都需要花费一定的时间!
        对于编程来说也是如此，刚刚开始学的时候可能会觉得很难，但以后会变得越来越容易!

        Hedy（海蒂）最大的好处就是你可以*循序渐进*的学习编程。这意味着你不必一下子学会所有的规则
        最初的几个级别里面没有太多的规则，所以你一开始就可以轻松的学习编程。
        在每一个级别里面我们都会增加新的规则，增加你所知道的命令数量。命令是计算机的指令。
-   title: 多语言编程
    text: 虽然几乎所有的文本编程语言都只有英文关键词，如`for`或`repeat`，但你可以用任何语言来使用海蒂编程！我们目前支持39种不同的语言，包括西班牙语、阿拉伯语、简体中文和印地语。如果海蒂编程没有你的语言的版本，你可以随时开始用新的语言翻译海蒂编程。
-   title: 循序渐进的学习
    text: Hedy（海蒂）是为所有想学习编程的孩子们设计的! 当然你要有一定的英语基础。
-   title: Multi-lingual programming
    text: |-
        海蒂编程专为课堂使用而设计，这些课程适合 10 岁及以上的孩子。
        教师可以使用我们提供的免费内置教案，也可以自己编写教案并将其加载到海蒂编程的用户界面中。
-   title: Built for the classroom
    text: 海蒂编程以尽可能广泛的方式实现编程的效果，并且可以以各种令人兴奋的方式使用这些效果。 海蒂编程允许创建数字和交互式故事；可以把彩色图案显示在屏幕上，也可以用笔式绘图仪把彩色图案绘制在衬衫上，或者用绣花机把彩色图案绣在衬衫上；还可以用来创建能用按钮和键盘玩的游戏或应用程序。
-   title: 我需要有编程经验吗？
    text: |-
        是的！海蒂编程是“开源”的，这意味着每个人都可以帮助我们让海蒂编程变得更好。
        你可以在 <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a> 上找到我们的代码。
        如果你喜欢海蒂编程并想做出贡献，我们乐意接受（并非常感谢）<a href="https://github.com/sponsors/hedyorg" target="_blank">捐赠</a>！
-   title: Hedy（海蒂）是免费的吗？
    text: 不需要。海蒂编程可以通过浏览器直接运行，浏览器就是您现在查看这个页面所使用的程序。你可以选择使用 Chrome、Edge 或 Firefox等浏览器。海蒂编程也可以在你的手机或平板电脑上运行。
-   title: 我要安装任何软件吗？
    text: |-
        没有必要。在幻灯片和学习者的界面中所有的概念都得到了解释。
        如果你创建了一个免费的教师账户，你还可以获得教师手册，其中包括教学建议以及学生容易出错的地方。
join-sections:
-   title: Supporting Hedy
    text: '# There are three ways in which you can support Hedy!'
-   title: Improving the language
    text: |-
        海蒂编程的渐进性和多语言性带来了很多有趣的技术挑战。
        在<a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github上可以找到这些问题</a> 。
-   title: Translating Hedy
    text: |-
        你不是一个程序员？没问题！另一种支持海蒂编程的方式是通过<a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">，翻译关键词、错误信息、探险活动或其他内容</a> 。
        这是目前的状况，请帮助我们完成一种已有语言的翻译工作，或者添加一种新的语言来翻译海蒂编程！
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help teachers get started
    text: |-
        海蒂编程旨在支持教师在课堂上教编程课程。我们有特定的教师功能，例如创建班级、自定义班级和查看学生表现的选项。
        如果您喜欢海蒂编程，您可以联系您认识的学校来帮助教师了解和尝试海蒂编程！我们可以通过<a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a>帮助您找到学校或老师。
learn-more-sections:
-   title: 加入海蒂编程社区
    text: |-
        我们很高兴收到您的来信！与我们取得联系的最佳方式是加入我们的 <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord 服务器 </a>。
        您也可以[给我们发邮件](mailto:hello@hedy.org "关于海蒂")。
-   title: 深潜！
    text: |-
        想了解更多关于海蒂的理念和设计吗？请看翡丽娜（Felienne）在 2022 年 StrangeLoop 会议上的演讲：

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: 编程周讲座
    text: |-
        自从我们在2020年初发布以来，一些网站和报纸发表了一些关于海蒂 编程的文章。我们在这里保留了一份列表。
        * [科技乐观主义 —— IT 人才短缺的一个解决方案(荷兰语), 2022年8月](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast，2022年7月](https://codeweek.eu/podcast/26)
        * [Heise.de（德语），2022年1月](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, 2021年11月](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives（荷兰语），2021年10月CodeWeek专题](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge（英语）, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com，（英语）2021年4月](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO杂志，2021年4月](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software（西班牙语），2021年2月](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [《Hello World》杂志，2021年2月](images/Hello_World_15_Hedy.pdf)
        * [Discoro, 2021年1月](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [翡丽娜因为开发海蒂编程（Hedy）赢得荷兰ICT研究奖，2021年1月](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, 2020年8月](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta（西班牙语），2020年8月](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez（法语），2020年8月](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives（荷兰语），2020年10月](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [荷兰莱顿大学，2020年4月](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare（荷兰语），2020年4月](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect（荷兰语），2020年4月](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
sections:
-   title: 简介
    key: 简介
    subsections:
    -   title: 海蒂（Hedy）是什么？
        text: |-
            海蒂（Hedy ）是一种文本编程语言，专为10 至 15 岁青少年开发。
            与 Scratch 等儿童编程语言相比，海蒂（Hedy ）不使用模块，而是使用文本代码。
            因此，借助海蒂（Hedy ），您将学习如何像真正的程序员一样输入代码，但要通过有趣的练习分小步进行。
            通过这种方式，海蒂（Hedy ）可以通过一种可交互且非常有趣的方式作为真正的编程语言（如 Python）的基础！
            如果您想了解更多，你可以观看这个 <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">视频</a>关于 海蒂（Hedy ）作为编程语言的发展历程。
    -   title: 目标群体
        text: |-
            海蒂（Hedy ）是以中小学生（10-15 岁）为目标开发。
            对学生们来说，能够很好地阅读是很重要的。 我们建议在学生至少达到三年级阅读水平之前不要开始使用 海蒂（Hedy ）。
            在开始使用海蒂（Hedy ） 之前，学生（和老师！）不需要任何编程经验。
    -   title: 海蒂（Hedy ）是如何工作的？
        text: |-
            海蒂（Hedy ）分为多个级别，在这些级别中教授新命令。每个级别都包含各种冒险活动来练习新学到的命令。
            作为老师，您可以决定哪些冒险活动适合您的学生。在这个级别他们会开餐厅、设计计算器或鬼屋吗？在每个级别中，冒险活动都是按照从易到难的顺序排列的。
            因此，您的学生将不断接受挑战。冒险活动可以由学生单独完成，或者您可以在课堂教学中指导他们。

            冒险活动还包括一个代码范例，以确保数字化知识较少的教师也能够使用海蒂（Hedy） ！
            当然，海蒂（Hedy ）也迎合了喜欢自己设计课程和冒险活动的有创意的老师！

            在编写一定级别的所有冒险活动的程序之后，您的学生可以在测验中测试他们对这些知识的掌握程度。
            您可以在课程页面上追踪学生的作业和学习进度。
    -   title: 设备
        text: |-
            海蒂（Hedy）是基于网络的编程语言，这意味着它可以在任何有浏览器的设备上使用（谷歌浏览器、火狐浏览器、Edge等），因此笔记本电脑、铬笔记本、平板电脑甚至智能手机都适合使用海蒂（Hedy）。
            在使用海蒂（Hedy）之前，不需要下载任何东西，只要进入网站就可以了！
    -   title: 海蒂（Hedy ）社区
        text: |-
            欢迎所有海蒂编程的老师、程序员和其他爱好者加入我们的<a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord服务器</a>。这是聊海蒂编程的理想场所：我们有一些聊天频道，在那里你可以展示你很酷的项目和课程，有一些聊天频道可以报告错误（bug），还有一些聊天频道可以与其他老师和海蒂编程创作团队聊天。
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">在这里</a>你可以找到一个关于如何加入Discord社区的视频。
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: 你想（再次）学习这节辅导课吗？点击<a href="https://hedy.org/tutorial" target="_blank">这里</a>。
-   title: 准备工作
    key: 准备工作
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained
            below.
    -   title: 创建一个班级
        text: |-
            作为一名教师，你可以为你的学生创建一个班级。在这个班级里，你可以看到学生的账户和他们编写的程序，你可以监督他们的学习进度。
            此 <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank"> 视频 </a> 向您展示了如何在海蒂编程（Hedy ）中快速创建一个班级。
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level tresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set open_ingdates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level tresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a treshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the treshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the treshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntairy option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done costumizing your class.
    -   title: 学生账户
        text: |-
            这里有两种方法可以让您的学生加入您的班级。您可以您可以为他们创建账户，或者让他们建立自己的账户。

            **您为您的学生们创建账户**
            添加学生到你的班级的最简单方法是为他们创建一个账户。这可以通过点击 "创建学生账户 "按钮，并为他们填写用户名和密码来实现。
            学生可以用您选择的用户名和密码登录。然后，如果他们愿意，可以修改他们的用户名或密码，他们仍然会留在你的班级中。
             这个<a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">视频</a> 显示了如何以最快速和最简单的方式将学生加入你的班级。

            **学生建立自己的账户**
            您的学生们可以到海蒂编程网站上创建自己的账户，就像您做的那样。要让他们进入您的班级，他们只需点击您发给他们的邀请链接就可以了。
            您可以在班级页面上找到这个邀请链接，并将其发送给您的学生。请注意，您的学生们必须首先登入他们的海蒂账户，这样才能顺利地进行操作。
            您也可以使用 "通过用户名邀请"按钮，手动邀请学生加入你的班级。
    -   title: 设置语言偏好
        text: "当学生创建个人资料时，他们应该选择一种“首选语言”。海蒂编程（Hedy）将始终以这种选定的语言加载。\n以后可以通过再次导航到“我的帐户”和“我的个人设置”来更改此语言。\n从2021年12月起，每个海蒂编程（Hedy）帐户都必须设置首选语言。\n如果你的账户或你的学生的账户是在这个日期之前创建的，你会收到一条信息，说你的没有首选语言。\n请不要担心。请进入 \"我的个人资料\"，在个人资料设置中设置一种语言。\n在您设置语言之前，海蒂编程（Hedy）将以您的浏览器的默认系统语言显示，如果不支持这种语言，则以英语显示。 \n\n**对于非英语使用者**\n您不仅可以将冒险活动的语言更改为您自己的母语。您还可以选择关键字（例如“打印”或“提问”）应使用哪种语言。通过这种方式，您可以教学生使用英语关键字进行编码，但您也可以让他们用自己的母语进行编程。例如，荷兰学生可以使用“vraag”命令而不是“提问”命令。\n\
            \n **视频** \n此 <a href=\"https://www.youtube.com/watch?v=QrVZETj4oLM\" target=\"_blank\"> 视频</a>向您展示了如何设置首选语言以及如何将关键字更改为用您的首选语言显示。"
    -   title: 储存程序
        text: |-
            登录后，您将在“个人资料”图标旁边看到“我的程序”图标。
            此选项卡适用于您的学生。在“我的程序”中，您可以找到您编写的所有程序。
            默认情况下，程序将在运行代码时保存到“我的程序”中，并且以默认名称及其级别（例如：故事第5级）每 10 秒保存一次。如果要以新名称存储程序，只需在名称栏中键入新名称即可。
            目前，每个级别、每个选项卡只能保存一个程序。

            您（和您的学生）还可以使用课程名称旁边的共享按钮共享程序。
            这些程序将发布在我们的<a href="https://hedy.org/explore" target="_blank">探索页面</a>上，供所有人查看和使用。
            如果要取消共享程序，请转到“我的程序”，然后单击“取消共享”。

            纸飞机图标可用于将程序提交给班级的老师。已提交的程序将不再可编辑。
-   title: 与Hedy一起教学
    key: 教学
    subsections:
    -   title: Teaching with Hedy
        text: |-
            Hedy包含许多不同的级别，每个级别都教授不同的新技能。我们建议每节课教一个级别。
            这让你的学生有时间完全掌握一个新的命令或概念，并在进入下一个级别之前练习它。
            我们在课程中使用这种结构：
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introduction
        text: |-
            您可以通过激活学生的已有知识来开始上课：他们对该主题已经知道了什么，他们在上一课中学到了什么，以及他们犯了哪些错误，现在已经从中吸取了哪些教训？
            这样，当您尝试引入新课时，所有以前学到的命令和经常犯的错误都会在学生的记忆中保持新鲜感。
    -   title: 介绍新的概念和命令
        text: |-
            对于一些学生来说，新的概念和命令可能很难完全理解。
            这就是为什么向你的学生示范新命令的正确使用是很重要的。
            特别是在低年级阶段，一些学生根本没有编程经验，他们可能很难理解新的抽象概念。
            展示大量的例子可以使一个抽象的概念（例如："什么是变量？"）更容易被识别和理解（"看，变量宠物变成了狗"）。
    -   title: 让我们开始工作
        text: |-
            每个级别都包含不同的探险活动，你可以在粉红色的标签中找到。第一个粉红色选项卡解释了此级别中的新命令。
            以下选项卡是学生可以尝试并制作自己的探险活动。
            探险活动是从易到难排列，因此我们建议您从左侧的探险活动开始，然后尝试右边的探险活动。
            最后一个选项卡“下一步是什么”提供了您将在下一个级别中学到的内容的一些提示。当然，您可以给您的学生们选择在每个级别应该进行的探险活动。
            他们并不总是必须进行每一次探险活动。每个探险活动都包含一个范例代码，学生可以使用绿色按钮进行尝试。
            范例代码被复制到工作区，学生可以在那里尝试代码并对其进行调整以使其成为自己的代码。
            激励您的学生通过添加自己的想法并创作自己的探险活动，将范例代码转换为自己的代码。
    -   title: 测验和智力游戏
        text: |-
            要测试您的学生是否已学会了该级别中的所有新知识，您可以通过测验检测他们的学习成果。
            该测验包含10个关于新概念和命令的多项选择题。
            现在并非每个级别都有测验，因为我们仍在编制更多的测验。
            有些级别还包含智力游戏。这些游戏首先会向学生展示几行代码，然后要求学生必须按正确的顺序排列这几行代码。

            此<a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">视频</a>展示了测验和智力游戏的例子。
    -   title: 评价
        text: |-
            通过进行简短的评估来总结您的课。学生们学到了什么？他们遇到了哪些困难？

            他们是如何从自己的错误中学习？当然：他们创造了什么？
            学生往往对自己的作品感到非常自豪，所以最好给学生一点时间让他们有机会向同学们展示他们的作品。
-   title: 海蒂编程的一些附加功能
    key: 功能
    subsections:
    -   title: 教师统计资料
        text: 此<a href=“https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s” target=“_blank”>视频</a>向您展示了有关如何在课堂上使用教师统计资料的更多信息。
    -   title: 制作你自己的探险活动
        text: 教师也有可能创建你自己的探险活动。这个<a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">视频</a> ，告诉你如何作为教师创建自己的探险活动，并将其添加到你的班级里。
    -   title: 浏览页面
        text: |-
            在<a href="https://hedy.org/explore" target="_blank">explore页面</a>上，你可以查看其他海蒂编程用户的作品。您可以试着运行他们的程序并将它们当作灵感来创造一些很酷的东西。
            你还可以通过单击编码屏幕中的“保存和共享代码”或转到“我的程序”并单击“共享”来将你制作的程序添加到浏览页面。
            不想再分享您的程序了？只需转到“我的程序”，然后单击“取消共享”。
            如果需要有关浏览页面的更多信息，请查看此 <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">视频</a>。
    -   title: 我的成绩
        text: |-
            如果你点击屏幕右上角的用户名，你可以进入<a href="https://hedy.org/my-achievements" target="_blank">“我的成绩”</a> 。你所有的成绩都被收集起来展示在这个页面上。你的学生也有这样一个页面。
            当你用鼠标悬停在徽章上时，你会看到获得该徽章的办法。也有一些隐藏的徽章，你必须自己找到办法获得它们。
            如果你想了解更多关于成绩的信息，请看这个<a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">视频</a> 。
    -   title: 积分榜
        text: |-
            在<a href="www.https://hedy.org/highscores" target="_blank">这个页面</a>可以看到所有海蒂编程用户的积分榜。
            在这个 <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank"> 视频 </a> 中，您可以了解更多关于积分榜的信息。
    -   title: 调试器
        text: |-
            您（学生）的代码不能正确运行吗？其中一定有错误（编码错误）！可以使用调试器来查找错误。
            调试器是编码屏幕中的瓢虫按钮。如果你按下它，你可以逐行运行你的代码来找到你的错误。
            你发现错误了吗？按下红色停止按钮，调试器将关闭。
    -   title: 朗读
        text: 你想让你的程序输出被大声读出来吗？那么你可以使用朗读功能，该功能在你的编码屏幕的 “运行代码” 按钮下找到。
    -   title: 程序员模式
        text: |-
            你的注意力被所有的探险活动分散了，或者你想写一个很长的程序？那就查看你的编码屏幕底部的 “程序员模式” 开关吧。
            程序员模式允许你和你的学生使用一个更大的编码屏幕。
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: 这个<a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">视频</a>向您展示了海蒂编程的更多功能，例如备忘单和键盘切换器。
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: 常见错误
    key: 常见错误
    intro: |-
        你可以从你的错误中学习，特别是在编码方面!
        犯错误是不可避免的，也是一个很好的学习机会，但对于教师来说，如何找到正确方法纠正错误是一个挑战！
        特别是随着级别的提高，程序变得越来越长。这就是为什么我们列出了每个级别中常犯的错误，以及它们的改正方法。
    levels:
    -   level: '1'
        sections:
        -   title: 学生忘记键入命令
            example:
                error_text: 例如，他们在不使用打印命令的情况下键入句子。
                error_code: Hedy 无法打印此内容
                solution_text: 教您的学生始终以命令开始一行代码。
                solution_code: 打印Hedy可以打印此内容!
        -   title: 学生在键入命令时使用大写字母
            example:
                error_text: 如果用大写字母键入命令，那么这个命令将不起作用。
                error_code: |-
                    询问 为什么我的代码会失败？
                    打印 因为我使用大写字母键入命令。
                solution_text: 删除大写字母。
                solution_code: |-
                    询问为什么我的代码现在有效？
                    打印 因为我删除了大写字母！
        -   title: 学生在没有使用询问的情况下使用了回声命令
            example:
                error_text: 回声命令的作用是在发出询问命令后重复一个答案。没有询问命令，回声命令就不会做任何事情。
                error_code: 回声 你的名字是
                solution_text: 添加 询问命令以使其正常工作。
                solution_code: |-
                    询问 你叫什么名字？
                    回声 你的名字是
        -   title: 学生希望他们的回声词（变量）位于句子的中间
            example:
                error_text: 而他们是对的! 这就是为什么他们将在下一阶段学习如何使用适当的变量。
                error_code: |-
                    询问哪种编程语言最有趣？
                    回声是最好的！
                solution_text: 在级别 1 中，我们必须将其保持在以下位置：
                solution_code: |-
                    询问 哪种编程语言最有趣？
                    回声 最好的是...
        -   title: 海龟：学生让海龟走出屏幕
            example:
                error_text: 通常学生喜欢在使用海龟时尝试比较大的数字，这会导致箭头走出屏幕。
                error_code: |-
                    向前 300
                    旋转 90
                solution_text: 在这个例子中，学生们倾向于认为旋转命令不起作用。尽管它确实在起作用，但你看不到屏幕外发生了什么。你可以使用较小的数字来防止这种情况的发生。
                solution_code: |-
                    向前 100
                    旋转 90
        -   title: '海龟: 学生们使用向后命令，但是这个命令不存在'
            example:
                error_text: 向后不是一个命令。
                error_code: 向后 100
                solution_text: 要使海龟后退，你要使用向前命令和一个负数。比如说：
                solution_code: 向前 -100
    -   level: '2'
        sections:
        -   title: 学生在键入命令中出现拼写错误
            example:
                error_text: Hedy无法识别带有拼写错误的命令。
                error_code: 打印不要出现拼写错误!
                solution_text: 教会你的学生们阅读错误信息。这样他们就能自己找出出错的原因。
                solution_code: 打印 不要出现拼写错误!
        -   title: 学生们忘记了询问命令已经改变
            example:
                error_text: 在这个级别，学生们将学习变量。 询问命令也需要一个变量，但学生们忘记了这一点。
                error_code: 询问你想吃什么?
                solution_text: 在这个级别中，您必须告诉 Hedy 将答案保存在哪里，以便以后使用。这称为变量。
                solution_code: 订单是询问你想吃什么？
        -   title: 学生尝试使用回声命令
            example:
                error_text: 对于一些学生来说，得知 回声 命令不再起作用可能会令人沮丧。这就是为什么解释使用变量的优点非常重要的原因。例如，您可以在代码中使用多个变量，并且可以将它们放在句子中的任何位置！
                error_code: |-
                    答案是询问为什么回声不再起作用？！
                    回声
                solution_text: 用一个变量来代替。
                solution_code: |-
                    答案是询问为什么回声不再起作用？！
                    打印答案
        -   title: 学生在打印命令中使用变量名作为单词
            example:
                error_text: 在下面的例子中，词汇‘名字’被用作一个变量，但也是一个普通文本。这段代码的输出结果将是‘嗨，我的海蒂是海蒂’。
                error_code: |-
                    名字是Hedy
                    打印 嗨，我的名字是名字
                solution_text: 所以不要用你想在文本中使用的词作为变量名。在第 4 级中，这个问题是用引号解决的。
                solution_code: |-
                    名字是Hedy
                    打印 嗨，我是名字
        -   title: 学生们使用包含两个单词的长变量名。
            example:
                error_text: 一个变量应该用一个词来命名。你可以用下划线来连接两个词。这样也可以算作一个词。
                error_code: 选择门是询问你选择哪个门？
                solution_text: 添加一个下划线。
                solution_code: 选择_门是询问你选择哪个门？
        -   title: 学生们可能对同一个变量使用两个不同的名称
            example:
                error_text: 在这个例子中，学生用'马'和'名字'来表示同一个变量。
                error_code: |-
                    马是询问你的马叫什么？
                    打印你的马叫名字
                solution_text: 始终检查变量在整个代码中是否具有相同的名称。微小的差异可能很难发现（例如复数），但它们会干扰代码的运行。
                solution_code: |-
                    名字是问你的马叫什么？
                    打印你的马叫名字
    -   level: '3'
        sections:
        -   title: 学生们尝试打印整个列表
            example:
                error_text: 无法打印列表。您只能用{at} {random} 命令打印列表中的一个项目。
                error_code: |-
                    食品是苹果，牛奶，巧克力
                    打印食品
                solution_text: 要打印所有食品的列表，您只需将它们放在`{print}`命令之后即可。否则，您可以使用`{at}` `{random}`命令打印列表中的一个项目。
                solution_code: |-
                    {print}苹果，牛奶，巧克力

                    或

                    食品们{is}苹果，牛奶，巧克力
                    {print}食品们 {at} {random}
        -   title: 学生使用变量或列表的名称作为常规文本
            example:
                error_text: 此问题可能也发生在级别 2 中。现在，列表也可能发生这种情况。
                error_code: |-
                    名字{is}海蒂
                    {print} 嗨，我的名字是名字

                    或

                    动物们 {is}犀牛，蜜蜂，天鹅
                    {print}最好的动物是...动物们 {at} {random
                solution_text: 不要在常规文本中使用变量或列表的名称并打印。在第 4 级中，这个问题是用引号解决的。
                solution_code: |-
                    名字{is}海蒂
                    {print}嗨，我是名字

                    或

                    动物们{is} 犀牛，蜜蜂，天鹅
                    {print}最好的动物是...动物们{at} {random}
        -   title: 学生忘记 `{at}` `{random}`中的 `{at}`
            example:
                error_text: 如例所示
                error_code: |-
                    鸟类是麻雀，海鸥，知更鸟
                    随机地打印鸟类
                solution_text: 这个问题可以通过添加单词 at 来解决。
                solution_code: |-
                    鸟类们{is}麻雀，海鸥，知更鸟
                    {print}鸟类们{at} {random}
        -   title: 学生在使用`{at}` `{random}` 命令时忘记了使用 `{print}`命令
            example:
                error_text: 或者他们有时会把 `{at}` `{random}`放在一行代码的开头位置。
                error_code: |-
                    水果{is}苹果、樱桃、香蕉
                    水果 {at} {random}
                solution_text: 向您的学生强调始终需要用打印命令才能打印文本。
                solution_code: |-
                    水果{is}苹果，樱桃，香蕉
                    {print}水果{at} {random}
        -   title: 学生忘记在列表中使用逗号
            example:
                error_text: 在列表中，项目之间用逗号隔开。
                error_code: |-
                    披萨们 {is} 蘑菇披萨金枪鱼披萨四季披萨
                    {print} 披萨们{at} {random}
                solution_text: 在列表上的每个项目之后都应该有一个逗号
                solution_code: |-
                    披萨是蘑菇披萨, 金枪鱼披萨, 四季披萨
                    随机地打印披萨
        -   title: 学生尝试在没有列表的情况下使用`{at}` `{random}`命令
            example:
                error_text: 例如
                error_code: |-
                    俱乐部们{is}曼联
                    {print}俱乐部们{at} {random}
                solution_text: Hedy 不能随机地打印任何东西，因为没有可供选择的列表。
                solution_code: |-
                    俱乐部们{is} 曼联、拜仁慕尼黑、巴塞罗那
                    {print}俱乐部们{at} {random}
        -   title: 学生尝试在没有列表的情况下使用添加/删除功能
            example:
                error_text: 在下面的示例中，“名字”不是一个列表，而是一个变量。您不能向其添加任何内容。
                error_code: |-
                    名字是杰克
                    你的_名字问你是谁？
                    向名字添加你的_名字
                    随机地打印名字
                solution_text: 首先必须有一个列表，因此您必须添加第二个名字才能将名字转换为列表，例如艾米。如果您不希望艾米在您的列表中，则可以使用“删除”将其删除。
                solution_code: |-
                    名字是杰克，艾米
                    你的_名字是询问你是谁？
                    将 你的_名字添加到名字中
                    随机地打印名字
        -   title: 学生们忘记了在添加/删除命令中使用到/从
            example:
                error_text: 没有 到/从，添加/删除命令将不起作用。
                error_code: |-
                    冒险是故事、鹦鹉、骰子
                    选择是 你最喜欢哪个冒险活动？
                    添加选择
                    移除骰子
                    打印我爱随机选择的冒险活动
                solution_text: Hedy必须知道这个项目应该被添加到哪个列表中/从哪个列表中删除。
                solution_code: |-
                    冒险活动是故事、鹦鹉、骰子
                    选择是 你最喜欢哪个冒险活动？
                    在冒险活动中添加选择
                    从冒险活动中删除骰子
                    打印我爱随机选择的冒险活动
    -   level: '4'
        sections:
        -   title: 学生忘记在文本的两边使用引号
            example:
                error_text: 在这个级别打印和询问需要一组引号。一个在文本之前，一个在文本之后。
                error_code: |-
                    打印你好
                    心情是询问'你好吗？
                solution_text: 添加正确的引号。
                solution_code: |-
                    打印'你好'。
                    心情是询问'你好吗？'
        -   title: 学生使用了错误的引号
            example:
                error_text: 重要的是，在开始上课时要检查学生是否知道如何正确地键入引号。否则，他们可能会使用 "双引号 "或斜的引号`。
                error_code: |-
                    print `欢迎来到本餐厅`。
                    食物是询问 "你想点什么？"
                solution_text: 这些是正确的引号：
                solution_code: |-
                    打印 '欢迎来到本餐厅'
                    食物是问'你想点什么？'
        -   title: 学生在文本中使用撇号
            example:
                error_text: 从这一级开始，不允许使用撇号。它们在英语中经常被用于缩略语，如you're, don't或what's。
                error_code: 打印'不允许键入此内容'
                solution_text: 你可以选择使用错误的语法，直接不使用撇号。或者你可以把`作为一个撇号来使用。
                solution_code: |-
                    打印'允许键入此内容'
                    打印'并且您可以执行此操作'
    -   level: '5'
        sections:
        -   title: 学生忘记在如果命令中使用打印
            example:
                error_text: 在学生使用“如果”或“否则”后，他们忘记使用第二个命令，如打印或询问。
                error_code: |-
                    如果名字是Hedy '太好了！'
                    否则'Hedy更好！'
                solution_text: 添加打印命令以修复它。
                solution_code: |-
                    如果名字是 Hedy 打印 'Great!'
                    else 打印 'Hedy 更好！'
        -   title: 学生可能对同一个变量使用两个不同的名称
            example:
                error_text: 在这个例子中，学生用'马'和'名字'来表示同一个变量。
                error_code: |-
                    马是询问'你的马叫什么？'
                    如果名字是 篝火 打印 '酷'
                    否则打印'不太酷！'
                solution_text: 始终检查变量在整个代码中是否具有相同的名字。微小的差异可能很难发现（例如复数），但它们会干扰代码。
                solution_code: |-
                    马是询问'你的马叫什么？'
                    如果名字是 篝火 打印 '酷'
                    否则打印'不太酷！'
        -   title: 学生们仍然忘记了两边的引号
            example:
                error_text: 使用'如果'命令的代码可能会变得很长，学生往往会忘记使用引号。
                error_code: |-
                    如果名字是Hedy，则打印 好玩
                    否则打印 '嗯!
                solution_text: 在打印命令中始终使用两个引号。
                solution_code: |-
                    如果名字是 Hedy 打印 '好玩'
                    否则打印'嗯！'
        -   title: 学生在变量名两边使用引号
            example:
                error_text: 在此级别中，变量名称两边没有引号。
                error_code: |-
                    如果 '名字' 是 'Hedy' 打印 '好玩'
                    否则打印'嗯！'
                solution_text: 删除引号以使代码正常工作。
                solution_code: |-
                    如果名字是 Hedy 打印 '好玩'
                    否则打印'嗯！
        -   title: 学生使用包含两个单词的长变量名
            example:
                error_text: 一个变量应该用一个词来命名。你可以用下划线来连接两个词。这样也可以算作一个词。
                error_code: 选择的门是询问'你选哪个门？'
                solution_text: 添加一个下划线。
                solution_code: 选择_门是询问'你选哪个门？
        -   title: 学生希望多个答案都是正确的
            example:
                error_text: 例如这个学生Hedy告诉他所有的朋友，他们很有趣，但其他同学会被告知他们不有趣。
                error_code: 如果名字是杰西，大卫，苏夫打印'你很有趣', 否则打印'你不好笑'
                solution_text: |-
                    你可以使用`in`命令来实现。这在更高的级别上有解释，但它在第5级上确实已经工作了。
                    另一个解决方案是使用多个'如果'命令，没有'否则'命令。缺点是它不会告诉其他同学他们并不有趣。
                solution_code: |-
                    朋友们是杰西、大卫、苏夫
                    名字是询问'你是谁？'
                    如果名字在朋友中, 那么打印'你很有趣'
                    否则就打印'你不好笑'

                    或

                    名字是询问'你是谁？'
                    如果名字是杰西那么则打印'你很有趣'
                    如果姓名是大卫那么打印'你很有趣'
                    如果姓名是苏夫那么打印'你很有趣'
        -   title: 学生们使变量名与'如果'语句中的值相同
            example:
                error_text: 在下面的例子中，密码是 'password'. 这将导致它始终是正确的.
                error_code: |-
                    密码是询问 '密码是什么?'
                    如果密码是密码，打印'允许进入'
                    否则打印'拒绝访问！'
                solution_text: 为你的变量选一个不同的名字。
                solution_code: |-
                    保密_密码是询问 '密码是什么'
                    如果 保密_密码 是密码 打印'授予访问权限！'
                    否则打印 '访问被拒绝！'
    -   level: '6'
        sections:
        -   title: 学生在引号中挣扎
            example:
                error_text: 有些学生在添加引号或不添加引号时很纠结。如果你加了引号，输出屏幕上就会真的显示'5+5'。
                error_code: 打印 '5 + 5'
                solution_text: 在这段代码中，输出屏幕将打印'10'。
                solution_code: 打印 5 + 5
        -   title: 学生们对用变量做数学这个概念感到困惑
            example:
                error_text: 有些学生会发现很难用变量做数学。尝试向他们展示非常简单的示例，例如：
                error_code: |-
                    年龄=询问'你现在多大了？'
                    打印'明年你的年龄是'年龄+ 1
                solution_text: 或者像这样更进一步。
                solution_code: "价格=0\n打印 '欢迎来到我们的汉堡店' \n汉堡 = 询问 '你想吃汉堡吗？'\n如果汉堡 =是 价格 = 价格 + 10\n饮料 = 询问 '你想喝饮料吗？'\n如果饮料 = 是 价格 = 价格 + 4\n打印 '那将是 ' 价格 ' 欧元"
    -   level: '7'
        sections:
        -   title: 学生们忘记了重复命令中的一个词，或者他们忘记了打印命令
            example:
                error_text: 确保学生知道同时使用完整的重复命令和打印命令。
                error_code: |-
                    重复3次'因为他是一个快乐的好人'
                    重复 3 打印'没有人可以否认！'
                solution_text: 这是正确的代码：
                solution_code: |-
                    重复3次 打印 '因为他是一个快乐的好伙伴'
                    重复3次 打印 '没有人可以否认！'
        -   title: 学生尝试重复多行
            example:
                error_text: 在此级别中，您只能多次重复一行代码。在这段代码中，学生想打印3种不同的饮料，但它不起作用。它会问这个问题3次，只打印最后一个答案。
                error_code: |-
                    重复3次 饮料 = 询问'你想喝什么？'
                    打印饮料
                solution_text: 您应该进入下一个级别，以便能够重复多行。因此，在这个级别上，您必须单独打印所有内容。
                solution_code: |-
                    饮料 = 询问'你想喝什么？'
                    打印饮料
                    饮料 = 询问'你想喝什么？'
                    打印饮料
                    饮料 =询问'你想喝什么？'
                    打印饮料
        -   title: 学生编写的程序运行时间过长
            example:
                error_text: 在这个级别中，编写长代码非常容易。不允许学生编写需要很长时间才能加载的程序（以保护我们的服务器）。
                error_code: 重复100次打印'我可以重复多少次？'
                solution_text: 确保代码不会太长
                solution_code: 重复20次打印'这就足够了'
    -   level: '8'
        sections:
        -   title: 学生用错了缩进
            example:
                error_text: 缩进是这个级别的一个新概念，对于一些学生来说很难使用。确保他们在使用它编写整个程序之前先练习编写一些简单的代码。
                error_code: |-
                    重复 3 次
                    打印'你好'
                solution_text: 这是正确的代码：
                solution_code: |-
                    重复 3 次
                        打印'你好'
        -   title: 当学生想重复多行时，他们只需要重复1行就行了
            example:
                error_text: 例如，在下面的这段代码中，学生想知道3个人各自点了哪种饮料。但这段代码只问了1次，而不是3次。
                error_code: |-
                    重复3次
                        饮料 = 询问'你想喝什么？'
                    打印饮料
                solution_text: |-
                    在正确的代码里第三行有行首空格。这么一来它也属于“重复格”， 因此被重复3次。
                    向学生们展示这些差别能帮助他们理解为何在运行代码时，需要行首空格。
                solution_code: |-
                    重复3次
                        饮料 = 询问'你想喝什么？'
                        打印饮料
        -   title: 学生想要嵌套如果语句，或者把如果语句放在一个循环中
            example:
                error_text: |-
                    在这个级别中，学生还不允许将如果语句放在其他如果语句中或重复循环中。
                    在下一级中，这是被允许的。
                error_code: |-
                    生日 = 询问 '是你的生日吗？'
                    如果生日=是
                        重复3次
                            打印'嗨，嗨，祝贺！'
                solution_text: 这是该级别的正确代码。
                solution_code: |-
                    生日 = 询问 '是你的生日吗？'
                    如果生日=是
                            打印'嗨，嗨，祝贺！'
                            打印'嗨，嗨，祝贺！'
                            打印'嗨，嗨，祝贺！'
        -   title: 学生编写的程序运行时间过长
            example:
                error_text: 在这个级别中，编写长代码非常容易。不允许学生编写需要很长时间才能加载的程序（以保护我们的服务器）。
                error_code: |-
                    重复100次
                        print '我可以重复多少次？'
                solution_text: 确保代码不会太长
                solution_code: |-
                    重复 20 次
                        打印'这就足够了'
        -   title: 学生使用if（如果）命令检查变量值是否与变量名相同
            example:
                error_text: |-
                    我们已经看到一些学生犯了这个错误。他们为自己的计算机设置了一个密码，但他们把密码设为 “密码”。
                    在第2行，计算机被要求检查变量密码是否与变量密码相同，所以自己和自己是相同的。这意味着答案永远是“是”。
                    所以用这段代码，无论玩家填写什么，答案永远是'你可以进来'。
                error_code: |-
                    密码是询问'密码是什么？'
                    如果密码是密码
                        打印'你可以进来'
                    否则
                        打印'您不许进来'
                solution_text: 你可以通过添加引号来解决这个错误。这样计算机就知道 "如果密码是 '密码'"中的第二个密码是一个字符串值（所以是普通文本），而不是变量名。
                solution_code: |-
                    密码是询问'密码是什么？'
                    如果密码是'密码'
                        打印'你可以进来'
                    否则
                        打印'您不许进来'
    -   level: '9'
        sections:
        -   title: 学生使用缩进时出错
            example:
                error_text: 这个级别最困难的部分是正确的使用缩进。学生喜欢嵌套if（如果）语句，有时甚至在其他嵌套if（如果）语句中。追踪缩进可能会变得非常困难。
                error_code: |-
                    打印'罗宾在市中心散步'
                    位置 = 询问'Robin 是去商店还是回家？'
                    如果位置是商店
                        打印print '她进了商店。'
                        打印 '罗宾看到一本有趣的书'
                        书 = 询问'Robin 买书了吗？'
                            如果书是是
                    打印 '罗宾买了书，然后回家了'
                    否则
                        打印'罗宾离开商店回家了'
                    否则
                        打印'罗宾回家'
                solution_text: 这就是正确的代码。当把if（如果）语句放在其他if（如果）语句中时，请尝试追踪所有不同的结构。
                solution_code: |-
                    打印'罗宾正在市中心散步'
                    位置 = 询问'罗宾是要进商店，还是要回家？'
                    如果位置是商店
                        打印'她进入了商店。'
                        打印'罗宾看到一本看起来很有趣的书'
                        书 = 询问 '罗宾买了这本书吗？'
                        如果书是是
                            打印'罗宾买了这本书，然后回家了'
                        否则
                            打印'罗宾离开商店回家了' 。
                    否则
                        打印'罗宾回家了'
    -   level: '10'
        sections:
        -   title: 学生不能正确使用for（取）命令
            example:
                error_text: 我们经常看到学生尝试打印列表（在示例中的动物们）而不是列表中的项目。
                error_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物们
                solution_text: 最后一行中的“动物们”一词应改为“动物”。
                solution_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物
        -   title: 学生们忘记缩进了
            example:
                error_text: 学生们经常忘记在for（取）命令后使用缩进。
                error_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                    打印'我爱'动物
                solution_text: 你应该在for（取）命令后使用缩进。
                solution_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物
    -   level: '11'
        sections:
        -   title: 学生忘记使用行首空格
            example:
                error_text: 确保学生使用缩进。
                error_code: |-
                    取 i 在 1 到 5 的范围内
                    打印i
                solution_text: 这就是正确的代码。
                solution_code: |-
                    取 i，在 1 到 5的范围内
                        打印 i
        -   title: 学生们不理解i的意思
            example:
                error_text: |-
                    有些学生不理解i是一个变量。之所以选择i，是因为在Python编程中经常使用它，但你也可以很容易地使用不同的变量名。
                    例如，这段代码：
                error_code: |-
                    取 i 在 1 到 5 的范围内
                    打印i
                solution_text: 也可以用这段代码来代替。它的作用是一样的。
                solution_code: |-
                    取香蕉在 1 到 5 的范围内
                        打印香蕉
    -   level: '12'
        sections:
        -   title: 学生们忘记引号了
            example:
                error_text: 与以前的级别相比，学生现在需要使用更多的引号。在此示例中，引号在列表和 if （如果）命令中被遗忘。
                error_code: |-
                    超级英雄们 = 蜘蛛侠、蝙蝠侠、钢铁侠
                    超级英雄=随机的超级英雄们
                    如果超级英雄 = 蝙蝠侠
                        打印'我是蝙蝠侠！'
                solution_text: 这就是正确的代码。
                solution_code: |-
                    超级英雄们 = '蜘蛛侠'、'蝙蝠侠'、'钢铁侠'
                    超级英雄=随机的超级英雄们
                    如果超级英雄 = '蝙蝠侠'
                        打印'我是蝙蝠侠！'
        -   title: 学生在他们想要用于计算的数字上使用引号
            example:
                error_text: |-
                    如果你想让电脑把数字识别成文字，你也能把他们放在引号里。这也代表了你无法使用这些数字来进行计算。
                    在以下的例子里， 你无法使用数字25进行计算， 因为它在引号里。
                error_code: |-
                    分数 = '25'
                    答案是 问 '你要多一分吗?'
                    如果 答案 是 '是'
                        分数 = 分数 + 1
                        打印分数
                solution_text: '这是正确的代码:'
                solution_code: |-
                    分数 = '25'
                    答案是 问 '你要多一分吗?'
                    如果 答案 是 '是'
                        分数 = 分数 + 1
                        打印分数
        -   title: 学生在十位数里使用了逗号而非句号
            example:
                error_text: 从这个级别开始你能使用十位数，但不能使用逗号.
                error_code: 打印 2,5 + 2,5
                solution_text: '这是正确的代码:'
                solution_code: 打印 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: 学生搞混了 `和` 与 `或`
            example:
                error_text: 两个指令虽然可能看起来类似，然而它们拥有不同的功能.
                error_code: |-
                    游戏是问“你想玩游戏吗？”
                    时间是问'你有时间玩吗？
                    如果游戏是“是”或时间是“是”
                         打印“让我们玩吧！”
                solution_text: 在这种情况下，这个人应该在两个问题上都回答“是”，所以你应该使用“and”。
                solution_code: |-
                    游戏是问“你想玩游戏吗？”
                    时间是问'你有时间玩吗？
                    如果游戏是“是”或时间是“是”
                         打印“让我们玩吧！”
    -   level: '14'
        sections:
        -   title: 学生混淆“<” 和 “> ”符号
            example:
                error_text: 通常，学生已经从数学课上熟悉了这些符号。 但是，如果您的学生还不知道这些标志，他们可能会遇到挑战。
                error_code: |-
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: print 'my name is Hedy!'
                solution_text: 'This is the correct code:'
                solution_code: print('my name is Hedy!')
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
start-sections:
-   title: Getting started with Hedy
    text: '*Something about teachers accounts, slides etc*'
-   title: What other teachers say
    text: "A while ago we ran a few short Hedy teachers surveys. \nThe questions span between suggestions of improvement and Hedy’s best features. \nBelow is a testimony of their thoughts:\n\nSimple interface and good examples. *Teacher: 3rd - 6th grades (elementary)*\n\nMultilingual programming and just\
        \ the gradual programming concept itself. - *US: middle school, 6th-8th grade*\n\nThe gradual nature of introducing programming. *Australia: High school*\n\nThe construction is so good. *Netherlands: Lower secondary school HAVO-VWO*\n\nI can keep the pace of the class. *Netherlands: group 7 en\
        \ 8* \n\nContinues automatically. *Netherlands: 2 HAVO-VWO*\n\nBoth that the explanation can be in Dutch (and the code in English), and that it builds up with more \nand more possibilities. *Netherlands: Plus class group 7*\n\nThe 'realness' of programming, it resembles how it is in reality. *Netherlands:\
        \ Plus class group 4 to 8*\n\nStep-by-step activities. Fun activities. *Netherlands: 1e All levels, 2e VWO/HAVO 2e VWO +, 3e HAVO 3e VWO*\n\nBut Hedy and its gradual levels... what an idea, \nI wanted to personally thank you for creating this. I cannot thank you enough. Also, I have never seen\
        \ the level of engagement and enthusiasm of my \nstudents, as I have seen with Hedy. We have covered till level 5, and plan to spend one more week on it in classes and labs, \nbefore starting Python.  *Pakistan*\n\nI really like Hedy very much and it is also nicely set up, which makes it good\
        \ to use in primary school. \nHedy's gradual approach works very well. \nThe short explanation at the beginning of each level and the short example programs help to give the children a quick insight into what is new in the chosen level. \nThe different assignments that the children can choose\
        \ also work very well. \nYou see the children choose assignments that appeal to them and they then get to work with them, \nthrough the levels. Hedy is great fun for children who are good at programming and want to get a \ntaste of a real programming language. It is good preparation for secondary\
        \ school as soon as more ICT \neducation is given there. *Netherlands: Oegstgeest Montessori school*\n\n<img width=\"500px\" src=\"static/images/teacherfeedback/Fkids1.JPG\"></img>"
